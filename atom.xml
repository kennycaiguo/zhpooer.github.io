<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[竹杖芒鞋轻胜马，一蓑烟雨任平生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-07-28T00:12:02.639Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Scala in Action-applications using Akka]]></title>
    <link href="http://zhpooer.github.io/2014/07/26/scala-in-action-application-usnig-scala/"/>
    <id>http://zhpooer.github.io/2014/07/26/scala-in-action-application-usnig-scala/</id>
    <published>2014-07-25T23:35:04.000Z</published>
    <updated>2014-07-27T03:53:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="the-philosophy-behind-akka">The philosophy behind Akka</h1>
<p>The philosophy behind Akka is simple:
make it easier for developers to build correct,
concurrent, scalable, and fault-tolerant applications.</p>
<p>At the core, Akka is an event-based platform and relies on actors for message
passing and scalability. Akka puts both local and remote actors at your disposal. </p>
<h1 id="simple-concurrency-with-akka">Simple concurrency with Akka</h1>
<ul>
<li>Actors, An actor is an object that processes messages asynchronously and encapsulates
state.</li>
<li>STM, Software transactional memory is a concurrency model analogous to database
transactions for controlling access to a shared state</li>
<li>Agents, Agents provide abstraction over mutable data. They only allow you to mutate the
data through an asynchronous write action.</li>
<li>Dataflow, This means that it behaves the same every
time you execute it. So if your problem deadlocks the first time,
it will always deadlock, helping you to debug the problem.</li>
</ul>
<p>You can model an application using actors, handle muta-
ble state with STM or agents, and use dataflow concurrency to compose multiple
concurrent processes. </p>
<h2 id="remote-actors">Remote actors</h2>
<p>Akka remote actors allow you to deploy actors in remote machines and
send messages back and forth transparently.</p>
<p>The messages are automatically serialized using the Google protocol buffer.
Think of the Google protocol buffer as XML but smaller and faster, and Netty
as a non-blocking I/O (NIO) implementation, which allows Akka to efficiently use
threads for I/O operations.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>resolvers ++= <span class="constant">Seq</span>(
  <span class="string">"Akka Repo"</span> at <span class="string">"http://akka.io/repository"</span>,
  <span class="string">"Typesafe Repo"</span> at <span class="string">"http://repo.typesafe.com/typesafe/repo"</span>
)
libraryDependencies ++= <span class="constant">Seq</span>(
  <span class="string">"com.typesafe.akka"</span> <span class="string">%% "akka-actor" %</span> <span class="string">"2.1.0"</span>,
  <span class="string">"com.typesafe.akka"</span> <span class="string">%% "akka-remote %</span> <span class="string">"2.1.0"</span>
)
</pre></td></tr></table></figure>

<p>We will work with a list of URLs. The goal is to connect
to the URL and count all the words on the page. </p>
<h2 id="making-mutable-data-safe-with-stm">Making mutable data safe with STM</h2>
<p>STM is similar to database transactions, but is used for memory instead.</p>
<ul>
<li>Atomicity—This property states that all modifications should follow the “all or
nothing” rule. In STM, all the modification is done through an atomic transac-
tion, and if one change fails all the other changes are rolled back.</li>
<li>Consistency—This property ensures that an STM transaction takes the system
from one consistent state to another.</li>
<li>Isolation—This property requires that no other STM transaction sees partial
changes from other transactions.</li>
</ul>
<p>It rolls back from exceptions and is composable.</p>
<p>In STM, state is defined as the value that an entity
with a specific identity has at a particular point.</p>
<p>A value is something that doesn’t change (it’s immutable).
And identity is a stable reference to a value at a given point in time.
The mutable part here is the identity,
which gets associated with a series of values.
And STM makes the mutation of reference from one value to another atomic.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>resolvers += (<span class="string">"Typesafe Repository"</span> at <span class="string">"http://repo.typesafe.com/typesafe/releases/"</span>)
libraryDependencies ++= <span class="constant">Seq</span>(
  <span class="string">"org.scala-stm"</span> <span class="string">%% "scala-stm" %</span> <span class="string">"0.7"</span>,
  <span class="string">"org.specs2"</span> <span class="string">%% "specs2" %</span> <span class="string">"1.13"</span> % <span class="string">"test"</span>
)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">// Refs are nothing but mutable references to values that you</span>
<span class="comment">// can share safely with multiple concurrent participants.</span>
val ref1 = Ref(HashMap[String, Any](
  <span class="string">"service1"</span> -&gt; <span class="string">"10"</span>,
  <span class="string">"service2"</span> -&gt; <span class="string">"20"</span>,
  <span class="string">"service3"</span> -&gt; <span class="keyword">null</span>))
val ref2 = Ref(HashMap[String, Int]())

def atomicInsert(key: String, <span class="keyword">value</span>: Int) = atomic { <span class="keyword">implicit</span> txn =&gt;
  val oldMap = ref2.<span class="keyword">get</span>
  val newMap = oldMap + ( key -&gt; <span class="keyword">value</span>)
  <span class="comment">// using swap to replace the old value with the new value.</span>
  ref2.swap(newMap)
}

<span class="comment">// The transform method allows you to transform the value</span>
<span class="comment">// referenced by Ref by applying the given function</span>
def atomicDelete(key: String): Option[Any] = atomic {
  val oldMap = ref1.<span class="keyword">get</span>
  val <span class="keyword">value</span> = oldMap.<span class="keyword">get</span>(key)
  ref1.transform(_ - key)
  <span class="keyword">value</span>
}
</pre></td></tr></table></figure>

<p>To perform any operation on Ref you have to use the atomic
method defined in the STM package by passing an in-transaction parameter. The Scala
STM library creates the transaction object and grants the caller permission to perform
transactional reads and writes. Any refs you change in the closure will be done in an
STM transaction. </p>
<p>The transaction parameter is marked as implicit so you
don’t have to pass it around.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>// <span class="operator">wrap</span> both <span class="operator">the</span> atomicDelete <span class="operator">and</span> atomicInsert functions <span class="operator">in</span> <span class="operator">an</span> atomic <span class="function"><span class="keyword">function</span></span>

def atomicSwap(key: String) = atomic { implicit txn =&gt;
  val <span class="built_in">value</span>: Option[Any] = atomicDelete(key)
  atomicInsert(key, Integer.parseInt(<span class="built_in">value</span>.<span class="built_in">get</span>.toString))
}
</pre></td></tr></table></figure>

<h2 id="agents">Agents</h2>
<p>Agents provide asynchronous changes to any individual storage location bound to it.
An agent only lets you mutate the location by applying an action.
Actions in this case are functions that asynchronously are applied to
the state of Agent and in which the
return value of the function becomes the new value of Agent .</p>
<p>Reading a value from Agent is synchronous and instantaneous.
The difference between Ref and Agent is that Ref
is a synchronous read and write; Agent is reactive.</p>
<p>Akka provides two methods: send and sendOff. The send
method uses the reactive thread pool allocated for agents,
and sendOff uses a dedicated thread, ideal for a long-running processes.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>libraryDependencies ++= <span class="constant">Seq</span>(
  <span class="string">"com.typesafe.akka"</span> <span class="string">%% "akka-actor" %</span> <span class="string">"2.1.0"</span>,
  <span class="string">"com.typesafe.akka"</span> <span class="string">%% "akka-agent" %</span> <span class="string">"2.1.0"</span>,
  <span class="string">"org.specs2"</span> <span class="string">%% "specs2" %</span> <span class="string">"1.13"</span> % <span class="string">"test"</span>
)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>// <span class="operator">with</span> <span class="operator">a</span> <span class="built_in">file</span> writer that<span class="comment">
// logs messages to the log file through send actions</span>
import akka.agent.Agent
implicit val <span class="keyword">system</span> = ActorSystem(<span class="string">"agentExample"</span>)
val writer = <span class="built_in">new</span> FileWriter(<span class="string">"src/test/resources/log.txt"</span>)
val <span class="operator">a</span> = Agent(writer)
<span class="operator">a</span>.<span class="built_in">send</span> { w =&gt; w.<span class="built_in">write</span>(<span class="string">"This is a log message"</span>); w}<span class="comment">
// Shut Agent down</span>
<span class="operator">a</span>.<span class="built_in">close</span>
writer.<span class="built_in">close</span>
</pre></td></tr></table></figure>

<p>Agent will be running until you invoke the close method.
An actor system is created for the agent because,
behind the scenes, agents are implemented using actors. If
you have to do more than logging to a file,
something that will take time, use the sendOff method:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>a.sendOff <span class="list">{ someLongRunningProcess }</span>
</pre></td></tr></table></figure>

<p>Note that at any time, only one send action is invoked.
Even if actions are sent from multiple concurrent processes,
the actions will be executed in sequential order.</p>
<p>This is important because if you
have a side-effect action, like logging to a file,
you don’t want to do that with STM.
Why? Because if STM transactions fail,
they retry automatically, meaning your
sideeffecting operation is executed multiple times.</p>
<p>Agent is associated with data, and you send behavior to Agent
from outside, in the form of a function. In the case of actors,
the behavior is defined
inside the actor, and you send data in the form of a message.</p>
<h2 id="dataflow">Dataflow</h2>
<p>Dataflow concurrency is a deterministic concurrency model.
If you run it and it works,
it will always work without deadlock.
Alternatively, if it deadlocks the first time, it will
always deadlock. </p>
<p>The dataflow concurrency allows you to
write sequential code that performs parallel operations.
The limitation is that your code should be completely side-effect free.</p>
<p>Dataflow is implemented in Akka using Scala’s delimited continuations compiler
plug-in. <code>build.sbt</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>autoCompilerPlugins <span class="symbol">:</span>= <span class="keyword">true</span>

libraryDependencies &lt;+= scalaVersion { v =&gt; compilerPlugin(
<span class="string">"org.scala-lang.plugins"</span> % <span class="string">"continuations"</span> % v) }

scalacOptions += <span class="string">"-P:continuations:enable"</span>

libraryDependencies += <span class="string">"com.typesafe.akka."</span> <span class="string">%% " akka-dataflow" %</span> <span class="string">"2.1.0"</span>
</pre></td></tr></table></figure>

<p>A dataflow variable is like a single-assignment variable.
Once the value is bound, it won’t change,
and any subsequent attempt to bind a new value will be ignored.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>// dataflow variable
// Here Akka Promise is used to <span class="operator"><span class="keyword">create</span> a dataflow variable.
// A Promise <span class="keyword">is</span> a <span class="keyword">read</span> handle <span class="keyword">to</span> a <span class="keyword">value</span> that will
// be available <span class="keyword">at</span> <span class="keyword">some</span> point <span class="keyword">in</span> the future.
val messageFromFuture = Promise[String]()

// <span class="keyword">Any</span> dataflow operation <span class="keyword">is</span> performed <span class="keyword">in</span> the Future.flow block:
Future.flow {
  messageFromFuture()
}</span>
</pre></td></tr></table></figure>

<p>The preceding call will wait in a thread unless a value is bound to messageFromFuture.
Future.flow returns a Future so you can perform other operations without blocking
the main thread of execution. Think of a Future as a data structure to retrieve the
result of some concurrent operation. To assign a value to a dataflow variable, use the
<code>&lt;&lt;</code> method as in the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Future<span class="preprocessor">.flow</span> {
  messsageFromFuture &lt;&lt; <span class="string">"Future looks very cool"</span>
}
</pre></td></tr></table></figure>

<p>Once a value is bound to a dataflow variable,
all the Futures that are waiting on the
value will be unblocked and able to continue with execution. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>importimportimportakka.actor._
akka.dispatch._
Future.flow

<span class="class"><span class="keyword">object</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">App</span> {</span>
  implicit <span class="keyword">val</span> system = ActorSystem(<span class="string">"dataflow"</span>)
  <span class="keyword">val</span> messageFromFuture, rawMessage, parsedMessage = Promise[String]()
  flow {
    messageFromFuture &lt;&lt; parsedMessage()
    println(<span class="string">"z = "</span> + messageFromFuture())
  }
  flow { rawMessage &lt;&lt; <span class="string">"olleh"</span> }
  flow { parsedMessage &lt;&lt; toPresentFormat(rawMessage()) }
  <span class="keyword">def</span> toPresentFormat (s: String) = s.reverse
}
</pre></td></tr></table></figure>

<h1 id="building-a-real-time-pricing-system-akkaoogle">Building a real-time pricing system: Akkaoogle</h1>
<p>You’ll build a large web-based product search site
called Akkaoogle (see figure 12.4). It will be similar to Google’s
product search application (www.google.com/products) except that,
instead of returning all products matching your criteria,
your application will only return the cheapest deal found on
the web.</p>
<p>It gets the product price from two types of vendors
that are offering the product.
You can pay money to Akkaoogle and become an
internal vendor.
In this case, the product information is stored in Akkaoogle,
and you pay a small service charge.
You can also sign up as external vendor,
in which case Akkaoogle makes a RESTful web
service call to fetch the price -- but the downside is
you pay a bigger service charge. </p>
<p>When the user is looking for the cheapest deal,
Akkaoogle checks with all the vendors (internal and external)
and finds the lowest price for the user.</p>
<p>You have to find the cheapest deal in no more than
200 to 300 milliseconds.</p>
<h2 id="the-high-level-architecture-of-akkaoogle">The high-level architecture of Akkaoogle</h2>
<p><img src="/img/akkaoogle.png" alt="akkaoogle"></p>
<ul>
<li>Request handler—This is an actor that handles HTTP requests from the user.
You’ll use an asynchronous HTTP library called Mist, provided by Akka, to
implement this actor.</li>
<li>Search cheapest product—This is the main entry point to execute a search to find
the cheapest deal. This actor will search both internal and external vendors.</li>
<li>Internal load balancer—This is a load-balancing actor that sends messages to
worker actors to find the cheapest product available in the internal database.</li>
<li>External load balancer—This actor invokes all the external vendor services and
finds the cheapest price among them.</li>
<li>Find product price and find vendor price —The worker actors do the work of finding
the price.</li>
<li>Monitor—A simple monitor actor logs the failures that happen in external ven-
dor services.</li>
<li>Data loader—An actor that loads data to the database. This could be used to
load product data for internal vendors.</li>
</ul>
<h2 id="setting-up-the-project-for-akkaoogle">Setting up the project for Akkaoogle</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre><span class="comment">// Build.scala</span>
<span class="class"><span class="keyword">object</span> <span class="title">H2TaskManager</span> {</span>
  <span class="keyword">var</span> process: Option[Process] = None
  <span class="keyword">lazy</span> <span class="keyword">val</span> H2 = config(<span class="string">"h2"</span>) extend(Compile)
  <span class="keyword">val</span> startH2 = TaskKey[Unit](<span class="string">"start"</span>, <span class="string">"Starts H2 database"</span>)
  <span class="keyword">val</span> startH2Task =
  startH2 in H2 &lt;&lt;= (fullClasspath in Compile) map { cp =&gt;
      startDatabase(cp.map(_.data).map(_.getAbsolutePath()).filter(_.contains(
      <span class="string">"h2database"</span>)))}
  <span class="keyword">def</span> startDatabase(paths: Seq[String]) = {
    process <span class="keyword">match</span> {
      <span class="keyword">case</span> None =&gt;
        <span class="keyword">val</span> cp = paths.mkString(System.getProperty(<span class="string">"path.seperator"</span>))
        <span class="keyword">val</span> command = <span class="string">"java -cp "</span> + cp + <span class="string">" org.h2.tools.Server"</span>
        println(<span class="string">"Starting Database with command: "</span> + command)
        process = Some(Process(command).run())
        println(<span class="string">"Database started ! "</span>)
      <span class="keyword">case</span> Some(_) =&gt;
        println(<span class="string">"H2 Database already started"</span>)
    }
  }
  <span class="keyword">val</span> stopH2 = TaskKey[Unit](<span class="string">"stop"</span>, <span class="string">"Stops H2 database"</span>)
  <span class="keyword">val</span> stopH2Task = stopH2 in H2 :={
    process <span class="keyword">match</span> {
      <span class="keyword">case</span> None =&gt; println(<span class="string">"Database already stopped"</span>)
      <span class="keyword">case</span> Some(_) =&gt;
        println(<span class="string">"Stopping database..."</span>)
        process.foreach{_.destroy()}
        process = None
        println(<span class="string">"Database stopped..."</span>)
    }
  }
}

<span class="class"><span class="keyword">object</span> <span class="title">AkkaoogleBuild</span> <span class="keyword">extends</span> <span class="title">Build</span> <span class="keyword">with</span> <span class="title">ConfigureScalaBuild</span> {</span>
  <span class="keyword">import</span> H2TaskManager._
  <span class="keyword">lazy</span> <span class="keyword">val</span> root = project(id = <span class="string">"akkaoogle"</span>, base = file(<span class="string">"."</span>))
    .settings(startH2Task, stopH2Task)
    .settings(
      organization := <span class="string">"scalainaction"</span>,
      scalaVersion := <span class="string">"2.10.0"</span>,
      scalacOptions ++= Seq(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>),
      resolvers +=
      <span class="string">"Typesafe Repo"</span> at <span class="string">"http://repo.typesafe.com/typesafe/repo"</span>,
      parallelExecution in Test := <span class="keyword">false</span>
    )
    .settings(
      libraryDependencies ++= Seq(
        <span class="string">"com.typesafe.akka"</span> % <span class="string">"akka-actor"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"com.typesafe.akka"</span> % <span class="string">"akka-remote"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"com.typesafe.akka"</span> % <span class="string">"akka-agent"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"org.specs2"</span> %% <span class="string">"specs2"</span> % <span class="string">"1.13"</span> % <span class="string">"test"</span>,
        <span class="string">"com.h2database"</span> % <span class="string">"h2"</span> % <span class="string">"1.2.127"</span>,
        <span class="string">"org.squery1"</span> % <span class="string">"squery1_2.10.0-RC5"</span> % <span class="string">"0.9.5-5"</span>,
        <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-distribution"</span> % <span class="string">"8.0.0.M2"</span>)
    )
}
</pre></td></tr></table></figure>

<p>I test drove most of the application,
but I won’t show you test cases here.
I encourage you to go through the test cases
in this chapter’s accompanying codebase.</p>
<h2 id="implementing-the-domain-models">Implementing the domain models</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">//  create a common trait called Model that extends the KeyedEntity trait</span>
<span class="comment">//  This trait provides an id field that acts as a primary key</span>

implicit <span class="keyword">val</span> transactionFailures: Table[TransactionFailure] = AkkaoogleSchema.transactionFailures
implicit <span class="keyword">val</span> vendors: Table[ExternalVendor] = AkkaoogleSchema.vendors
implicit <span class="keyword">val</span> products: Table[Product] = AkkaoogleSchema.products
<span class="class"><span class="keyword">trait</span> <span class="title">Model</span>[<span class="title">A</span>] <span class="keyword">extends</span> <span class="title">KeyedEntity</span>[<span class="title">Long</span>] {</span> <span class="keyword">this</span>: A =&gt;
  <span class="keyword">val</span> id: Long = <span class="number">0</span>
  <span class="keyword">def</span> save(implicit table: Table[A]): Either[Throwable, String] = {
    tx {
      <span class="keyword">try</span> {
        table.insert(<span class="keyword">this</span>)
        Right(<span class="string">"Domain object is saved successfully"</span>)
      } <span class="keyword">catch</span> {
        <span class="keyword">case</span> exception =&gt; Left(exception)
      }
    }
  }

}

<span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(val description: String,
              val vendorName: String,
              val basePrice: Double,
              val plusPercent: Double)</span> <span class="keyword">extends</span> <span class="title">Model</span>[<span class="title">Product</span>] {</span>
  <span class="keyword">def</span> calculatePrice = basePrice + (basePrice * plusPercent / <span class="number">100</span>)
}
              
<span class="class"><span class="keyword">class</span> <span class="title">ExternalVendor</span><span class="params">(val name: String, val url: String)</span></span>
      <span class="keyword">extends</span> Model[ExternalVendor]

<span class="comment">//  You’ll log (to the database) every time a call to</span>
<span class="comment">// an external vendor service fails </span>
<span class="class"><span class="keyword">class</span> <span class="title">TransactionFailure</span><span class="params">(val vendorId: String,
        val message: String,
        val timestamp: Date)</span> <span class="keyword">extends</span> <span class="title">Model</span>[<span class="title">TransactionFailure</span>]</span>

<span class="class"><span class="keyword">object</span> <span class="title">TransactionFailure</span> {</span>
  <span class="keyword">def</span> findAll = tx {
    from(transactionFailures)(s =&gt; select(s)) map(s =&gt; s)
  }
}

<span class="class"><span class="keyword">object</span> <span class="title">Product</span> {</span>
  <span class="keyword">def</span> findByDescription(description: String): Option[Product] =
    tx {
      products.where(p =&gt; p.description like description).headOption
    }
}

<span class="class"><span class="keyword">object</span> <span class="title">ExternalVendor</span> {</span>
  <span class="keyword">def</span> findAll = tx {
    from(vendors)(s =&gt; select(s)) map(s =&gt; s)
  }
}
</pre></td></tr></table></figure>

<p>Schema</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>package com.akkaoogle.db
import org.squeryl._
import org.squeryl.adapters._
import org.squeryl.PrimitiveTypeMode._
import java.sql.DriverManager
import com.akkaoogle.db.models._

object AkkaoogleSchema extends Schema {
  val products = table[<span class="link_label">Product</span>](<span class="link_url">"PRODUCTS"</span>)
  val vendors = table[<span class="link_label">ExternalVendor</span>](<span class="link_url">"VENDORS"</span>)
  val transactionFailures = table[<span class="link_label">TransactionFailure</span>](<span class="link_url">"TRANSACTION_LOG"</span>)
  def init = {
<span class="code">    import org.squeryl.SessionFactory</span>
<span class="code">    Class.forName("org.h2.Driver")</span>
<span class="code">    if(SessionFactory.concreteFactory.isEmpty) {</span>
<span class="code">      SessionFactory.concreteFactory = Some(()=&gt;</span>
<span class="code">        Session.create(</span>
<span class="code">          DriverManager.getConnection("jdbc:h2:tcp://localhost/~/test", "sa", ""),</span>
<span class="code">          new H2Adapter))</span>
<span class="code">    }</span>
  }
  def tx[<span class="link_label">A</span>](<span class="link_url">a: =&gt;A</span>): A = {
<span class="code">    init</span>
<span class="code">    inTransaction(a)</span>
  }
  def createSchema() {
<span class="code">    tx { drop ; create }</span>
  }
}
</pre></td></tr></table></figure>

<h2 id="implementing-the-core-with-actors">Implementing the core with actors</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">package</span> com.akkaoogle.calculators
<span class="comment">// deal on the web and track the availability of the external services for quality purposes</span>
<span class="class"><span class="keyword">object</span> <span class="title">messages</span> {</span>
  <span class="comment">// represents a request triggered by a user looking for the cheapest deal.</span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">FindPrice</span><span class="params">(productDescription: String, quantity: Int)</span></span>
  <span class="comment">// The response of the FindPrice message</span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">LowestPrice</span><span class="params">(vendorName: String,
  case class LogTimeout(actorId: String, msg: String)</span></span>
  <span class="comment">//  The FindStats and Stats messages are used for administration purposes</span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">FindStats</span><span class="params">(actorId: String)</span></span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Stats</span><span class="params">(actorId: String, timeouts: Int)</span></span>
}
</pre></td></tr></table></figure>

<p>The InternalPriceCalculator actor calculates the lowest price by looking
up the product by description, shown in the following listing.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
</pre></td><td class="code"><pre><span class="keyword">package</span> com.akkaoogle.calculators
<span class="keyword">import</span> messages._
<span class="keyword">import</span> com.akkaoogle.db.models._
<span class="keyword">import</span> akka.actor._
<span class="class"><span class="keyword">class</span> <span class="title">InternalPriceCalculator</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> FindPrice(productDescription, quantity) =&gt;
      <span class="keyword">val</span> price = calculatePrice(productDescription, quantity)
      sender ! price
  }
  <span class="keyword">def</span> calculatePrice( productDescription: String, qty: Int): Option[LowestPrice] = {
    Product.findByDescription(productDescription) map { product =&gt;
      Some(
        LowestPrice(product.vendorName,
                    product.description,
                    product.calculatePrice * qty) )
    } getOrElse Option.empty[LowestPrice]
  }
}
<span class="comment">//  you can have many external vendors for your application, you can’t make</span>
<span class="comment">// the remote service calls sequentially</span>
<span class="comment">// set a timeout for each service so you can</span>
<span class="comment">// respond to the user within a reasonable time</span>
<span class="class"><span class="keyword">class</span> <span class="title">ExternalVendorProxyActor</span><span class="params">(val v: ExternalVendor)</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> receive = {
    <span class="keyword">var</span> result: Option[LowestPrice] = Option.empty[LowestPrice]
    <span class="keyword">val</span> f = Future({
      <span class="keyword">val</span> params = <span class="string">"?pd="</span> + fp.productDescription + <span class="string">"&q="</span> + fp.quantity
      <span class="keyword">val</span> price = Source.fromURL(v.url + params).mkString.toDouble
      Some(LowestPrice(v.name, fp.productDescription, price * fp.quantity))
    }) recover { <span class="keyword">case</span> t =&gt; Option.empty[LowestPrice] }
    f pipeTo sender
  }
}

<span class="comment">// You need the actor in the following listing to broadcast</span>
<span class="comment">// the FindPrice message to each proxy actor</span>

<span class="comment">// The ExternalPriceCalculator actor is created with references to ExternalVendorProxyActor.</span>
<span class="comment">// The FindPrice message is broadcast to all the proxy actors using the ? method</span>
<span class="class"><span class="keyword">class</span> <span class="title">ExternalPriceCalculator</span><span class="params">(val proxies: Iterable[ActorRef])</span></span>
      <span class="keyword">extends</span> Actor {
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> FindPrice(productId, quantity) =&gt;
      <span class="keyword">val</span> futures = proxies map { proxy =&gt;
        <span class="keyword">val</span> fp = FindPrice(productId, quantity)
        
        (proxy ? fp).mapTo[Option[LowestPrice]] recover {
          <span class="keyword">case</span> e: AskTimeoutException =&gt;
            AkkaoogleActorServer.lookup(<span class="string">"monitor"</span>) ! LogTimeout(proxy.path.name, <span class="string">"Timeout for "</span> + fp)
            Option.empty[LowestPrice]
          }
      }
      <span class="keyword">val</span> lowestPrice: Future[Option[LowestPrice]] =
        findLowestPrice(futures)
      <span class="keyword">val</span> totalPrice: Future[Option[LowestPrice]] = lowestPrice.map {
        l =&gt; l.map(p =&gt; p.copy(price = p.price + (p.price * <span class="number">.02</span>)))
      }
      totalPrice pipeTo sender
  }
}  

<span class="keyword">def</span> findLowestPrice(futures: Iterable[Future[Option[LowestPrice]]]):
    Future[Option[LowestPrice]] = {
  <span class="keyword">val</span> f: Future[Option[LowestPrice]] = Future.fold(futures)(Option.empty[LowestPrice]) {
    (lowestPrice: Option[LowestPrice], currentPrice: Option[LowestPrice]) =&gt; {
      currentPrice <span class="keyword">match</span> {
        <span class="keyword">case</span> Some(first) <span class="keyword">if</span> (lowsetPrice.isEmpty) =&gt; Some(first)
        <span class="keyword">case</span> Some(c) <span class="keyword">if</span> (c.price &lt; lowestPrice.get.price) =&gt; Some(c)
        <span class="keyword">case</span> _ =&gt; lowestPrice
      }
    }
  }
  f
}

<span class="comment">// find the lowest price from both internal and external vendors and return the result.</span>
<span class="class"><span class="keyword">class</span> <span class="title">CheapestDealFinder</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> req: FindPrice =&gt;
      <span class="keyword">val</span> internalPrice =
        (AkkaoogleActorServer.lookup(<span class="string">"internal-load-balancer"</span>) ? req).mapTo[Option[LowestPrice]]
      <span class="keyword">val</span> externalPrice =
        (AkkaoogleActorServer.lookup(<span class="string">"external-load-balancer"</span>) ?
          req).mapTo[Option[LowestPrice]] recover {
            <span class="keyword">case</span> e: AskTimeoutException =&gt; Option.empty[LowestPrice]
        }
      <span class="keyword">val</span> lowestPrice: Future[Option[LowestPrice]] = findLowestPrice(internalPrice :: externalPrice :: Nil)
      lowestPrice pipeTo sender
  }
}
</pre></td></tr></table></figure>

<h2 id="increase-scalability-with-remote-actors-dispatchers-and-routers">Increase scalability with remote actors, dispatchers, and routers</h2>
<p>Akka comes with special kinds of actors called routers, which can
effectively route messages between multiple instances of actors. The router actor acts
as a gateway to a collection of actors. You send a message to the router actor, and the
router actor forwards the message to one of the actors, based on some routing policy.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>//  <span class="operator">the</span> SmallestMailboxRouter router routes messages based <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">mailbox</span>.</span><span class="comment">
// creates 10 instances of CheapestDealFinder actors and</span><span class="comment">
// creates a SmallestMailboxRouter to route messages to them</span>
val cheapestDealFinderLoadBalancer = <span class="keyword">system</span>.actorOf(
  Props[CheapestDealFinder].withRouter(SmallestMailboxRouter(nrOfInstances = <span class="number">10</span>)),
  name = <span class="string">"cheapest-deal-finder-balancer"</span>)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">val</span> internalPriceCalculators: List[ActorRef] = createInternalPriceCalculators(<span class="number">10</span>)

<span class="comment">// RoundRobinRouter routes messages to actors in round-robin fashion. </span>
<span class="keyword">val</span> internalLoadBalancer = system.actorOf(<span class="number">1</span>
    Props[InternalPriceCalculator]
  .withRouter(RoundRobinRouter (routees = internalPriceCalculators)),
  name = <span class="string">"internal-load-balancer"</span>)
  
<span class="keyword">val</span> proxies = createExternalProxyActors(ExternalVendor.findAll)

<span class="keyword">val</span> externalPriceCalculators: List[ActorRef] = createExternalPriceCalculators(<span class="number">10</span>, proxies)

<span class="keyword">val</span> externalLoadBalancer = system.actorOf(
    Props [ExternalPriceCalculator]
  .withRouter(RoundRobinRouter(routees = externalPriceCalculators)),
  name=<span class="string">"external-load-balancer"</span>)
</pre></td></tr></table></figure>

<p>Instead of allowing the router to create the actor instances,
the instances are passed as a parameter(they are called routees).</p>
<h3 id="improve-performance-with-dispatchers">IMPROVE PERFORMANCE WITH DISPATCHERS</h3>
<p>Every actor system has a default dispatcher that’s used if nothing is configured.
In Akka, message dispatchers are the engine behind the actors that makes Actor run.</p>
<p>Think of a dispatcher as a service with a thread pool that knows how to execute actors
when a message is received.</p>
<p>But if you notice some contention on a single dispatcher, you can start creating
dedicated dispatchers for a group of actors. </p>
<p>Remember, all the actors are created from the same actor system.
You can easily configure the default dispatcher by adding more threads to it</p>
<ul>
<li>Dispatcher—The default dispatcher used by the actor system. It’s an event-based
dispatcher that binds actors to a thread pool. It creates one mailbox per actor.</li>
<li>PinnedDispatcher—Dedicates one thread per actor. It’s like creating thread-based actors.</li>
<li>BalancingDispatcher—This event-driven dispatcher redistributes work from busy
actors to idle actors. All the actors of the same type share one mailbox.</li>
<li>CallingThreadDispatcher—It runs the actor on the calling thread.
It doesn’t create any new thread. Great for unit testing purposes.</li>
</ul>
<p>Using dispatchers in Akka is a simple two-step process: first,
specify them in the configuration file, then set up the actor with the dispatcher. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>akkaoogle {
  dispatchers {
    external-price-calculator-actor-dispatcher {
      # Dispatcher is the name <span class="keyword">of</span> the event-based dispatcher
      <span class="class"><span class="keyword">type</span> =</span> Dispatcher
      # What kind <span class="keyword">of</span> ExecutionService <span class="keyword">to</span> <span class="keyword">use</span>
      executor = <span class="string">"fork-join-executor"</span>
      # Configuration <span class="keyword">for</span> the fork-join pool
      fork-join-executor {
        # Min number <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based parallelism number <span class="keyword">to</span>
        parallelism-min = <span class="number">2</span>
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = <span class="number">2.0</span>
        # Max number <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based parallelism number t
        parallelism-max = <span class="number">100</span>
      }
      # Throughput defines the maximum number <span class="keyword">of</span> messages <span class="keyword">to</span> be
      # processed per actor before the thread jumps <span class="keyword">to</span> the next actor.
      # Set <span class="keyword">to</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">as</span> fair <span class="keyword">as</span> possible.
      throughput = <span class="number">100</span>
    }
    <span class="keyword">internal</span>-price-calculator-actor-dispatcher {
      # Dispatcher is the name <span class="keyword">of</span> the event-based dispatcher
      <span class="class"><span class="keyword">type</span> =</span> BalancingDispatcher
      # What kind <span class="keyword">of</span> ExecutionService <span class="keyword">to</span> <span class="keyword">use</span>
      executor = <span class="string">"thread-pool-executor"</span>
      thread-pool-executor {
        # Minnumber <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based core number <span class="keyword">to</span>
        core-pool-size-min = <span class="number">5</span>
      }
    }

  }
}
</pre></td></tr></table></figure>

<p>To use these dispatchers you will use the withDispatcher method of Props, as in
the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">private</span> def <span class="title">createInternalPriceCalculators</span>(initialLoad: Int)
     (<span class="keyword">implicit</span> system: ActorSystem) = {
  (<span class="keyword">for</span> (i &lt;- <span class="number">0</span> until initialLoad) <span class="keyword">yield</span>
    system.actorOf(Props[InternalPriceCalculator]
      .withDispatcher(<span class="string">"dispatchers.internal-price-calculator-actor-dispatcher"</span>),
    name=(<span class="string">"internal-price-calculator"</span> + i))).toList
}

<span class="keyword">private</span> def <span class="title">createExternalPriceCalculators</span>(initialLoad: Int,
     proxies: List[ActorRef])(<span class="keyword">implicit</span> system: ActorSystem) = {
  (<span class="keyword">for</span> (i &lt;- <span class="number">0</span> until initialLoad) <span class="keyword">yield</span> system.actorOf(
    Props(<span class="keyword">new</span> ExternalPriceCalculator(proxies))
      .withDispatcher(<span class="string">"dispatchers.external-price-calculator-actor-dispatcher"</span>),
    name = (<span class="string">"external-price-calculator"</span> + i))).toList
}
</pre></td></tr></table></figure>

<h2 id="handling-shared-resources-with-agent">Handling shared resources with Agent</h2>
<p>The monitor actor needs to log any transaction failure with external vendors. You
can always extend its functionality for internal use, but for now it needs to handle the
following two message types:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">LogTimeout</span><span class="params">(actorId: String, msg: String)</span></span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">FindStats</span><span class="params">(actorId: String)</span></span>
</pre></td></tr></table></figure>

<p>To build the monitoring piece for the Akkaoogle application, you have to rely on a
shared mutable state, and this section shows you how to put Agent to use.</p>
<p>The monitor actor needs to log any transaction failure with external vendors.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">LogTimeout</span><span class="params">(actorId: String, msg: String)</span></span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">FindStats</span><span class="params">(actorId: String)</span></span>
</pre></td></tr></table></figure>

<p>On receiving a LogTimeout message, it needs to save the transaction
failure information to the database and also keep track of
the number of times a particular service failed.</p>
<p>The side effect that’s saving information to the database
can’t be done safely within an STM transaction, because an STM transaction
could retry the operations in a transaction multiple times
if there’s any read/write inconsistency.
If you use Agent, it can participate in the STM transaction and
get executed only when the STM transaction completes successfully.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="keyword">package</span> com.akkaoogle.infrastructure
<span class="keyword">import</span> akka.agent.Agent
<span class="keyword">import</span> akka.actor.Actor
<span class="keyword">import</span> com.akkaoogle.calculators.messages.{Stats, FindStats, LogTimeout}
<span class="keyword">import</span> java.util.Date
<span class="keyword">import</span> com.akkaoogle.db.models._
<span class="class"><span class="keyword">class</span> <span class="title">MonitorActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">import</span> context._
  
  <span class="keyword">val</span> errorLogger = Agent(Map.empty[String, Int])
  <span class="comment">// ideally you may want to save the existing error count in some persistence</span>
  <span class="comment">// storage so you can fetch the errors for later use.</span>
  <span class="keyword">def</span> preRestart = errorLogger send { old =&gt; Map.empty[String, Int] }
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> LogTimeout(actorId, msg) =&gt;
      logTimeout(actorId, msg)
    <span class="keyword">case</span> FindStats(actorId) =&gt;
      <span class="keyword">val</span> timeouts = errorLogger().getOrElse(actorId, <span class="number">0</span>)
      sender ! Stats(actorId, timeouts = timeouts)
    }

  <span class="keyword">private</span> <span class="keyword">def</span> logTimeout(actorId: String, msg: String): Unit = {
    errorLogger send { errorLog =&gt;
      <span class="keyword">val</span> current = errorLog.getOrElse(actorId, <span class="number">0</span>)
      <span class="keyword">val</span> newErrorLog = errorLog + (actorId -&gt; (current + <span class="number">1</span>))
      <span class="keyword">val</span> l = <span class="keyword">new</span> TransactionFailure(actorId, msg, <span class="keyword">new</span> Date(System.currentTimeMillis))
      l.save
      newErrorLog
    }
  }
}
</pre></td></tr></table></figure>

<h2 id="setting-up-play2-mini">Setting up Play2-mini</h2>
<p>Play2-mini is a lightweight REST framework on top of the Play2 framework. It maps an
HTTP request to a function that takes an HTTP request and returns a response.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">ConfigureScalaBuild</span> {</span>
  <span class="keyword">lazy</span> <span class="keyword">val</span> typesafe = <span class="string">"Typesafe Repository"</span> at <span class="string">"http://repo.typesafe.com/typesafe/releases/"</span>
  <span class="keyword">lazy</span> <span class="keyword">val</span> typesafeSnapshot = <span class="string">"Typesafe Snapshots Repository"</span> at <span class="string">"http://repo.typesafe.com/typesafe/snapshots/"</span>
  <span class="keyword">val</span> netty = Some(<span class="string">"play.core.server.NettyServer"</span>)
  <span class="keyword">def</span> scalaMiniProject(org: String, name: String, buildVersion: String,
        baseFile: java.io.File = file(<span class="string">"."</span>)) =
    Project(id = name, base = baseFile, settings = Project.defaultSettings).settings(
      version := buildVersion,
      organization := org,
      resolvers += typesafe,
      resolvers += typesafeSnapshot,
      libraryDependencies += <span class="string">"com.typesafe"</span> %% <span class="string">"play-mini"</span> % <span class="string">"2.1=RC2"</span>,
      mainClass in (Compile, run) := netty,
      ivyXML := &lt;dependencies&gt; &lt;exclude org=<span class="string">"org.springframework"</span>/&gt;&lt;/dependencies&gt;
    )
}

importimportsbt._
Keys._
<span class="class"><span class="keyword">object</span> <span class="title">AkkaoogleBuild</span> <span class="keyword">extends</span> <span class="title">Build</span> <span class="keyword">with</span> <span class="title">ConfigureScalaBuild</span> {</span>
  <span class="keyword">import</span> H2TaskManager._
  <span class="keyword">lazy</span> <span class="keyword">val</span> root =
    scalaMiniProject(<span class="string">"com.akkaoogle"</span>,<span class="string">"akkaoogle"</span>,<span class="string">"1.0"</span>)
      .settings(startH2Task, stopH2Task)
      .settings(
        organization := <span class="string">"scalainaction"</span>,
        scalaVersion := <span class="string">"2.10.0"</span>,
        scalacOptions ++= Seq(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>),
        resolvers += <span class="string">"Typesafe Repo"</span> at <span class="string">"http://repo.typesafe.com/typesafe/repo"</span>,
        parallelExecution in Test := <span class="keyword">false</span>
      ).settings(
      libraryDependencies ++= Seq(
        <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-actor"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-remote"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-agent"</span> % <span class="string">"2.1.0"</span>,
        <span class="string">"com.h2database"</span> % <span class="string">"h2"</span> % <span class="string">"1.2.127"</span>,
        <span class="string">"org.squeryl"</span> % <span class="string">"squery1_2.10-RC5"</span> % <span class="string">"0.9.5-5"</span>,
        <span class="string">"org.specs2"</span> %% <span class="string">"specs2"</span> % <span class="string">"1.13"</span> % <span class="string">"test"</span>,
        <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-distribution"</span> % <span class="string">"8.0.0.M2"</span> % <span class="string">"test"</span>)
      )
}
</pre></td></tr></table></figure>

<h3 id="running-with-play2-mini">Running with Play2-mini</h3>
<p>Play2-mini–based application needs to implement <code>com.typesafe.play.mini.Setup</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">package</span> com.typesafe.play.mini
<span class="class"><span class="keyword">class</span> <span class="title">Setup</span><span class="params">(a: Application)</span> <span class="keyword">extends</span> <span class="title">GlobalSettings</span> {</span>
  ...
}
<span class="comment">// Think of Application as a controller of the MVC model that handles all the requests.</span>
<span class="keyword">package</span> com.typesafe.play.mini
<span class="class"><span class="keyword">trait</span> <span class="title">Application</span> {</span>
  <span class="comment">// you have to implement is the routes method</span>
  <span class="keyword">def</span> route: PartialFunction[RequestHeader, Handler]
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.infrastructure</span>._
import org<span class="preprocessor">.h</span>2<span class="preprocessor">.tools</span><span class="preprocessor">.Server</span>
import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.db</span><span class="preprocessor">.AkkaoogleSchema</span>._

//  <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.http</span><span class="preprocessor">.App</span> will handle all the HTTP requests for the Akkaoogle application. 
object Global extends <span class="keyword">com</span><span class="preprocessor">.typesafe</span><span class="preprocessor">.play</span><span class="preprocessor">.mini</span><span class="preprocessor">.Setup</span>(<span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.http</span><span class="preprocessor">.App</span>) {
  println(<span class="string">"initializing the Akkaoogle schema"</span>)
  //  initialize the various parts
  createSchema()
  AkkaoogleActorServer<span class="preprocessor">.run</span>()
}

package <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.http</span>
import <span class="keyword">com</span><span class="preprocessor">.typesafe</span><span class="preprocessor">.play</span><span class="preprocessor">.mini</span>._
import play<span class="preprocessor">.api</span><span class="preprocessor">.mvc</span>._
import play<span class="preprocessor">.api</span><span class="preprocessor">.mvc</span><span class="preprocessor">.Results</span>._
import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.infrastructure</span>._
import akka<span class="preprocessor">.pattern</span>.{ ask, pipe, AskTimeoutException }
import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.calculators</span><span class="preprocessor">.messages</span>._
import play<span class="preprocessor">.api</span><span class="preprocessor">.libs</span><span class="preprocessor">.concurrent</span>._
import scala<span class="preprocessor">.collection</span><span class="preprocessor">.JavaConverters</span>._

object App extends Application {
  def route = {
    case GET(Path(<span class="string">"/"</span>)) =&gt; Action { request =&gt;
      Ok(views<span class="preprocessor">.index</span>())<span class="preprocessor">.as</span>(<span class="string">"text/html"</span>)
    }
    case GET(Path(<span class="string">"/akkaoogle/search"</span>)) & QueryString(qs) =&gt;
      Action { request =&gt;
        val desc = QueryString(qs, <span class="string">"productDescription"</span>)<span class="preprocessor">.get</span><span class="preprocessor">.asScala</span>
        val f =
          (AkkaoogleActorServer<span class="preprocessor">.lookup</span>(<span class="string">"cheapest-deal-finder-balancer"</span>) ?
             FindPrice(desc<span class="preprocessor">.head</span>, <span class="number">1</span>))<span class="preprocessor">.mapTo</span>[Option[LowestPrice]]
        val result = f<span class="preprocessor">.map</span>({
          case Some(lowestPrice) =&gt;
            Ok(lowestPrice<span class="preprocessor">.toString</span>)<span class="preprocessor">.as</span>(<span class="string">"text/html"</span>)
          case _ =&gt;
            Ok(<span class="string">"No price found"</span>)<span class="preprocessor">.as</span>(<span class="string">"text/html"</span>)
            Return
        })
        AsyncResult(result<span class="preprocessor">.asPromise</span>)
      }
  }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code"><pre>package <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.infrastructure</span>

import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.calculators</span>._
import akka<span class="preprocessor">.actor</span>._
import <span class="keyword">com</span><span class="preprocessor">.akkaoogle</span><span class="preprocessor">.db</span><span class="preprocessor">.models</span>._
import akka<span class="preprocessor">.actor</span>.{ActorRef, Actor}
import akka<span class="preprocessor">.routing</span>._
import <span class="keyword">com</span><span class="preprocessor">.typesafe</span><span class="preprocessor">.config</span><span class="preprocessor">.ConfigFactory</span>

object AkkaoogleActorServer {
  var system: Option[ActorSystem] = None
  def run(): Unit = {
    println(<span class="string">"starting the remote server..."</span>)
    system = Some(ActorSystem(<span class="string">"akkaoogle"</span>, ConfigFactory<span class="preprocessor">.load</span><span class="preprocessor">.getConfig</span>(<span class="string">"akkaoogle"</span>)))
    system<span class="preprocessor">.foreach</span>(s =&gt; register(s))
  }
  
  private def register(implicit system: ActorSystem) {
    val monitor = system<span class="preprocessor">.actorOf</span>(Props[MonitorActor], name = <span class="string">"monitor"</span>)
    
    val cheapestDealFinderLoadBalancer = system<span class="preprocessor">.actorOf</span>(
      Props[CheapestDealFinder]<span class="preprocessor">.withRouter</span>(SmallestMailboxRouter(nrOfInstances = <span class="number">10</span>)),
      name = <span class="string">"cheapest-deal-finder-balancer"</span>)
      
    val internalPriceCalculators: List[ActorRef] = createInternalPriceCalculators(<span class="number">10</span>)
    val internalLoadBalancer = system<span class="preprocessor">.actorOf</span>(
      Props[InternalPriceCalculator]<span class="preprocessor">.withRouter</span>(RoundRobinRouter(routees = internalPriceCalculators)),
      name = <span class="string">"internal-load-balancer"</span>)
      
    val proxies = createExternalProxyActors(ExternalVendor<span class="preprocessor">.findAll</span>)
    val externalPriceCalculators: List[ActorRef] = createExternalPriceCalculators(<span class="number">10</span>, proxies)
    val externalLoadBalancer = system<span class="preprocessor">.actorOf</span>(
      Props [ExternalPriceCalculator]<span class="preprocessor">.withRouter</span>(RoundRobinRouter(routees = externalPriceCalculators)),
      name=<span class="string">"external-load-balancer"</span>)
  }
  
  def lookup(name: String): ActorRef = {
    system map { s =&gt;
      val path = s / name
      s<span class="preprocessor">.actorFor</span>(path)
    } getOrElse(throw new RuntimeException(<span class="string">"No actor found"</span>))
  }
  
  def stop(){
    system<span class="preprocessor">.foreach</span>(_<span class="preprocessor">.shutdown</span>())
  }
  
  private def createExternalProxyActors(vendors: Iterable[ExternalVendor])(implicit system: ActorSystem) = {
    val proxies = for(v &lt;- vendors) yield {
      println(<span class="string">"Creating vendor proxies for "</span> + v<span class="preprocessor">.name</span>)
      val ref = system<span class="preprocessor">.actorOf</span>(Props(new ExternalVendorProxyActor(v))
          <span class="preprocessor">.withDispatcher</span>(<span class="string">"dispatchers.proxy-actor-dispatcher"</span>),name=v<span class="preprocessor">.name</span>)
      ref
    }
    proxies<span class="preprocessor">.toList</span>
  }

  private def createInternalPriceCalculators(initialLoad: Int)(implicit system: ActorSystem) = {
    (for (i &lt;- <span class="number">0</span> until initialLoad) yield
    system<span class="preprocessor">.actorOf</span>(
      Props [InternalPriceCalculator]<span class="preprocessor">.withDispatcher</span>(<span class="string">"dispatchers.internal-price-calculator-actor-dispatcher"</span>),
      name=(<span class="string">"internal-price-calculator"</span> + i)))<span class="preprocessor">.toList</span>
  }
  
  private def createExternalPriceCalculators(
    initialLoad: Int, proxies: List[ActorRef])(
    implicit system: ActorSystem) = {
      (for (i &lt;- <span class="number">0</span> until initialLoad)
        yield
      system<span class="preprocessor">.actorOf</span>(
        Props(new ExternalPriceCalculator(proxies))<span class="preprocessor">.withDispatcher</span>(<span class="string">"dispatchers.external-price-calculator-actor-dispatcher"</span>),
        name = (<span class="string">"external-price-calculator"</span> + i)))<span class="preprocessor">.toList</span>
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-Java integration]]></title>
    <link href="http://zhpooer.github.io/2014/07/25/scala-in-action-java-integration/"/>
    <id>http://zhpooer.github.io/2014/07/25/scala-in-action-java-integration/</id>
    <published>2014-07-25T12:51:27.000Z</published>
    <updated>2014-07-25T14:27:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="using-java-classes-in-scala">Using Java classes in Scala</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">import</span> org.joda.time.DateTime;
<span class="keyword">import</span> org.joda.time.Days;
<span class="keyword">import</span> java.util.Date;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateCalculator</span> {</span>
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysBetween</span>(Date start, Date end) {
        Days d = Days.daysBetween(<span class="keyword">new</span> DateTime(start.getTime()),
        <span class="keyword">new</span> DateTime(end.getTime()));
        <span class="keyword">return</span> d.getDays();
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">import</span> chap11.java._
<span class="keyword">import</span> java.util.Date
<span class="class"><span class="keyword">class</span> <span class="title">PaymentCalculator</span><span class="params">(val payPerDay: Int = 100)</span> <span class="keyword">extends</span> <span class="title">DateCalculator</span> {</span>
    <span class="keyword">def</span> calculatePayment(start: Date, end: Date) = {
        daysBetween(start, end) * payPerDay
    }
}
</pre></td></tr></table></figure>

<h1 id="working-with-java-checked-exceptions">Working with Java checked exceptions</h1>
<p>he Scala compiler won’t force you. In cases where you think you should
catch the exception, don’t rethrow the exception from Scala. It’s a bad practice.
A better way is to create an instance of the Either or Option type. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(content: String)</span>:</span> Either[Exception, Boolean] = {
  val w = new Writer
  <span class="keyword">try</span> {
    w.writeToFile(content)
    Right(true)
  } catch {
    case e: java.io.IOException =&gt; Left(e)
  }
}
</pre></td></tr></table></figure>

<h1 id="working-with-java-generics-using-existential-types">Working with Java generics using existential types</h1>
<p><code>Vector&lt;?&gt;</code> could be represented as <code>Vector[T] forSome { type T }</code>
in Scala. Reading from left to right, this type
expression represents a vector of T for some type of T .
This type T is unknown and could be anything.
But T is fixed to some type for this vector.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">import</span> java.util.{ Vector =&gt; JVector }
<span class="function"><span class="keyword">def</span> <span class="title">printLanguages</span>[<span class="title">C</span> &lt;:</span> JVector[T] forSome { type T}](langs: C):Unit = {
  <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until langs.size) println(langs.get(i))
}
</pre></td></tr></table></figure>

<p>There’s placeholder syntax for existential type <code>JVector[_]</code>. It means the same
thing as <code>JVector[T] forSome { type T }</code>. The preceding printLanguages method
could also be written as follows:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">printLanguages</span>[<span class="title">C</span> &lt;:</span> JVector[_]](langs: C):Unit = {
  <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until langs.size) println(langs.get(i))
}
</pre></td></tr></table></figure>

<h2 id="working-with-java-collections">Working with Java collections</h2>
<p>The Scala library ships with two utility classes that do
exactly that for you:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>scala<span class="preprocessor">.collection</span><span class="preprocessor">.JavaConversions</span>
scala<span class="preprocessor">.collection</span><span class="preprocessor">.JavaConverters</span>
</pre></td></tr></table></figure>

<p><code>JavaConversions</code> provides a series of implicit conversions that convert
between a Java collection and the closest corresponding Scala collection, and vice
versa. <code>JavaConverters</code> uses a “Pimp my Library” pattern to add the asScala
method to Java collection and asJava method to Scala collection types.</p>
<p>My recommendation would be to use JavaConverters because it makes the conversion
explicit.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>scala&gt; import java<span class="preprocessor">.util</span>.{ArrayList =&gt; JList }
import java<span class="preprocessor">.util</span>.{ArrayList =&gt; JList}
scala&gt; val jList = new JList[Int]()
<span class="label">jList:</span> java<span class="preprocessor">.util</span><span class="preprocessor">.ArrayList</span>[Int] = []
scala&gt; jList<span class="preprocessor">.add</span>(<span class="number">1</span>)
<span class="label">res1:</span> Boolean = true
scala&gt; jList<span class="preprocessor">.add</span>(<span class="number">2</span>)
<span class="label">res2:</span> Boolean = true
scala&gt; import scala<span class="preprocessor">.collection</span><span class="preprocessor">.JavaConverters</span>._
import scala<span class="preprocessor">.collection</span><span class="preprocessor">.JavaConverters</span>._
scala&gt; jList<span class="preprocessor">.asScala</span> foreach println
</pre></td></tr></table></figure>

<h1 id="building-web-applications-in-scala-using-java-frameworks">Building web applications in Scala using Java frameworks</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>mvn archetype:generate <span class="attribute">-DgroupId</span><span class="subst">=</span>scala<span class="built_in">.</span><span class="keyword">in</span><span class="built_in">.</span>action <span class="attribute">-DartifactId</span><span class="subst">=</span>top<span class="built_in">.</span>artists
<span class="attribute">-DarchetypeArtifactId</span><span class="subst">=</span>maven<span class="attribute">-archetype</span><span class="attribute">-webapp</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day63-医药集中采购平台 药品目录]]></title>
    <link href="http://zhpooer.github.io/2014/07/25/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day63-%E5%8C%BB%E8%8D%AF%E9%9B%86%E4%B8%AD%E9%87%87%E8%B4%AD%E5%B9%B3%E5%8F%B0-%E8%8D%AF%E5%93%81%E7%9B%AE%E5%BD%95/"/>
    <id>http://zhpooer.github.io/2014/07/25/传智播客day63-医药集中采购平台-药品目录/</id>
    <published>2014-07-25T01:04:29.000Z</published>
    <updated>2014-07-27T07:45:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">数据字典</h1>
<p>系统中定义的类型数据, 在数据字典表定义.</p>
<p>数据字典明细表 (dictinfo)</p>
<ul>
<li>info</li>
<li>typecode 外键关联</li>
</ul>
<p>数据字典类型表 (dicttype)</p>
<ul>
<li>typecode primary key</li>
<li>dictcode</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">-- 选择药品</span>
<span class="operator"><span class="keyword">select</span> * form dictinfo <span class="keyword">where</span> typecode=<span class="string">'001'</span>;</span>
</pre></td></tr></table></figure>

<p>应用</p>
<ol>
<li><p>将数据字典明细表中的id存储在业务表的字段中, 如医院信息(useryy)中的级别</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> t.*,
  (<span class="keyword">select</span> info <span class="keyword">from</span> dictinfo <span class="keyword">where</span> id=t.jb)
t.rowid <span class="keyword">from</span> useryy t;</span>
</pre></td></tr></table></figure>
</li>
<li><p>将数据字典表中的dictcode字段存储在业务表中, 比如系统用户表中的groupid,
对应数据字典表中typecode为 01的 dictcode</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 系统配置接口 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">""</span> <span class="attribute">class</span>=<span class="value">"SystemConfigServiceImpl"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> UserAction {
    @RequestMapping(<span class="string">"/userquery"</span>)
    <span class="keyword">public</span> String <span class="title">userquery</span>(Model model) {
        List&lt;DictInfo&gt; grouplist = systemConfgiService.findDictInfoByType(<span class="string">"s01"</span>);
        model.addAttribut(<span class="string">"groupinfo"</span>, grouplist)
        <span class="keyword">return</span> <span class="string">"base/userquery"</span>;
    }
}
</pre></td></tr></table></figure>

<p>将 硬编码判断, 数据库用户预定义类型(1-&gt;info,2-&gt;info,3-&gt;info) 在数据库关联</p>
<h1 id="-">用户身份认证</h1>
<p>静态密码方式, 用户名对应的密码设置在系统, 以设置一边不再改变,
安全性低容易被木马窃取, 可以定期修改密码, 但是不容易记忆</p>
<p>动态密码: 短信密码</p>
<p>验证码, 防止恶意攻击</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> {</span>
    <span class="comment">// 登陆页面</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/login"</span>)
    <span class="keyword">public</span> String <span class="title">login</span>(){
        <span class="keyword">return</span> <span class="string">"/base/login"</span>
    }
    <span class="comment">// 登陆提交</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/loginsubmit"</span>)
    <span class="keyword">public</span> @ResponseBody SubmitResultInfo <span class="title">loginSubmit</span>(
        HttpSession session, 
        String userid, String pwd, String randomcode 
    ) {
        <span class="comment">// 校验验证码是否正确</span>
        String validateCode_session = session.getAttribute(<span class="string">"validateCode"</span>);
        <span class="keyword">if</span>(!validateCode_session.equals(randomcode)) {
            ResultUtil.throwException(ResultUtil.createFail(Config.MESSAGE, <span class="number">113</span>, <span class="keyword">null</span>));
        }
        <span class="comment">// 校验用户身份</span>
        ActiveUser activeUser = userManagerService.userloginCheck(userid, pwd);
        session.setAttribute(Config.ACTIVE_key, activeUser);
        <span class="keyword">return</span> ResultUtil.createSubmitResult(ResultUtil.createSuccess(Config.Message, <span class="number">107</span>, <span class="keyword">new</span> Object[]{activeUser.userId}));
    }
}

<span class="comment">// userManagerService</span>

<span class="comment">// 校验通过返回用户身份信息</span>
<span class="keyword">public</span> ActiveUser <span class="title">userloginCheck</span>(String userid, String pwd) {
    Sysuser sysuser = findSysuserByuserid(userid);
    <span class="keyword">if</span>(sysuser==<span class="keyword">null</span>) {
        ResultUtil.throwException(ResultUtil.createFail(Config.MESSAGE, <span class="number">110</span>, <span class="keyword">null</span>));
    }
    String pwd_md5 = <span class="keyword">new</span> MD5.getMD5ofStr(pwd);
    <span class="keyword">if</span>(!sysuser.getPwd().equals(pwd_md5)) {
        <span class="comment">// 提示 用户密码不正确</span>
        ResultUtil.throwException(ResultUtil.createFail(Config.MESSAGE, <span class="number">114</span>, <span class="keyword">null</span>)); 
    }
    ActiverUser activeUser = <span class="keyword">new</span> ActiveUser();
    activeUser.setGroupid(sysuser.getGroupid);
    activeUser.setUserId(); <span class="comment">// username, sysid</span>
    <span class="keyword">return</span> activeUser;
}

<span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> {</span>
   <span class="annotation">@ResourceMapping</span>(<span class="string">"/logout"</span>)
   <span class="keyword">public</span> String <span class="title">logout</span>() {
       <span class="comment">// 清除session</span>
       session.setAtrribute(<span class="string">""</span>, <span class="keyword">null</span>);
       <span class="keyword">return</span> View.recirect(<span class="string">"login.action"</span>); <span class="comment">// "redirect:login.action"</span>
   }
}
</pre></td></tr></table></figure>

<h2 id="-">登陆拦截器</h2>
<p><code>anonimousAction.properties</code>, 配置用户无需登录就可操作的配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>login<span class="preprocessor">.action</span>
login<span class="preprocessor">.submit</span><span class="preprocessor">.action</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> {</span>
    <span class="comment">// 进入action方法之前调用</span>
    <span class="comment">// 权限管理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandler</span>() {
        Activeuser activeUser = session.getAttribute();
        <span class="keyword">if</span>(activeUser!=<span class="keyword">null</span>) {
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }
        List&lt;String&gt; open_url = ResourcesUtil.getKeyList(Config.ANONYMOUST_ACIOTNS);
        <span class="comment">// 获取请求地址</span>
        String url = request.getRequestURI();
        <span class="keyword">for</span>(String url_l : open_url){
            <span class="keyword">if</span>(url.contains(url_l)) {
                <span class="keyword">return</span> <span class="keyword">true</span>;
            }
        }
        <span class="comment">// request.getRequestDispatcher("login.jsp").forword(request, response);</span>
        <span class="comment">// 抛出一个异常信息, 由全局异常处理器同一执行</span>
            <span class="comment">// 如果异常代码为106, 跳转到登陆页面</span>
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
    <span class="comment">// 执行 action 之后, 返回视图之前</span>
    <span class="comment">// 给页面添加共有数据</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span>() {
    }
    <span class="comment">// 执行 action 之后</span>
    <span class="comment">// 捕获异常, 性能监视</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span>() {
    }
}
</pre></td></tr></table></figure>

<h1 id="-">药品目录</h1>
<p>药品目录: 通用名, 价格, 企业名称, 商品名称, 规格, 药品流水号(编号, 通用),
剂型(胶囊, 针剂), 规格(一个胶囊毫克), 转换系数(40片胶囊), 药品状态(1. 正常交易, 暂停交易)</p>
<p>药品目录表的记录id与业务表存在很多的外键关联, 规定药品目录不再删除, 进行逻辑删除,
更新药品交易状态为暂停交易</p>
<p>省级的药品目录通过接口将信息录入到市药品采购平台, 通过 excel 导出, excel 导入</p>
<p>excel需要导入导出模板</p>
<h2 id="poi">POI</h2>
<p>操作微软文档的 java api</p>
<p>HSSF, 只支持 excel 97-2003</p>
<p>XSSF, 支持2007以上的版本, <code>.xlsx</code>, 文件是基于xml存储的</p>
<h3 id="-">导出</h3>
<p>Workbook(工作簿), Sheet, Row(行), Cell(单元格)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// HSSF 操作</span>
Workbook wb = <span class="keyword">new</span> HSSFWorkbook();

Sheet sheet = wb.createSheet(<span class="string">"new sheet"</span>);
sheet.createRow((<span class="keyword">short</span>)<span class="number">0</span>);
<span class="comment">// row 表示单元格所在行, 创建时指定单元格所在列</span>
Cell cell = row.createCell(<span class="number">0</span>);
cell.setValue(<span class="number">1</span>);
</pre></td></tr></table></figure>

<p>HSSF导出数据如果数据量足够大, 可能会发生内存溢出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 关闭自动刷新, 100, 保持100条行在内存</span>
SXSSFWorkbook wb = <span class="keyword">new</span> SXSSWorkbook(-<span class="number">1</span>);
Sheet sh = createSheet();
Row row = sh.createRow(<span class="number">0</span>);
Cell cell = row.createCell(<span class="number">0</span>);

<span class="comment">// 刷入硬盘, 但是保留最后插入的100行</span>
<span class="comment">// 会被写入临时文件</span>
(SXSSSheet)sh.flushRows(<span class="number">100</span>); 

wb.dispose(); <span class="comment"><span class="xmlDocTag">///</span> 清除临时文件</span>
</pre></td></tr></table></figure>

<p>处理数据速度不快, 除非由大数据要求, 否则建议使用 XSSF</p>
<h2 id="-">导出药品目录</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre>
<span class="comment">// 药品信息</span>
<span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YpxxActiona</span> {</span>
    <span class="comment">// 药品信息导出页面</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/ypxxExport"</span>)
    <span class="keyword">public</span> String <span class="title">ypxxExport</span>(Model model) {
        <span class="comment">// 药品类别</span>
        List&lt;Dictinfo&gt; yplbList = systemConfigService.findDictinfoByType(<span class="string">"001"</span>);
        <span class="comment">// 交易状态</span>
        List&lt;Dictinfo&gt; jyztList = systemConfigService.findDictinfoByType(<span class="string">"003"</span>);
        model.addAttribute(<span class="string">"yplbList"</span>, yplbList);
        model.addAttribute(<span class="string">"jyztList"</span>, jyztList);
        
        <span class="keyword">return</span> View.toBusiness(<span class="string">"/ypml/ypxxExport"</span>);
    }
    <span class="annotation">@RequestMapping</span>(<span class="string">"/ypxxExportSubmit"</span>)
    <span class="keyword">public</span> @ResponseBody SubmitResultInfo <span class="title">ypxxExportSubmit</span>() {
        String webpath = ypmlservice.ypxxExport(ypxxQueryVo);
        <span class="comment">// 导出成功, 点击下载</span>
        <span class="keyword">return</span> ResultUtil.createSubmitResult(ResultUtil.createSuccess(Config.Message, <span class="number">318</span>, ))
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YpmlService</span> {</span>
    <span class="keyword">public</span> List&lt;YpxxCustom&gt; <span class="title">findYpxxList</span>(YpxxQueryVo ypxxQueryVo) {
       <span class="keyword">return</span> ypxxMapperCustom.findYpxxList(ypxxQeuryVo);
    }
    
    <span class="comment">// 药品信息导出</span>
    <span class="comment">// 导出后将下载的文件路径返回</span>
    <span class="keyword">public</span> String <span class="title">ypxxExport</span>(YpxxQeuryVo ypxxQueryVo) {
        List&lt;YpxxCustom&gt; list = <span class="keyword">this</span>.findYpxxList(ypxxQeuryVo);
        <span class="comment">// 调用封装类, 执行导出</span>
        
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>&lt;<span class="keyword">select</span> id=<span class="string">"findYpxxList"</span> parameterType=<span class="string">"YpxxQueryVO"</span> resultType=<span class="string">"YpxxCustom"</span>&gt;
    <span class="keyword">select</span> * <span class="keyword">from</span> ypxx.*,
        (<span class="keyword">select</span> form dictinfo <span class="keyword">where</span> dictcode=ypxx.jyzt <span class="keyword">and</span> typecode=<span class="comment">'003') jyztmc</span>
    <span class="keyword">from</span> ypxx
    &lt;<span class="keyword">where</span>&gt;
        &lt;<span class="keyword">if</span> test=<span class="string">"ypxxCustom!=null"</span>&gt;
           &lt;<span class="keyword">if</span> test=<span class="string">"ypxxCustom.bm!=null and ypxxCustom.bm!=''"</span>&gt;
               ypxx.bm=<span class="preprocessor">#{ypxxCustom.mc}</span>
           &lt;/<span class="keyword">if</span>&gt;
           <span class="keyword">and</span> ypxx.mc <span class="keyword">like</span> <span class="comment">''</span>
           <span class="keyword">and</span> ypxx.lb=<span class="comment">''</span>
           <span class="keyword">and</span> ypxx.jyzt=<span class="comment">''</span>
        &lt;/<span class="keyword">if</span>&gt;
    &lt;/<span class="keyword">where</span>&gt;
&lt;/<span class="keyword">select</span>&gt;
</pre></td></tr></table></figure>

<p>basicinfo表, 保存系统配置, 如 导出文件的保存路径</p>
<h2 id="-">药品信息的导入</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// 03版本读取, 只能读取xsl的文件,</span>
<span class="comment">// 如果使用用户驱动, 如果数据量过大, 内存溢出</span>
<span class="comment">// 但是可以使用 事件驱动机制 来避免 内存溢出, 但是速度不快,</span>
<span class="comment">// 需要程序员自定义 processRecord 方法去处理读取到的数据</span>
HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook(inputStream);
wb.getNumberOfSheets();
Sheet sheet = wb.getSheetAt(<span class="keyword">index</span>);
HSSFRow row = wb.getRow(rownum);
HSSFCell cell = row.getCell();
</pre></td></tr></table></figure>

<p>使用 XSSF 方式读取 excel 文件, 是基于 sax 方式, 属于事件驱动</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">//YpxxAction</span>
<span class="annotation">@RequestMapping</span>(<span class="string">"/ypxximport"</span>)
<span class="keyword">public</span> String ypxximport {
    <span class="comment">// 药品信息导入页面</span>
    <span class="keyword">return</span> View.toBusiness(<span class="string">"/ypxl/ypxximport"</span>);
}

<span class="annotation">@ReqeustMappng</span>(<span class="string">"/ypxximportstudent"</span>)
<span class="keyword">public</span> @ResponseBody SubmitResultInfo <span class="title">ypxximportsubmit</span>(MultipartFile ypxximportfile) {
    String filename = ypxximportfile.getOriginalFilename();
    File file = <span class="keyword">new</span> File(<span class="string">"d:/upload/"</span> + filename_original);
    <span class="keyword">if</span>(!file.exist()) {
        file.mkdirs(); <span class="comment">// 如果文件所在的路径不存在则创建</span>
    }
    <span class="comment">// 将内存中文件的数据写入磁盘</span>
    ypxximportfile.transferTo(file);
    <span class="comment">// 导入, 若导入失败, 形成失败记录文件, 返回给用户</span>
}
<span class="comment">// 上传多个文件</span>
<span class="comment">// public SubmitResultInfo ypxximportsubmit(@RequestParam("ypxximportfile") MultipartFile[] ypxximportfiles)</span>



<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YpxxImportServiceImpl</span> <span class="keyword">implements</span> <span class="title">HxlsOptRowsInterface</span> {</span>
    <span class="comment">// 流水号, 再插入时, 使用触发器自动生成</span>
}
</pre></td></tr></table></figure>

<p>内连接, 通过外键关联的两个表的查询, 也可以通过子查询,
不是外键关联可能会出现重复记录</p>
<h1 id="-">供货商药品目录</h1>
<p>供货商将自己供应的药品发布到供应商药品目录(gysypml)</p>
<ul>
<li>id</li>
<li>ypxxid</li>
<li>usergysid</li>
</ul>
<p>监督单位可以对供货商对应的药品进行控制, 允许供货或不允许供货(gysypml_control),
记录药品控制的状态(只更新, 不添加)</p>
<ul>
<li>id</li>
<li>ypxxid, 药品信息</li>
<li>usergysid, 供应商id</li>
<li>control, 监督机构控制状态(1. 正常, 2. 暂停)</li>
<li>advice, 监督机构意见</li>
</ul>
<p>两张表在数据库级别没有关系</p>
<p>供货商药品目录维护, 供货商在ypsypml表中添加, 删除记录</p>
<ul>
<li>添加, 供货商添加自己供应的药品</li>
<li>删除, 供货商删除自己不再供应的药品</li>
</ul>
<p>如果将控制状态设置在供货商商品目录表,
供应商添加一条记录, 监督单位更新一条记录(控制状态更新为暂停),
供货商删除一条记录, 删除的同时将监督单位的控制状态也删除了.
<strong>供货商操作影响了监督单位</strong></p>
<p>查询供货商药品目录和供货商药品目录控制表时, 通过供货商id和药品信息一块儿关联查询</p>
<h2 id="-">业务操作</h2>
<ul>
<li>供货商药品目录查询, 供货商 + 药品信息 + 状态</li>
<li>供货商添加药品查询, 药品总目录存在的药品, 但是在供货商目录没有的药品</li>
<li>确认添加药品, 到供货商药品目录</li>
<li>监督单位对供货商的药品进行控制<ol>
<li>查询所有供货商供应的药品的控制状态</li>
<li>进行控制, 选择要控制的对象, 选择供货状态, 点击确认提交</li>
</ol>
</li>
</ul>
<h2 id="-">供货商目录维护</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findGysypmlList"</span> <span class="attribute">parameterType</span>=<span class="value">"GysypxxQeuryVo"</span> <span class="attribute">resultType</span>=<span class="value">"GysypmlCustom6"</span>&gt;</span>
select gysypml.*, ypxx.*,
      (seelct info from dictinfo where 控制状态),
      (seelct info from dictinfo where 交易状态)
    from gysypml, ypxx, gysyml_control
    where gysypml.ypxxid=ypxx.id
      and gysypml.ypxxid=gysyml_control.ypxxid
      and gysypml.usergysid=gysyml_control.usergysid;
    <span class="comment">&lt;!-- 药品信息查询条件  --&gt;</span>
    <span class="comment">&lt;!-- 控制状态条件 --&gt;</span>
    <span class="comment">&lt;!-- 分页条件, 参考 baseuser --&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findGysypmlCount"</span> <span class="attribute">parameterType</span>=<span class="value">"GysypxxQeuryVo"</span> <span class="attribute">resultType</span>=<span class="value">"GysypmlCustom6"</span>&gt;</span>
select gysypml.*, ypxx.*,
      (seelct info from dictinfo where 控制状态),
      (seelct info from dictinfo where 交易状态)
    from gysypml, ypxx, gysyml_control
    where gysypml.ypxxid=ypxx.id
      and gysypml.ypxxid=gysyml_control.ypxxid
      and gysypml.usergysid=gysyml_control.usergysid;
    <span class="comment">&lt;!-- 药品信息查询条件  --&gt;</span>
    <span class="comment">&lt;!-- 控制状态条件 --&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="comment">// ypmlAction</span>
<span class="comment">// 供货商药品目录查询</span>
<span class="keyword">public</span> String <span class="title">gysypmlquery</span>(Model model, GyspmQeuryVo gyspmlQeuryVo) {
    
    <span class="keyword">return</span> View.toBusiness(<span class="string">"/ypml/gysypmlquery"</span>);
}

<span class="comment">// 供货商药品目录查询结果集</span>
<span class="annotation">@ResultMapping</span>(<span class="string">"/y"</span>)
<span class="keyword">public</span> @ResponseBody DatagridResultInfo <span class="title">findGysypmlCount</span>(
      GyspmQeuryVo gyspmlQeuryVo
      <span class="keyword">int</span> page,
      <span class="keyword">int</span> rows) {
    <span class="keyword">int</span> count = ypmlService.findGysymlcount(gysypmlQeuryVo);
    <span class="comment">// 分页</span>
    PageQuery pageQuery = <span class="keyword">new</span> PageQuery()
    pageQuery.setPageParams(count, rows, page);
    gpsymlQeuryVo.setPageQuery(pageQuery);

    List&lt;GysypmlCustom&gt; list = ypmlService.findGysymlList(gpsymlQeuryVo);
    DataGridResultInfo dinfo = <span class="keyword">new</span> DataGridResultInfo();
    dinfo.setTotal(count);
    dinfo.setRows(list);
    <span class="keyword">return</span> dinfo;
}
</pre></td></tr></table></figure>

<h2 id="-">数据范围权限</h2>
<p>企业控制范围权限</p>
<ul>
<li>身份用户认证</li>
<li>用户权限控制(功能操作)</li>
<li>数据范围权限(通过 sql 硬编码, 必须要有用户id传入)<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>在service层传入 用户id 和 <span class="keyword">query</span><span class="variable">Vo</span>, 然后再封装
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">供货商药品目录添加查询</h2>
<p>查找供应商允许添加的药品目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>&lt;<span class="keyword">select</span> id=<span class="string">"findGysypmlAddList"</span> parameterType=<span class="string">"yycg.business.vo.GysypmlQueryVo"</span>
        resultType=<span class="string">"GysypmlCustom"</span>&gt;
    <span class="keyword">select</span> ypxx.*,
        (<span class="keyword">select</span> info <span class="keyword">from</span> dictinfo <span class="keyword">where</span> dictcode=ypxx.jyzt <span class="keyword">and</span> typecod=<span class="comment">'003') jyztmc</span>
    <span class="keyword">from</span> ypxx;
&lt;/<span class="keyword">select</span>&gt;
&lt;<span class="keyword">select</span> id=<span class="string">"findGysypmlAddListCount"</span>&gt;
&lt;/<span class="keyword">select</span>&gt;
</pre></td></tr></table></figure>

<h2 id="-">批量提交</h2>
<p>供货商选择药品添加药品到供货商药品目录(gysypml)</p>
<p>后置条件: 数据库操作, 在供货商药品目录表插入数据时, 同时向供货商药品目录控制表插入记录</p>
<p>Action 用 List 接收页面提交的数据, <code>String[] index</code>
接收被选择的序列</p>
<p>使用 hidden 命名规范 <code>gysypmls[index].ypxxid</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="keyword">public</span> @Response SubmitResultInfo <span class="title">gysypmladdsubmit</span>(
        GysymplQueryVo qgysypmlQueryVo, // 这里
        Sring[] index // 选择的行){
    List gyspmls = gysspmlQueryVo.getGysypmls();
    <span class="keyword">int</span> num = indexs.length;
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++) {
        <span class="keyword">int</span> index = Integer.parseInt(indexs[i]);
        gysypmls.<span class="keyword">get</span>(index);
        ypmlService.insertGysypl(usergysid, ypxxid);
    }
}
<span class="comment">// YmplService</span>
<span class="comment">// 根据供应商的id和药品信息id获取供应商目录表的一条记录</span>
<span class="keyword">public</span> Gysypml <span class="title">findGysypmlByYpxxAdnUsergysid</span>(String usergysid, String ypxxid) {
    GysypmlExample gysypmlExample = <span class="keyword">new</span> GysypmlExample();
    GysypmlExample.Createria c = gysypmlExample.createCriteria;
    c.andUsergysidEqualTo(usergysid);
    c.andYpxxidEqualTo(yapxixid);
    List list  = gysypmlMapper.selectByExample(gysypmlControlExample)
    <span class="keyword">return</span> list.<span class="keyword">get</span>(<span class="number">0</span>);
}
<span class="keyword">public</span> Gysypml <span class="title">findGysypmlControlByYpxxAdnUsergysid</span>(String usergysid, String ypxxid) {
    GysypmlExample gysypmlExample = <span class="keyword">new</span> GysypmlExample();
    GysypmlExample.Createria c = gysypmlExample.createCriteria;
    c.andUsergysidEqualTo(usergysid);
    c.andYpxxidEqualTo(yapxixid);
    List list  = gysypmlMapper.selectByExample(gysypmlControlExample);
    <span class="keyword">return</span> list.<span class="keyword">get</span>(<span class="number">0</span>);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertGysypml</span>(String usergysid, String gyxxid) {
    Ypxx ypxx = ypxxMapper.selectByPrimaryKey(ypxxid);
    <span class="comment">// 校验记录是否重复</span>
    Gysypml gysypml = findGysypmlByYpxxAdnUsergysid(usergysid, ypxxid);
    <span class="keyword">if</span>(gysypml!=<span class="keyword">null</span>) {
        ResultUtil.throwException(createFail());
    }
    
    Gysypml gysympl_insert = <span class="keyword">new</span> Gysypml();
    gysypml_insert.setId(UUDIBuild.getUUID());
    gysypmlMapper.insert(gysypml_insert);

   <span class="comment">// 向供货商药品目录写一条表</span>
   <span class="comment">// 校验, 再添加</span>
}
</pre></td></tr></table></figure>

<h2 id="-">供货商删除供货商药品目录</h2>
<p>提交内容, 药品信息id</p>
<p>删除供货商药品目录提交</p>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-ScalaTest]]></title>
    <link href="http://zhpooer.github.io/2014/07/24/scala-in-action-scalatest/"/>
    <id>http://zhpooer.github.io/2014/07/24/scala-in-action-scalatest/</id>
    <published>2014-07-24T02:11:32.000Z</published>
    <updated>2014-07-25T12:45:29.000Z</updated>
    <content type="html"><![CDATA[<p>There are two kinds of automated tests: ones you write (the most common)
and ones you generate for your code.</p>
<p>If you’re a Java developer and have used JUnit before, using it to test your Scala
code is easy. Specs is a testing tool written in Scala for Scala and
provides more expressiveness in your tests.</p>
<p>Dependency injection is a design pattern used by developers to make their code
more testable.As a hybrid language, Scala provides a number of
abstraction techniques you can use to implement dependency injection.</p>
<p>Automated tests are tests that are recorded or prewritten and can be run by a machine
without any manual intervention.</p>
<p>In the agile software development process, teams don’t analyze and design the
application up front; they build it using an evolutionary design.</p>
<ul>
<li>What does evolving design have to do with automated testing?</li>
<li>Why is evolving the design better than designing the application up front?</li>
</ul>
<p>There are varied types of automated tests: specification-based, unit, integration,
functional, and regression, to name a few.</p>
<h1 id="automated-test-generation-using-scalacheck">Automated test generation using ScalaCheck</h1>
<p>In ScalaCheck, a property is a testable unit. To create a
new property in ScalaCheck, you have to make a statement that describes the behavior
you want to test.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>name := <span class="string">"ScalaCheckExample"</span>

<span class="built_in">version</span> := <span class="string">"1.0"</span>

organization := <span class="string">"Scala in Action"</span>

scalaVersion := <span class="string">"2.10.0"</span>

resolvers ++= Seq(
  <span class="string">"Sonatype Snapshots"</span> <span class="keyword">at</span> <span class="string">"http://oss.sonatype.org/content/repositories/snapshots"</span>,
  <span class="string">"Sonatype Releases"</span> <span class="keyword">at</span> <span class="string">"http://oss.sonatype.org/content/repositories/releases"</span>
)

libraryDependencies ++= Seq (
  <span class="string">"org.scalacheck"</span> %% <span class="string">"scalacheck"</span> % <span class="string">"1.10.0"</span> % <span class="string">"test"</span>
)
<span class="comment">
// append options passed to the Scala compiler</span>
scalacOptions ++= Seq(<span class="string">"-deprecation"</span>, <span class="string">"-unchecked"</span>, <span class="string">"-feature"</span>)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// The job of ScalaCheck would be to falsify this statement</span>
<span class="comment">// by generating random test data. </span>
<span class="keyword">val</span> anyString = <span class="string">"some string value"</span>
anyString.reverse.reverse == anyString

<span class="keyword">import</span> org.scalacheck.Prop
Prop.forAll((a: String) =&gt; a.reverse.reverse == a)

<span class="keyword">package</span> checks
<span class="keyword">import</span> org.scalacheck._
<span class="comment">// The org.scalacheck.Properties represents a collection of ScalaCheck</span>
<span class="comment">// properties, and SBT has built-in support for running Properties:</span>
<span class="class"><span class="keyword">object</span> <span class="title">StringSpecification</span> <span class="keyword">extends</span> <span class="title">Properties</span><span class="params">(<span class="string">"String"</span>)</span> {</span>
  property(<span class="string">"reverse of reverse gives you same string back"</span>) =
    Prop.forAll((a: String) =&gt; a.reverse.reverse == a)
}
</pre></td></tr></table></figure>

<p>The ScalaCheck generators are responsible for generating test data, and the
org.scalacheck.Gen class represents them.</p>
<p>One in particular is quite important: the arbitrary generator. This is a special
generator that generates arbitrary values for any supported type.</p>
<h2 id="working-with-scalacheck">Working with ScalaCheck</h2>
<ol>
<li>Either will have value on either Left or Right, but not both at any point
in time.</li>
<li>fold on the Left should produce the value contained by Left.</li>
<li>fold on the Right should produce the value contained by Right.</li>
<li>swap returns the Left value to the Right and vice versa.</li>
<li>getOrElse on Left returns the value from Left or the given argument if this is
Right.</li>
<li>forAll on Right returns true if Left or returns the result of the application of
the given function to the Right value.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre></td><td class="code"><pre>import Gen._
import Arbitrary.arbitrary
//  creates a new instance of the Int type generator and
// maps it to <span class="operator"><span class="keyword">create</span> <span class="keyword">values</span> <span class="keyword">for</span> <span class="keyword">Left</span>
val leftValueGenerator = arbitrary[<span class="keyword">Int</span>].map(<span class="keyword">Left</span>(_))
val rightValueGenerator = arbitrary[<span class="keyword">Int</span>].map(<span class="keyword">Right</span>(_))

// randomly generate instances <span class="keyword">of</span> <span class="keyword">Left</span> <span class="keyword">or</span> <span class="keyword">Right</span>.
// methods <span class="keyword">like</span> oneOf <span class="keyword">or</span> frequency , called combinators.
// They allow you <span class="keyword">to</span> combine multiple generators.
implicit val eitherGenerator =
    oneOf(leftValueGenerator, rightValueGenerator)
    
// The generator you’ve defined here <span class="keyword">only</span> generates <span class="keyword">Int</span> <span class="keyword">values</span>,
// but <span class="keyword">if</span> you wanted <span class="keyword">to</span> play <span class="keyword">with</span> different types <span class="keyword">of</span> <span class="keyword">values</span>, you’d also
// define the generator <span class="keyword">like</span> this:
implicit def arbitraryEither[X, Y](implicit xa: Arbitrary[X],
      ya: Arbitrary[Y]): Arbitrary[Either[X, Y]] =
  Arbitrary[Either[X, Y]]( oneOf(arbitrary[X].map(<span class="keyword">Left</span>(_)), arbitrary[Y].map(<span class="keyword">Right</span>(_))) )

// <span class="keyword">If</span> you wanted <span class="keyword">to</span> use leftValueGenerator <span class="number">75</span>% <span class="keyword">of</span> the <span class="keyword">time</span> compared
// <span class="keyword">to</span> the rightValueGenerator, you could use Gen.frequency <span class="keyword">like</span> this:
implicit val eitherGenerator =
    frequency((<span class="number">3</span>, leftValueGenerator), (<span class="number">1</span>, rightValueGenerator))

// 测试代码
property(<span class="string">"isLeft or isRight not both"</span>) =
    Prop.forAll((e: Either[<span class="keyword">Int</span>, <span class="keyword">Int</span>]) =&gt; e.isLeft != e.isRight)

//  <span class="keyword">on</span> the <span class="keyword">Left</span> should produce the <span class="keyword">value</span> contained <span class="keyword">by</span> <span class="keyword">Left</span>
property(<span class="string">"left value"</span>) =
    Prop.forAll{(n: <span class="keyword">Int</span>) =&gt; <span class="keyword">Left</span>(n).fold(x =&gt; x, b =&gt; error(<span class="string">"fail"</span>)) == n }

// fold <span class="keyword">on</span> the <span class="keyword">Right</span> should produce the <span class="keyword">value</span> contained <span class="keyword">by</span> <span class="keyword">Right</span>
property(<span class="string">"Right value"</span>) =
    Prop.forAll{(n: <span class="keyword">Int</span>) =&gt; <span class="keyword">Right</span>(n).fold(b =&gt; error(<span class="string">"fail"</span>), x =&gt; x) == n }

//def fold[X](fa: A =&gt; X, fb: B =&gt; X) = this <span class="keyword">match</span> {
//  <span class="keyword">case</span> <span class="keyword">Left</span>(a) =&gt; fa(a)
//  <span class="keyword">case</span> <span class="keyword">Right</span>(b) =&gt; fb(b)
//}

// “swap returns the <span class="keyword">Left</span> <span class="keyword">value</span> <span class="keyword">to</span> <span class="keyword">Right</span> <span class="keyword">and</span> vice versa”
property(<span class="string">"swap values"</span>) = Prop.forAll{(e: Either[<span class="keyword">Int</span>, <span class="keyword">Int</span>]) =&gt; e <span class="keyword">match</span> {
    <span class="keyword">case</span> <span class="keyword">Left</span>(a) =&gt; e.swap.<span class="keyword">right</span>.<span class="keyword">get</span> == a
    <span class="keyword">case</span> <span class="keyword">Right</span>(b) =&gt; e.swap.<span class="keyword">left</span>.<span class="keyword">get</span> == b
  }
}

property(<span class="string">"getOrElse"</span>) =
  Prop.forAll{ (e: Either[<span class="keyword">Int</span>, <span class="keyword">Int</span>], <span class="keyword">or</span>: <span class="keyword">Int</span>) =&gt;
    e.<span class="keyword">left</span>.getOrElse(<span class="keyword">or</span>) == (e <span class="keyword">match</span> {
      <span class="keyword">case</span> <span class="keyword">Left</span>(a) =&gt; a
      <span class="keyword">case</span> <span class="keyword">Right</span>(_) =&gt; <span class="keyword">or</span>
    })
  }

property(<span class="string">"forall"</span>) = Prop.forAll {(e: Either[<span class="keyword">Int</span>, <span class="keyword">Int</span>]) =&gt;
  e.<span class="keyword">right</span>.forall(_ % <span class="number">2</span> == <span class="number">0</span>) == (e.isLeft || e.<span class="keyword">right</span>.<span class="keyword">get</span> % <span class="number">2</span> == <span class="number">0</span>)
}</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>// setting <span class="keyword">for</span> <span class="operator">the</span> minimum successful (-s) tests <span class="built_in">from</span> <span class="number">100</span> <span class="built_in">to</span> <span class="number">500</span> <span class="keyword">by</span> passing test arguments
&gt; test-only <span class="comment">-- -s 500</span>
</pre></td></tr></table></figure>

<h1 id="tdd">TDD</h1>
<p>Acceptance criteria:</p>
<pre><code>A 100 product code should use cost plus the percent amount.
Example: 150 (cost) + 20% = $180
All products whose ID starts with B should use an external price source to get
the price.
</code></pre><ul>
<li>Where should you implement the pricing logic?</li>
<li>Should you create a trait or start with a simple function?</li>
<li>What parameters will the function take?</li>
<li>How should you test the output?</li>
<li>Should it hit the database or filesystem to pull up the cost?</li>
</ul>
<p>The most common theme of TDD is to pick the simplest
solution that could possibly work. In this case the simplest solution would be to create
a function that takes a product code, looks it up in a Map, and returns the price using
the formula specified in the acceptance criterion.</p>
<p>Do the simplest thing that could possibly work, and
then incrementally design and build your application.</p>
<p>Once your test is running, you have the opportunity to refactor or clean up.
Refactoring (www.refactoring.com) is a technique you can use to improve the design of
existing code without changing the behavior.</p>
<p>Most popular: JUnit and Specs. JUnit is more
popular among Java developers and can be easily used to test Scala code.</p>
<h2 id="ci">CI</h2>
<ul>
<li>Jenkins CI</li>
<li>Jenkins SBT plugins</li>
<li>Code coverage</li>
</ul>
<p>You can also generate a <code>.POM</code> file (Maven build file) from
your SBT project using the make-pom action.</p>
<h2 id="using-junit">Using JUnit</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>libraryDependencies += <span class="string">"junit"</span> % <span class="string">"junit"</span> % <span class="string">"4.10"</span> % <span class="string">"test"</span>

libraryDependencies += <span class="string">"com.novocode"</span> % <span class="string">"junit-interface"</span> % <span class="string">"0.8"</span> % <span class="string">"test"</span>
</pre></td></tr></table></figure>

<h1 id="di">DI</h1>
<p>Dependency injection (DI) is a design pattern that separates
behavior from dependency resolution.</p>
<p>This example is about calculating the price of a product based on various pricing
rules. Typically any pricing system will have hundreds of rules, but to keep
things simple I will only talk about two:</p>
<ul>
<li>The cost-plus rule determines the price by adding a percentage of the cost.</li>
<li>Getting the price from an external pricing source.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span> {</span>
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator()
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator()
  <span class="keyword">val</span> calculators = Map(
    <span class="string">"costPlus"</span> -&gt; calculate(costPlusCalculator) _ ,
    <span class="string">"externalPriceSource"</span> -&gt; calculate(externalPriceSourceCalculator) _)
    
  <span class="keyword">def</span> calculate(priceType: String, productId: String): Double = {
    calculators(priceType)(productId)
  }
  
  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> calculate(c: Calculator)(productId: String):Double =
    c.calculate(productId)
}
<span class="class"><span class="keyword">trait</span> <span class="title">Calculator</span> {</span>
  <span class="keyword">def</span> calculate(productId: String): Double
}

<span class="class"><span class="keyword">class</span> <span class="title">CostPlusCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> {</span>
  <span class="keyword">def</span> calculate(productId: String) = {}
}

<span class="class"><span class="keyword">class</span> <span class="title">ExternalPriceSourceCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> {</span>
  <span class="keyword">def</span> calculate(productId: String) = {}
}
</pre></td></tr></table></figure>

<p>Dependency injection is a specific form of inversion of control where the
concern being inverted is the process of obtaining the needed dependencie</p>
<p>There are some potential problems with this,
in particular when your software is evolving.</p>
<p>Using DI, you can easily solve this problem. If the dependent calculators could be
passed in (injected) to the CalculatePriceService, then the service could be easily
configured with various implementations of calculators.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 通过构造器注入</span>
<span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span><span class="params">(
    val costPlusCalculator: Calculator,
    val externalPriceSourceCalculator: Calculator)</span> {</span>
  TODO
}
</pre></td></tr></table></figure>

<h2 id="techniques-to-implement-di">Techniques to implement DI</h2>
<p>A measure of a good unit test is that it should be free of side effects,
the same as writing a pure function in functional programming.</p>
<p>If you follow TDD as a driver for your design, you don’t have to worry too much about
the coupling problem—your tests will force you to come up with a decoupled design.
You’ll notice that your functions, classes, and methods follow a DI pattern.</p>
<p>Techniques to implement dependency injection</p>
<ol>
<li>Cake pattern, Handles dependency using trait mixins and abstract members.</li>
<li>Structural typing, Uses structural typing to manage dependencies.
The Scala structural typing feature provides duck typinga in a type-safe manner.</li>
<li>Implicit parameters, Manages dependencies using implicit parameters so that
as a caller you don’t have to pass them.
In this case, dependencies could be easily controlled using scope.</li>
<li>Functional programming style, Uses function currying to control dependencies.</li>
<li>Using a DI framework</li>
</ol>
<h3 id="cake-pattern">Cake pattern</h3>
<p>A cake pattern 13 is a technique to build multiple layers of indirection in your applica-
tion to help with managing dependencies. </p>
<ul>
<li>Abstract members</li>
<li>Self type</li>
<li>Mixin Composition</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre><span class="comment">// The idea behind this Calculator trait is to have a component namespace that has all</span>
<span class="comment">// the calculators in your application.</span>
<span class="class"><span class="keyword">trait</span> <span class="title">Calculators</span> {</span>
  <span class="keyword">val</span> costPlusCalculator: CostPlusCalculator
  <span class="keyword">val</span> externalPriceSourceCalculator: ExternalPriceSourceCalculator
  <span class="class"><span class="keyword">trait</span> <span class="title">Calculator</span> {</span>
    <span class="keyword">def</span> calculate(productId: String): Double
  }
  <span class="class"><span class="keyword">class</span> <span class="title">CostPlusCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> {</span>
    <span class="keyword">def</span> calculate(productId: String) = {
      ...
    }
  }
  <span class="class"><span class="keyword">class</span> <span class="title">ExternalPriceSourceCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> {</span>
    <span class="keyword">def</span> calculate(productId: String) = {
      ...
    }
  }
}

<span class="comment">// self type</span>
<span class="comment">// The benefit is that now you can reference both</span>
<span class="comment">// costPlusCalculator and externalPriceSourceCalculator freely.</span>
<span class="class"><span class="keyword">trait</span> <span class="title">CalculatePriceServiceComponent</span> {</span><span class="keyword">this</span>: Calculators =&gt;
  <span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span> {</span>
    <span class="keyword">val</span> calculators = Map(
      <span class="string">"costPlus"</span> -&gt; calculate(costPlusCalculator) _
      <span class="string">"externalPriceSource"</span> -&gt; calculate(externalPriceSourceCalculator) _)
    
    <span class="keyword">def</span> calculate(priceType: String, productId: String): Double = {
      calculators(priceType)(productId)
    }
    <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> calculate(c: Calculator)(productId: String):Double =
      c.calculate(productId)
  }
}
<span class="comment">// Remember from the tests, you don’t want to use the calculators; instead you want to</span>
<span class="comment">// use a fake or TestDouble version of the calculators.</span>

<span class="comment">// For production mode you could create a pricing system by compos-</span>
<span class="comment">// ing all the real versions of these components, as in the following:</span>
<span class="class"><span class="keyword">object</span> <span class="title">PricingSystem</span> <span class="keyword">extends</span> <span class="title">CalculatePriceServiceComponent</span> <span class="keyword">with</span> <span class="title">Calculators</span> {</span>
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator
}

<span class="comment">// or testing the pricing could be created using the fake implementation</span>
<span class="class"><span class="keyword">trait</span> <span class="title">TestPricingSystem</span> <span class="keyword">extends</span> <span class="title">CalculatePriceServiceComponent</span> <span class="keyword">with</span> <span class="title">Calculators</span> {</span>
  <span class="class"><span class="keyword">class</span> <span class="title">StubCostPlusCalculator</span> <span class="keyword">extends</span> <span class="title">CostPlusCalculator</span> {</span>
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
  
  <span class="class"><span class="keyword">class</span> <span class="title">StubExternalPriceSourceCalculator</span> <span class="keyword">extends</span> <span class="title">ExternalPriceSourceCalculator</span> {</span>
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> StubCostPlusCalculator
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> StubExternalPriceSourceCalculator
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="keyword">package</span> scala.book.cakepatterntest {
  <span class="keyword">import</span> junit.framework.Assert._
  <span class="keyword">import</span> org.junit.Test
  <span class="keyword">import</span> cakepattern._
  <span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceServiceTest</span> <span class="keyword">extends</span> <span class="title">TestPricingSystem</span> {</span>
    <span class="annotation">@Test</span>
    <span class="keyword">def</span> shouldUseCostPlusCalculatorWhenPriceTypeIsCostPlus() {
      <span class="keyword">val</span> calculatePriceService = <span class="keyword">new</span> CalculatePriceService
      <span class="keyword">val</span> price = calculatePriceService.calculate(<span class="string">"costPlus"</span>,<span class="string">"some product"</span>)
      assertEquals(<span class="number">5.0</span>D, price)
    }
  }
}
</pre></td></tr></table></figure>

<p>This is a common technique used by Scala developers to manage dependencies. In
smaller projects, it’s reasonable to have the wiring of dependencies implemented like
the PricingSystem and the TestPricingSystem, but for large projects it may become
difficult to manage them. For large projects it makes more sense to use a DI
framework that allows you to completely separate object creation
and injection from business logic.</p>
<h3 id="structural-typing">Structural typing</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">type</span> Calculators = {
  <span class="keyword">val</span> costPlusCalculator: Calculator
  <span class="keyword">val</span> externalPriceSourceCalculator: Calculator
}

<span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span><span class="params">(c: Calculators)</span> {</span>
  <span class="keyword">val</span> calculators = Map(
    <span class="string">"costPlus"</span> -&gt; calculate(c.costPlusCalculator) _ ,
    <span class="string">"externalPriceSource"</span> -&gt; calculate(c.externalPriceSourceCalculator) _)
  <span class="keyword">def</span> calculate(priceType: String, productId: String): Double = {
    calculators(priceType)(productId)
  }
  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> calculate(c: Calculator)(productId: String):Double =
    c.calculate(productId)
}
</pre></td></tr></table></figure>

<p>The advantage of structural typing in Scala is that it’s immutable and type-safe.
The Scala compiler will ensure that the constructor
parameter of CalculatePriceService implements both the
abstract vals costPlusCalculator and externalPriceSourceCalculator .</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> <span class="title">ProductionConfig</span> {</span>
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator
  <span class="keyword">val</span> priceService = <span class="keyword">new</span> CalculatePriceService(<span class="keyword">this</span>)
}

<span class="class"><span class="keyword">object</span> <span class="title">TestConfig</span> {</span>
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator {
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
  
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator {
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
  <span class="keyword">val</span> priceService = <span class="keyword">new</span> CalculatePriceService(<span class="keyword">this</span>)
}
</pre></td></tr></table></figure>

<p>You have the flexibility to pick the appropriate configuration.
Internally, structural typing is implemented using
reflection, so it’s slower compared to other approaches. Sometimes that’s acceptable,
but be aware of it when using structural typing.</p>
<h3 id="implicit-parameters">implicit parameters</h3>
<p>Implicit parameters provide a way to allow parameters to be found. Using this tech-
nique you can have the Scala compiler inject appropriate dependencies into your
code. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span><span class="params">(
  implicit val costPlusCalculator: CostPlusCalculator,
  implicit val externalPriceSourceCalculator: ExternalPriceSourceCalculator
)</span></span>

<span class="class"><span class="keyword">object</span> <span class="title">ProductionServices</span> {</span>
  implicit <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator
  implicit <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator
}

<span class="class"><span class="keyword">object</span> <span class="title">ProductionConfig</span> {</span>
  <span class="keyword">import</span> ProductionServices._
  <span class="keyword">val</span> priceService = <span class="keyword">new</span> CalculatePriceService
}


<span class="class"><span class="keyword">object</span> <span class="title">TestServices</span> {</span>
  implicit <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> CostPlusCalculator {
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
  implicit <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> ExternalPriceSourceCalculator {
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">0.0</span>
  }
}
<span class="class"><span class="keyword">object</span> <span class="title">TestConfig</span> {</span>
  <span class="keyword">import</span> TestServices._
  <span class="keyword">val</span> priceService = <span class="keyword">new</span> CalculatePriceService
}
</pre></td></tr></table></figure>

<p>Using implicit to handle dependencies can easily get out of hand as your application grows
in size, unless they’re grouped together like the preceding configuration objects.</p>
<h3 id="dependency-injection-in-functional-style">Dependency injection in functional style</h3>
<p>If you consider a function as a component, then its dependencies are its parameters.
If you create function currying, you can also
hide the dependencies as you did with other patterns.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Calculators</span> {</span>
  <span class="comment">//  type Calculator is an alias of function that takes product ID and returns the price</span>
  <span class="keyword">type</span> Calculator = String =&gt; Double
  <span class="keyword">protected</span> <span class="keyword">val</span> findCalculator: String =&gt; Calculator
  <span class="keyword">protected</span> <span class="keyword">val</span> calculate: (Calculator, String) =&gt; Double =
    (calculator, productId) =&gt; calculator(productId)
}

<span class="comment">//  it created a function that takes Calculator and</span>
<span class="comment">// returns a function that calculates the price for a productid </span>
<span class="class"><span class="keyword">object</span> <span class="title">TestCalculators</span> <span class="keyword">extends</span> <span class="title">Calculators</span> {</span>
  <span class="keyword">val</span> costPlusCalculator: String =&gt; Double = productId =&gt; <span class="number">0.0</span>
  <span class="keyword">val</span> externalPriceSource: String =&gt; Double = productId =&gt; <span class="number">0.0</span>
  <span class="keyword">override</span> <span class="keyword">protected</span> <span class="keyword">val</span> findCalculator = Map(
    <span class="string">"costPlus"</span> -&gt; costPlusCalculator,
    <span class="string">"externalPriceSource"</span> -&gt; externalPriceSource
  )
  <span class="keyword">def</span> priceCalculator(priceType: String): String =&gt; Double = {
    <span class="keyword">val</span> f: Calculator =&gt; String =&gt; Double = calculate.curried
    f(findCalculator(priceType))
  }
}

<span class="comment">// The benefit of doing this now is you have a function that knows</span>
<span class="comment">// how to calculate price but hides the Calculator from the users.</span>
</pre></td></tr></table></figure>

<p>The priceCalculator method returns a function that takes the productId and
returns the price of the product that encapsulates the dependencies used to compute
the price.</p>
<h3 id="using-a-dependency-injection-framework-spring">Using a dependency injection framework: Spring</h3>
<p>DI frameworks provide the following additional services
that aren’t available in these abstraction techniques above:</p>
<ul>
<li>They create a clean separation between object initialization and creation from
the business logic. This way, your wiring between components becomes
transparent from the code.</li>
<li>These frameworks help you to work with various other frameworks.
A DI framework will help to inject your Scala objects as dependencies.</li>
<li>Most of the DI frameworks, like Spring (www.springsource.org) and Guice
provide aspect-oriented programming ( AOP) support to handle cross-cutting
behaviors like transaction and logging out of the box.</li>
</ul>
<p>In the Spring world, all the dependencies are called beans, because all the objects
follow the JavaBean convention. According to this convention a class
should provide a default constructor, and class properties
should be accessible using get, set, and is methods.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="keyword">package</span> scala.book
<span class="keyword">import</span> scala.reflect._
<span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceService</span> {</span>
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> costPlusCalculator: Calculator = _1
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> externalPriceSourceCalculator: Calculator = _
}
<span class="annotation">@RunWith</span>(classOf[SpringJUnit4ClassRunner])
<span class="annotation">@ContextConfiguration</span>(locations =
    Array(<span class="string">"classpath:/application-context.xml"</span>))
<span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceServiceTest</span> {</span>
  <span class="annotation">@Resource</span>
  <span class="keyword">var</span> calculatePriceService: CalculatePriceService = _
}
</pre></td></tr></table></figure>

<p>In large projects it’s recommended to have a test
version of a configuration file where you can configure
all your beans with fake implementations of their dependencies.</p>
<h1 id="behavior-driven-development-using-specs2">Behavior-driven development using Specs2</h1>
<p>Behavior-driven development (BDD ) is about implementing an application by describ-
ing the behavior from the point of view of stakeholders.</p>
<p>BDD is doing TDD the right way. The first
thing to notice is that the definition of BDD doesn’t talk about testing at all.
And BDD puts more emphasis on solving business problems.
In fact, it recommends looking at the application from the stakeholder’s perspective.</p>
<ul>
<li>Delivering value quickly—Because you’re focused on viewing the application
from the stakeholder’s point of view, you understand and deliver value quickly.</li>
<li>Focus on behavior—This is the most important improvement because at the end
of the day, behaviors that you implement are the ones your stakeholders want.</li>
</ul>
<p>Think of a specification as a list of examples.</p>
<h2 id="getting-started-with-specs2">Getting started with Specs2</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>scalaVersion <span class="symbol">:</span>= <span class="string">"2.10.0"</span>

libraryDependencies += <span class="string">"org.specs2"</span> <span class="string">%% "specs2" %</span> <span class="string">"1.13"</span> % <span class="string">"test"</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>
<span class="class"><span class="keyword">trait</span> <span class="title">TestPricingSystem</span> <span class="keyword">extends</span> <span class="title">CalculatePriceServiceComponent</span> <span class="keyword">with</span> <span class="title">Calculators</span> {</span>
  <span class="class"><span class="keyword">class</span> <span class="title">StubCostPlusCalculator</span> <span class="keyword">extends</span> <span class="title">CostPlusCalculator</span> {</span>
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">5.0</span>D
  }
  <span class="class"><span class="keyword">class</span> <span class="title">StubExternalPriceSourceCalculator</span> <span class="keyword">extends</span> <span class="title">ExternalPriceSourceCalculator</span> {</span>
    <span class="keyword">override</span> <span class="keyword">def</span> calculate(productId: String) = <span class="number">10.0</span>D
  }
  <span class="keyword">val</span> costPlusCalculator = <span class="keyword">new</span> StubCostPlusCalculator
  <span class="keyword">val</span> externalPriceSourceCalculator = <span class="keyword">new</span> StubExternalPriceSourceCalculator
}

<span class="keyword">package</span> scala.book

<span class="keyword">import</span> org.specs2.mutable._

<span class="class"><span class="keyword">class</span> <span class="title">CalculatePriceServiceSpecification</span> <span class="keyword">extends</span> <span class="title">Specification</span> {</span>
  <span class="string">"Calculate price service"</span> should {
    <span class="string">"calculate price for cost plus price type"</span> in {
      <span class="keyword">val</span> service = <span class="keyword">new</span> CalculatePriceService
      <span class="keyword">val</span> price: Double = service.calculate(<span class="string">"costPlus"</span>, <span class="string">"some product"</span>)
      price must beEqualTo(<span class="number">5.0</span>D)
    }
    <span class="string">"calculate price for external price source type"</span> in {
      <span class="keyword">val</span> service = <span class="keyword">new</span> CalculatePriceService
      <span class="keyword">val</span> price: Double = service.calculate(<span class="string">"externalPriceSource"</span>,<span class="string">"some product"</span>)
      price must be_==(<span class="number">10.0</span>D)
    }
  }

}
<span class="comment">// The must method is again added by Specs using implicit conversions to</span>
<span class="comment">// almost all the types to make the specification more readable.</span>

<span class="comment">// nest </span>
<span class="string">"calculate price for cost plus price type"</span> in {
  <span class="keyword">val</span> service = <span class="keyword">new</span> CalculatePriceService
  <span class="keyword">val</span> price: Double = service.calculate(<span class="string">"costPlus"</span>, <span class="string">"some product"</span>)
  price must beEqualTo(<span class="number">5.0</span>D)
  <span class="string">"for empty product id return 0.0"</span> in {
    <span class="keyword">val</span> service = <span class="keyword">new</span> CalculatePriceService
    service.calculate(<span class="string">"costPlus"</span>, <span class="string">""</span>) must beEqualTo(<span class="number">0.0</span>D)
  }
}
</pre></td></tr></table></figure>

<p>Another interesting way to declare specifications in Specs is to use data tables.
Data tables allow you to execute your example with a set of test data.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="string">"cost plus price is calculated using 'cost + 20% of cost + given service charge' rule"</span> <span class="function_or_atom">in</span> {
  <span class="string">"cost"</span> | <span class="string">"service charge"</span> | <span class="string">"price"</span> |&gt;
  <span class="number">100.0</span> <span class="exclamation_mark">!</span>  <span class="number">4</span>    <span class="exclamation_mark">!</span> <span class="number">124</span>  |
  <span class="number">200.0</span> <span class="exclamation_mark">!</span> <span class="number">4</span>     <span class="exclamation_mark">!</span> <span class="number">244</span>  |
  <span class="number">0.0</span>   <span class="exclamation_mark">!</span> <span class="number">2</span>     <span class="exclamation_mark">!</span> <span class="number">2</span>    | {
  (<span class="function_or_atom">cost</span>, <span class="function_or_atom">serviceCharge</span>, <span class="function_or_atom">expected</span>) =&gt;
    <span class="function_or_atom">applyCostPlusBusinessRule</span>(<span class="function_or_atom">cost</span>, <span class="function_or_atom">serviceCharge</span>) <span class="function_or_atom">must</span> <span class="function_or_atom">be_</span>==(<span class="function_or_atom">expected</span>)
}
</pre></td></tr></table></figure>

<h1 id="testing-asynchronous-messaging-systems">Testing asynchronous messaging systems</h1>
<p>Let’s see Awaitility work in a simple example.
Imagine that you have an order-placing service that saves orders to the
database asynchronously, and you place an order by sending a PlaceOrder message.
Here’s the dummy ordering service implemented as an actor:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">package</span> example.actors
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">PlaceOrder</span><span class="params">(productId: String, quantity: Int, customerId: String)</span></span>
<span class="class"><span class="keyword">class</span> <span class="title">OrderingService</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> act = {
    react {
      <span class="keyword">case</span> PlaceOrder(productId, quantity, customer) =&gt;
    }
  }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="keyword">import</span> org.specs2.mutable._
<span class="keyword">import</span> example.actors._
<span class="keyword">import</span> com.jayway.awaitility.scala._
<span class="keyword">import</span> com.jayway.awaitility.Awaitility._
<span class="class"><span class="keyword">class</span> <span class="title">OrderServiceSpecification</span> <span class="keyword">extends</span> <span class="title">Specification</span> <span class="keyword">with</span> <span class="title">AwaitilitySupport</span> {</span>
  <span class="string">"Ordering system"</span> should {
    <span class="string">"place order asynchronously"</span> in {
      <span class="keyword">val</span> s = <span class="keyword">new</span> OrderingService().start
      s ! PlaceOrder(<span class="string">"product id"</span>, <span class="number">1</span>, <span class="string">"some customer id"</span>)
      <span class="comment">// waits until the order is saved into the database.</span>
      <span class="comment">// The default timeout for Awaitility is 10 seconds</span>
      await until {orderSavedInDatabase(<span class="string">"some customer id"</span>) }
      <span class="number">1</span> must_== <span class="number">1</span>
    }
    <span class="comment">// Inside the orderSavedInDatabase, you could go to the data source and</span>
    <span class="comment">// check whether the order is saved for a given customer ID</span>
    <span class="keyword">def</span> orderSavedInDatabase(customerId: String) = ...
  }

}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-Concurrency programming]]></title>
    <link href="http://zhpooer.github.io/2014/07/23/scala-in-action-concurrency-programming/"/>
    <id>http://zhpooer.github.io/2014/07/23/scala-in-action-concurrency-programming/</id>
    <published>2014-07-23T12:17:00.000Z</published>
    <updated>2014-07-24T00:23:07.000Z</updated>
    <content type="html"><![CDATA[<p>Think of an actor as an object that processes a message (your request) and
encapsulates state (state is not shared with other actors).
The ability to perform an action in response to an incoming message
is what makes an object an actor. The actor model encourages no shared state architecture. </p>
<p>Think of Future as a proxy object that you can create for a result that will be avail-
able at some later time. You can use Promise to complete a Future by providing the
result. </p>
<h1 id="what-is-concurrent-programming-">What is concurrent programming?</h1>
<p>Concurrency is when more than one task can start and complete in overlapping time
periods.</p>
<p>In parallel programming, you can literally run multiple tasks
at the same time, and it’s possible with multicore processors.
A concurrent program sometimes becomes a parallel program when it’s running in a multicore environment.</p>
<p>But it’s hard to write a correct and bug-free concurrent program.</p>
<ul>
<li>Only a handful of programmers know how to write a correct,
concurrent application or program. The correctness of the program is important.</li>
<li>Debugging multithreaded programs is difficult. The same program that causes
deadlock in production might not have any locking issues when debugging
locally. Sometimes threading issues show up after years of running in production.</li>
<li>Threading encourages shared state concurrency, and it’s hard to make
programs run in parallel because of locks, semaphores, and dependencies between
threads.</li>
</ul>
<h1 id="new-trends-in-concurrency">New trends in concurrency</h1>
<ul>
<li>STM, Software transactional memory</li>
<li>Dataflow concurrency, The principle behind the dataflow concurrency is to share variables across multiple
tasks or threads.</li>
<li>Message passing concurrency, In this concurrency
model, components communicate by sending messages. Messages can be sent
both synchronously and asynchronously, but asynchronously sending messages to
other components is more common. </li>
</ul>
<h1 id="implementing-message-passing-concurrency-with-actors">Implementing message-passing concurrency with actors</h1>
<p>In this concurrency model, actors communicate with each other through sending and
receiving messages. An actor processes incoming messages and executes the actions
associated with it. Typically, these messages are immutable because you shouldn’t
share state between them for reasons discussed previously.</p>
<p>There are two main communication abstractions in actor: send and receive.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>// sending msg to actor a
a ! msg

// receive operation
receive {
  case pattern1 =&gt;
  <span class="keyword">...</span>
  case pattern =&gt;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">import</span> akka.actor.Actor
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Name</span><span class="params">(name: String)</span></span>
<span class="class"><span class="keyword">class</span> <span class="title">GreetingsActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> Name(n) =&gt; println(<span class="string">"Hello "</span> + n)
  }
}
</pre></td></tr></table></figure>

<p>Before sending any messages to the GreetingsActor actor, the actor needs to be
instantiated by creating an ActorSystem. Think of an ActorSystem as the manager of
one or more actors.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>// libraryDependencies += <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-actor"</span> % <span class="string">"2.1.0"</span>
import akka<span class="preprocessor">.actor</span><span class="preprocessor">.Props</span>
import akka<span class="preprocessor">.actor</span><span class="preprocessor">.ActorSystem</span>

val system = ActorSystem(<span class="string">"greetings"</span>)

val a = system<span class="preprocessor">.actorOf</span>(Props[GreetingsActor], name = <span class="string">"greetings-actor"</span>)
a ! Name(<span class="string">"Nilanjan"</span>)
// shuts down the infrastructure <span class="keyword">and</span> all its actors.
Thread<span class="preprocessor">.sleep</span>(<span class="number">50</span>)
system<span class="preprocessor">.shutdown</span>()
</pre></td></tr></table></figure>

<h2 id="actorsystem">ActorSystem</h2>
<p>An actor system is a hierarchical group of actors that share a common configuration.
It’s also the entry point for creating and looking up actors.</p>
<p>Similarly actors form a hierarchy where parent actors
spawn child actors to delegate work until
it is small enough to be handled by an individual actor.</p>
<p>An ActorSystem is a heavyweight structure that will allocate 1. . .N
threads, so create one per logical subsystem of your application. For example,
you can have one actor system to handle the backend database, another to
handle all the web service calls, and so forth. Actors are very cheap. A given
actor consumes only 300 bytes so you can easily create millions of them.</p>
<p>At the top of the hierarchy is the guardian actor, created automatically with each actor
system. All other actors created by the given actor system become the child of the
guardian actor. In the actor system, each actor has one supervisor (the parent actor)
that automatically takes care of the fault handling. So if an actor crashes, its parent
will automatically restart that actor (more about this later).</p>
<p>The simplest way to create an actor is to create an ActorSystem and use its actorOf
method:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">val</span> system = ActorSystem(name = <span class="string">"word-count"</span>)
<span class="keyword">val</span> m: ActorRef = system.actorOf(Props[SomeActor],
      name = <span class="string">"someActor"</span>)
</pre></td></tr></table></figure>

<p>Note here that when you create an actor in Akka, you never get the direct refer-
ence to the actor. Instead you get back a handle to the actor called ActorRef.
The foremost purpose of ActorRef is to send messages to the actor it rep-
resents.</p>
<p>An actor path uniquely identifies an actor in the actor system.
Because actors are created in a hierarchical structure, they form a similar
structure to a filesystem. 
As a path in a filesystem points to an individual resource,
an actor path identifies an actor reference in an actor system.</p>
<p>Uses the system / method to retrieve the actor
reference of the WordCountWorker actor:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>class WordCountWorker extends Actor { <span class="keyword">...</span> }
<span class="keyword">...</span>
val system = ActorSystem(name = <span class="string">"word-count"</span>)
system.actorOf(Props[WordCountWorker], name = <span class="string">"wordCountWorker"</span>)
<span class="keyword">...</span>
val path: ActorPath = system / <span class="string">"WordCountWorker"</span>
val actorRef: ActorRef = system.actorFor(path)
actorRef ! “some message”
</pre></td></tr></table></figure>

<p>If the actorFor fails to find an actor
pointed to by the path, it returns a reference to the dead-letter mailbox of the actor
system. It’s a synthetic actor where all the undelivered messages are delivered.</p>
<p>The parent actor first stops all the child actors and sends all unprocessed messages to the dead-letter mailbox before ter-
minating itself. </p>
<h3 id="how-do-scala-actors-work-">How do Scala actors work?</h3>
<p>Every actor system comes with a default MessageDispatcher component.
Its responsibility is to send a message to the actor’s mailbox
and execute the actor by invoking the receive block.</p>
<p>Every MessageDispatcher is backed by a thread pool, which is easily
configured using the configuration file.</p>
<p>To send a message to an actor mail-box the ActorRef</p>
<ul>
<li>first sends the message to the MessageDispatcher associated with the actor.</li>
<li>The MessageDispatcher immediately queues the message in the mailbox of the
actor.</li>
<li>The control is immediately returned to the sender of the message. </li>
</ul>
<p>Handling a message is a bit more involved</p>
<ol>
<li>When an actor receives a message in its mailbox, MessageDispatcher schedules
the actor for execution. Sending and handling messages happens in two differ-
ent threads. If a free thread is available in the thread pool that thread is
selected for execution of the actor. If all the threads are busy, the actor will be
executed when threads becomes available.</li>
<li>The available thread reads the messages from the mailbox.</li>
<li>The receive method of the actor is invoked by passing one message at a time.</li>
</ol>
<h1 id="divide-and-conquer-using-actors">Divide and conquer using actors</h1>
<p>In the following example, the challenge is to count the number of words in each file
in a given directory and sort them in ascending order. One way of doing it would be to
loop through all the files in a given directory in a single thread, count the words in
each file, and sort them all together. But that’s sequential. To make it concurrent, we
will implement the divide-and-conquer (also called a fork-join) pattern with actors.</p>
<p>Actor API</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre>// <span class="keyword">If</span> a given message doesn’t match any pattern inside the receive method <span class="keyword">then</span> the
// unhandled method <span class="keyword">is</span> called <span class="keyword">with</span> the akka.actor.UnhandledMessage message. 
def unhandled(message: Any): Unit

// This field holds the actor reference <span class="keyword">of</span> this actor. 
val self: ActorRef

// This <span class="keyword">is</span> the ActorRef <span class="keyword">of</span> the actor that sent the last received message. 
final def sender: ActorRef

// This provides the contextual information <span class="keyword">for</span> the actor, the current message, <span class="keyword">and</span> the
// factory methods <span class="keyword">to</span> create child actors. 
val <span class="keyword">context</span>: ActorContext

// This supervisor strategy defines what will happen <span class="keyword">when</span> a failure <span class="keyword">is</span> detected <span class="keyword">in</span> an
// actor. You can override <span class="keyword">to</span> define your own supervisor strategy.
def supervisorStrategy: SupervisorStrategy

def preStart()

// his method <span class="keyword">is</span> called <span class="keyword">on</span> the current instance <span class="keyword">of</span> the actor. This <span class="keyword">is</span> a great place <span class="keyword">to</span>
// clean up. The <span class="keyword">default</span> implementation <span class="keyword">is</span> <span class="keyword">to</span> stop <span class="keyword">all</span> the child actors <span class="keyword">and</span> <span class="keyword">then</span> invoke
// the postStop method.
def preRestart()

// This method <span class="keyword">is</span> called <span class="keyword">after</span> the current actor instance <span class="keyword">is</span> stopped.
def postStop()

// <span class="keyword">Then</span> the postRestart <span class="keyword">is</span> invoked <span class="keyword">on</span> the fresh instance.
// The <span class="keyword">default</span> implementation <span class="keyword">is</span> <span class="keyword">to</span> invoke the preStart method
def postRestart()
</pre></td></tr></table></figure>

<p>you’ll create two actor classes: one that
will scan the directory for all the files and accumulate results, called WordCountMaster,
and another one called WordCountWorker to count words in each file. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
</pre></td><td class="code"><pre><span class="comment">// The docRoot will specify the location of the files and</span>
<span class="comment">// numActors will create the number of worker actors. </span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">StartCounting</span><span class="params">(docRoot: String, numActors: Int)</span></span>

<span class="comment">// Message Class</span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">FileToCount</span><span class="params">(fileName:String)</span></span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">WordCount</span><span class="params">(fileName:String, count: Int)</span></span>

<span class="class"><span class="keyword">class</span> <span class="title">WordCountWorker</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> countWords(fileName:String) = {
    <span class="keyword">val</span> dataFile = <span class="keyword">new</span> File(fileName)
    Source.fromFile(dataFile).getLines.foldRight(<span class="number">0</span>)(_.split(<span class="string">" "</span>).size + _)
  }
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> FileToCount(fileName:String) =&gt;
      <span class="keyword">val</span> count = countWords(fileName)
      sender ! WordCount(fileName, count)
  }
  <span class="keyword">override</span> <span class="keyword">def</span> postStop(): Unit = {
    println(s<span class="string">"Worker actor is stopped: ${self}"</span>)
  }
}

<span class="class"><span class="keyword">class</span> <span class="title">WordCountMaster</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">var</span> fileNames: Seq[String] = Nil
  <span class="keyword">var</span> sortedCount : Seq[(String, Int)] = Nil
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> StartCounting(docRoot, numActors) =&gt;
      <span class="keyword">val</span> workers = createWorkers(numActors)
      fileNames = scanFiles(docRoot)
      beginSorting(fileNames, workers)
      
    <span class="keyword">case</span> WordCount(fileName, count) =&gt;
      sortedCount = sortedCount :+ (fileName, count)
      sortedCount = sortedCount.sortWith(_._2 &lt; _._2)
      <span class="keyword">if</span>(sortedCount.size == fileNames.size) {
        println(<span class="string">"final result "</span> + sortedCount)
        finishSorting()
      }
  }
  <span class="keyword">private</span> <span class="keyword">def</span> createWorkers(numActors: Int) = {
    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until numActors) <span class="keyword">yield</span>
    context.actorOf(Props[WordCountWorker], name = s<span class="string">"worker-${i}"</span>)
  }
  <span class="keyword">private</span> <span class="keyword">def</span> scanFiles(docRoot: String) =
    <span class="keyword">new</span> File(docRoot).list.map(docRoot + _)
    
  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> beginSorting(fileNames: Seq[String], workers: Seq[ActorRef]) {
    fileNames.zipWithIndex.foreach( e =&gt; {
      workers(e._2 % workers.size) ! FileToCount(e._1)
    })
  }
  
  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> finishSorting() {
    context.system.shutdown()
  }
}

<span class="keyword">def</span> main(args: Array[String]) {
  <span class="keyword">val</span> system = ActorSystem(<span class="string">"word-count-system"</span>)
  <span class="keyword">val</span> m = system.actorOf(Props[WordCountMaster], name=<span class="string">"master"</span>)
  m ! StartCounting(<span class="string">"src/main/resources/"</span>, <span class="number">2</span>)
}
</pre></td></tr></table></figure>

<h2 id="actordsl">ActorDSL</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="keyword">import</span> akka.actor.ActorDSL._

<span class="keyword">val</span> testActor = actor(<span class="keyword">new</span> Act {
  become {
    <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; sender ! <span class="string">"pong"</span>
  }
})

<span class="comment">// Behind the scene Act extends the Actor trait and become adds the behavior of the receive block.</span>
<span class="comment">// Using this DSL syntax you no longer have to create a class.</span>

<span class="class"><span class="keyword">object</span> <span class="title">ActorDSLExample</span> <span class="keyword">extends</span> <span class="title">App</span> {</span>
  <span class="keyword">import</span> akka.actor.ActorDSL._
  <span class="keyword">import</span> akka.actor.ActorSystem
  implicit <span class="keyword">val</span> system = ActorSystem(<span class="string">"actor-dsl"</span>)
  <span class="keyword">val</span> testActor = actor(<span class="keyword">new</span> Act {
    become {
      <span class="keyword">case</span> <span class="string">"ping"</span> =&gt; sender ! <span class="string">"pong"</span>
    }
  })
  actor(<span class="keyword">new</span> Act {
    whenStarting { testActor ! <span class="string">"ping"</span>}
    become {
      <span class="keyword">case</span> x =&gt;
        println(x)
        context.system.shutdown()
    }
  })
}
</pre></td></tr></table></figure>

<h1 id="fault-tolerance-made-easy-with-a-supervisor">Fault tolerance made easy with a supervisor</h1>
<p>Think of this supervisor as an actor that links to supervised actors and restarts
them when one dies.</p>
<p>That way, if a node (machine) is down,
you can restart an actor in a different box. Always
remember to delegate the work so that if a crash occurs,
another supervisor can recover.</p>
<p>Akka comes with two restarting strategies: One-for-One and All-for-One.</p>
<p>In the One-for-One strategy, if one actor dies, it’s recreated.</p>
<p>If you have multiple actors that participate in one workflow, restarting a single actor
might not work. In that case, use the All-for-One restart strategy,
in which all actors supervised by a supervisor are restarted
when one of the actors dies.</p>
<p>When no supervisor strategy is defined, it uses the default strategy (OneForOne ),
which restarts the failing child actor in case of Exception.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">import</span> akka.actor.SupervisorStrategy._
<span class="class"><span class="keyword">class</span> <span class="title">WordCountWorker</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="comment">//if no pattern matches, the fault is escalated to the parent. </span>
  <span class="keyword">override</span> <span class="keyword">val</span> supervisorStrategy = OneForOneStrategy(maxNrOfRetries = <span class="number">3</span>,
        withinTimeRange = <span class="number">5</span> seconds) {
    <span class="keyword">case</span> _: Exception =&gt; Restart
  }
}

<span class="class"><span class="keyword">class</span> <span class="title">WordCountMaster</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">override</span> <span class="keyword">val</span> supervisorStrategy = AllForOneStrategy() {
    <span class="keyword">case</span> _: Exception =&gt;
      println(<span class="string">"Restarting..."</span>)
      Restart
  }
}
</pre></td></tr></table></figure>

<h1 id="future-and-promise">Future and Promise</h1>
<p>A Future is an object that can hold a value that may become available, as its name sug-
gests, at a later time.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">import</span> ExecutionContext.Implicits.<span class="keyword">global</span>

<span class="function"><span class="keyword">def</span> <span class="title">someFuture</span>[<span class="title">T</span>]:</span> Future[T] = Future {
  someComputation()
}
</pre></td></tr></table></figure>

<p>Since the Future is executed asynchronously we need to specify the
scala.concurrent.ExecutionContext. ExecutionContext is an abstraction over a
thread pool that is responsible for executing all the tasks submitted to it.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>someFuture.onComplete {
  <span class="reserved">case</span> Success<span class="function"><span class="params">(result)</span> =&gt;</span> println(result)
  <span class="reserved">case</span> Failure<span class="function"><span class="params">(t)</span> =&gt;</span> t.printStackTrace
}

val <span class="attribute">promise</span>: Promise[String] = Promise[String]()
val future = promise.future
...
val anotherFuture = Future {
  promise.success(<span class="string">"Done"</span>)
  doSomethingElse()
}

future.onSuccess { <span class="reserved">case</span> msg<span class="function"> =&gt;</span> startTheNextStep() }
</pre></td></tr></table></figure>

<p>A common use case of Future is to perform some computation concurrently without
needing the extra utility of an actor. The most compelling feature of the Scala Future
library is it allows us to compose concurrent operations, which is hard to achieve with
actors.</p>
<p>word count use future</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre>import scala.concurrent.<span class="number">_</span>
import ExecutionContext.Implicits.global
import scala.util.{Success, Failure}
import java.io.File
import scala.io.Source

object main {
  def main(args: Array[String]) {
    val promiseOfFinalResult = Promise[Se<span class="string">q[(String, Int)]</span>]()
    val path = <span class="string">"src/main/resources/"</span>
    val futureWithResult: Future[Se<span class="string">q[(String, Int)]</span>] = <span class="keyword">for</span> {
      files &lt;- scanFiles(path)
      result &lt;- processFiles(files)
    } yield {
      result
    }
    
    futureWithResult.onSuccess {
      case <span class="string">r =&gt;</span> promiseOfFinalResult.success(r)
    }
    promiseOfFinalResult.future.onComplete {
      case Success(result) =&gt; println(result)
      case Failure(t) =&gt; t.printStackTrace
    }
  }
  
  private def processFiles(fileNames: Se<span class="string">q[String]</span>): Future[Se<span class="string">q[(String,Int)]</span>] = {
    val futures: Se<span class="string">q[Future[(String, Int)]</span>] = fileNames.<span class="keyword">map</span>(<span class="string">name =&gt;</span>
        processFile(name))
    val singleFuture: Future[Se<span class="string">q[(String, Int)]</span>] =
    Future.sequence(futures)
    singleFuture.<span class="keyword">map</span>(<span class="string">r =&gt;</span> r.sortWith(<span class="number">_</span>._2 &lt; <span class="number">_</span>._2))
  }
  private def processFile(fileName: String): Future[(String, Int)] =
  Future {
    val dataFile = new File(fileName)
    val wordCount = Source.fromFile(dataFile).getLines.foldRight(<span class="number">0</span>)(<span class="number">_</span>.<span class="keyword">split</span>(<span class="string">"
    "</span>).size + <span class="number">_</span>)
    (fileName, wordCount)
  } recover {
    case e: java.io.<span class="string">IOException =&gt;</span>
    println(<span class="string">"Something went wrong "</span> + e)
    (fileName, <span class="number">0</span>)
  }
  
  private def scanFiles(docRoot: String):Future[Se<span class="string">q[String]</span>] = Future { new
    File(docRoot).list.<span class="keyword">map</span>(docRoot + <span class="number">_</span>) }
}
</pre></td></tr></table></figure>

<h2 id="mixing-future-with-actors">Mixing Future with actors</h2>
<ul>
<li>Send a message to an actor and receive a response from it. So far we have only
used fire-and-forget using the ! method. But getting a response is also a very
common use case (a.k.a ask pattern).</li>
<li>Reply to sender when some concurrent task ( Future) completes (a.k.a pipe
pattern).</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">import</span> akka.pattern.{ask, pipe}
implicit <span class="keyword">val</span> timeout = Timeout(<span class="number">5</span> seconds)
<span class="class"><span class="keyword">class</span> <span class="title">GreetingsActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">val</span> messageActor = context.actorOf(Props[GreetingsChildActor])
  <span class="keyword">def</span> receive = {
    <span class="keyword">case</span> name =&gt;
      <span class="keyword">val</span> f: Future[String] = (messageActor ask name).mapTo[String]
      f pipeTo sender
  }
}
<span class="class"><span class="keyword">class</span> <span class="title">GreetingsChildActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
  <span class="keyword">def</span> receive = { ...
  }
}
</pre></td></tr></table></figure>

<p>In this case we are using the ask method (you can use ? as well) of
the ActorRef to send and receive a response. Since messages are processed
asynchronously the ask method returns a Future.
The mapTo message allows us to transform
the message from Future[Any] to Future[String]. </p>
<p>The challenge is we don’t know
when the message will be ready so that we can send the reply to the sender. The
pipeTo pattern solves that problem by hooking up with the Future so that when the
future completes it can take the response inside the future and send it to the sender.</p>
]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day62-医药集中采购平台 用户管理]]></title>
    <link href="http://zhpooer.github.io/2014/07/22/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day62-%E5%8C%BB%E8%8D%AF%E9%9B%86%E4%B8%AD%E9%87%87%E8%B4%AD%E5%B9%B3%E5%8F%B0-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/07/22/传智播客day62-医药集中采购平台-系统管理/</id>
    <published>2014-07-22T06:22:07.000Z</published>
    <updated>2014-07-24T10:26:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">模型</h1>
<h2 id="-">单位信息</h2>
<p>系统中所有业务关联都是关联的单位信息表的id</p>
<p>卫生局管理卫生院, 卫生院管理医院, 行政管理</p>
<p>医院信息表(useryy)</p>
<ul>
<li>id</li>
<li>DQ, 地区, 村</li>
</ul>
<p>监督单位(userjd)</p>
<ul>
<li>DQ, 市或乡</li>
</ul>
<p>监督供应商(usergys)</p>
<p>供货商供货区域</p>
<ul>
<li>供货商id</li>
<li>地区</li>
</ul>
<p>bss_sys_area(区域表)</p>
<ul>
<li>areaid, 0:根, 1:某某市, 1.1:某某市某某区</li>
<li>areaname</li>
<li>arealevel, 行政级别</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>-<span class="ruby">- 供货商下面区域的卫生室 <span class="constant">TODO</span>
</span>-<span class="ruby">- camtasia recorder</span>
</pre></td></tr></table></figure>

<h2 id="-">用户信息</h2>
<p>sysuser(系统用户表)</p>
<ul>
<li>groupid, (用户类别: 系统管理员, 卫生局, 卫生院, 卫生室, 供货商)</li>
<li>sysid(单位id)</li>
<li>id, 关联信息</li>
<li>userid,账号</li>
<li>username</li>
<li>userstate, 用户状态(正常, 暂停)</li>
</ul>
<h1 id="-">系统用户列表</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="code"><pre><span class="annotation">@RequestMapping</span>(<span class="string">"/userquery"</span>)
<span class="keyword">public</span> String <span class="title">userquery</span>(Model model) {
    <span class="keyword">return</span> <span class="string">"userquery.jsp"</span>;
}

<span class="annotation">@RequestMapping</span>(<span class="string">"/userquery_result"</span>)
<span class="comment">// form 表单中的数据可以被序列化成 json 数据</span>
<span class="keyword">public</span> @ResponseBody DataGridResultInfo <span class="title">userquery_result</span>(
  SysuserQueryVo sysuserQueryvo,
  <span class="keyword">int</span> page,
  <span class="keyword">int</span> rows
) {
    <span class="keyword">if</span>(sysuserQueryvo = <span class="keyword">null</span>) sysuserQueryvo = <span class="keyword">new</span> SysuserQueryvo();
    <span class="comment">/// 查询列表的数量</span>
    <span class="keyword">int</span> count = userManagerService.findSysuserCount(sysuserQueryvo);
    <span class="comment">// 穿件分页参数</span>
    PageQuery pageQuery = <span class="keyword">new</span> PageQuery();
    pageQuery.setPageParams(count, rows, page);
    
    sysuserQeury.setPageQuery(pageQeury);
    <span class="comment">// 根据page 和rows查询数据列表</span>
    List list = userManagerList.findSysuserList(sysuserQueryVo);
    DataGridResultInfo dataResult = <span class="keyword">new</span> DataGridResultInfo();
    data.setTotal(count);
    data.setRows(list);
    <span class="keyword">return</span> data;
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysuserCustom</span> <span class="keyword">extends</span> <span class="title">Sysuser</span> {</span>}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysuserQueryVo</span> {</span>
    <span class="keyword">private</span> SysuserCustom sysuserCustom;
    <span class="keyword">private</span> PageQuery pageQeury; <span class="comment">// 封装 开始坐标, 结束坐标</span>
}

<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysuserMapperCustom</span> {</span>
<span class="comment">// 用户查询列表</span>
<span class="comment">// 用户查询总数</span>
}
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserManagerService</span> {</span>
<span class="comment">// 用户查询列表</span>
<span class="comment">// 用户查询总数</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre>&lt;mapper&gt;
    &lt;<span class="keyword">select</span> id=<span class="string">"findUserList"</span> parameterType=<span class="string">"vo.SysuserQueryVo"</span>
       resultType=<span class="string">"voSysuserCustom"</span>&gt;
          <span class="keyword">select</span> sysuser.id, sysuser.userid, sysuser.username, sysuer.groupid,
              nvl(sysuser,useryymc, nvl(sysuser.gysmc, sysuser.userjdmc)) sysmc <span class="keyword">from</span> (
                <span class="keyword">select</span> stsuser.*, useryy.mc, userjd.mc, usergys.mc <span class="keyword">from</span> sysuser
                  left <span class="keyword">join</span> useryy <span class="keyword">on</span> sysuser.sysid=useryy.id
                  left <span class="keyword">join</span> userjd <span class="keyword">on</span> sysuser.sysid=userjd.id
                  left <span class="keyword">join</span> usergys <span class="keyword">on</span> sysuser.sysid=usergys.id
              ) sysuser
          &lt;<span class="keyword">where</span>&gt;
          &lt;<span class="keyword">if</span> test=<span class="string">"sysuserCustom!=null"</span>&gt;
              &lt;<span class="keyword">if</span> test=<span class="string">"sysuserCustome.groupid!=null and sysuserCustom.groupid!=''"</span>&gt;
                  <span class="keyword">and</span> groupid=<span class="preprocessor">#{sysuserCustome.groupid}</span>
              &lt;/<span class="keyword">if</span>&gt;
              &lt;<span class="keyword">if</span> test=<span class="string">"sysuserCustome.userid!=null and sysuserCustom.userid!=''"</span>&gt;
                  <span class="keyword">and</span> userid=<span class="preprocessor">#{sysuserCustome.userid}</span>
              &lt;/<span class="keyword">if</span>&gt;
              &lt;<span class="keyword">if</span> test=<span class="string">"sysuserCustome.username!=null and sysuserCustom.username!=''"</span>&gt;
                  <span class="keyword">and</span> username <span class="keyword">like</span> <span class="comment">'%${sysuserCustome.username}%'</span>
              &lt;/<span class="keyword">if</span>&gt;
              &lt;<span class="keyword">if</span> test=<span class="string">"sysuserCustome.sysmc!=null and sysuserCustom.sysmc!=''"</span>&gt;
                  <span class="keyword">and</span> sysmc <span class="keyword">like</span><span class="comment">'%${sysuserCustome.sysmc}%'</span>
              &lt;/<span class="keyword">if</span>&gt; 
          &lt;/<span class="keyword">if</span>&gt;
          &lt;/<span class="keyword">where</span>&gt;
            -- 加入分页 写法 思路
            -- pageQuery.start
            -- pageQuery.<span class="keyword">end</span>
            <span class="keyword">select</span> * <span class="keyword">from</span> (
            <span class="keyword">select</span> rownum page_rownum, page_0.*
            <span class="keyword">from</span> (
              <span class="keyword">select</span> * <span class="keyword">from</span> user0
            ) page_0
              <span class="keyword">where</span> rownum&lt;=<span class="number">100</span>
            ) page_1
            <span class="keyword">where</span> page_1.page_rownum &gt; <span class="number">90</span>;
        &lt;/<span class="keyword">select</span>&gt;
        
    &lt;<span class="keyword">select</span> id=<span class="string">"findUserCount"</span> parameterType=<span class="string">"vo.SysuserQueryVo"</span>
      resultType=<span class="string">"int"</span>&gt;
        <span class="keyword">select</span> count(*) <span class="keyword">from</span> (
            <span class="keyword">select</span> stsuser.*, useryy.mc, userjd.mc, usergys.mc <span class="keyword">from</span> sysuser
              left <span class="keyword">join</span> useryy <span class="keyword">on</span> sysuser.sysid=useryy.id
              left <span class="keyword">join</span> userjd <span class="keyword">on</span> sysuser.sysid=userjd.id
              left <span class="keyword">join</span> usergys <span class="keyword">on</span> sysuser.sysid=usergys.id
            ) sysuser
        &lt;<span class="keyword">where</span>&gt;
            &lt;include refid=<span class="string">"query_sysuser_where"</span>&gt; &lt;/include&gt;
        &lt;/<span class="keyword">where</span>&gt;
    &lt;/<span class="keyword">select</span>&gt;
&lt;/mapper&gt;
</pre></td></tr></table></figure>

<h2 id="-">添加页面</h2>
<p>使用 jqueryEasyUI, modal 嵌套 iframe 来生成添加页面, <code>parent.closewindow()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">function</span> sysusersave(){
    <span class="keyword">if</span>($.formValidator.pageIsValidate()) {
        var formObj = $(<span class="string">"#formId"</span>);
        var options = {
            dataType: <span class="string">"json"</span>
            <span class="keyword">...</span>
        }
        // jquery form 提交
        formObj.ajaxSubmit(options);
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="code"><pre><span class="comment">// userAction</span>

<span class="comment">// 用户添加页面</span>
<span class="annotation">@RequestMapping</span>(<span class="string">"/useradd"</span>)
<span class="keyword">public</span> String <span class="title">useradd</span>(Model model) {
    <span class="keyword">return</span> <span class="string">"/base/user/useradd"</span>;
}


<span class="keyword">private</span> Sysuser sysuser;  <span class="comment">// 用于添加/修改用户信息提交</span>

<span class="comment">// 用户添加提交</span>
<span class="annotation">@RequestMapping</span>(<span class="string">"/useradd"</span>)
<span class="keyword">public</span> @ResponseBody ResultInfo <span class="title">useraddsubmit</span>(Model model, SysuserQueryvo sysuserQeuryVo) {
    sysuserQeury = sysuserQeuryVo != <span class="keyword">null</span> ? sysuserQeuryVo : <span class="keyword">new</span> SysuserQueryvo;
    ResultInfo resultInfo = <span class="keyword">null</span>;
    <span class="comment">// 调用service 添加用户</span>
    <span class="comment">// 捕获异常添加信息</span>
    <span class="keyword">try</span> {
       userManagerService.insertsysuser()
    } <span class="keyword">catch</span> (ResultInfoException e) {
       resutlInfo = e.getResultInfo();
    } <span class="keyword">catch</span> (Exception e){
        resultInfo = <span class="keyword">new</span> ResultInfo()
        resultInfo.setType(ResultInfo.TYPE_RESULT_FAIL);
        resultInfo.setMessage(<span class="string">"未知错误"</span>);
    }
    <span class="keyword">if</span>(resultInfo == <span class="keyword">null</span> ) {
    }
    <span class="keyword">return</span> resultInfo;
}

<span class="comment">// userManagerService</span>
<span class="comment">// 添加用户</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertsysUser</span>(Sysuser sysuser){
   <span class="comment">// 校验用户账号唯一</span>
   <span class="comment">// 根据用户账号查询数据库sysuser, 如果查出一条表示重复</span>
   Sysuser sysuser_l = findSysuserByUserid(sysuser.getUserId());
   <span class="keyword">if</span>( sysuser_l != <span class="keyword">null</span>) { <span class="comment">// 表示账号重复</span>
       ResultInfo info = <span class="keyword">new</span> ResultInfo;
       info.setType(ResultInfo.Failed);
       info.setMessage(<span class="string">"账号重复"</span>);
       <span class="comment">// 提示用户账号存在</span>
       <span class="keyword">throw</span> <span class="keyword">new</span> ResultInfoException(info);
   }
   
   <span class="comment">// 调用dao插入用户信息</span>
   <span class="comment">// 根据单位名称 得到单位id</span>
   <span class="comment">// 根据页面提交的groupid, 如果groupid等于1或2, 单位名称在 userjd 表存在</span>
   <span class="comment">// TODO 11.35</span>
   <span class="keyword">if</span>(groupid == <span class="string">"1"</span> || groupid == <span class="string">"2"</span>) {
       Userjd userjd = findUserjdByMc(mc);
       sysid == userjd.getId();
   } <span class="keyword">else</span> <span class="keyword">if</span>(groupid==<span class="string">"3"</span>) { <span class="comment">// 医院</span>
   } <span class="keyword">else</span> <span class="keyword">if</span>(groupid=n=<span class="string">"4"</span>) { <span class="comment">// 供货商</span>
   }
   sysuser.setId(UUIDBuild.getUUID());
   sysuser.setSysid(sysid);
   sysuserDao.insert(sysuser);
}

<span class="keyword">public</span> Sysuser <span class="title">findSysuserByUserid</span>(String userid) {
   SysuserExample sysuserExample = <span class="keyword">new</span> SysuserExample();
   SysuserExample.Criteria criteria = sysuperExample.createCriteria();
   criteria.addUseridEqualTo(sysuser.getUserid);
   List list = sysuserMapper.selectByExample(sysuserExample);
   <span class="keyword">if</span>(list!=<span class="keyword">null</span> && list.size()==<span class="number">1</span>) {
       <span class="keyword">return</span> list.get(<span class="number">0</span>);
   }
   <span class="keyword">return</span> <span class="keyword">null</span>;
}
</pre></td></tr></table></figure>

<p>自定义异常类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResultInfo</span> <span class="keyword">extends</span> <span class="title">Exception</span> {</span>
    <span class="comment">// 习题同一使用的结果类</span>
    <span class="keyword">private</span> ResultInfo resultInfo;
    <span class="keyword">public</span>  <span class="title">ExceptionResultInfo</span>(Info resultInfo){
    }
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span> {</span>
  <span class="keyword">private</span> <span class="keyword">int</span> type;
  <span class="keyword">private</span> String message;
}
</pre></td></tr></table></figure>

<h2 id="-">异常处理器</h2>
<p><code>yycg.base.process</code>, 存储信息处理类</p>
<p>全局异常处理器:
如果返回的类型是 json 数据, 异常以json返回.
如果返回的类型是 页面, 返回错误页面</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">&lt;!-- Http messageConverters，用于将对象转换为json输出到客户端 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jsonmessageConverter"</span>
    <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"handlerExceptionResolver"</span> <span class="attribute">class</span>=<span class="value">"ExceptionResolverCustom"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jsonmessageConverter"</span> <span class="attribute">ref</span>=<span class="value">"jsonmessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- web.xml --&gt;</span>
<span class="comment">&lt;!-- --&gt;</span>
<span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="comment">&lt;!-- 屏蔽自动注册异常处理器，固定使用bean的id为handlerExceptionResolver的异常处理器 --&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span> detectAllHandlerExceptionResolvers<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span> false <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
</pre></td></tr></table></figure>

<p>系统全局异常处理器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResolverCustom</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> {</span>
    <span class="comment">// json 转换</span>
    <span class="keyword">private</span> HttpMessageConverter&lt;ExceptionResultInfo&gt; jsonmessageConverter;
    
    <span class="keyword">public</span> ModelAndView <span class="title">resolverException</span>(request, response, handler, ex){
        <span class="comment">// 找action方法是否是标注了根据注解responseBody</span>
        <span class="comment">// 获取action的方法</span>
        HandlerMethod handlerMethod = (HandlerMethod) handler;
        Method method = handlerMethod.getMethod();
        ResponseBody responseBodyAnn = AnnotationUtils.findAnnotaion(method, ResponseBody.class);
        <span class="keyword">if</span>(responseBodyAnn!=<span class="keyword">null</span>) { <span class="comment">// 说明方法返回的responseBody注解</span>
            <span class="comment">// 处理返回类型是json的异常信息</span>
            <span class="comment">//创建http输出对象</span>
            HttpOutputMessage outputMessage = <span class="keyword">new</span> ServletServerHttpResponse(response);
            <span class="comment">//将异常信息输出json</span>
            jsonmessageConverter.write(value, MediaType.APPLICATION_JSON,outputMessage);
            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();
        }
        <span class="comment">// handler excpeption to get resultInfo</span>
        <span class="comment">// 返回的是页面</span>
        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();
        modelAndView.setViewName(<span class="string">"/base/error"</span>);
        modelAdnView.addObject(<span class="string">"exceptionresultInfo"</span>, resultInfo);
        <span class="keyword">return</span> modelAdnView;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> SubmitResultInfo {
    <span class="keyword">private</span> ResultInfo resultInfo;
}
</pre></td></tr></table></figure>

<h1 id="-">国际化</h1>
<p>Internationalization: I18N.</p>
<p><code>java.util.ResourceBundle</code>: 用于加载一个资源</p>
<p><code>java.util.Local</code>: 对应一个特定的国家/区域, 语言环境</p>
<p><code>java.text.MessageFormat</code>: 用于将消息的格式化</p>
<p>资源文件命名格式</p>
<pre><code>message_zh_CN.properties 中文, 中过
message_en_US.properties 英语, 美国
message.properties
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Locale locale = Locale.getDefault();

<span class="comment">// 先在 message_zh_CN找, 再到 message.proerties</span>
ResourceBundle rb = ResourceBundle.getResource(<span class="string">"message.properties"</span>, locale);
<span class="built_in">String</span> retValue = rb.getString(<span class="number">102</span>);

<span class="comment">// 102=恭喜你登陆成功{1}</span>
MessageFormat.format(retValue, <span class="keyword">new</span> <span class="built_in">Object</span>[]{<span class="string">"张三"</span>})
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>// <span class="number">208</span>=用户名已经存在
ResultUtils<span class="preprocessor">.throwException</span>(ResultUtils<span class="preprocessor">.createFail</span>(Config<span class="preprocessor">.Message</span>, <span class="number">208</span>, null))<span class="comment">;</span>

ResultUtils<span class="preprocessor">.createSubmitResult</span>(ResultUtils<span class="preprocessor">.createSuccess</span>(Config<span class="preprocessor">.Message</span>, <span class="number">906</span>, null))<span class="comment">;</span>
// 客户端封装函数 message_alert(value)<span class="comment">; value = {resultInfo...}</span>
</pre></td></tr></table></figure>

<h1 id="-">删除</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>// userManagerService
public void deleteSysuser(String id){
    // 校验用户是否存在
    Sysuser sysuser = sysuserMapper.selectByPrimaryKey(id)<span class="comment">;</span>
    <span class="keyword">if</span>(sysuser == null) {
        ResultUtils.throwException(ResultUtil.createWarning(config.Message, , null))<span class="comment">;</span>
    }
    sysuserMapper.deleteByPrimarKey(id)<span class="comment">;</span>
}

// action
@RequestMapping(<span class="string">"/userdelete"</span>)
public @ResponseBody SubmitResultInfo userdel(String deleteid){
    sysuserManager.deleteSysuser(deleteid)<span class="comment">;</span>
    <span class="keyword">return</span> ResultUtil.createSubmitResult(ResultUtils.createSuccess(cofnig.message, , null))<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h1 id="-">修改用户</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">// action 参考 添加用户, 要查询用户和单位名称 SysuserCustom</span>
<span class="comment">// BeanUtils.copyProperties(sysuser, sysuserCustomer);d</span>

<span class="comment">// service</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateSysuser</span>(Sysuser sysuser) {
    <span class="comment">// 校验用户</span>
    <span class="comment">// 如果根据主键查询出来一条记录, 如果这条记录的账号是自己的表示用户没有修改账号(userid</span>
    <span class="comment">// 如果查询出来的账号是别人, 抛出占用别人账号</span>
    
    <span class="comment">// 先查询用户信息</span>
    Sysuser sysuser_update = <span class="keyword">this</span>.findSysuserById(sysuser.getId());
    sysuser_update.setUsername();
    sysuser_update.setUserstate();
    <span class="comment">// ...userid username userstate sysid</span>
    <span class="comment">// 如果页面传过来密码信息表示用户要修改密码</span>
    <span class="comment">// 更新用户信息</span>
    <span class="comment">// 如果用户输入的单位id不存在, 则抛出提示信息</span>
    <span class="keyword">return</span> sysuserMapper.updateByPrimaryKey(sysuser);
}
<span class="comment">// 用户信息显示</span>
<span class="keyword">public</span> Sysuser <span class="title">findSysuserById</span>(String id) {
    <span class="comment">// 根据页面提交的账号查询用户信息</span>

    <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);
}
<span class="comment">// 医院信息显示</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUseryyBId</span>(String id) {
    <span class="keyword">return</span> useryyMapper.selectByPrimaryKey(id);
}
<span class="comment">// 供货商信息显示</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUsergysBId</span>(String id) {
    <span class="keyword">return</span> usergysMapper.selectByPrimaryKey(id);
}
<span class="comment">// 监督单位信息显示</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserjdBId</span>(String id) {
    <span class="keyword">return</span> userjdMapper.selectByPrimaryKey(id);
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day61-医药集中采购平台 框架搭建]]></title>
    <link href="http://zhpooer.github.io/2014/07/21/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day61-%E5%8C%BB%E8%8D%AF%E9%9B%86%E4%B8%AD%E9%87%87%E8%B4%AD%E5%B9%B3%E5%8F%B0-%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://zhpooer.github.io/2014/07/21/传智播客day61-医药集中采购平台-框架搭建/</id>
    <published>2014-07-21T01:13:07.000Z</published>
    <updated>2014-07-22T06:05:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">项目背景</h1>
<h1 id="-">用户角色</h1>
<p>监管单位: 卫生局, 卫生院</p>
<ul>
<li>控制</li>
<li>监视</li>
</ul>
<p>医院: 卫生室
TODO</p>
<p>供货商: 供货商</p>
<p>系统管理员</p>
<h1 id="-">业务流程</h1>
<p>角色的活动</p>
<h1 id="-">功能模块</h1>
<p>细化业务流程, 功能模块划分,
需求分析在项目当中, 要不断提炼, 维护</p>
<p>采购单管理</p>
<ul>
<li>创建采购单</li>
<li>采购单维护</li>
<li>采购单递交</li>
<li>采购单审核</li>
<li>采购单受理<ul>
<li>发货</li>
</ul>
</li>
<li>采购单入库</li>
</ul>
<p>退货单管理</p>
<ul>
<li>创建退货单</li>
<li>退货单维护</li>
<li>退货单递交</li>
<li>退货单受理</li>
</ul>
<p>结算单管理</p>
<ul>
<li>创建结算单</li>
<li>结算单维护</li>
<li>结算单递交</li>
<li>结算单受理</li>
</ul>
<p>系统管理</p>
<ul>
<li>角色管理</li>
<li>权限管理</li>
<li>用户管理</li>
<li>系统参数配置</li>
<li>系统日志</li>
<li>系统备份</li>
<li>数据字典维护</li>
<li>区域管理</li>
</ul>
<p>统计分析</p>
<ul>
<li>交易明细查询</li>
<li>按医院统计</li>
<li>按供货商统计</li>
<li>按药品统计</li>
</ul>
<p>药品目录</p>
<ul>
<li>维护药品目录</li>
<li>查询药品目录</li>
<li>医院采购目录</li>
<li>企业供货目录</li>
</ul>
<h1 id="-">用户需求</h1>
<h1 id="-">系统需求</h1>
<p>得出 <code>需求规格说明书</code>, 开发人员文档</p>
<p>在需求不明确时, 使用原型开发模型</p>
<p>在需求非常明确, 周期不长, 使用瀑布模型: 需求, 设计, 编码</p>
<p>需求明确, 但是周期很大, 使用增量模型</p>
<h1 id="-">项目开发</h1>
<h2 id="-">人员配置</h2>
<p>项目经理(1): 项目整体执行控制</p>
<p>架构师(1):</p>
<ul>
<li>系统架构搭建</li>
<li>系统集成</li>
<li>技术预研</li>
</ul>
<p>需求分析(2)</p>
<ul>
<li>需求调研分析</li>
<li>比阿奴啊系统规格说明书</li>
</ul>
<p>开发(5)</p>
<ul>
<li>系统模块开发编码</li>
<li>单元测试</li>
<li>参与系统集成</li>
<li>配合系统测试, 修改bug</li>
<li>配合系统产品化工作</li>
</ul>
<p>测试(3)</p>
<ul>
<li>编写测试用例</li>
<li>系统集成测试</li>
<li>系统功能测试</li>
<li>系统性能测试</li>
</ul>
<p>产品化(2)</p>
<ul>
<li>制作系统安装包</li>
<li>制作系统升级包</li>
</ul>
<p>系统(2)</p>
<ul>
<li>系统安装调试</li>
<li>培训</li>
</ul>
<h2 id="-">开发周期</h2>
<p>瀑布模型</p>
<ol>
<li>需求分析</li>
<li>设计</li>
<li>实施</li>
<li>测试</li>
</ol>
<p>增量模型:
企业中常用的模型, 当系统很大需要几次开发完成, 每次开发做一个版本,
正常进行系统安装升级工作</p>
<p>原型模型</p>
<p>需求阶段 30 工作日<br>开发阶段 90 工作日<br>测试阶段 90 工作日<br>部署阶段 30 工作日</p>
<h1 id="-">生产环境</h1>
<h2 id="oracle">oracle</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">-- 新建表空间</span>
<span class="operator"><span class="keyword">create</span> tablespace yycg0329;</span>
<span class="comment">-- oracle 用户名, 相当于 mysql 中的 数据库</span>
<span class="comment">-- 虚拟路径, 创建表空间, </span>
datafile `e:\oradata\yycgy\xxx.dbf`
size 32m
autoextend on
next 32m maxsize 2048m
extent management local;

<span class="comment">-- 创建用户,并指定表空间</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> yycg0329 identified <span class="keyword">by</span> yycg0329
<span class="keyword">default</span> tablespace yycg0329
<span class="keyword">temporary</span> tablespace tmp;</span>

<span class="comment">-- 授权</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource, dba <span class="keyword">to</span> yycg0329

-- 导入建表数据
@D:/<span class="keyword">sql</span>.<span class="keyword">sql</span></span>
</pre></td></tr></table></figure>

<h2 id="-">项目开发模块划分</h2>
<p>以技术框架纵向拆分, 技术层次清晰, 开发方便,
模块抽取困难(模块可重用性), 适用于小项目</p>
<pre><code>action
service
service.impl
dao
dao.mapper
jsp/view
</code></pre><p>以业务模块横向拆分, 代码可重用性强, 代码的包多, 不易维护, 适用于中大型的项目.
模块耦合非常强, 工作时要将所有模块下载进行编译</p>
<pre><code>user.action
user.service
user.dao
system.dao
system.action
system.service
</code></pre><p>通过maven解决模块耦合问题, 公司人力充足, 按模块分配人员, 适用于人力充足的公司</p>
<ul>
<li>用户管理(maven工程), <code>user</code></li>
<li>系统管理, <code>system</code></li>
<li>工具类, <code>util</code></li>
</ul>
<h2 id="-">本系统划分</h2>
<ul>
<li>base(基础模块), 系统管理 + business(业务管理), 药品目录, 采购单, 退货单, 统计分析<pre><code>  db.propertyies
  spring/applictionContext.xml
  spring/springmvc-servlet.xml
  spring/applicationContext-base-service.xml
  spring/applicationContext-base-dao.xml
  mybatis/SqlMapConfig.xml
</code></pre></li>
<li>util(工具工程)</li>
<li><p>技术架构模块(springmvc+mybatis), 引入springmvc 和 mybatis 的 jar 包</p>
<p>  yycg.base</p>
<pre><code>action
service
dao
</code></pre><p>  yycg.business</p>
<pre><code>action
service
dao
</code></pre></li>
</ul>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-type system]]></title>
    <link href="http://zhpooer.github.io/2014/07/19/scala-in-action-type-system/"/>
    <id>http://zhpooer.github.io/2014/07/19/scala-in-action-type-system/</id>
    <published>2014-07-19T08:46:35.000Z</published>
    <updated>2014-07-23T11:56:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>It provides the following features:</p>
<ul>
<li><em>Error detection</em>—Think of the compiler as a suite of test cases that can detect
common type and other program errors.</li>
<li><em>Abstractions</em>—This is the focus of this chapter. You’ll learn how the type system
provides abstractions to build components.</li>
<li><em>Documentation</em>—The signature of a function or method tells you a lot about
what it’s doing.</li>
<li><em>Efficiency</em>—The type system helps the compiler generate optimized binary code.</li>
</ul>
<p>scala 提供的抽象工具</p>
<table>
<thead>
<tr>
<th>Technique</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Modular mixin</td>
<td>a mechanism for composing traits for designing reusable components without the problems of multiple inheritance.</td>
</tr>
<tr>
<td>Abstract type</td>
<td>Scala lets you declare abstract type members to class, trait, and subclasses that can provide concrete types.</td>
</tr>
<tr>
<td>Self type</td>
<td>A minin use fields or methods of the class it’s mixed into</td>
</tr>
</tbody>
</table>
<h1 id="abstract-type-members">Abstract type members</h1>
<p>Abstract types are those whose identity is
unknown at the time of declaration.
Unlike concrete types, the type of an abstract type
member is specified during the concrete implementation
of the enclosing class.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Calculator</span> {</span> <span class="keyword">type</span> S }

<span class="class"><span class="keyword">class</span> <span class="title">SomeCalculator</span> <span class="keyword">extends</span> <span class="title">Calculator</span> {</span> <span class="keyword">type</span> S = String }
</pre></td></tr></table></figure>

<p>The benefit of abstract type members is they can hide the
internal information of a component. </p>
<p>You’re going to build a price
calculator that can take a product ID and return the price of the product. There can
be many ways to calculate the price, and each way could use a different type of data
source to retrieve the price.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>trait Calculator {
  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>:</span> DbConnection
  <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(s: DbConnection)</span>:</span> Unit
  <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(productId: String)</span>:</span> Double = {
    val s = initialize
    val price = calculate(s, productId)
    close(s)
    price
  }
  <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(s: DbConnection, productId: String)</span>:</span> Double
</pre></td></tr></table></figure>

<p>The problem with the current implementation is that it’s hard-wired to a DAO,
and a calculator that uses a different kind of data source
won’t be able to use the calculator.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>// 模板方法
trait Calculator {
  type S
  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span>:</span> S
  <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(s: S)</span>:</span> Unit
  <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(productId: String)</span>:</span> Double = {
    val s = initialize
    val price = calculate(s, productId)
    close(s)
    price
  }
  <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(s: S, productId: String)</span>:</span> Double
}
</pre></td></tr></table></figure>

<h1 id="self-type-members">Self type members</h1>
<p>The self type annotation allows you to access members of a mixin trait or class, and
the Scala compiler ensures that all the dependencies are correctly wired before you’re
allowed to instantiate the class. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>trait B {
  <span class="function"><span class="keyword">def</span> <span class="title">b</span>:</span>Unit = ...
}
//  trait A <span class="keyword">is</span> defining a dependency to trait B
trait A {  self: B =&gt;
  <span class="function"><span class="keyword">def</span> <span class="title">a</span>:</span>Unit = b
}
</pre></td></tr></table></figure>

<p>Because the required services are annotated with self type this , you can still access
those services, and the Scala compiler will ensure that the final class gets mixed with a
trait or a class that implements RequiredServices. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Connection</span> {</span>
  <span class="keyword">def</span> query(q: String): String
}
<span class="class"><span class="keyword">trait</span> <span class="title">Logger</span> {</span>
  <span class="keyword">def</span> log(l: String): Unit
}
<span class="class"><span class="keyword">trait</span> <span class="title">RequiredServices</span> {</span>
  <span class="keyword">def</span> makeDatabaseConnection: Connection
  <span class="keyword">def</span> logger: Logger
}

<span class="class"><span class="keyword">trait</span> <span class="title">ProductFinder</span> {</span> <span class="keyword">this</span>: RequiredServices =&gt;
  <span class="keyword">def</span> findProduct(productId: String) = {
    <span class="keyword">val</span> c = makeDatabaseConnection
    c.query(<span class="string">"find the lowest price"</span>)
    logger.log(<span class="string">"querying database..."</span>)
  }
}
<span class="comment">// 有点像spring的简化</span>
<span class="class"><span class="keyword">trait</span> <span class="title">TestServices</span> <span class="keyword">extends</span> <span class="title">RequiredServices</span> {</span>
  <span class="keyword">def</span> makeDatabaseConnection =
    <span class="keyword">new</span> Connection { <span class="keyword">def</span> query(q: String) = <span class="string">"test"</span> }
  <span class="keyword">def</span> logger = <span class="keyword">new</span> Logger { <span class="keyword">def</span> log(l: String) = println(l) }
}

<span class="class"><span class="keyword">object</span> <span class="title">FinderSystem</span> <span class="keyword">extends</span> <span class="title">ProductFinder</span> <span class="keyword">with</span> <span class="title">TestServices</span></span>
</pre></td></tr></table></figure>

<h1 id="building-a-scalable-component">Building a scalable component</h1>
<p>To build a generic product ordering system. It will be reusable in that a user can
order any kind of product.</p>
<ul>
<li>An order component that represents the order placed by the customer.</li>
<li>An inventory component that stores the products. You need to check the
inventory to make sure you have the product before you place the order.</li>
<li>A shipping component that knows how to ship an order to customer.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>trait OrderingSystem {
  type O &lt;: Order
  type I &lt;: Inventory
  type S &lt;: Shipping
  trait Order { <span class="function"><span class="keyword">def</span> <span class="title">placeOrder</span> <span class="params">(i: I)</span>:</span> Unit }
  trait Inventory { <span class="function"><span class="keyword">def</span> <span class="title">itemExists</span><span class="params">(order: O)</span>:</span> Boolean }
  trait Shipping {<span class="function"><span class="keyword">def</span> <span class="title">scheduleShipping</span><span class="params">(order: O)</span>:</span> Long }
</pre></td></tr></table></figure>

<p>You still need to implement the steps for placing the order. Here they are:</p>
<ul>
<li>Check whether that item exists in inventory.</li>
<li>Place the order against the inventory. (Inventory will reduce the count by the
amount of product in the inventory.)</li>
<li>Schedule the order for shipping.</li>
<li>If the item doesn’t exist in inventory, return without placing the order and
possibly notify Inventory to replenish the product.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>// declared <span class="keyword">in</span> OrderingSystem
// Self type annotation <span class="keyword">for</span> two mixin traits
trait Ordering { this: I <span class="keyword">with</span> S =&gt;
  <span class="function"><span class="keyword">def</span> <span class="title">placeOrder</span><span class="params">(o: O)</span>:</span> Option[Long] = {
    <span class="keyword">if</span>(itemExists(o)) {
      o.placeOrder (this)
      Some(scheduleShipping(o))
    }
    <span class="keyword">else</span> <span class="keyword">None</span>
  }
}
</pre></td></tr></table></figure>

<p>to use it</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> <span class="title">BookOrderingSystem</span> <span class="keyword">extends</span> <span class="title">OrderingSystem</span> {</span>
  <span class="keyword">type</span> O = BookOrder
  <span class="keyword">type</span> I = AmazonBookStore
  <span class="keyword">type</span> S = UPS
  <span class="class"><span class="keyword">class</span> <span class="title">BookOrder</span> <span class="keyword">extends</span> <span class="title">Order</span> {</span>
    <span class="keyword">def</span> placeOrder(i: AmazonBookStore): Unit = ...
  }
  <span class="class"><span class="keyword">trait</span> <span class="title">AmazonBookStore</span> <span class="keyword">extends</span> <span class="title">Inventory</span> {</span>
    <span class="keyword">def</span> itemExists(o: BookOrder) = ...
  }
  <span class="class"><span class="keyword">trait</span> <span class="title">UPS</span> <span class="keyword">extends</span> <span class="title">Shipping</span> {</span>
    <span class="keyword">def</span> scheduleShipping(order: BookOrder): Long = ...
  }
  <span class="class"><span class="keyword">object</span> <span class="title">BookOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span> <span class="keyword">with</span> <span class="title">AmazonBookStore</span> <span class="keyword">with</span> <span class="title">UPS</span></span>
}

<span class="keyword">import</span> BookOrderingSystem._
BookOrdering.placeOrder(<span class="keyword">new</span> BookOrder)
</pre></td></tr></table></figure>

<h1 id="building-an-extensible-component">Building an extensible component</h1>
<h2 id="the-expression-problem-and-the-extensibility-challenge">THE EXPRESSION PROBLEM AND THE EXTENSIBILITY CHALLENGE</h2>
<p>The goal is to define a data type and operations on that data type in which one can
add new data types and operations without recompiling existing code, but while
retaining static type safety.</p>
<p>Any implementation of the expression problem should satisfy the following
requirements:</p>
<ul>
<li>Extensibility in both dimensions. You should be able to add new types
and operations that work on all the types.
(I look into this in detail in this section.)</li>
<li>Strong static type-safety. Type casting and reflection are out of the question.</li>
<li>No modification of the existing code and no duplication.</li>
<li>Separate compilation.</li>
</ul>
<h2 id="practice-example">practice example</h2>
<p>You have a payroll system that
processes salaries for full-time employees in the United States and Canada:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Employee</span><span class="params">(name: String, id: Long)</span></span>

<span class="class"><span class="keyword">trait</span> <span class="title">Payroll</span> {</span>
  <span class="keyword">def</span> processEmployees(employees: Vector[Employee]): Either[String, Throwable]
}

<span class="class"><span class="keyword">class</span> <span class="title">USPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
  <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) = ...
}

<span class="class"><span class="keyword">class</span> <span class="title">CanadaPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
  <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) = ...
}

<span class="comment">// With current changes in the business, you also have to process salaries of full-time</span>
<span class="comment">// employees in Japan. </span>
<span class="class"><span class="keyword">class</span> <span class="title">JapanPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
  <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) = ...
}
</pre></td></tr></table></figure>

<p>This is one type of extension the expression problem talks about.
The solution is type-safe, and you can add JapanPayroll as an extension
and plug it in to an existing payroll system with a separate compilation.</p>
<p>What happens when you try to add a new operation?</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// In this case the business has decided to hire contractors,</span>
<span class="comment">// and you also have to process their monthly pay.</span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Employee</span><span class="params">(name: String, id: Long)</span></span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Contractor</span><span class="params">(name: String)</span></span>
<span class="comment">//  The new Payroll interface should look like the following:</span>
<span class="class"><span class="keyword">trait</span> <span class="title">Payroll</span> <span class="keyword">extends</span> <span class="title">super</span>.<span class="title">Payroll</span> {</span>
  <span class="keyword">def</span> processEmployees(
      employees: Vector[Employee]): Either[String, Throwable]
  <span class="keyword">def</span> processContractors(
      contractors: Vector[Contractor]): Either[String, Throwable]
}
</pre></td></tr></table></figure>

<p>The problem is you can’t go back and modify the trait because that will force you to
rebuild everything—which you can’t do because of the constraint put on you by the
expression problem.</p>
<p>Using the Visitor pattern to solve this problem.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">USPayroll</span> {</span>
  <span class="keyword">def</span> accept(v: PayrollVisitor) = v.visit(<span class="keyword">this</span>)
}
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">CanadaPayroll</span> {</span>
  <span class="keyword">def</span> accept(v: PayrollVisitor) = v.visit(<span class="keyword">this</span>)
}
<span class="class"><span class="keyword">trait</span> <span class="title">PayrollVisitor</span> {</span>
  <span class="keyword">def</span> visit(payroll: USPayroll): Either[String, Throwable]
  <span class="keyword">def</span> visit(payroll: CanadaPayroll): Either[String, Throwable]
}
<span class="class"><span class="keyword">class</span> <span class="title">EmployeePayrollVisitor</span> <span class="keyword">extends</span> <span class="title">PayrollVisitor</span> {</span>
  <span class="keyword">def</span> visit(payroll: USPayroll): Either[String, Throwable] = ...
  <span class="keyword">def</span> visit(payroll: CanadaPayroll): Either[String, Throwable] = ...
}

<span class="comment">// you can easily create a new class called ContractorPayrollVisitor</span>
<span class="class"><span class="keyword">class</span> <span class="title">ContractorPayrollVisitor</span> <span class="keyword">extends</span> <span class="title">PayrollVisitor</span> {</span>
  <span class="keyword">def</span> visit(payroll: USPayroll): Either[String, Throwable] = ...
  <span class="keyword">def</span> visit(payroll: CanadaPayroll): Either[String, Throwable] = ...
}
<span class="comment">// Using the Visitor pattern, it’s easy to add new operations,</span>
<span class="comment">// but what about type</span>
</pre></td></tr></table></figure>

<p>If you try to add a new type called JapanPayroll, you have a problem.
You have to go back and change all the visitors
to accept a JapanPayroll type.</p>
<h2 id="solving-the-expression-problem">SOLVING THE EXPRESSION PROBLEM</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">PayrollSystem</span> {</span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Employee</span><span class="params">(name: String, id: Long)</span></span>
  <span class="keyword">type</span> P &lt;: Payroll
  <span class="class"><span class="keyword">trait</span> <span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processEmployees(
      employees: Vector[Employee]): Either[String, Throwable]
  }
  <span class="keyword">def</span> processPayroll(p: P): Either[String, Throwable]
}

<span class="class"><span class="keyword">trait</span> <span class="title">USPayrollSystem</span> <span class="keyword">extends</span> <span class="title">PayrollSystem</span> {</span>
  <span class="class"><span class="keyword">class</span> <span class="title">USPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) =
      Left(<span class="string">"US payroll"</span>)
  }
}

<span class="class"><span class="keyword">trait</span> <span class="title">CanadaPayrollSystem</span> <span class="keyword">extends</span> <span class="title">PayrollSystem</span> {</span>
  <span class="class"><span class="keyword">class</span> <span class="title">CanadaPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) =
      Left(<span class="string">"Canada payroll"</span>)
  }
}

<span class="class"><span class="keyword">object</span> <span class="title">USPayrollInstance</span> <span class="keyword">extends</span> <span class="title">USPayrollSystem</span> {</span>
  <span class="keyword">type</span> P = USPayroll
  <span class="keyword">def</span> processPayroll(p: USPayroll) = {
    <span class="keyword">val</span> employees: Vector[Employee] = ...
    <span class="keyword">val</span> result = p.processEmployees(employees)
    ...
  }
}

<span class="comment">// add new Payroll Type</span>
<span class="class"><span class="keyword">trait</span> <span class="title">JapanPayrollSystem</span> <span class="keyword">extends</span> <span class="title">PayrollSystem</span> {</span>
  <span class="class"><span class="keyword">class</span> <span class="title">JapanPayroll</span> <span class="keyword">extends</span> <span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processEmployees(employees: Vector[Employee]) = ...
  }
}

<span class="comment">// Now add a new method to the Payroll trait</span>
<span class="comment">// without recompiling everything</span>
<span class="class"><span class="keyword">trait</span> <span class="title">ContractorPayrollSystem</span> <span class="keyword">extends</span> <span class="title">PayrollSystem</span> {</span>
  <span class="keyword">type</span> P &lt;: Payroll
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Contractor</span><span class="params">(name: String)</span></span>
  <span class="class"><span class="keyword">trait</span> <span class="title">Payroll</span> <span class="keyword">extends</span> <span class="title">super</span>.<span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processContractors(
        contractors: Vector[Contractor]): Either[String, Throwable]
  }
}

<span class="class"><span class="keyword">trait</span> <span class="title">USContractorPayrollSystem</span> <span class="keyword">extends</span> <span class="title">USPayrollSystem</span> <span class="keyword">with</span></span>
    ContractorPayrollSystem {
  <span class="class"><span class="keyword">class</span> <span class="title">USPayroll</span> <span class="keyword">extends</span> <span class="title">super</span>.<span class="title">USPayroll</span> <span class="keyword">with</span> <span class="title">Payroll</span> {</span>
    <span class="keyword">def</span> processContractors(contractors: Vector[Contractor]) =
      Left(<span class="string">"US contract payroll"</span>)
  }
}

<span class="comment">// use it</span>
<span class="class"><span class="keyword">object</span> <span class="title">RunNewPayroll</span> {</span>
  <span class="class"><span class="keyword">object</span> <span class="title">USNewPayrollInstance</span> <span class="keyword">extends</span> <span class="title">USContractorPayrollSystem</span> {</span>
    <span class="keyword">type</span> P = USPayroll
    <span class="keyword">def</span> processPayroll(p: USPayroll) = {
      p.processEmployees(Vector(Employee(<span class="string">"a"</span>, <span class="number">1</span>)))
      p.processContractors(Vector(Contractor(<span class="string">"b"</span>)))
      Left(<span class="string">"payroll processed successfully"</span>)
    }
  }
  <span class="keyword">def</span> main(args: Array[String]): Unit = run
  
  <span class="keyword">def</span> run = {
    <span class="keyword">val</span> usPayroll = <span class="keyword">new</span> USPayroll
    USNewPayrollInstance.processPayroll(usPayroll)
  }
}
</pre></td></tr></table></figure>

<h1 id="types-of-types">Types of types</h1>
<h2 id="structural-types">Structural types</h2>
<p>Structural typing in Scala is the way to describe types by their structure, not by their
names, as with other typing.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">def</span> close(closable: { <span class="keyword">def</span> close: Unit }) = {
  closable.close
}

<span class="comment">// used like this</span>
<span class="keyword">type</span> Closable = { <span class="keyword">def</span> close: Unit }
<span class="keyword">def</span> close(closable: { <span class="keyword">def</span> close: Unit }) = {
  closable.close
}

<span class="keyword">def</span> amountPaidAsSalary2(workers: Vector[{<span class="keyword">def</span> salary: BigDecimal }]) = {
}
</pre></td></tr></table></figure>

<h2 id="higher-kinded-types">Higher-kinded types</h2>
<p>Higher-kinded types are types that know how to create a
new type from the type argument.</p>
<p>The <code>scala.collections.immutable.List[+A]</code> is
an example of a higher-kinded type. It takes a type
parameter and creates a new concrete type.
import <code>scala.language.higherKinds</code> to enable it</p>
<h2 id="phantom-types">Phantom types</h2>
<p>Phantom types are types that don’t provide any constructors to create values. You only
need these types during compile time to enforce constraints. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>case class <span class="keyword">Order</span>(itemId: Option[<span class="keyword">Item</span>], address: Option[<span class="keyword">String</span>])

def addItem(item: <span class="keyword">String</span>, o: <span class="keyword">Order</span>) =
  <span class="keyword">Order</span> (Some(item), o.shippingAddress)
def addShipping(address: <span class="keyword">String</span>, o: <span class="keyword">Order</span>) =
  <span class="keyword">Order</span> (o.itemId, Some(address))
def placeOrder (o: <span class="keyword">Order</span>) = <span class="list">{ ... }</span>
</pre></td></tr></table></figure>

<p>The problem with this approach is that the methods could get called out of order. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>sealed trait ItemProvided
sealed trait NoItem
sealed trait AddressProvided
sealed trait NoAddress

case class Order[<span class="link_label">A, B, C</span>](<span class="link_url">itemId: Option[String], shippingAddress: Option[String]</span>)

def emptyOrder = Order[<span class="link_label">InCompleteOrder, NoItem, NoAddress</span>](<span class="link_url">None, None</span>)

def addItem[<span class="link_label">A, B</span>](<span class="link_url">item: String, o: Order[A, NoItem, B]</span>) =
  o.copy[<span class="link_label">A, ItemProvided, B</span>](<span class="link_url">itemId = Some(item</span>))

def addShipping[<span class="link_label">A, B</span>](<span class="link_url">address: String, o: Order[A, B, NoAddress]</span>) =
  o.copy[<span class="link_label">A, B, AddressProvided</span>](<span class="link_url">shippingAddress = Some(address</span>))

def placeOrder (o: Order[InCompleteOrder, ItemProvided, AddressProvided]) ={
  ...
  o.copy[OrderCompleted, ItemProvided, AddressProvided]()
}
</pre></td></tr></table></figure>

<h1 id="ad-hoc-polymorphism-with-type-classes">Ad hoc polymorphism with type classes</h1>
<p>Ad hoc polymorphism is a kind of polymorphism in which
polymorphic functions can be applied to arguments of different types.
Ad hoc polymorphism lets you add features to a type any time you want.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">XmlConverter</span>[<span class="title">A</span>] {</span>
  <span class="keyword">def</span> toXml(a: A): String
}

<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Movie</span><span class="params">(name: String, year: Int, rating: Double)</span></span>

<span class="class"><span class="keyword">object</span> <span class="title">Converters</span> {</span>
  implicit <span class="class"><span class="keyword">object</span> <span class="title">MovieConverter</span> <span class="keyword">extends</span> <span class="title">XmlConverter</span>[<span class="title">Movie</span>] {</span>
    <span class="keyword">def</span> toXml(a: Movie) = &lt;movie&gt;
            &lt;name&gt;{a.name}&lt;/name&gt;
            &lt;year&gt;{a.year}&lt;/year&gt;
            &lt;rating&gt;{a.rating}&lt;/rating&gt;
        &lt;/movie&gt;.toString
  }
}

<span class="class"><span class="keyword">object</span> <span class="title">Main</span> {</span>
  <span class="keyword">import</span> Converters._
  <span class="keyword">def</span> toXml[A](a: A)(implicit converter: XmlConverter[A]) =
      converter.toXml(a)
  <span class="keyword">def</span> main(args: Array[String]) = {
    <span class="keyword">val</span> p = Movie(<span class="string">"Inception"</span>, <span class="number">2010</span>, <span class="number">10</span>)
    toXml(p)
  }
}

<span class="comment">// 可以写成这样, scala2.8 之后的语法糖</span>
<span class="keyword">def</span> toXml[A: XmlConverter](a: A) =
   implicitly[XmlConverter[A]].toXml(a)
</pre></td></tr></table></figure>

<h2 id="solving-the-expression-problem-using-type-classes">Solving the expression problem using type classes</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
</pre></td><td class="code"><pre><span class="keyword">import</span> scala.langage.higherkinds

<span class="class"><span class="keyword">object</span> <span class="title">PayrollSystemWithTypeclass</span> {</span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Employee</span><span class="params">(name: String, id: Long)</span></span>
  <span class="class"><span class="keyword">trait</span> <span class="title">PayrollProcessor</span>[<span class="title">C</span>[<span class="title">_</span>], <span class="title">A</span>] {</span>
    <span class="keyword">def</span> processPayroll(payees: Seq[A]): Either[String, Throwable]
  }
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">USPayroll</span>[<span class="title">A</span>]<span class="params">(payees: Seq[A])</span></span>
       (implicit processor: PayrollProcessor[USPayroll, A]) {
    <span class="keyword">def</span> processPayroll = processor.processPayroll(payees)
  }
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">CanadaPayroll</span>[<span class="title">A</span>]<span class="params">(payees: Seq[A])</span></span>
      (implicit processor: PayrollProcessor[CanadaPayroll, A]){
    <span class="keyword">def</span> processPayroll = processor.processPayroll(payees)
  }
}

<span class="class"><span class="keyword">object</span> <span class="title">PayrollProcessors</span> {</span>
  <span class="keyword">import</span> PayrollSystemWithTypeclass._
  implicit <span class="class"><span class="keyword">object</span> <span class="title">USPayrollProcessor</span> <span class="keyword">extends</span> <span class="title">PayrollProcessor</span>[<span class="title">USPayroll</span>, <span class="title">Employee</span>] {</span>
    <span class="keyword">def</span> processPayroll(payees: Seq[Employee]) = Left(<span class="string">"us employees are processed"</span>)
  }
  implicit <span class="class"><span class="keyword">object</span> <span class="title">CanadaPayrollProcessor</span> <span class="keyword">extends</span> <span class="title">PayrollProcessor</span>[<span class="title">CanadaPayroll</span>, <span class="title">Employee</span>] {</span>
    <span class="keyword">def</span> processPayroll(payees: Seq[Employee]) =
        Left(<span class="string">"canada employees are processed"</span>)
  }
}
<span class="comment">// 扩展他时</span>

<span class="class"><span class="keyword">object</span> <span class="title">PayrollSystemWithTypeclassExtension</span> {</span>
  <span class="keyword">import</span> PayrollSystemWithTypeclass._
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">JapanPayroll</span>[<span class="title">A</span>]<span class="params">(payees: Vector[A])</span></span>
        (implicit processor: PayrollProcessor[JapanPayroll, A]) {
    <span class="keyword">def</span> processPayroll = processor.processPayroll(payees)
  }
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Contractor</span><span class="params">(name: String)</span></span>
}

<span class="class"><span class="keyword">object</span> <span class="title">PayrollProcessorsExtension</span> {</span>
  <span class="keyword">import</span> PayrollSystemWithTypeclassExtension._
  <span class="keyword">import</span> PayrollSystemWithTypeclass._
  implicit <span class="class"><span class="keyword">object</span> <span class="title">JapanPayrollProcessor</span> <span class="keyword">extends</span></span>
        PayrollProcessor[JapanPayroll, Employee] {
    <span class="keyword">def</span> processPayroll(payees: Seq[Employee]) =
         Left(<span class="string">"japan employees are processed"</span>)
  }
}

implicit <span class="class"><span class="keyword">object</span> <span class="title">USContractorPayrollProcessor</span></span>
      <span class="keyword">extends</span> PayrollProcessor[USPayroll, Contractor] {
  <span class="keyword">def</span> processPayroll(payees: Seq[Contractor]) =
        Left(<span class="string">"us contractors are processed"</span>)
}
<span class="comment">// TODO</span>

<span class="class"><span class="keyword">object</span> <span class="title">RunNewPayroll</span> {</span>
  <span class="keyword">import</span> PayrollSystemWithTypeclass._
  <span class="keyword">import</span> PayrollProcessors._
  <span class="keyword">import</span> PayrollSystemWithTypeclassExtension._
  <span class="keyword">import</span> PayrollProcessorsExtension._
  <span class="keyword">def</span> main(args: Array[String]): Unit = run
  <span class="keyword">def</span> run = {
    <span class="keyword">val</span> r1 = JapanPayroll(Vector(Employee(<span class="string">"a"</span>, <span class="number">1</span>))).processPayroll
    <span class="keyword">val</span> r2 = JapanPayroll(Vector(Contractor(<span class="string">"a"</span>))).processPayroll
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day60-CXF]]></title>
    <link href="http://zhpooer.github.io/2014/07/19/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day60-cxf/"/>
    <id>http://zhpooer.github.io/2014/07/19/传智播客day60-cxf/</id>
    <published>2014-07-19T01:41:34.000Z</published>
    <updated>2014-07-19T11:57:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>Apache CXF = Celtix + Xfire, 开源 web Service 框架, 支持多种协议,
soap1.2,1.1, XML/HTTP, RESTful, CORBA</p>
<p>Cxf基于SOA总线结果, 依靠 spring 完成模块的集成</p>
<h1 id="demo">demo</h1>
<h2 id="-">服务端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="annotation">@WebService</span>(targetNamespace=<span class="string">"http://itcast.cn"</span>,
       serviceName=<span class="string">"WeatherService"</span>)
<span class="comment">// 如果要使用1.2协议, 要加上这个注解</span>
<span class="annotation">@BindingType</span>(javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING) 
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWeatherService</span> {</span>
    <span class="annotation">@WebMethod</span>(operationName=<span class="string">"queryWeatherByCityName"</span>)
    <span class="keyword">public</span> @<span class="title">WebResult</span>(name=<span class="string">"weatherResult"</span>) String queryWeatherByCityName(<span class="annotation">@WebParam</span>(<span class="string">"cityname"</span>) String city){}
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherService</span> <span class="keyword">implements</span> <span class="title">IWeatherService</span> {</span>
    <span class="keyword">public</span> String <span class="title">queryWeatherByCityName</span>(String cityName){
        <span class="keyword">return</span> <span class="string">"晴朗"</span>;
    }
}

publci <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
    JaxWsServerFactoryBean jaxWsServerFactoryBean = <span class="keyword">new</span> JaxWsServerFactoryBean();
    <span class="comment">/// webservice服务地址</span>
    jaxWsServerFactoryBean.setAddress(<span class="string">"http://ip:port/weather"</span>);
    <span class="comment">// 设置 prottype</span>
    jaxWsServerFactoryBean.sestServiceClass(WeaterServiceInterface.class);
    <span class="comment">// 设置 serviceBean(服务运行实例)</span>
    jaxWsServerFactoryBean.setServiceBean(<span class="keyword">new</span> WeatherServiceImpl.class);

    <span class="comment">// 添加输入拦截器, 在运行代码前执行</span>
    jaxWsServerFactoryBean.getInInterceptpor().add(<span class="keyword">new</span> LoggingInInterceptor());
    <span class="comment">// 添加输出拦截器,  在运行代码后执行</span>
    jaxWsServerFactoryBean.getOutInerceptpor().add(<span class="keyword">new</span> LoggingOutInterceptor());

    <span class="comment">// 发布服务</span>
    jaxWsServerFactoryBean.create();
}
</pre></td></tr></table></figure>

<h2 id="-">客户端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// 产生客户端代码</span>
<span class="comment">// wsdl2java -d . http://ip:port/weather?wsdl</span>
<span class="keyword">public</span> <span class="keyword">class</span> WeatherClient {
     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String [] args) {
         JaxWsProxyFactoryBean jaxWsProxyFactoryBean = <span class="keyword">new</span> JaxWsProxyFactoryBean();
         <span class="comment">// 设置的调用地址</span>
         jaxWsProxyFactoryBean.setAddress(<span class="string">"http://ip:port/weather"</span>);
         <span class="comment">// 设置portType</span>
         jaxWsProxyFactoryBean.setServiceClass(WeatherService.class);
         <span class="comment">// 获取调用实例</span>
         WeatherServiceInterface weatherServiceInterface = jaxWsProxyFactoryBean.create();
         <span class="comment">// 调用</span>
         String result = weatherServiceInterface.queryWeather(<span class="string">"郑州"</span>);
     }
}
</pre></td></tr></table></figure>

<h1 id="cxf-spring-">Cxf 与 spring 集成</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="attribute">xmlns:jaxws</span>=<span class="value">"http://cxf.apache.org/jaxws"</span>
       <span class="attribute">xmlns:jaxrs</span>=<span class="value">"http://cxf.apache.org/jaxrs"</span>
       <span class="attribute">xmlns:cxf</span>=<span class="value">"http://cxf.apache.org/core"</span>
       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
                           http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
                           http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd"</span>&gt;</span>
    <span class="comment">&lt;!-- 也可以这样定义  --&gt;</span>
    <span class="comment">&lt;!-- &lt;jaxws:endpoint address="" implementor=""&gt; --&gt;</span>
    <span class="comment">&lt;!-- &lt;/jaxws:endpoint&gt; --&gt;</span>
    <span class="tag">&lt;<span class="title">jaxws:server</span> <span class="attribute">id</span>=<span class="value">"weather"</span> <span class="attribute">address</span>=<span class="value">"/weather"</span> 
           <span class="attribute">serviceClass</span>=<span class="value">"cn.itcast.ws.cxf.server.WeatherInterface"</span>&gt;</span>
        <span class="comment">&lt;!-- 发布服务的类 --&gt;</span>
        <span class="tag">&lt;<span class="title">jaxws:serviceBean</span>&gt;</span>
            <span class="comment">&lt;!-- 也可以这样 &lt;ref bean="weatherServer"/&gt; --&gt;</span>
            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.ws.cxf.server.WeatherInterfaceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">jaxws:serviceBean</span>&gt;</span>
        <span class="tag">&lt;<span class="title">jaxws:inInterceptors</span>&gt;</span>
            <span class="comment">&lt;!-- 输入日志拦截器 --&gt;</span>
            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"LoggingInIntercetpor"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">jaxws:inInterceptors</span>&gt;</span>
        <span class="tag">&lt;<span class="title">jaxws:outInterceptors</span>&gt;</span>
            <span class="comment">&lt;!-- 输出日志拦截器 --&gt;</span>
            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"LoggingOutIntercetpor"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">jaxws:outInterceptors</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">jaxws:server</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">&lt;!-- web.xml --&gt;</span>
<span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">description</span>&gt;</span>Apache CXF Endpoint<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
    <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/ws/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">客户端调用</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="attribute">xmlns:jaxws</span>=<span class="value">"http://cxf.apache.org/jaxws"</span>
       <span class="attribute">xmlns:jaxrs</span>=<span class="value">"http://cxf.apache.org/jaxrs"</span>
       <span class="attribute">xmlns:cxf</span>=<span class="value">"http://cxf.apache.org/core"</span>
       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
                           http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
                           http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd"</span>&gt;</span>

<span class="tag">&lt;<span class="title">jaxws:client</span> <span class="attribute">id</span>=<span class="value">"weatherClient"</span> <span class="attribute">address</span>=<span class="value">"http://ip:port/ws/weather"</span>
        <span class="attribute">serviceClass</span>=<span class="value">"WeatherServiceInterface"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">jaxws:client</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (){
     ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);
     WeatherServiceInterface weatherClient = applicationContext.getBean(<span class="string">"weatherClient"</span>);
     String result = weatherClient.query(<span class="string">"郑州"</span>);
}
</pre></td></tr></table></figure>

<h1 id="-">身份过滤</h1>
<p>Apache WSS4J（WebService Security For Java）实现了JAVA 语言的 WS-Security，
CXF 中使用拦截器机制完成 WSS4J 功能的支持 WSS4JInInterceptor 和 WSS4JOutInterceptor</p>
<p><code>WSS4JInInterceptor</code> 输入拦截器，用于服务端校验密码</p>
<p><code>WSS4JOutInterceptor</code> 输出拦截器，用于客户端发送密码</p>
<h2 id="-">服务端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 配置安全认证拦截器 --&gt;</span>
<span class="tag">&lt;<span class="title">jaxws:inInterceptors</span>&gt;</span>
  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.cxf.interceptor.LoggingInInterceptor"</span> /&gt;</span>
  <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"wss4jInInterceptor"</span> <span class="attribute">class</span>=<span class="value">"org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">constructor-arg</span>&gt;</span>
      <span class="tag">&lt;<span class="title">map</span>&gt;</span>
         <span class="comment">&lt;!-- 认证方式 --&gt;</span>
         <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"action"</span> <span class="attribute">value</span>=<span class="value">"UsernameToken"</span> /&gt;</span>
         <span class="comment">&lt;!-- 加密方式 PasswordDigest：md5加密，PasswordText：明文--&gt;</span>
         <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"passwordType"</span> <span class="attribute">value</span>=<span class="value">"PasswordText"</span> /&gt;</span>
         <span class="comment">&lt;!-- 密码回调方法 --&gt;</span>
         <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"passwordCallbackClass"</span> <span class="attribute">value</span>=<span class="value">"cn.itcast.ws.cxf.server.interceptor.ServerPasswordCallbackHandler"</span> /&gt;</span>
      <span class="tag">&lt;/<span class="title">map</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">jaxws:inInterceptors</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerPasswordCallbackHandler</span> <span class="keyword">implements</span> <span class="title">CallbackHandler</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span>(Callback[] callbacks) {
         <span class="comment">// 校验用户身份</span>
         WSPasswordCallback wsPwCallback = callbacks[<span class="number">0</span>];
         String userid_fromclient = wsPwCallback.getIdentifier();
         <span class="comment">///  如果校验用户身份通过这是将</span>
         <span class="keyword">if</span>(userid_fromclient.equals(userid)) {
             <span class="comment">// 用户身份校验通过</span>
             wsPasswordCallback.setPassword(passwd); <span class="comment">//填充正确密码</span>
         } <span class="keyword">else</span> {
             <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"用户身份不合法"</span>);
         }
    }
}
</pre></td></tr></table></figure>

<h2 id="-">客户端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 客户端调用实例 --&gt;</span>
<span class="tag">&lt;<span class="title">jaxws:client</span> <span class="attribute">id</span>=<span class="value">"weatherServicePort"</span>
  <span class="attribute">address</span>=<span class="value">"http://localhost:8080/14webservice_cxf_spring/ws/weather?wsdl"</span> <span class="attribute">serviceClass</span>=<span class="value">"webservice.itcast.cn.WeatherServicePort"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">jaxws:outInterceptors</span>&gt;</span>
        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"wss4jOutInterceptor"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">jaxws:outInterceptors</span>&gt;</span>
<span class="tag">&lt;/<span class="title">jaxws:client</span>&gt;</span>

<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"wss4jOutInterceptor"</span> <span class="attribute">class</span>=<span class="value">"org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">constructor-arg</span>&gt;</span>
    <span class="tag">&lt;<span class="title">map</span>&gt;</span>
      <span class="comment">&lt;!-- 用户认证方式与服务端一致 --&gt;</span>
      <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"action"</span> <span class="attribute">value</span>=<span class="value">"UsernameToken"</span> /&gt;</span>
      <span class="comment">&lt;!-- 初始化用户令牌，不能为空, 是默认值, 可以在 callback 中重新赋值  --&gt;</span>
      <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"mrt"</span> /&gt;</span>
      <span class="comment">&lt;!-- 密码加密方式 ,PasswordDigest：md5加密，PasswordText：明文--&gt;</span>
      <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"passwordType"</span> <span class="attribute">value</span>=<span class="value">"PasswordDigest"</span> /&gt;</span>
      <span class="comment">&lt;!-- 密码回调 --&gt;</span>
      <span class="tag">&lt;<span class="title">entry</span> <span class="attribute">key</span>=<span class="value">"passwordCallbackClass"</span>
          <span class="attribute">value</span>=<span class="value">"cn.itcast.ws.cxf.client.interceptor.ClientPasswordCallbackHandler"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">map</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">constructor-arg</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientPasswordCallbackHandler</span> <span class="keyword">implements</span> <span class="title">CallbackHandler</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span>(Callback[] callbacks) {
        WSPasswordCallback wspassCallback = (WSPasswordCallback) callbacks[<span class="number">0</span>];
		wspassCallback.setPassword(PASSWORD);
		wspassCallback.setIdentifier(USER);
    }
}
</pre></td></tr></table></figure>

<h1 id="-">便民查询网站</h1>
<p>使用springmvc+CXF实现便民网站，同时对外提供webservice服务。
调用别人webservice，将自己的服务发布成webservice</p>
<p><img src="/img/webservice_demo.png" alt="案例分析"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherClient</span> {</span>
    <span class="comment">// 从公网查询天气, 将查询到的内容全部返回</span>
    <span class="keyword">public</span> List&lt;String&gt; <span class="title">queryWeatherByCityName</span>(String cityname) {
        <span class="comment">// 获取服务视图</span>
        WeatherWebService weatherWebService = <span class="keyword">new</span> WeatherWebService();
        <span class="comment">// 获取 portType</span>
        WeatherWebServiceSoap weatherWebServiceSoap =  weatherWebService.getWeatherWebServiceSoap();
        ArrayOfString arrayOfString = weatherWebServiceSoap.getWeatherbyCityName(cityname);
        List&lt;String&gt; resultlist = arrayOfString.getString();
        <span class="keyword">return</span> resultlist;
    }
}

<span class="comment">// 天气查询的结果信息</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> {</span>
    <span class="keyword">private</span> String result; <span class="comment">// 天气概况</span>
    <span class="keyword">private</span> String img; <span class="comment">// 天气图片</span>
    <span class="keyword">private</span> String img2; <span class="comment">// 天气图片</span>
}

<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWeatherService</span> {</span>
    <span class="keyword">public</span> List&lt;Weather&gt; <span class="title">queryWeatherByCityName</span>(String cityname);
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherServiceImpl</span> <span class="keyword">implements</span> <span class="title">IWeatherService</span> {</span>
    <span class="annotation">@Autowired</span>
    <span class="keyword">private</span> WeatherClient weatherClient;
    
    <span class="keyword">public</span> List&lt;Weather&gt; <span class="title">queryWeatherByCityName</span>(String cityname){
        List&lt;String&gt; resutsList = weatherClient.queryWeatherByCityName(cityname);

        List&lt;Weather&gt; list = <span class="keyword">new</span> ArrayList&lt;Weather&gt;();
        
        WeatherModel weatherModel = <span class="keyword">new</span> WeatherModel();
        <span class="comment">// ... list.weatherModel();</span>
        <span class="keyword">return</span> list;
    }
}

<span class="comment">// 天气查询控制层</span>
<span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherAction</span> {</span>

    <span class="annotation">@Autowired</span>
    WeatherServiceInterface weatherServiceInterface;
    
    <span class="annotation">@RequestMapping</span>(<span class="string">"/queryWeather"</span>)
    <span class="keyword">public</span> String <span class="title">queryWeather</span>(String cityName, Model model) {
        <span class="comment">// 调用服务层未来查询三天的天气</span>
        List&lt;Weather&gt; list = weatherServiceInterface.queryWeatherByCityName(cityName);
        model.addAttribute(<span class="string">"weatherresult"</span>, list);
        <span class="keyword">return</span> <span class="string">"queryweather"</span>; <span class="comment">// 返回天气查询页面</span>
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
	<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns:jaxws</span>=<span class="value">"http://cxf.apache.org/jaxws"</span>
	<span class="attribute">xmlns:jaxrs</span>=<span class="value">"http://cxf.apache.org/jaxrs"</span> <span class="attribute">xmlns:cxf</span>=<span class="value">"http://cxf.apache.org/core"</span>
	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
				            http://www.springframework.org/schema/beans/spring-beans.xsd
				            http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
				            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
				            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd"</span>&gt;</span>
                            
<span class="comment">&lt;!-- 定义天气查询服务的bean --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"weatherService"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.ws.cxf.service.impl.WeatherServiceInterfaceImpl"</span> /&gt;</span>

<span class="comment">&lt;!-- 公网天气查询客户端 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"webWeatherClient"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.ws.cxf.client.WeatherClient"</span> /&gt;</span>

<span class="comment">&lt;!-- 启动webservice服务，启动之后外边用户可以访问此webservice --&gt;</span>
<span class="tag">&lt;<span class="title">jaxws:server</span>  <span class="attribute">id</span>=<span class="value">"weatherServer"</span> <span class="attribute">address</span>=<span class="value">"/weather"</span> <span class="attribute">serviceClass</span>=<span class="value">"cn.itcast.ws.cxf.service.WeatherServiceInterface"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">jaxws:serviceBean</span>&gt;</span>
        <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"weatherService"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">jaxws:serviceBean</span>&gt;</span>
    <span class="comment">&lt;!-- 添加日志拦截器 --&gt;</span>
    <span class="tag">&lt;<span class="title">jaxws:inInterceptors</span>&gt;</span>
        <span class="comment">&lt;!--输入日志拦截器 --&gt;</span>
        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.cxf.interceptor.LoggingInInterceptor"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">jaxws:inInterceptors</span>&gt;</span>
    <span class="comment">&lt;!-- 输出日志拦截器 --&gt;</span>
    <span class="tag">&lt;<span class="title">jaxws:outInterceptors</span>&gt;</span>
        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.apache.cxf.interceptor.LoggingOutInterceptor"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">jaxws:outInterceptors</span>&gt;</span>
<span class="tag">&lt;/<span class="title">jaxws:server</span>&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>springmvc-servlet.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns:mvc</span>=<span class="value">"http://www.springframework.org/schema/mvc"</span>
    <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
    <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span> <span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd "</span>&gt;</span>
        
<span class="comment">&lt;!-- 如果使用组件扫描就不用再配置contrller的bean --&gt;</span>
<span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"cn.itcast.ws.cxf.action"</span> /&gt;</span>
<span class="comment">&lt;!-- 使用注解驱动带替下边配置的映射器和适配置器 --&gt;</span>
<span class="tag">&lt;<span class="title">mvc:annotation-driven</span> /&gt;</span>
<span class="comment">&lt;!-- 注解映射器 --&gt;</span>	
<span class="comment">&lt;!-- &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" /&gt; --&gt;</span>
<span class="comment">&lt;!-- 注解适配器 --&gt;</span>
<span class="comment">&lt;!-- &lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt;
    &lt;property name="messageConverters"&gt;
        &lt;list&gt;
            &lt;bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"&gt;&lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt; --&gt;</span>

<span class="comment">&lt;!-- jsp视图解析器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> &gt;</span>
    <span class="comment">&lt;!-- 前缀 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 后缀 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>web.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attribute">id</span>=<span class="value">"WebApp_ID"</span> <span class="attribute">version</span>=<span class="value">"2.5"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>07193webservice_cxf_spring<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span>
    <span class="comment">&lt;!-- 加载spring环境 --&gt;</span>
    <span class="tag">&lt;<span class="title">context-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>/WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">context-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener</span>&gt;</span>
      <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span> org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
    <span class="comment">&lt;!-- 配置cxf的servlet --&gt;</span>
    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span> <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/ws/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
    <span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span>
    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
        <span class="comment">&lt;!-- 如果这里不配置contextConfigLocation，会自动找"servlet名称+-servlet.xml"--&gt;</span>
        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
             <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
             <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
    <span class="comment">&lt;!-- post提交解析乱码过虑器 --&gt;</span>
    <span class="tag">&lt;<span class="title">filter</span>&gt;</span>
        <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>CharacterEncoding<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
  	    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
  		    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
  		    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
  	    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
  	    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>CharacterEncoding<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
  	    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">welcome-file-list</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="title">welcome-file</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">welcome-file-list</span>&gt;</span>
<span class="tag">&lt;/<span class="title">web-app</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day59-Webservice]]></title>
    <link href="http://zhpooer.github.io/2014/07/18/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day59-Webservice/"/>
    <id>http://zhpooer.github.io/2014/07/18/传智播客day59-Webservice/</id>
    <published>2014-07-18T01:08:54.000Z</published>
    <updated>2014-07-19T03:56:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="socket">Socket</h1>
<p>模拟天气查询 API</p>
<p>服务端</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">// 启动端口监听, 端口号建议在1万以后</span>
ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);

<span class="keyword">while</span>(){
    Socket socket = serverSocket.accept();
    <span class="comment">// 获取输入流</span>
    DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(socket.getInputStream());
    
    <span class="comment">// 获取输出流</span>
    DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());
    
    <span class="comment">// 接收客户端请求的数据</span>
    <span class="built_in">String</span> cityName = dataInputStream.readUTF();
    
    dataOutputStream.write(<span class="string">"天气晴朗"</span>);
    
    dataOutputStream.close();
    dataInputStream.close();
    <span class="comment">// socket不用释放, 客户端socket关闭, 服务端自动关闭</span>
}
</pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>Socket socket = <span class="built_in">new</span> Socket(<span class="string">"localhost"</span>,<span class="number"> 10001</span>);

<span class="comment">// 获取输入流</span>
DataInputStream dataInputStream = <span class="built_in">new</span> DataInputStream(socket.getInputStream());

<span class="comment">// 获取输出流</span>
DataOutputStream dataOutputStream = <span class="built_in">new</span> DataOutputStream(socket.getOutputStream());

dataOutputStream.writeUTF(<span class="string">"上海"</span>);

String result = dataInputStream.readUTF();
dataOutputStream.<span class="built_in">close</span>();
dataInputStream.<span class="built_in">close</span>();
socket.<span class="built_in">close</span>();
</pre></td></tr></table></figure>

<h1 id="webservice">Webservice</h1>
<p>JAX-WS 的全称为 Java API for XML-Based Webservices</p>
<p>Webservice底层基于socket通信，采用soap协议进行通信，
webservice不需专门针对数据流的发送和接收进行处理，
是针对web开发远程调用的一种技术。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// 服务端</span>

<span class="comment">// 编写SEI(Service Endpoint Interface)</span>
<span class="comment">// SEI在webservice中称为port</span>
<span class="comment">// 在java中称为接口，接口类型叫portType</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherInterface</span> {</span>
    <span class="comment">//天气查询</span>
    <span class="keyword">public</span> String <span class="title">queryWeather</span>(String cityName);
}

<span class="annotation">@WebService</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">WeatherInterface</span> {</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> String <span class="title">queryWeather</span>(String cityName) {
        System.out.println(<span class="string">"from client.."</span>+cityName);
        String result = <span class="string">"晴朗"</span>;
        System.out.println(<span class="string">"to client..."</span>+result);
        <span class="keyword">return</span> result;
    }
    <span class="comment">// 访问 http://192.168.1.100:1234/weather?wsdl 可以查询 webservice 说明</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        <span class="comment">//发送webservice服务</span>
        Endpoint.publish(<span class="string">"http://192.168.1.100:1234/weather"</span>,
            <span class="keyword">new</span> WeatherInterfaceImpl());
    }
}
</pre></td></tr></table></figure>

<p>分析服务说明, 网络描述语言, 基于 xml</p>
<ul>
<li>从下往上</li>
</ul>
<h2 id="-">客户端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 根据ws描述文件, 自动生成 java 客户端代码</span>
<span class="comment">// wsimport -s . http://192.168.1.100:1234/weather?wsdl</span>

<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(){
    <span class="comment">// 调用webservice服务</span>
    <span class="comment">// 创建服务视图service</span>
    WeatherServerService weatherServerService = <span class="keyword">new</span> WeatherServerService();

    <span class="comment">// 服务视图bingding获取porttype</span>
    WeatherServer weatherServer = weatherServerService.getWeatherServerPort();
    <span class="comment">// 通过 protType 调用 werbService方法</span>
    String result = weatherServer.queryWeather(<span class="string">"郑州"</span>);
}
</pre></td></tr></table></figure>

<h1 id="-webservice">什么是 webservice</h1>
<ul>
<li>Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。</li>
<li>采用标准SOAP(Simple Object Access Protocol) 协议传输，soap属w3c标准。</li>
<li>基于http传输xml，即soap=http+xml</li>
<li>采用wsdl作为描述语言即webservice使用说明书，wsdl属w3c标准。</li>
<li>xml和XSD(XML Schema Datatypes)是webservice的跨平台的基础，
XML主要的优点在于它既与平台无关，又与厂商无关。
XML是由万维网协会(W3C)创建，W3C制定的XSD定义了一套标准的数据类型，
数据类型用xml进行描述。</li>
</ul>
<h2 id="-">三要素</h2>
<h3 id="soap">soap</h3>
<p>SOAP即简单对象访问协议(Simple Object Access Protocal)
是一种简单的基于 XML 的协议，
它使应用程序通过 HTTP 来交换信息，简单理解为soap=http+xml。</p>
<p>Soap协议版本主要使用soap1.1、soap1.2</p>
<p>SOAP可以运行在任何其他应用协议上。例如，SMTP、tr069等。</p>
<h3 id="wsdl">wsdl</h3>
<p>WSDL 是基于 XML 的用于描述Web Service及其函数、参数和返回值。
通俗理解Wsdl是webservice的使用说明书。</p>
<h3 id="uddi">UDDI</h3>
<p>UUDI 是一种目录服务，通过它，
企业可注册并搜索 Web services。
企业将自己提供的Web Service注册在UDDI，
也可以使用别的企业在UDDI注册的web service服务，从而达到资源共享。</p>
<h2 id="-">应用场景</h2>
<ul>
<li><p>应用程序集成</p>
<p>  分布式程序之间进行集成使用webservice直接调用服务层方法，
  不仅缩短了开发周期，还减少了代码复杂度，并能够增强应用程序的可维护性。</p>
</li>
<li><p>软件重用        </p>
<p>  将一个软件的功能以webservice方式暴露出来，达到软件重用。
  例如上边分析的天气预报，
  将天气查询功能以webservice接口方式暴露出来非常容易集成在其它系统中；
  再比如一个第三方物流系统将快递查询、快递登记暴露出来，
  从而集成在电子商务系统中。</p>
</li>
<li><p>跨防火墙通信</p>
<p>  因为webservice和网页程序都是运行在web容器且用相同的端口和协议。</p>
</li>
</ul>
<p>不使用 webservice</p>
<ul>
<li>单个程序间通信, 当应用之间需要通信且无需将接口暴露给第三方系统时
完全没有必要使用webservice技术，
这时企业自定义一种简单的接口协议即可，简单高效</li>
<li>同构程序间通信, 同构程序是指采用相同的编程语言的程序之间通信，
比如java远程调用RMi技术就可以非常高效的实现远程调用，使用简单方便，
必需保证两边应用都是java编写才可用使</li>
</ul>
<p>优点：</p>
<ol>
<li>采用xml支持跨平台远程调用。</li>
<li>基于http的soap协议，可跨越防火墙。</li>
<li>支持面向对象开发。</li>
<li>有利于软件和数据重用，实现松耦合。</li>
</ol>
<p>缺点：</p>
<ol>
<li>由于soap是基于xml传输，本身使用xml传输会传输一些无关的东西从而效率不高，随着soap协议的完善，
soap协议增加了许多内容，这样就导致了使用soap协议去完成简单的数据传输的效率更加不高。</li>
<li>webservice作为web跨平台访问的标准技术，很多公司都限定要求使用webservice，
其实对于简单的接口如果直接用http传输自定义数据内容比webservice开发更快捷，
例如第三方支付公司的支持接口。</li>
</ol>
<h1 id="wsdl">wsdl</h1>
<p>WSDL 指网络服务描述语言(Web Services Description Language)。</p>
<p>WSDL是一种使用 XML 编写的文档。这种文档可描述某个 Web service。它可规定服务的位置，以及此服务提供的操作（或方法）。</p>
<p>WSDL 是一种 XML 文档</p>
<p>WSDL 用于描述网络服务</p>
<p>WSDL 也可用于定位网络服务</p>
<h2 id="wsdl-">wsdl 说明书结构</h2>
<ul>
<li><code>&lt;service&gt;</code> 整个webservice的服务视图，它包括了所有的服务端点</li>
<li><code>&lt;binding&gt;</code> 为每个端口定义消息格式和协议细节</li>
<li><code>&lt;portType&gt;</code> 描述 web service可被执行的操作，以及相关的消息，
通过binding指向portType</li>
<li><code>&lt;message&gt;</code> 定义一个操作（方法）的数据参数(可有多个参数)</li>
<li><code>&lt;types&gt;</code> 定义 web service 使用的全部数据类型</li>
</ul>
<h1 id="-javax-xml-ws-service-">使用javax.xml.ws.Service 进行客户端编程</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">// 创建 url, 指定webservice地址</span>
<span class="comment">// 参数是wsdl的地址</span>
Url url = <span class="keyword">new</span> Url(<span class="string">"http://localhost:1234/weather?wsdl"</span>);

<span class="comment">// 创建Qname，指定命名空间和视图名称</span>
<span class="comment">// 第一个参数是 webservice的namespace</span>
<span class="comment">// 第二个参数是 webService的服务视图</span>
QName qName = <span class="keyword">new</span> QName(<span class="string">"http://server.jaxws.ws.itcast.cn/"</span>, <span class="string">"WeatherServerService"</span>);

<span class="comment">// 创建服务视图 service</span>
Servic service = Service.create(url, qName);

<span class="comment">// 通过服务视图 获取 PortType</span>
<span class="comment">// 从服务视图中得到服务端点即服务接口</span>
WeatherWebServiceSoap soap = service.getPort(WeatherWebServiceSoap.class);
<span class="comment">// 通过服务端点调用服务方法</span>
<span class="built_in">String</span> result = soap.getWeatherByCityName(<span class="string">"郑州"</span>);
</pre></td></tr></table></figure>

<h1 id="soap">SOAP</h1>
<p>SOAP 是一种网络通信协议</p>
<p>SOAP即SimpleObjectAccessProtocol简易对象访问协议</p>
<p>SOAP 用于跨平台应用程序之间的通信</p>
<p>SOAP 被设计用来通过因特网(http)进行通信</p>
<p>SOAP ＝ HTTP+XML，其实就是通过HTTP发xml数据</p>
<p>SOAP 很简单并可扩展支持面向对象</p>
<p>SOAP 允许您跨越防火墙</p>
<p>SOAP 将被作为 W3C 标准来发展</p>
<h2 id="-http-soap-">使用工具监视http协议和Soap协议</h2>
<p>使用firefox监视http的协议格式</p>
<pre><code> http： 请求方式：get或post
  get：
 请求： ContentType =text/html;charset=utf-8
 响应 ： ContentType = text/html;charset=utf-8
  post：
 请求： ContentType = application/x-www-form-urlencoded
 响应 ： ContentType = text/html;charset=utf-8
 soap协议无法用浏览器监视，因为webservice没有通过浏览器
</code></pre><p>使用Myeclipse  的WebService Explorer监视soap协议体</p>
<p>使用TCP/IP Monitor监视soap协议体和协议头</p>
<h2 id="-">组成</h2>
<p>soap1.1 和 soap1.2 区别</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>soap1<span class="number">.1</span>:
Post
Content-<span class="class"><span class="keyword">type</span>:<span class="title">text</span>/<span class="title">xml</span>;<span class="title">charset</span>=</span><span class="string">'utf-8'</span>

soap1<span class="number">.2</span>:
Post
Content-<span class="class"><span class="keyword">type</span>:<span class="title">application</span>/<span class="title">soap</span>+<span class="title">xml</span>;</span>
</pre></td></tr></table></figure>

<p>请求和响应都是如下格式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0"?&gt;</span>
<span class="comment">&lt;!-- 此元素将整个 XML 文档标识为一条 SOAP 消息 --&gt;</span>
<span class="tag">&lt;<span class="title">soap:Envelope
</span>      <span class="attribute">xmlns:soap</span>=<span class="value">"http://www.w3.org/2001/12/soap-envelope"</span>
      <span class="attribute">soap:encodingStyle</span>=<span class="value">"http://www.w3.org/2001/12/soap-encoding"</span>&gt;</span>
    <span class="comment">&lt;!-- 可选的 Header 元素，包含头部信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">soap:Header</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">soap:Header</span>&gt;</span>
    <span class="comment">&lt;!-- 包含所有的调用和响应信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">soap:Body</span>&gt;</span>
        <span class="comment">&lt;!-- 供有关在处理此消息所发生错误的信息 --&gt;</span>
        <span class="tag">&lt;<span class="title">soap:Fault</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">soap:Fault</span>&gt;</span> 
    <span class="tag">&lt;/<span class="title">soap:Body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">soap:Envelope</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">注解</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="annotation">@Webservice</span>(targetNamespace=<span class="string">"http://webservice.itcast.cn/"</span>
    serviceName=<span class="string">"WeatherService"</span>,
    portName=<span class="string">"WeatherServicePort"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherServer</span> <span class="keyword">implements</span> <span class="title">WeatherInterface</span>{</span>
    <span class="annotation">@WebMethod</span>(operationName=<span class="string">"queryWeatherByCityName"</span>)
    <span class="keyword">public</span> @<span class="title">WebResult</span>(name=<span class="string">"weatherResult"</span>) String queryWeather(<span class="annotation">@WebParam</span>(name=<span class="string">"cityName"</span>) String city){}

    <span class="comment">// 不暴露接口</span>
    <span class="annotation">@WebMethod</span>(exclude=<span class="keyword">true</span>)
    <span class="keyword">public</span> String <span class="title">notpublic</span>(){}
    
}
</pre></td></tr></table></figure>

<h1 id="-">使用复杂类型</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> WeatherInterface {
    <span class="comment">// 返回未来三天的天气</span>
    <span class="keyword">public</span> List&lt;WeatherModel&gt; <span class="title">queryWeatherAll</span>();
}

<span class="keyword">public</span> <span class="keyword">class</span> WeatherModel {
     <span class="keyword">private</span> String cityName;
     <span class="keyword">private</span> Date date;
     <span class="keyword">private</span> Integer temperator_max;
     <span class="keyword">private</span> Interger temperator_min;
}

@Override
<span class="keyword">public</span> List&lt;WeatherModel&gt; <span class="title">queryWeatherAll</span>(){
     WeatherModel m1 = <span class="keyword">new</span> WeatherModel();
     WeatherModel m2 = <span class="keyword">new</span> WeatherModel();
     WeatherModel m3 = <span class="keyword">new</span> WeatherModel();
     <span class="keyword">return</span> <span class="keyword">new</span> ArrayList({m1, m2, m3});
}
</pre></td></tr></table></figure>

<h1 id="-web-">发布为web工程</h1>
<ul>
<li>下载<code>jaxws-ri-2.2.8</code>的扩展包</li>
<li>创建web工程</li>
<li>将扩展包中的jar拷贝至web工程下</li>
<li><p>编写服务端代码，编写方法与之前我们学习的 jax-ws 方法一致</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="annotation">@WebService</span>
<span class="annotation">@BindingType</span>(value=<span class="string">"http://www.w3.org/2003/05/soap/bindings/HTTP/"</span>) <span class="comment">// 用于生成 soap1.2</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherService</span> <span class="keyword">implements</span> <span class="title">IWeatherService</span> {</span>
}
</pre></td></tr></table></figure>
</li>
<li><p>根据类生成 wsdl 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="subst">--</span> <span class="attribute">-cp</span> classpath 目录
<span class="subst">--</span> <span class="attribute">-r</span> 输出wsdl路径
<span class="subst">--</span> <span class="attribute">-wsdl</span>:Xsoap1<span class="number">.2</span> 
wsgen <span class="attribute">-wsdl</span>:Xsoap1<span class="number">.1</span> <span class="attribute">-cp</span> <span class="built_in">.</span>/WEB<span class="attribute">-INF</span>/classes <span class="attribute">-r</span> <span class="built_in">..</span>/wsdl server<span class="built_in">.</span>WeatherServer
</pre></td></tr></table></figure>
</li>
<li><p>在 <code>WEB-INFO</code> 下创建 <code>sun-jaxws.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">endpoints</span> <span class="attribute">xmlns</span>=<span class="value">'http://java.sun.com/xml/ns/jax-ws/ri/runtime'</span>
           <span class="attribute">version</span>=<span class="value">'2.0'</span>&gt;</span>
    <span class="tag">&lt;<span class="title">endpoint</span> <span class="attribute">name</span>=<span class="value">'WeatherServer'</span>
            <span class="attribute">implementation</span>=<span class="value">'cn.itcast.ws.server.WeatherServer'</span>
            <span class="attribute">wsdl</span>=<span class="value">'WEB-INF/wsdl/WeatherServerService.wsdl'</span>
            <span class="attribute">binding</span>=<span class="value">"http://www.w3.org/2003/05/soap/bindings/HTTP/"</span> 
            <span class="attribute">url-pattern</span>=<span class="value">'/weather'</span>/&gt;</span>
    <span class="comment">&lt;!-- 可以在这里添加多个 endpoint  --&gt;</span>
<span class="tag">&lt;/<span class="title">endpoints</span>&gt;</span>

<span class="comment">&lt;!-- soap1.1 --&gt;</span>
<span class="tag">&lt;<span class="title">endpoints</span> <span class="attribute">xmlns</span>=<span class="value">'http://java.sun.com/xml/ns/jax-ws/ri/runtime'</span>
    <span class="attribute">version</span>=<span class="value">'2.0'</span>&gt;</span>
    <span class="tag">&lt;<span class="title">endpoint</span> <span class="attribute">name</span>=<span class="value">'ServerJws'</span> <span class="attribute">implementation</span>=<span class="value">'cn.itcast.weather.server.ServerJws'</span>
        <span class="attribute">wsdl</span>=<span class="value">'WEB-INF/wsdl/WeatherServerService.wsdl'</span>
        <span class="attribute">url-pattern</span>=<span class="value">'/weather'</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">endpoints</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>配置web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">listener</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>
    com.sun.xml.ws.transport.http.servlet.WSServletContextListener
    <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>  
<span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>weather<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>
    com.sun.xml.ws.transport.http.servlet.WSServlet
    <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
<span class="comment">&lt;!-- /weather必须和sun-jaxws.xml中的url-pattern="/weather"相同 --&gt;</span>
<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>weather<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/weather<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>访问tomcat下的web工程即可(<a href="http://ip:端口/工程目录/weather" target="_blank">http://ip:端口/工程目录/weather</a>)</p>
</li>
</ul>
<p>注意, 如果要发布 soap1.2协议, 必须使用方法 <code>wsdl:Xsoap1.2</code>生成 wsdl,
另外, 服务类添加 <code>@BindingType</code></p>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="webservice" scheme="http://zhpooer.github.io/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-working with scala]]></title>
    <link href="http://zhpooer.github.io/2014/07/17/scala-in-action-working-with-scala/"/>
    <id>http://zhpooer.github.io/2014/07/17/scala-in-action-working-with-scala/</id>
    <published>2014-07-17T03:35:34.000Z</published>
    <updated>2014-07-19T08:24:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="building-web-application">Building web application</h1>
<h2 id="-">用户故事</h2>
<p>You can move one more story from the ready phase to the
dev phase. A pair of developers looking for new work can select a card from the ready
phase and move that card to the dev phase. Once the development work is done, the
card moves to the test phase where, in this stage, a tester, business analyst, or other
members of the team will verify the work against the user story. When the story is
approved or verified, it’s moved to the deploy phase, which means it’s ready for pro-
duction deployment. This is how a card (work) flows through the system.</p>
<ul>
<li>As a customer, I want to create a new user story so I can add stories to the ready phase.</li>
<li>As a developer, I want to move cards (stories) from one phase to another so I can signal
progress.</li>
</ul>
<h2 id="sbt">sbt</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>// The following expression will <span class="operator"><span class="keyword">create</span> a Setting[String] setting:
&gt; <span class="keyword">set</span> name := <span class="string">"Testing SBT"</span>
[info] Reapplying settings...
[info] <span class="keyword">Set</span> <span class="keyword">current</span> project <span class="keyword">to</span> Testing SBT
&gt; <span class="keyword">set</span> version := <span class="string">"1.0"</span>
[info] Reapplying settings...
[info] <span class="keyword">Set</span> <span class="keyword">current</span> project <span class="keyword">to</span> Testing SBT
&gt; <span class="keyword">session</span> save</span>
</pre></td></tr></table></figure>

<p>Settings are the way SBT stores the build definition. A build definition defines a list
of Setting[T] where Setting[T] is a transformation affecting SBT’s key value pair.
A Setting is created assigning value to SettingKey. There are three kinds of keys
in the SBT:</p>
<ul>
<li>SettingKey[T] is a key with a value computed only once. Examples are
name or scalaVersion.</li>
<li>TaskKey[T] is a key with a value that has to be recomputed each time.
TaskKey is used to create tasks. Examples are compile and package.</li>
<li>InputTask[T] is a task key which takes command-line arguments as input.</li>
</ul>
<p>All the available keys are defined in the sbt.Keys object, and it’s automatically
imported for you in the build.sbt file.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>scalacOptions ++= Se<span class="string">q("-unchecked", "-deprecation")</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ mkdir -p src/<span class="list">{main,test}</span>/<span class="list">{scala,java,resources}</span> lib project
</pre></td></tr></table></figure>

<p>The third option is to use giter8 (<a href="https://github.com/n8han/giter8" target="_blank">https://github.com/n8han/giter8</a>). It’s a com-
mand-line tool to generate files and directories from templates published in Github.
This is slowly becoming a standard way of creating projects in Scala. Once giter8 is
installed, you can choose a template to generate the project structure.</p>
<p><img src="/img/sbt_struct.png" alt="sbt project struct"></p>
<p>SBT project structure is recursive. The project directory is another project inside your
project that knows how to build your project.</p>
<p>The following is how you define dependency in SBT :
<code>groupID % artifactID % version</code></p>
<p>If you use %% after groupID, SBT will add the Scala version of the proj-
ect to the artifact ID.</p>
<p>SBT can read the dependencies defined in the
POM file if you use the externalPom() method in your build file.</p>
<p>Alternatively, you can create a project definition file configured to use a local Maven
repository:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>resolvers += <span class="string">"Local Maven Repository"</span> at
<span class="string">"file://"</span>+<span class="keyword">Path</span>.userHome+<span class="string">"/.m2/repository"</span>
</pre></td></tr></table></figure>

<p>Here’s how
the build.sbt looks after all the changes:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>scalaVersion := <span class="string">"2.10.0"</span>

<span class="property">name</span> := <span class="string">"Testing SBT"</span>

<span class="property">version</span> := <span class="string">"1.0"</span>

scalacOptions ++= Seq(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>)

libraryDependencies ++= Seq(
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-server"</span> % <span class="string">"7.0.0.RC2"</span>,
  <span class="string">"org.scala-tools.testing"</span> % <span class="string">"specs"</span> % <span class="string">"1.6.2"</span> % <span class="string">"test"</span>)
</pre></td></tr></table></figure>

<p>Another common thing you can do with SBT is create custom tasks for the project. For
custom tasks, the .scala build definition file is used because the .sbt build file doesn’t
support it. To create custom tasks follow these steps:</p>
<ul>
<li>Create a TaskKey .</li>
<li>Provide a value for the TaskKey .</li>
<li>Put the task in the .scala build file under project.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">import</span> sbt._
<span class="keyword">import</span> Keys._

<span class="class"><span class="keyword">object</span> <span class="title">ExampleBuild</span> <span class="keyword">extends</span> <span class="title">Build</span> {</span>
  <span class="keyword">val</span> hello = TaskKey [Unit](<span class="string">"hello"</span>, <span class="string">"Prints 'Hello World'"</span>)
  <span class="keyword">val</span> helloTask: Setting[Task[Unit]] = hello := {
    println(<span class="string">"Hello World"</span>)
  }
  <span class="keyword">val</span> project = Project (
    <span class="string">"example"</span>,
    file (<span class="string">"."</span>)).settings(helloTask)
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>// console-project
scala&gt; get(name)
<span class="label">res2:</span> String = Testing SBT
scala&gt; get(scalaVersion)
<span class="label">res3:</span> String = <span class="number">2.10</span><span class="number">.0</span>
scala&gt; runTask(hello, currentState)
Hello World
<span class="label">res11:</span> (sbt<span class="preprocessor">.State</span>, Unit) = (sbt<span class="preprocessor">.State</span><span class="localvars">@4</span>fae46d5,())
</pre></td></tr></table></figure>

<h2 id="seting-up">Seting up</h2>
<p>In <code>project/build.properties</code> sets <code>sbt.version=0.12.0</code></p>
<p><code>build.sbt</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>name := <span class="string">"weKanban"</span>

organization := <span class="string">"scalainaction"</span>

version := <span class="string">"0.1"</span>

scalaVersion := <span class="string">"2.10.0"</span>

scalacOptions ++= Se<span class="string">q("-unchecked", "-deprecation")</span>
</pre></td></tr></table></figure>

<p>Remember to separate each setting expression with an empty new line so that SBT can
parse each expression .sbt file. </p>
<p><code>project/plugins.sbt</code>. This plug-in adds tasks to the SBT build to start and stop the
web server. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>libraryDependencies &lt;+= sbtVersion {v =&gt;
  <span class="string">"com.github.siasia"</span> <span class="string">%% "xsbt-web-plugin" %</span> (v+<span class="string">"-0.2.11.1"</span>)
}
</pre></td></tr></table></figure>

<p>The <code>&lt;+=</code> method allows you to compute a new list element from other keys.</p>
<p>build.sbt:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>libraryDependencies ++=
 Seq(
  <span class="string">"org.eclipse.jetty"</span> %
    <span class="string">"jetty-servlet"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"container"</span>,
  <span class="string">"org.eclipse.jetty"</span> %
    <span class="string">"jetty-webapp"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"test, container"</span>,
  <span class="string">"org.eclipse.jetty"</span> %
    <span class="string">"jetty-server"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"container"</span>
)
</pre></td></tr></table></figure>

<p>Additionally, jetty-web is added into test scope.
The scope allows SBT keys to have values in more than one context.
This is useful for plug-ins because scoping allows plug-ins to
create tasks that don’t conflict with other task names. </p>
<p>To include all the tasks from the plug-in to your project,
you have to import the settings from the plug-in project into
your build.sbt file as follows:
<code>seq(com.github.siasia.WebPlugin.webSettings :_*)</code></p>
<p>To start the web server, run the container:<code>start task</code>,
and it will start the Jetty server at port number 8080</p>
<h2 id="introducing-scalaz-module">introducing scalaz module</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>trait Application[IN[<span class="emphasis">_], OUT[_</span>]] {
  def apply(implicit req: Request[IN]): Response[OUT]
}

object Application {
  def application[<span class="link_label">IN[_</span>], OUT[<span class="link_label">_</span>]](f: Request[IN] =&gt; Response[OUT])
<span class="code">    = new Application[IN,OUT] {</span>
<span class="code">        def apply(implicit req: Request[IN]) = f(req)</span>
<span class="code">      }</span>
}
</pre></td></tr></table></figure>

<p><code>build.sbt</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>libraryDependencies ++= <span class="constant">Seq</span>(
  <span class="string">"org.scalaz"</span> <span class="string">%% "scalaz-core" %</span> <span class="string">"6.0.3"</span>,
  <span class="string">"org.scalaz"</span> <span class="string">%% "scalaz-http" %</span> <span class="string">"6.0.3"</span>,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-servlet"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"container"</span>,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-webapp"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"test, container"</span>,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-server"</span> % <span class="string">"7.3.0.v20110203"</span> % <span class="string">"container"</span>
)
</pre></td></tr></table></figure>

<p><code>web.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">web-app</span>&gt;</span>
  <span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Scalaz<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
   <span class="comment">&lt;!-- This servlet will create both a request
        and response of type scala.collection.Stream --&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>
      scalaz.http.servlet.StreamStreamServlet
    <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>application<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>
        com.kanban.application.WeKanbanApplication
       <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
  <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Scalaz<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
<span class="tag">&lt;/<span class="title">web-app</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// StreamStreamServletApplication to create your application</span>
<span class="comment">// class because it’s enforced by the</span>
<span class="comment">// Scalaz servlet you’re using to handle all the HTTP request and response. </span>
<span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WeKanbanApplication</span> <span class="keyword">extends</span> <span class="title">StreamStreamServletApplication</span> {</span>

  <span class="keyword">val</span> application = <span class="keyword">new</span> ServletApplication[Stream, Stream] {
  <span class="keyword">def</span> application(implicit servlet: HttpServlet,
    servletRequest: HttpServletRequest,
    request: Request[Stream]) = {
      <span class="keyword">def</span> found(x: Iterator[Byte]) : Response[Stream] = OK &lt;&lt; x.toStream
      HttpServlet.resource(found, NotFound.xhtml)
    }
  }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>weKanban board will come shortly<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="database">database</h2>
<p>add dependencies</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="string">"com.h2database"</span> % <span class="string">"h2"</span> % <span class="string">"1.2.137"</span>,
<span class="string">"org.squeryl"</span> % <span class="string">"squeryl_2.10"</span> % <span class="string">"0.9.5-6"</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Story</span><span class="params">(val number: String, val title: String, val phase: String)</span></span>

<span class="keyword">package</span> com.kanban.models
<span class="keyword">import</span> org.squeryl._
<span class="comment">//  defines the schema with a table</span>
<span class="comment">// called “STORIES” for your Story class</span>
<span class="class"><span class="keyword">object</span> <span class="title">KanbanSchema</span> <span class="keyword">extends</span> <span class="title">Schema</span> {</span>
  <span class="keyword">val</span> stories = table[Story](<span class="string">"STORIES"</span>)
}
</pre></td></tr></table></figure>

<p>run h2base by hand</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>java -<span class="keyword">cp</span> ~/<span class="preprocessor">.ivy</span>2/cache/<span class="keyword">com</span><span class="preprocessor">.h</span>2database/h2/jars/h2*<span class="preprocessor">.jar</span> org<span class="preprocessor">.h</span>2<span class="preprocessor">.tools</span><span class="preprocessor">.Server</span>
</pre></td></tr></table></figure>

<p>or write task in <code>build.scala</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="keyword">import</span> sbt._
<span class="keyword">import</span> Keys._
<span class="class"><span class="keyword">object</span> <span class="title">H2TaskManager</span> {</span>
  <span class="keyword">var</span> process: Option[Process] = None
  <span class="comment">// creates a new config name “h2” and extends the Compile config</span>
  <span class="comment">// The Compile config will provide the necessary</span>
  <span class="comment">// classpath setting you need to run the tasks.</span>
  <span class="keyword">lazy</span> <span class="keyword">val</span> H2 = config(<span class="string">"h2"</span>) extend(Compile)
  <span class="keyword">val</span> startH2 = TaskKey[Unit](<span class="string">"start"</span>, <span class="string">"Starts H2 database"</span>)
  <span class="comment">// &lt;&lt;= method in SBT helps to create a</span>
  <span class="comment">//  new setting that depends on other settings.</span>
  <span class="keyword">val</span> startH2Task = startH2 in H2 &lt;&lt;= (fullClasspath in Compile) map {
    cp =&gt;
      startDatabase {
        cp.map(_.data)
        .map(_.getAbsolutePath())
        .filter(_.contains(<span class="string">"h2database"</span>))
      }
  }
  
  <span class="keyword">def</span> startDatabase(paths: Seq[String]) = {
    process <span class="keyword">match</span> {
      <span class="keyword">case</span> None =&gt;
        <span class="keyword">val</span> cp = paths.mkString(System.getProperty(<span class="string">"path.separator"</span>))
        <span class="keyword">val</span> command = <span class="string">"java -cp "</span> + cp + <span class="string">" org.h2.tools.Server"</span>
        println(<span class="string">"Starting Database with command: "</span> + command)
        process = Some(Process(command).run())
        println(<span class="string">"Database started ! "</span>)
      <span class="keyword">case</span> Some(_) =&gt;
        println(<span class="string">"H2 Database already started"</span>)
    }
  }
  <span class="keyword">val</span> stopH2 = TaskKey[Unit](<span class="string">"stop"</span>, <span class="string">"Stops H2 database"</span>)
  <span class="keyword">val</span> stopH2Task = stopH2 in H2 :={
    process <span class="keyword">match</span> {
      <span class="keyword">case</span> None =&gt; println(<span class="string">"Database already stopped"</span>)
      <span class="keyword">case</span> Some(_) =&gt;
        println(<span class="string">"Stopping database..."</span>)
        process.foreach{_.destroy()}
        process = None
        println(<span class="string">"Database stopped..."</span>)
    }
  }
}
<span class="class"><span class="keyword">object</span> <span class="title">MainBuild</span> <span class="keyword">extends</span> <span class="title">Build</span> {</span>
  <span class="keyword">import</span> H2TaskManager._
  <span class="keyword">lazy</span> <span class="keyword">val</span> scalazVersion = <span class="string">"6.0.3"</span>
  <span class="keyword">lazy</span> <span class="keyword">val</span> jettyVersion = <span class="string">"7.3.0.v20110203"</span>
  
  <span class="keyword">lazy</span> <span class="keyword">val</span> wekanban = Project( <span class="string">"wekanban"</span>,
      file(<span class="string">"."</span>)).settings(startH2Task, stopH2Task)
}
</pre></td></tr></table></figure>

<p>Change to this</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>libraryDependencies ++= <span class="constant">Seq</span>(
  <span class="string">"org.scalaz"</span> <span class="string">%% "scalaz-core" %</span> scalazVersion,
  <span class="string">"org.scalaz"</span> <span class="string">%% "scalaz-http" %</span> scalazVersion,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-servlet"</span> % jettyVersion % <span class="string">"container"</span>,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-webapp"</span> % jettyVersion % <span class="string">"test, container"</span>,
  <span class="string">"org.eclipse.jetty"</span> % <span class="string">"jetty-server"</span> % jettyVersion % <span class="string">"container"</span>,
  <span class="string">"com.h2database"</span> % <span class="string">"h2"</span> % <span class="string">"1.2.137"</span>,
  <span class="string">"org.squeryl"</span> % <span class="string">"squeryl_2.10"</span> % <span class="string">"0.9.5-6"</span>
)
</pre></td></tr></table></figure>

<p>browser <code>http://localhost:8082</code> to set h2base
    JDBC Driver class: org.h2.Driver
     Database URL: jdbc:h2:tcp://localhost/~/test
     User name: sa</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="keyword">package</span> com.kanban.models
<span class="keyword">import</span> org.squeryl._
<span class="keyword">import</span> org.squeryl.adapters._
<span class="keyword">import</span> org.squeryl.PrimitiveTypeMode._
<span class="keyword">import</span> java.sql.DriverManager
<span class="class"><span class="keyword">object</span> <span class="title">KanbanSchema</span> <span class="keyword">extends</span> <span class="title">Schema</span> {</span>
  <span class="keyword">val</span> stories = table[Story](<span class="string">"STORIES"</span>)
  <span class="keyword">def</span> init = {
    <span class="keyword">import</span> org.squeryl.SessionFactory
    Class.forName(<span class="string">"org.h2.Driver"</span>)
<span class="comment">// The Squeryl Session instance provides additional methods</span>
<span class="comment">// like log and methods for binding/unbinding the session to the current thread. </span>
    <span class="keyword">if</span>(SessionFactory.concreteFactory.isEmpty) {
      SessionFactory.concreteFactory = Some(()=&gt;
        Session.create(
          DriverManager.getConnection(<span class="string">"jdbc:h2:tcp://localhost/~/test"</span>,
          <span class="string">"sa"</span>, <span class="string">""</span>), <span class="keyword">new</span> H2Adapter))
    }
  }
  <span class="keyword">def</span> tx[A](a: =&gt;A): A = {
    init
    inTransaction(a)
  }
}

<span class="keyword">def</span> main(args: Array[String]) {
  println(<span class="string">"initializing the weKanban schema"</span>)
  init
  inTransaction { drop ; create }
}
</pre></td></tr></table></figure>

<p>加入检查, 和保存操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="keyword">package</span> com.kanban.models
<span class="keyword">import</span> org.squeryl._
<span class="keyword">import</span> org.squeryl.PrimitiveTypeMode._
<span class="keyword">import</span> org.squeryl.annotations._
<span class="keyword">import</span> KanbanSchema._
<span class="class"><span class="keyword">class</span> <span class="title">Story</span><span class="params">(val number: String, val title: String, val phase: String)</span>{</span>
  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">def</span> validate = {
    <span class="keyword">if</span>(number.isEmpty || title.isEmpty) {
      <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException (<span class="string">"Both number and title are required"</span>)
    }
    <span class="keyword">if</span>(!stories.where(a =&gt; a.number === number).isEmpty) {
      <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException (<span class="string">"The story number is not unique"</span>)
    }
  }
  <span class="keyword">def</span> save(): Either[Throwable, String] = {
    tx {
      <span class="keyword">try</span> {
        validate
        stories.insert(<span class="keyword">this</span>)
        Right(<span class="string">"Story is created successfully"</span>)
      } <span class="keyword">catch</span> {
        <span class="keyword">case</span> exception: Throwable =&gt; Left(exception)
      }
    }
  }
}
<span class="class"><span class="keyword">object</span> <span class="title">Story</span> {</span>
  <span class="keyword">def</span> apply(number: String, title: String) =
  <span class="keyword">new</span> Story(number, title, <span class="string">"ready"</span>)
}
<span class="class"><span class="keyword">class</span> <span class="title">ValidationException</span><span class="params">(message: String)</span> <span class="keyword">extends</span></span>
    RuntimeException(message)
</pre></td></tr></table></figure>

<h2 id="web-page">web page</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">package</span> com.kanban.views
<span class="class"><span class="keyword">object</span> <span class="title">CreateStory</span> {</span>
  <span class="keyword">def</span> apply(message: String = <span class="string">""</span>) =
    &lt;html&gt; TODO <span class="number">7.1</span><span class="number">.2</span>
    &lt;/html&gt;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</pre></td><td class="code"><pre><span class="keyword">import</span>
<span class="keyword">import</span> scalaz._
<span class="keyword">import</span> Scalaz._
<span class="keyword">import</span> scalaz.http._
<span class="keyword">import</span> response._
<span class="keyword">import</span> request._
<span class="keyword">import</span> servlet._
<span class="keyword">import</span> HttpServlet._
<span class="keyword">import</span> Slinky._
<span class="keyword">import</span> com.kanban.views._
<span class="keyword">import</span> com.kanban.models._
<span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WeKanbanApplication</span> <span class="keyword">extends</span> <span class="title">StreamStreamServletApplication</span> {</span>
  <span class="keyword">import</span> Request._
  <span class="keyword">import</span> Response._
  implicit <span class="keyword">val</span> charset = UTF8

  <span class="comment">// To read POST parameters from the request</span>
  <span class="comment">// use ! POST generally means a side-effect</span>
  <span class="keyword">def</span> param_!(name: String)(implicit request: Request[Stream]) =
    (request | name).getOrElse(List[Char]()).mkString(<span class="string">""</span>)

  <span class="comment">// return parameter value as string</span>
  <span class="keyword">def</span> param(name: String)(implicit request: Request[Stream]) =
    (request ! name).getOrElse(List[Char]()).mkString(<span class="string">""</span>)

  <span class="keyword">def</span> handle(implicit request: Request[Stream],
     servletRequest: HttpServletRequest): Option[Response[Stream]] = {
    request <span class="keyword">match</span> {
      <span class="keyword">case</span> MethodParts(GET, <span class="string">"card"</span> :: <span class="string">"create"</span> :: Nil) =&gt;
        Some(OK(ContentType, <span class="string">"text/html"</span>) &lt;&lt; strict &lt;&lt;
        CreateStory(param(<span class="string">"message"</span>)))
      <span class="keyword">case</span> MethodParts(POST, <span class="string">"card"</span> :: <span class="string">"save"</span> :: Nil) =&gt;
        Some(saveStory)
      <span class="keyword">case</span> MethodParts(GET, <span class="string">"kanban"</span> :: <span class="string">"board"</span> :: Nil) =&gt;
        Some(OK(ContentType, <span class="string">"text/html"</span>) &lt;&lt; transitional &lt;&lt; KanbanBoard())
      <span class="keyword">case</span> _ =&gt; None
    }
  }

  <span class="keyword">private</span> <span class="keyword">def</span> saveStory(implicit request: Request[Stream],
        servletRequest: HttpServletRequest) = {
    <span class="keyword">val</span> title = param_!(<span class="string">"title"</span>)
    <span class="keyword">val</span> number = param_!(<span class="string">"storyNumber"</span>)
    Story(number, title).save <span class="keyword">match</span> {
      <span class="keyword">case</span> Right(message) =&gt;
        redirects[Stream, Stream](<span class="string">"/card/create"</span>, (<span class="string">"message"</span>, message))
      <span class="keyword">case</span> Left(error) =&gt; OK(ContentType, <span class="string">"text/html"</span>) &lt;&lt; strict &lt;&lt;
        CreateStory(error.toString)
    }
}

  <span class="comment">// The Scalaz core provides a method called | for the Option class and</span>
  <span class="comment">// using it you can combine both handle and resource methods so that when the han-</span>
  <span class="comment">// dle method returns None you can invoke the resource method as a fallback to load</span>
  <span class="comment">// resources. </span>
  <span class="keyword">val</span> application = <span class="keyword">new</span> ServletApplication[Stream, Stream] {
    <span class="keyword">def</span> application(implicit servlet: HttpServlet,
        servletRequest: HttpServletRequest, request: Request[Stream]) = {
      <span class="keyword">def</span> found(x: Iterator[Byte]) : Response[Stream] = OK &lt;&lt; x.toStream
      handle | resource(found, NotFound.xhtml)
    }

  }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">// Implementing drag-and-drop for the weKanban board in the main.js file</span>
  
<span class="function"><span class="keyword">function</span> <span class="title">moveCard</span><span class="params">(storyNumber, phase)</span> {</span>
  $.post(<span class="string">"/card/move"</span>,{storyNumber: storyNumber, phase: phase},
    <span class="function"><span class="keyword">function</span><span class="params">(message)</span> {</span>
      $(<span class="string">'#message'</span>).html(message)
    });
  }
  <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> {</span>
    $(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      $(<span class="string">".story"</span>).each(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        $(<span class="keyword">this</span>).draggable();
      });
    $(<span class="string">"#readyPhase"</span>).droppable({
      drop: <span class="function"><span class="keyword">function</span><span class="params">(event, ui)</span> {</span>
        moveCard(ui.draggable.attr(<span class="string">"id"</span>), <span class="string">"ready"</span>) }
    });
    $(<span class="string">"#devPhase"</span>).droppable({
      drop: <span class="function"><span class="keyword">function</span><span class="params">(event, ui)</span> {</span>
      moveCard(ui.draggable.attr(<span class="string">"id"</span>), <span class="string">"dev"</span>) }
    });
    $(<span class="string">"#testPhase"</span>).droppable({
      drop: <span class="function"><span class="keyword">function</span><span class="params">(event, ui)</span> {</span>
        moveCard(ui.draggable.attr(<span class="string">"id"</span>),
          <span class="string">"test"</span>) }
    });
    $(<span class="string">"#deployPhase"</span>).droppable({
      drop: <span class="function"><span class="keyword">function</span><span class="params">(event, ui)</span> {</span>
        moveCard(ui.draggable.attr(<span class="string">"id"</span>),
          <span class="string">"deploy"</span>) }
    });
  });
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="regexp">//</span> story model
<span class="regexp">//</span> At <span class="keyword">this</span> point Squeryl has only created the query—it hasn’t executed it <span class="keyword">in</span> the database. It will execute the query the
<span class="regexp">//</span> moment you <span class="keyword">try</span> to access the first element <span class="keyword">in</span> the collection.
<span class="regexp">//</span>  <span class="keyword">by</span> invoking the map method, so that you access these instances <span class="keyword">of</span> Story objects outside the transaction
def findAllByPhase(<span class="attribute">phase</span>: String) = tx {
  from(stories)(s<span class="function"> =&gt;</span> where(s.phase === phase) select(s)) map(s<span class="function"> =&gt;</span> s)
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre>package com.kanban.views
import com.kanban.models._
<span class="comment">// To create the view for the Kanban board</span>
object KanbanBoard {
    <span class="keyword">private</span> def header =
      &lt;head&gt;
        &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;
        &lt;title&gt;weKanban: A simple Kanban board&lt;/title&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery-1.4.2.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.ui.core.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.ui.widget.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.ui.mouse.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.ui.draggable.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/jquery.ui.droppable.js"</span>/&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span> src=<span class="string">"/js/main.js"</span>/&gt;
        &lt;link <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/css"</span> href=<span class="string">"/css/main.css"</span> rel=<span class="string">"stylesheet"</span> /&gt;
        &lt;script <span class="class"><span class="keyword">type</span>=</span><span class="string">"text/javascript"</span>&gt;
          init()
        &lt;/script&gt;
      &lt;/head&gt;
    <span class="comment">// 7.10, P216</span>
    def apply() =
      &lt;html&gt;
        &lt;head&gt; {header}&lt;/head&gt;
      &lt;/html&gt;
    <span class="keyword">private</span> def stories(phase: String) =
      <span class="keyword">for</span>(story &lt;- Story.findAllByPhase(phase)) <span class="keyword">yield</span>
        &lt;div id={story.number} <span class="keyword">class</span>=<span class="string">"story"</span>&gt;
          &lt;fieldset&gt;
          &lt;legend&gt;{story.number}&lt;/legend&gt;
            &lt;div <span class="keyword">class</span>=<span class="string">"section"</span>&gt;
              &lt;label&gt;{story.title}&lt;/label&gt;
            &lt;/div&gt;
          &lt;/fieldset&gt;
        &lt;/div&gt;
}
</pre></td></tr></table></figure>

<h2 id="moving-cards-in-the-kanban-board">Moving cards in the Kanban board</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="regexp">//</span> <span class="keyword">in</span> Story Class
private def phaseLimits = Map(<span class="string">"ready"</span><span class="function"> -&gt;</span> Some(<span class="number">3</span>),
  <span class="string">"dev"</span><span class="function"> -&gt;</span> Some(<span class="number">2</span>), <span class="string">"test"</span><span class="function"> -&gt;</span> Some(<span class="number">2</span>), <span class="string">"deploy"</span><span class="function"> -&gt;</span> None)

private[<span class="keyword">this</span>] def validateLimit(<span class="attribute">phase</span>: String) = {
  val <span class="attribute">currentSize</span>:Long =
    from(stories)(s<span class="function"> =&gt;</span> where(s.phase === phase) compute(count))
  <span class="keyword">if</span>(currentSize == phaseLimits(phase).getOrElse(-<span class="number">1</span>)) {
    <span class="keyword">throw</span> <span class="keyword">new</span> ValidationException(<span class="string">"You cannot exceed the limit set for
      the phase."</span>)
  }
}

def findByNumber(<span class="attribute">number</span>: String) =
  tx { stories.where(s<span class="function"> =&gt;</span> s.number === number).single }
  
def moveTo(<span class="attribute">phase</span>: String): Either[Throwable, String] = {
  tx {
    <span class="keyword">try</span> {
      validateLimit(phase)
      update(stories)(s<span class="function"> =&gt;</span>
        where(s.number === <span class="keyword">this</span>.number)
        set(s.phase := phase)
      )
      Right(<span class="string">"Card "</span> + <span class="keyword">this</span>.number + <span class="string">" is moved to "</span> + phase
           + <span class="string">" phase
           successfully."</span>)
    } <span class="keyword">catch</span> {
      <span class="reserved">case</span> <span class="attribute">exception</span>: Throwable<span class="function"> =&gt;</span> Left(exception)
    }
  }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// main.js</span>
<span class="function"><span class="keyword">function</span> <span class="title">moveCard</span><span class="params">(storyNumber, phase)</span> {</span>
  $.post(<span class="string">"/card/move"</span>, {storyNumber: storyNumber, phase: phase},
    <span class="function"><span class="keyword">function</span><span class="params">(message)</span> {</span>
      $(<span class="string">'#message'</span>).html(message)
    }
  );
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="regexp">//</span> application
private def moveCard(implicit <span class="attribute">request</span>: Request[Stream],
    <span class="attribute">servletRequest</span>: HttpServletRequest) = {
  val number = param_!(<span class="string">"storyNumber"</span>)
  val toPhase = param_!(<span class="string">"phase"</span>)
  val story = Story.findByNumber(number)
  story.moveTo(toPhase) match {
    <span class="reserved">case</span> Right<span class="function"><span class="params">(message)</span> =&gt;</span> OK(ContentType, <span class="string">"text/html"</span>) &lt;&lt;
      strict &lt;&lt; message
    <span class="reserved">case</span> Left<span class="function"><span class="params">(error)</span> =&gt;</span> OK(ContentType, <span class="string">"text/html"</span>) &lt;&lt;
      strict &lt;&lt; error.getMessage
  }
}
<span class="regexp">//</span> <span class="reserved">case</span> MethodParts<span class="function"><span class="params">(POST, <span class="string">"card"</span> :: <span class="string">"move"</span> :: Nil)</span> =&gt;</span>
<span class="regexp">//</span>   Some(moveCard)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day58-Mybatis提高]]></title>
    <link href="http://zhpooer.github.io/2014/07/16/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day58-mybatis%E6%8F%90%E9%AB%98/"/>
    <id>http://zhpooer.github.io/2014/07/16/传智播客day58-mybatis提高/</id>
    <published>2014-07-16T01:09:13.000Z</published>
    <updated>2014-07-19T23:43:16.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>public class User{
    id<span class="value">: Int;</span>
    username<span class="value">: String;</span>
    birthday<span class="value">: Date;</span>
    sex<span class="value">: Int;</span>
    <span class="tag">address</span><span class="value">: String;</span>
    detail<span class="value">: String;</span>
    score<span class="value">: Float;</span>
    orders<span class="value">:List;</span>
}
public class <span class="attribute">Order</span> {
    id<span class="value">:Int;</span>
    user<span class="value">:User;</span>
    orderNumber<span class="value">:String;</span> <span class="comment">// 订单号</span>
    orderDetails<span class="value">: List;</span>
}
public class OrderDetail {
    id<span class="value">:Int;</span>
    <span class="attribute">order</span><span class="value">:Order;</span>
    item<span class="value">:Item;</span>
    num<span class="value">:Int;</span>n
    itemPrice<span class="value">:Float;</span>
}

public class Item {
    name<span class="value">:String;</span>
    price<span class="value">:Float;</span>
    detail<span class="value">:String;</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 一对一查询 --&gt;</span>
<span class="comment">&lt;!-- 订单用户关联 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findOrdersUsers"</span> <span class="attribute">resultMap</span>=<span class="value">"userOrderMap"</span>&gt;</span>
    select orders.*, user.username, user.sex, user.address
    from orders, user where orders.user_id = user.id;
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">id</span>=<span class="value">"userOrderMap"</span> <span class="attribute">type</span>=<span class="value">"order"</span>&gt;</span>
    <span class="comment">&lt;!-- order信息  --&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"user_id"</span> <span class="attribute">column</span>=<span class="value">"user_id"</span>&gt;</span> <span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="comment">&lt;!-- 用户信息 --&gt;</span>
    <span class="comment">&lt;!-- 将用户信息封装成一个user对象 --&gt;</span>
    <span class="tag">&lt;<span class="title">association</span> <span class="attribute">property</span>=<span class="value">"user"</span> <span class="attribute">javaType</span>=<span class="value">"po.User"</span>&gt;</span>
        <span class="comment">&lt;!-- 指定user表的id  --&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"username"</span> <span class="attribute">column</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"sex"</span> <span class="attribute">column</span>=<span class="value">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"address"</span> <span class="attribute">column</span>=<span class="value">"address"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">association</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>

<span class="comment">&lt;!-- 一对多查询 --&gt;</span>
<span class="comment">&lt;!-- 订单 及 订单明细 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">""</span> <span class="attribute">resultMap</span>=<span class="value">"userOrdersDetailsMap"</span>&gt;</span>
    select orders.*, orderdetial.id orderdetail_id,
    orderdetail.item_id, orderdetail.item_num, orderdetail.item_price
    from orders, orderdetail where orders.id=orderdetail.orders_id;
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"order"</span> <span class="attribute">id</span>=<span class="value">"userOrdersDetailsMap"</span>&gt;</span>
    <span class="comment">&lt;!--  订单id --&gt;</span>
    <span class="comment">&lt;!-- id是指定结果集的主键, 指定mybatis返回最终list的结果集主键 --&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"orderNumber"</span> <span class="attribute">column</span>=<span class="value">"order_number"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="comment">&lt;!-- 集合中用 orderDetail --&gt;</span>
    <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orderdetails"</span> <span class="attribute">ofType</span>=<span class="value">"orderDetail"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"orderdetail_id"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemNum"</span> <span class="attribute">column</span>=<span class="value">"item_num"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemPrice"</span> <span class="attribute">column</span>=<span class="value">"item_price"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemDetail"</span> <span class="attribute">column</span>=<span class="value">"item_detail"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
    <span class="comment">&lt;!-- 订单明细信息 --&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>

<span class="comment">&lt;!-- 三表关联, 使用继承 --&gt;</span>
<span class="comment">&lt;!-- 订单 用户 订单明细 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">""</span> <span class="attribute">resultMap</span>=<span class="value">"userOrdersDetailsMap"</span>&gt;</span>
select orders.*, user.username, user.sex, user.address,
       orderdetial.id orderdetail_id,
       orderdetail.item_id, orderdetail.item_num, orderdetail.item_price
       from orders, user, orderdetail
       where orders.id=orderdetail.orders_id and  orders.user_id = user.id;
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"order"</span> <span class="attribute">id</span>=<span class="value">"userOrdersDetailsMap"</span> <span class="attribute">extends</span>=<span class="value">"userOrdersMap"</span>&gt;</span>
    <span class="comment">&lt;!--  订单id 继承 订单用户信息 --&gt;</span>
    <span class="comment">&lt;!-- 集合中用 orderDetail --&gt;</span>
    <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orderdetails"</span> <span class="attribute">ofType</span>=<span class="value">"orderDetail"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"orderdetail_id"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemNum"</span> <span class="attribute">column</span>=<span class="value">"item_num"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemPrice"</span> <span class="attribute">column</span>=<span class="value">"item_price"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"itemDetail"</span> <span class="attribute">column</span>=<span class="value">"item_detail"</span>&gt;</span> <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>

<span class="comment">&lt;!-- 查询用户及用户下的订单 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserInOrders"</span> <span class="attribute">resultMap</span>=<span class="value">""</span>&gt;</span>
    select orders.*
    user.username,
    user.sex,
    user.address
    from user, order where user.id = order.user_id
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"user"</span> <span class="attribute">id</span>=<span class="value">"userInOrdersMap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"username"</span> <span class="attribute">column</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="comment">&lt;!-- 订单信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orders"</span> <span class="attribute">ofType</span>=<span class="value">"order"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"order_number"</span> <span class="attribute">column</span>=<span class="value">"order_number"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>

<span class="comment">&lt;!-- 查询用户及用户下的订单, 和订单明细 --&gt;</span>
<span class="comment">&lt;!-- 查询用户及用户下的订单 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserInOrderDetailInOrder"</span> <span class="attribute">resultMap</span>=<span class="value">""</span>&gt;</span>
    TODO: sql
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="comment">&lt;!-- 一对多 嵌套 一对多 --&gt;</span>
<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"user"</span> <span class="attribute">id</span>=<span class="value">"userInOrdersMap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"username"</span> <span class="attribute">column</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="comment">&lt;!-- 订单信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orders"</span> <span class="attribute">ofType</span>=<span class="value">"order"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"order_number"</span> <span class="attribute">column</span>=<span class="value">"order_number"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orderdetails"</span> <span class="attribute">ofType</span>=<span class="value">"orderDetail"</span>&gt;</span>
            ...
        <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>

<span class="comment">&lt;!-- 多对多 --&gt;</span>
<span class="comment">&lt;!-- 查询用户下的订单及订单下的明细商品信息 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserOrdersItemList"</span> <span class="attribute">resultMap</span>=<span class="value">"userOrdersItemListMap"</span>&gt;</span>
  select orders.*
    user.username,
    user.sex,
    user.address,
    orderdetial.id orderdetail_id,
    orderdetail.item_id,
    orderdetail.item_num,
    orderdetial.item_price,
    items.item_name
    items.item_price item_price_,
    items.item_detail
  from orders, user, orderdetail,items
  where orders.user_id = user.id
    and orders.id=orderdetail.orders_id
    and items.id = orderdetail.item_id
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"user"</span> <span class="attribute">id</span>=<span class="value">"userOrdersItemListMap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"username"</span> <span class="attribute">column</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="comment">&lt;!-- 订单信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orders"</span> <span class="attribute">ofType</span>=<span class="value">"order"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"order_number"</span> <span class="attribute">column</span>=<span class="value">"order_number"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">collection</span> <span class="attribute">property</span>=<span class="value">"orderdetails"</span> <span class="attribute">ofType</span>=<span class="value">"orderDetail"</span>&gt;</span>
            ...
            <span class="tag">&lt;<span class="title">association</span> <span class="attribute">property</span>=<span class="value">"items"</span> <span class="attribute">javaType</span>=<span class="value">"items"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"item_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
                <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"itemName"</span> <span class="attribute">column</span>=<span class="value">"item_name"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
                <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"itemPrice"</span> <span class="attribute">column</span>=<span class="value">"item_price"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
                <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"itemDetail"</span> <span class="attribute">column</span>=<span class="value">"item_detail"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">association</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">collection</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">延迟加载</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>select orders.*
    user<span class="preprocessor">.username</span>,
    user<span class="preprocessor">.sex</span>,
    user<span class="preprocessor">.address</span>,
    orderdetial<span class="preprocessor">.id</span> orderdetail_id,
    orderdetail<span class="preprocessor">.item</span>_id,
    orderdetail<span class="preprocessor">.item</span>_num,
    orderdetial<span class="preprocessor">.item</span>_price,
--    items<span class="preprocessor">.item</span>_name
--    items<span class="preprocessor">.item</span>_price item_price_,
--     items<span class="preprocessor">.item</span>_detail,
  (select items<span class="preprocessor">.item</span>_name from items where orderdetail<span class="preprocessor">.item</span>_id = items<span class="preprocessor">.id</span>) item_name,
  (select items<span class="preprocessor">.item</span>_price from items where orderdetail<span class="preprocessor">.item</span>_id = items<span class="preprocessor">.id</span>) item_price,
  (select items<span class="preprocessor">.item</span>_detail from items where orderdetail<span class="preprocessor">.item</span>_id = items<span class="preprocessor">.id</span>) item_detail
  from orders, user, orderdetail
  where orders<span class="preprocessor">.user</span>_id = user<span class="preprocessor">.id</span>
    <span class="keyword">and</span> orders<span class="preprocessor">.id</span>=orderdetail<span class="preprocessor">.orders</span>_id
    <span class="keyword">and</span> items<span class="preprocessor">.id</span> = orderdetail<span class="preprocessor">.item</span>_id
-- 解决子查询问题, 如下&gt;
</pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">&lt;!-- select 子查询, column 根据 column 进行子查询 --&gt;</span>
<span class="comment">&lt;!-- 可以通过设置 懒加载 来延迟查询, 一对一 不推荐使用 --&gt;</span>
<span class="tag">&lt;<span class="title">association</span> <span class="attribute">property</span>=<span class="value">"items"</span> <span class="attribute">javaType</span>=<span class="value">"items"</span>
      <span class="attribute">select</span>=<span class="value">"findItemsById"</span> <span class="attribute">column</span>=<span class="value">"item_id"</span>&gt;</span>
    <span class="comment">&lt;!-- 使用子查询, 可以通过 findItemsById 查询 --&gt;</span>
    <span class="comment">&lt;!-- 一一对应? TODO: 属性和值的对应关系如何设置!!!! --&gt;</span>
    <span class="comment">&lt;!-- &lt;id property="id" column="item_id"&gt;&lt;/id&gt; --&gt;</span>
    <span class="comment">&lt;!-- &lt;result property="itemName" column="item_name"&gt;&lt;/result&gt; --&gt;</span>
    <span class="comment">&lt;!-- &lt;result property="itemPrice" column="item_price"&gt;&lt;/result&gt; --&gt;</span>
    <span class="comment">&lt;!-- &lt;result property="itemDetail" column="item_detail"&gt;&lt;/result&gt; --&gt;</span>
<span class="tag">&lt;/<span class="title">association</span>&gt;</span>

<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findItemsById"</span> <span class="attribute">parameterType</span>=<span class="value">"int"</span> <span class="attribute">resultType</span>=<span class="value">"items"</span>&gt;</span>
    select * from items where id=#{id}
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<p>开启全局延迟加载</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">settings</span>&gt;</span>
    <span class="comment">&lt;!-- 全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载 --&gt;</span>
    <span class="comment">&lt;!-- 默认为false --&gt;</span>
    <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"lazyLoadingEnable"</span> <span class="attribute">value</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">setting</span>&gt;</span>
    <span class="comment">&lt;!-- 当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。
         否则，每个属性都按需加载。 --&gt;</span>
    <span class="comment">&lt;!-- 默认为true --&gt;</span>
    <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"aggressiveLazyLoading"</span> <span class="attribute">value</span>=<span class="value">"false"</span>&gt;</span><span class="tag">&lt;/<span class="title">setting</span>&gt;</span>
<span class="tag">&lt;/<span class="title">settings</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-sql">动态 SQL</h1>
<h2 id="if">if</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>&lt;select id=<span class="string">"findUserInOrderDetailInOrder"</span> parameterType=<span class="string">"user"</span> resultMap=<span class="string">""</span>&gt;
  select orders.*
      user<span class="preprocessor">.username</span>,
      user<span class="preprocessor">.sex</span>,
      user<span class="preprocessor">.address</span>,
      orderdetial<span class="preprocessor">.id</span> orderdetail_id,
      orderdetail<span class="preprocessor">.item</span>_id,
      orderdetail<span class="preprocessor">.item</span>_num,
      orderdetial<span class="preprocessor">.item</span>_price,
    from orders, user, orderdetail
    where orders<span class="preprocessor">.user</span>_id = user<span class="preprocessor">.id</span>
      <span class="keyword">and</span> orders<span class="preprocessor">.id</span>=orderdetail<span class="preprocessor">.orders</span>_id
    
    &lt;!-- 注意不是 user<span class="preprocessor">.id</span> --&gt;
    &lt;if test=<span class="string">"id!=null and id!=''"</span>&gt;
        <span class="keyword">AND</span> user<span class="preprocessor">.id</span>=<span class="preprocessor">#{id}</span>
    &lt;/if&gt;
&lt;/select&gt;
</pre></td></tr></table></figure>

<h2 id="where">where</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserList"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user
    <span class="comment">&lt;!-- 解决如果条件都不符合, 会多出一个 where --&gt;</span>
    <span class="tag">&lt;<span class="title">where</span>&gt;</span>
        <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"id!=null and id!=''"</span>&gt;</span>
            and user.id=#{id}
        <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">where</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="foreach">foreach</h2>
<p>向sql传递数组或List，mybatis使用foreach解析</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">&lt;!-- User{ids:Array[Int]} --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserList"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user
    <span class="comment">&lt;!-- 解决如果条件都不符合, 会多出一个 where --&gt;</span>
    <span class="tag">&lt;<span class="title">where</span>&gt;</span>
        <span class="comment">&lt;!-- ids是集合, item 是集合中的项目 --&gt;</span>
        <span class="comment">&lt;!-- 生成 user.id in (1, 2, 3) --&gt;</span>
        <span class="tag">&lt;<span class="title">foreach</span> <span class="attribute">collection</span>=<span class="value">"ids"</span> <span class="attribute">item</span>=<span class="value">"items"</span> <span class="attribute">open</span>=<span class="value">"user.id in("</span> <span class="attribute">close</span>=<span class="value">")"</span> <span class="attribute">separator</span>=<span class="value">","</span>&gt;</span>
            #{items}
        <span class="tag">&lt;/<span class="title">foreach</span>&gt;</span>
        
        <span class="comment">&lt;!-- 第二种写法  --&gt;</span>
        <span class="comment">&lt;!-- 生成 and user.id=1 or user.id=1 --&gt;</span>
        <span class="tag">&lt;<span class="title">foreach</span> <span class="attribute">collection</span>=<span class="value">"ids"</span> <span class="attribute">item</span>=<span class="value">"items"</span> <span class="attribute">open</span>=<span class="value">"and ("</span> <span class="attribute">close</span>=<span class="value">")"</span> <span class="attribute">separator</span>=<span class="value">"or"</span>&gt;</span>
            user.id=#{items}
        <span class="tag">&lt;/<span class="title">foreach</span>&gt;</span>

        <span class="tag">&lt;<span class="title">foreach</span> <span class="attribute">collection</span>=<span class="value">"array"</span> <span class="attribute">index</span>=<span class="value">"index"</span> <span class="attribute">item</span>=<span class="value">"item"</span>
             <span class="attribute">open</span>=<span class="value">"and id in("</span> <span class="attribute">separator</span>=<span class="value">","</span> <span class="attribute">close</span>=<span class="value">")"</span> &gt;</span>
		    #{item.id} 
		 <span class="tag">&lt;/<span class="title">foreach</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">where</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="set">set</h2>
<p>TODO</p>
<h1 id="sql-">Sql 片段</h1>
<p>抽取重用的 sql 片段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">sql</span> <span class="attribute">id</span>=<span class="value">"user_query"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">if</span> <span class="attribute">test</span>=<span class="value">"id!=null and id!=''"</span>&gt;</span>
      and user.id=#{id}
    <span class="tag">&lt;/<span class="title">if</span>&gt;</span>
<span class="tag">&lt;/<span class="title">sql</span>&gt;</span>

<span class="tag">&lt;<span class="title">select</span>&gt;</span>
    ...
    <span class="tag">&lt;<span class="title">where</span>&gt;</span>
        <span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"user_query"</span>&gt;</span> <span class="tag">&lt;/<span class="title">include</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">where</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="comment">&lt;!-- 如果引用其他mapper.xml的sql片段, 需要及啊家辉命名空间--&gt;</span>
<span class="tag">&lt;<span class="title">include</span> <span class="attribute">refid</span>=<span class="value">"namespace.sql片段名"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">include</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">缓存</h1>
<h2 id="-">一级缓存</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>SqlSession sqlSession = sqlSessionFactory<span class="preprocessor">.openSession</span>()<span class="comment">;</span>
UserMapper userMapper = sqlSession<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>
// 从数据库中取出来, 写入缓存
user<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>
// 同一个sql中, 相同的两次次查询发出一个sql
user<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>

// 第二次测试
// open new session
user<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>
// 任何数据库更新, 删除, 插入之后都会将 sqlSession 的缓存清空
// 更新
User user_update = new User<span class="comment">;</span>
user_update<span class="preprocessor">.setId</span>(<span class="number">1</span>)<span class="comment">;</span>
user_update<span class="preprocessor">.setUsername</span>(<span class="string">""</span>)<span class="comment">;</span>
// update 会清除本地缓存
userMapper<span class="preprocessor">.updateUserById</span>(user_update)<span class="comment">;</span>
sqlSession<span class="preprocessor">.commit</span>()<span class="comment">;</span>

user<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">二级缓存</h2>
<p>一个项目中肯定会存在很多共用的查询数据，对于这一部分的数据，没必要
每一个用户访问时都去查询数据库，因此配置二级缓存将是非常必要的</p>
<p>Mybatis 的二级缓存即查询缓存, 它的作用域是一个 mapper 的 namespace,
即在同一个 namespace 中查询 sql 可以从缓存中获取数据</p>
<p>二级缓存是可以跨 SqlSession 的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 开启二级缓存 --&gt;</span>
<span class="comment">&lt;!-- 全局设置 --&gt;</span>
<span class="tag">&lt;<span class="title">settings</span>&gt;</span>
    <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"cacheEnabled"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">settings</span>&gt;</span>

<span class="comment">&lt;!-- 开启mapper的二级缓存 --&gt;</span>
<span class="tag">&lt;<span class="title">mapper</span>&gt;</span>
    <span class="tag">&lt;<span class="title">cache</span> &gt;</span><span class="tag">&lt;/<span class="title">cache</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
</pre></td></tr></table></figure>

<p>二级缓存测试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre>SqlSession session1 = openSession()<span class="comment">;</span>
SqlSession session2 = openSession()<span class="comment">;</span>

UserMapper userMapper1 = session1<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>
UserMapper userMapper2 = session2<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>

userMapper1<span class="preprocessor">.findUserList</span>()<span class="comment">;</span>
session1<span class="preprocessor">.close</span>()<span class="comment">;</span>
// 必须先要关闭 session1, 关闭session的时候, session1的缓存会被写入到二级缓存
// 如果开启二级缓存, 那么不会再发出sql语句
userMapper2<span class="preprocessor">.findUserList</span>()<span class="comment">;</span>


// 测试二:
SqlSession session1 = openSession()<span class="comment">;</span>
SqlSession session2 = openSession()<span class="comment">;</span>
SqlSession session3 = openSession()<span class="comment">;</span>

UserMapper userMapper1 = session1<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>
UserMapper userMapper2 = session2<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>
UserMapper userMapper3 = session2<span class="preprocessor">.getMapper</span>(UserMapper<span class="preprocessor">.class</span>)<span class="comment">;</span>

User user1 = userMapper1<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>
session1<span class="preprocessor">.close</span>()<span class="comment">;</span>

user1<span class="preprocessor">.setUsername</span>(<span class="string">"changed"</span>)<span class="comment">;</span>
session2<span class="preprocessor">.updateUserById</span>(user1)<span class="comment">;</span>
session2<span class="preprocessor">.commit</span>()<span class="comment">;</span>

// 如果 &lt;update id=<span class="string">"updateUserById"</span> flushcache=<span class="string">"true"</span>&gt;, 那么更新时, 会刷新二级缓存
session3<span class="preprocessor">.findUserById</span>(<span class="number">1</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="-">配置二级缓存</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 默认60秒刷新一次, 存数结果对象或列表 512个引用,
     返回的对象认为是只读的 --&gt;</span>
<span class="comment">&lt;!-- LRU 最近最少使用的:移除最长时间不被使用的对象。 --&gt;</span>
<span class="comment">&lt;!-- FIFO 先进先出:按对象进入缓存的顺序来移除它们。 --&gt;</span>
<span class="comment">&lt;!-- SOFT 软引用:移除基于垃圾回收器状态和软引用规则的对象。 --&gt;</span>
<span class="comment">&lt;!-- WEAK 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。      --&gt;</span>
<span class="comment">&lt;!-- size 默认值是1024, readOnly 默认是false --&gt;</span>
<span class="tag">&lt;<span class="title">cache</span> <span class="attribute">eviction</span>=<span class="value">"FIFO"</span> <span class="attribute">flushInterval</span>=<span class="value">"60000"</span> <span class="attribute">size</span>=<span class="value">"512"</span> <span class="attribute">readOnly</span>=<span class="value">"true"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h3 id="ehcache-">Ehcache 配置</h3>
<p><code>ehcache.xml</code> defaultCache 配置说明</p>
<ul>
<li>maxElementsInMemory 内存中最大缓存对象数.
当超过最大对象数的时候,ehcache会按指定的策略去清理内存</li>
<li>eternal 缓存对象是否永久有效,一但设置了,timeout将不起作用.</li>
<li>timeToIdleSeconds 设置Element在失效前的允许闲置时间.仅当element不是永久有效时使用,
可选属性,默认值是0,也就是可闲置时间无穷大.</li>
<li>timeToLiveSeconds：设置Element在失效前允许存活时间.
最大时间介于创建时间和失效时间之间.
仅当element是永久有效时使用,默认是0.,也就是element存活时间无穷大.</li>
<li>overflowToDisk 配置此属性,当内存中Element数量达到maxElementsInMemory时,
Ehcache将会Element写到磁盘中.</li>
<li>diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.
默认是30MB.每个Cache都应该有自己的一个缓冲区.</li>
<li>maxElementsOnDisk 磁盘中最大缓存对象数,若是0表示无穷大.</li>
<li>diskPersistent 是否在重启服务的时候清楚磁盘上的缓存数据.
true不清除.</li>
<li>diskExpiryThreadIntervalSeconds 磁盘失效线程运行时间间隔.</li>
<li>memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时,
Ehcache将会根据指定的策略去清理内存.
默认策略是LRU(最近最少使用).
你可以设置为FIFO(先进先出)或是LFU(较少使用).</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 这样设置 echcache --&gt;</span>
<span class="tag">&lt;<span class="title">cache</span> <span class="attribute">type</span>=<span class="value">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h1 id="mybatis-springmvc-">Mybatis 和 SpringMVC 整合</h1>
<p>导入 <code>mybatis-spring1.2.2.jar</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
    <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns:mvc</span>=<span class="value">"http://www.springframework.org/schema/mvc"</span>
    <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
    <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span> <span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span>
    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd "</span>&gt;</span>

    <span class="comment">&lt;!-- 引用配置文件 --&gt;</span>
    <span class="comment">&lt;!-- 加载数据源配置文件 --&gt;</span>
    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:db.properties"</span> /&gt;</span>  
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"org.apache.commons.dbcp.BasicDataSource"</span>
           <span class="attribute">destroy-method</span>=<span class="value">"close"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClassName"</span> <span class="attribute">value</span>=<span class="value">"${mysql.driver}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"${mysql.url}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${mysql.username}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${mysql.password}"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxActive"</span> <span class="attribute">value</span>=<span class="value">"30"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxIdle"</span> <span class="attribute">value</span>=<span class="value">"5"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<p>applicationContext-dao.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- SqlSessioniFactory --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sqlSessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:mybatic/SqlMapConfig.xml"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="doctype">&lt;!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">properties</span> <span class="attribute">resource</span>=<span class="value">"db.properties"</span> /&gt;</span>
    <span class="comment">&lt;!-- 全局参数配置  --&gt;</span>	
    <span class="tag">&lt;<span class="title">settings</span>&gt;</span>
        <span class="comment">&lt;!--开启全局性设置懒加载 --&gt;</span>
        <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"lazyLoadingEnabled"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span>
        <span class="comment">&lt;!-- 设置为按需加载 --&gt;</span>
        <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"aggressiveLazyLoading"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span>
        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span>
        <span class="tag">&lt;<span class="title">setting</span>  <span class="attribute">name</span>=<span class="value">"cacheEnabled"</span> <span class="attribute">value</span>=<span class="value">"true"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">settings</span>&gt;</span>
    <span class="comment">&lt;!-- 定义别名 --&gt;</span>
    <span class="tag">&lt;<span class="title">typeAliases</span>&gt;</span>
        <span class="comment">&lt;!-- &lt;typeAlias alias="user" type="cn.itcast.mybatis.po.User" /&gt; --&gt;</span>
        <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"cn.itcast.mybatis.po"</span>/&gt;</span>
        <span class="comment">&lt;!-- &lt;typeAlias alias="" type=""/&gt; --&gt;</span>
    <span class="tag">&lt;/<span class="title">typeAliases</span>&gt;</span>
	
    <span class="comment">&lt;!-- 定义databaseIdProvider --&gt;</span>
    <span class="tag">&lt;<span class="title">databaseIdProvider</span> <span class="attribute">type</span>=<span class="value">"DB_VENDOR"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"SQL Server"</span> <span class="attribute">value</span>=<span class="value">"sqlserver"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"DB2"</span> <span class="attribute">value</span>=<span class="value">"db2"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"Oracle"</span> <span class="attribute">value</span>=<span class="value">"oracle"</span> /&gt;</span><span class="comment">&lt;!-- oracle的databaseid为"oracle" --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"MySQL"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span> /&gt;</span><span class="comment">&lt;!-- mysql的databaseid为"mysql"，此名称和mapper.xml文件中下定义databaseId一致 --&gt;</span>
    <span class="tag">&lt;/<span class="title">databaseIdProvider</span>&gt;</span>
	
    <span class="comment">&lt;!-- 指定sql映射文件 --&gt;</span>
    <span class="tag">&lt;<span class="title">mappers</span>&gt;</span>
        <span class="comment">&lt;!-- 指定mapper映射文件的位置 
             &lt;mapper resource="sqlmap/User.xml" /&gt; --&gt;</span>
        <span class="comment">&lt;!-- 
          通过class指定mapper接口，必须保证mapper接口名称和mapper映射文件名称相同，且放在同一个目录中
        &lt;mapper class="cn.itcast.mybatis.mapper.UserMapper"/&gt; --&gt;</span>
        <span class="comment">&lt;!--
          通过package指定扫描mapper包的路径 ，mybatis自动将此包下的mappre接口与mapper映射文件绑定
          必须保证mapper接口名称和mapper映射文件名称相同，且放在同一个目录中
        --&gt;</span>
        <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"cn.itcast.mybatis.mapper"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">mappers</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-dao-">方式一 编写 dao 方式</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// &lt;bean id=userDao class=UserDaoImpl&gt;</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span>{</span>
}
</pre></td></tr></table></figure>

<h2 id="-mapper-bean">方式二 mapper bean</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 使用工厂bean --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"userMapper"</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.pring.mapper.MapperFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mapperInterface"</span> <span class="attribute">value</span>=<span class="value">"UserMapper"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlSessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-mapper-">方式三 mapper 注解</h2>
<p>mapper.xml文件编写，注意：</p>
<ul>
<li>mapper.xml中的namespace为mapper接口的地址</li>
<li>mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致</li>
<li>如果将mapper.xml和mapper接口的名称保持一致则不用在 sqlMapConfig.xml 中进行配置</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- mapper 扫描器 --&gt;</span>
<span class="comment">&lt;!-- 对象名是 bean 的类名的头字母小写  --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"basePackage"</span> <span class="attribute">value</span>=<span class="value">"mapper接口包地址"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sqlSessionFactoryBeanName"</span> <span class="attribute">value</span>=<span class="value">"sqlSessionFactory"</span>/&gt;</span> 
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-Functional Programming in Scala]]></title>
    <link href="http://zhpooer.github.io/2014/07/15/scala-in-action-functional-programming-in-scala/"/>
    <id>http://zhpooer.github.io/2014/07/15/scala-in-action-functional-programming-in-scala/</id>
    <published>2014-07-15T03:35:59.000Z</published>
    <updated>2014-07-17T03:14:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">类型参数化</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maybe</span>[+<span class="title">A</span>] {</span>
  <span class="keyword">def</span> isEmpty: Boolean
  <span class="keyword">def</span> get: A
}
<span class="keyword">final</span> <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Just</span>[<span class="title">A</span>]<span class="params">(value: A)</span> <span class="keyword">extends</span> <span class="title">Maybe</span>[<span class="title">A</span>] {</span>
  <span class="keyword">def</span> isEmpty = <span class="keyword">false</span>
  <span class="keyword">def</span> get = value
}
<span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">Nil</span> <span class="keyword">extends</span> <span class="title">Maybe</span>[<span class="title">Nothing</span>] {</span>
  <span class="keyword">def</span> isEmpty = <span class="keyword">true</span>
  <span class="keyword">def</span> get = <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Nil.get"</span>)
}
</pre></td></tr></table></figure>

<h2 id="-">协变</h2>
<p>When using type parameters for classes or traits,
you can use a + sign along with the type parameter to make it
covariant (like the Maybe class in the previous example).</p>
<p>Covariance allows subclasses to override and use narrower types(Like Nothing)
than their superclass in covariant positions such as
the return value. </p>
<p>Traversable is the parent trait for all the collection types in Scala.</p>
<h2 id="-">逆变</h2>
<p>In the case of covariance, subtyping
can go downward, as you saw in the example of List, but in contravariance it’s the
opposite: subtypes go upward.</p>
<p>Contravariance comes in handy when you have a mutable data structure.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// java 会在运行时报错</span>
<span class="built_in">Object</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];
arr[<span class="number">0</span>] = <span class="string">"Hello, there!"</span>;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>// Scala uses the minus sign (-) to denote contravariance
// and the plus sign (+) <span class="keyword">for</span> covariance.

// 参数是协变的, 返回值是逆变的
trait Function1[-P, +R] { <span class="keyword">...</span> }

val addOne: Function1[Any, Int] = { x: Int =&gt; x + <span class="number">1</span> }

// 此句非法, 因为 any 为所有的对象的父类
val asString: Int =&gt; Int = { x: Int =&gt; (x.toString: Any) }
</pre></td></tr></table></figure>

<h2 id="-">不变</h2>
<p>A type parameter is invariant when it’s neither covariant nor contravariant. All Scala
mutable collection classes are invariant. </p>
<p>如 <code>final class ListBuffer[A]</code>, 在scala中定义</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>scala&gt; val mxs: ListBuffer[String] = ListBuffer(<span class="string">"pants"</span>)
<span class="label">mxs:</span> scala<span class="preprocessor">.collection</span><span class="preprocessor">.mutable</span><span class="preprocessor">.ListBuffer</span>[String] = ListBuffer(pants)

scala&gt; val everything: ListBuffer[Any] = mxs 
发生错误, 因为类型是 invariant
</pre></td></tr></table></figure>

<h2 id="-">类型的边界</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maybe</span>[+<span class="title">A</span>] {</span>
  <span class="keyword">def</span> isEmpty: Boolean
  <span class="keyword">def</span> get: A
  <span class="comment">// 这里报错</span>
  <span class="comment">/// Because A is a covariant type,</span>
  <span class="comment">// Scala doesn’t allow the covariant type as an input parameter. </span>
  <span class="keyword">def</span> getOrElse(<span class="keyword">default</span>: A): A = {
    <span class="keyword">if</span>(isEmpty) <span class="keyword">default</span> <span class="keyword">else</span> get
  }
}
</pre></td></tr></table></figure>

<p>You could solve this problem in two ways:
make the Maybe class an invariant and lose
all the subtyping with Just and Nil, or use type bound. </p>
<p>Scala provides two types of type bound: lower and upper.</p>
<p>An upper type bound T &lt;: A declares that type variable T
is a subtype of a type A, and A is the upper bound. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">defaultToNull</span>[<span class="title">A</span> &lt;:</span> Maybe[_]](p: A) = {
  p.getOrElse(null)
}
</pre></td></tr></table></figure>

<p>A lower bound sets the lower limit of the type parameter.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>sealed abstract class Maybe[+A] {
  def isEmpty: Boolean
  def get: A
  def getOrElse[<span class="link_label">B &gt;: A</span>](<span class="link_url">default: B</span>): B = {
<span class="code">    if(isEmpty) default else get</span>
  }
}
</pre></td></tr></table></figure>

<h1 id="-">头等函数</h1>
<p>A function is called higher order if it takes a function as an argument or returns a
function as a result.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>class List[+A] ...
{
  def map[<span class="link_label">B</span>](<span class="link_url">f: A =&gt; B</span>) : List[B]
}
</pre></td></tr></table></figure>

<blockquote>
<p>Call-by-value, call-by-reference, and call-by-name method invocation<br>Java supports two types of method invocation: call-by-reference and call-by-value.<br>Scala also provides additional method invocation mechanisms called call-by-name and call-by-need. </p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>def <span class="keyword">log</span>(m: <span class="built_in">String</span>) <span class="subst">=</span> <span class="keyword">if</span>(logEnabled) println(m)

<span class="comment">// 在这里, popErrorMessage, 总会先被运算</span>
def popErrorMessage <span class="subst">=</span> { popMessageFromASlowQueue() }
<span class="keyword">log</span>(<span class="string">"The error message is "</span> <span class="subst">+</span> popErrorMessage)<span class="built_in">.</span>

<span class="comment">// 但是这样呢? 这是按需</span>
def <span class="keyword">log</span>(m: <span class="subst">=&gt;</span> <span class="built_in">String</span>) <span class="subst">=</span> <span class="keyword">if</span>(logEnabled) println(m)
</pre></td></tr></table></figure>

<p>When passing an existing function (not a function object) as a parameter,
Scala creates a new anonymous function object with an apply method,
which invokes the original function. This is called eta-expansion.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> ++ <span class="keyword">extends</span> <span class="title">Function1</span>[<span class="title">Int</span>, <span class="title">Int</span>]{</span>
  <span class="keyword">def</span> apply(p: Int): Int = p + <span class="number">1</span>
}

<span class="keyword">val</span> ++ = (x: Int) =&gt; x + <span class="number">1</span>

<span class="class"><span class="keyword">object</span> ++ <span class="keyword">extends</span> <span class="params">(Int =&gt; Int)</span> {</span>
  <span class="keyword">def</span> apply(p: Int): Int = p + <span class="number">1</span>
}

<span class="keyword">val</span> addOne: Int =&gt; Int = x =&gt; x + <span class="number">1</span>
<span class="keyword">val</span> addTwo: Int =&gt; Int = x =&gt; x + <span class="number">2</span>
<span class="keyword">val</span> addThree = addOne compose addTwo
<span class="comment">// like this</span>
<span class="keyword">val</span> addThree: Int =&gt; Int = x =&gt; addOne(addTwo(x))
</pre></td></tr></table></figure>

<h1 id="scala-collection-hierarchy">Scala collection hierarchy</h1>
<p><img src="/img/scala_collection_hierarchy.png" alt="scala继承图"></p>
<p>In Scala you can define a traversable object as finite or infinite;
<code>hasDefiniteSize</code> determines whether a collection is finite or infinite. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>import java.util.{Collection =&gt; JCollection, ArrayList }
class JavaToTraversable[<span class="link_label">E</span>](<span class="link_url">javaCollection: JCollection[E]</span>) extends
<span class="code">    Traversable[E] {</span>
  def foreach[<span class="link_label">U</span>](<span class="link_url">f : E =&gt; U</span>): Unit = {
<span class="code">    val iterator = javaCollection.iterator</span>
<span class="code">    while(iterator.hasNext) {</span>
<span class="code">      f(iterator.next)</span>
<span class="code">    }</span>
  }
}
</pre></td></tr></table></figure>

<p>Overall, Vector has better performance characteristics compared to other collection types.</p>
<p>Buffers are always mutable, and most of the collections
I talk about here are internally built using
<code>Buffers</code>. The two common subclasses of Buffers are <code>mutable.ListBuffer</code> and
<code>mutable.ArrayBuffer</code>.</p>
<p>Unlike other collections, a Tuple is a heterogeneous collection where you can store various types of elements.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Artist</span><span class="params">(name: String, genre: String)</span></span>
<span class="keyword">val</span> artists = List(
    Artist(<span class="string">"Pink Floyd"</span>, <span class="string">"Rock"</span>),
    Artist(<span class="string">"Led Zeppelin"</span>, <span class="string">"Rock"</span>),
    Artist(<span class="string">"Michael Jackson"</span>, <span class="string">"Pop"</span>),
    Artist(<span class="string">"Above & Beyond"</span>, <span class="string">"trance"</span>)
)
<span class="keyword">for</span>(Artist(name, genre) &lt;- artists; <span class="keyword">if</span>(genre == <span class="string">"Rock"</span>))
<span class="keyword">yield</span> name

<span class="comment">// 会被翻译为</span>
artists withFilter {
  <span class="keyword">case</span> Artist(name, genre) =&gt; genre == <span class="string">"Rock"</span>
} map {
  <span class="keyword">case</span> Artist(name, genre) =&gt; name
}

<span class="comment">// 不用 filter 的原因, 这样会返回全部, 但是你只想返回头一个</span>
<span class="keyword">val</span> y = list filter {
  <span class="keyword">case</span> i =&gt; go
} map {
  <span class="keyword">case</span> i =&gt; {
    go = <span class="keyword">false</span>
    i
  }
}


<span class="keyword">for</span> {
    ArtistWithAlbums(artist, albums) &lt;- artistsWithAlbums
    album &lt;- albums
    <span class="keyword">if</span>(artist.genre == <span class="string">"Rock"</span>)
} <span class="keyword">yield</span> album
<span class="comment">// 被翻译为</span>
artistsWithAlbums flatMap {
    <span class="keyword">case</span> ArtistWithAlbums(artist, albums) =&gt; albums withFilter {
        album =&gt; artist.genre == <span class="string">"Rock"</span>
    } map { <span class="keyword">case</span> album =&gt; album }
}
</pre></td></tr></table></figure>

<p>scala.Either represents one of the two possible meaningful results, unlike
Option, which returns a single meaningful result or Nothing. Either provides two
subc</p>
<h1 id="lazy-collections">lazy collections</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// view 是懒计算</span>
<span class="built_in">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)<span class="built_in">.</span>view<span class="built_in">.</span><span class="built_in">map</span>(_ <span class="subst">+</span> <span class="number">1</span>)<span class="built_in">.</span>head

<span class="keyword">import</span> scala<span class="built_in">.</span>io<span class="built_in">.</span>_
<span class="keyword">import</span> scala<span class="built_in">.</span><span class="built_in">xml</span><span class="built_in">.</span><span class="built_in">XML</span>
def tweets(<span class="keyword">handle</span>: <span class="built_in">String</span>) <span class="subst">=</span> {
  println(<span class="string">"processing tweets for "</span> <span class="subst">+</span> <span class="keyword">handle</span>)
  val source <span class="subst">=</span> Source<span class="built_in">.</span>fromURL(<span class="literal">new</span>
      java<span class="built_in">.</span>net<span class="built_in">.</span>URL(<span class="string">"http://search.twitter.com/search.atom?q="</span> <span class="subst">+</span> <span class="keyword">handle</span>))
  val iterator <span class="subst">=</span> source<span class="built_in">.</span>getLines()
  val builder <span class="subst">=</span> <span class="literal">new</span> StringBuilder
  for(line <span class="subst">&lt;-</span> iterator) builder<span class="built_in">.</span>append(line)
  <span class="built_in">XML</span><span class="built_in">.</span>loadString(builder<span class="built_in">.</span>toString)
}

val allTweets <span class="subst">=</span> <span class="built_in">Map</span>(
    <span class="string">"nraychaudhuri"</span> <span class="subst">-&gt; </span>tweets _,
    <span class="string">"ManningBooks"</span> <span class="subst">-&gt; </span>tweets _,
    <span class="string">"bubbl_scala"</span> <span class="subst">-&gt; </span>tweets _
)

<span class="comment">// 可以这样使用</span>
allTweets<span class="built_in">.</span>view<span class="built_in">.</span><span class="built_in">map</span>{ t <span class="subst">=&gt;</span> t<span class="built_in">.</span>_2(t<span class="built_in">.</span>_1)}<span class="built_in">.</span>head
<span class="comment">// Note that starting with Scala 2.8, for-comprehensions are now nonstrict for standard operations.</span>
<span class="comment">// nostrict means lazy collections?</span>
for(t <span class="subst">&lt;-</span> allTweets; <span class="keyword">if</span>(t<span class="built_in">.</span>_1 <span class="subst">==</span> <span class="string">"ManningBooks"</span>)) t<span class="built_in">.</span>_2(t<span class="built_in">.</span>_1)
</pre></td></tr></table></figure>

<h2 id="stream">Stream</h2>
<p>The class Stream implements lazy lists in Scala where elements are evaluated only when
they’re needed. If you want, you can build an infinite list in Scala using Stream ,
and it will consume memory based on your use.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>scala&gt; List(<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>,<span class="string">"five"</span>).zip(Stream.<span class="built_in">from</span>(<span class="number">0</span>))

res88: List[(java.lang.String, Int)] = List((<span class="constant">zero</span>,<span class="number">0</span>), (<span class="constant">one</span>,<span class="number">1</span>), (<span class="constant">two</span>,<span class="number">2</span>),
(<span class="constant">three</span>,<span class="number">3</span>), (<span class="constant">four</span>,<span class="number">4</span>), (<span class="constant">five</span>,<span class="number">5</span>))
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>// 斐波那契数列, 这样做没有效率
<span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n: Int)</span>:</span> Int = n match {
  case <span class="number">0</span> =&gt; <span class="number">0</span>
  case <span class="number">1</span> =&gt; <span class="number">1</span>
  case n =&gt; fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)
}

val fib: Stream[Int] = Stream.cons(<span class="number">0</span>, Stream.cons(<span class="number">1</span>,
    fib.zip(fib.tail).map(t =&gt; t._1 + t._2)))
</pre></td></tr></table></figure>

<h1 id="parallel-collections">parallel collections</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>scala&gt; import scala<span class="preprocessor">.collection</span><span class="preprocessor">.parallel</span><span class="preprocessor">.immutable</span>._
import scala<span class="preprocessor">.collection</span><span class="preprocessor">.parallel</span><span class="preprocessor">.immutable</span>._

scala&gt; ParVector(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>)<span class="preprocessor">.map</span> {<span class="built_in">x</span> =&gt;
    println(Thread<span class="preprocessor">.currentThread</span><span class="preprocessor">.getName</span>)<span class="comment">; x / 2 }</span>

// <span class="keyword">In</span> this case tasksupport is changed to ForkJoinTask with four working threads.
import scala<span class="preprocessor">.collection</span><span class="preprocessor">.parallel</span>._
val pv = immutable<span class="preprocessor">.ParVector</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)
pv<span class="preprocessor">.tasksupport</span> = new ForkJoinTaskSupport(new
scala<span class="preprocessor">.concurrent</span><span class="preprocessor">.forkjoin</span><span class="preprocessor">.ForkJoinPool</span>(<span class="number">4</span>))
</pre></td></tr></table></figure>

<p><img src="/img/par_collection.png" alt="并发集合类继承图"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>val vs = Vector<span class="preprocessor">.range</span>(<span class="number">1</span>, <span class="number">100000</span>)
vs<span class="preprocessor">.par</span><span class="preprocessor">.filter</span>(_ % <span class="number">2</span> == <span class="number">0</span>)

Vector<span class="preprocessor">.range</span>(<span class="number">1</span>, <span class="number">100000</span>)<span class="preprocessor">.par</span><span class="preprocessor">.filter</span>(_ % <span class="number">2</span> == <span class="number">0</span>)<span class="preprocessor">.seq</span>
</pre></td></tr></table></figure>

<p>Operations like `map, flatMap , filter , and forall are good examples of methods that
would be easily parallelized.</p>
<p>If it takes less time to perform the operation than
to create a parallel collection, then using the parallel version will reduce your perfor-
mance. It also depends on the type of collection you’re using. Converting Seq to
ParSeq is much faster than converting List to Vector because there’s no parallel List
implementation, so when you invoke par on List you get Vector back.</p>
<h1 id="-">函数式编程</h1>
<p>A function provides the predictability that for a given input you will always get the
same output.</p>
<p>But what about the functions that depend on some external state and don’t return
the same result all the time? They’re functions but they’re not pure functions. A pure
function doesn’t have side effects.</p>
<p>The value is referential transparency. Referential transparency is a property whereby
an expression could be replaced by its value without affecting the program. </p>
<p><code>val v = add(10, 10) + add(5, 5)</code>
Because add is a pure function, I can replace the function call add(10, 10) with its
result, which is 20, without changing the behavior of the program. And similarly I
could replace add(5, 5) with 10 without affecting the behavior of the program. </p>
<p><strong>methods in Scala don’t have any type; type is only associated with the
enclosing class, whereas functions are represented by a type and object.</strong></p>
<h2 id="pure-functional-program">pure functional program</h2>
<p>If you can start thinking about your program as a collection of subexpressions
combined into one single referentially transparent expression,
you have achieved a purely functional program. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> <span class="title">PureFunctionalProgram</span> {</span>
  <span class="keyword">def</span> main(args: Array[String]):Unit = singleExpression(args.toList)
  <span class="keyword">def</span> singleExpression: List[String] =&gt; (List[Int], List[Int]) = { a =&gt;
    a map (_.toInt) partition (_ &lt; <span class="number">30</span>)
  }
}
<span class="comment">// In this new solution, every time the side property is modified,</span>
<span class="comment">//a new copy of PureSquare is returned</span>
<span class="class"><span class="keyword">class</span> <span class="title">PureSquare</span><span class="params">(val side: Int)</span> {</span>
  <span class="keyword">def</span> newSide(s: Int): PureSquare = <span class="keyword">new</span> PureSquare(s)
  <span class="keyword">def</span> area = side * side
}
</pre></td></tr></table></figure>

<h2 id="demo-http-server">DEMO: HTTP server</h2>
<p>To demonstrate how this works, you’re going to build a simple HTTP server that
only serves files from a directory in which the server is started.
You’re going to implement the HTTP GET command. Like any server,
this HTTP server is full of side effects,
like writing to a socket, reading files from the filesystem,
and so on. Here are your design goals for the server you’re building:</p>
<ul>
<li>Separate the code into different layers, pure code from the side-effecting code.</li>
<li>Respond with the contents of a file for a given HTTP GET request.</li>
<li>Respond with a 404 message when the file requested is missing.</li>
</ul>
<p>Separating pure and side-effecting
(impure) code. The side-effecting code should
form a thin layer around the application.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> <span class="title">Pure</span> {</span>
  <span class="class"><span class="keyword">trait</span> <span class="title">Resource</span> {</span>
    <span class="keyword">def</span> exists: Boolean
    <span class="keyword">def</span> contents: List[String]
    <span class="keyword">def</span> contentLength: Int
  }
  <span class="keyword">type</span> ResourceLocator = String =&gt; Resource
  <span class="keyword">type</span> Request = Iterator[Char]
  <span class="keyword">type</span> Response = List[String]
  <span class="keyword">def</span> get(req: Request)(implicit locator: ResourceLocator): Response = {
    <span class="keyword">val</span> requestedResource = req.takeWhile(x =&gt; x != <span class="string">'\n'</span>)
          .mkString.split(<span class="string">" "</span>)(<span class="number">1</span>).drop(<span class="number">1</span>)
    (_200 orElse _404)(locator(requestedResource))
  }
  <span class="keyword">private</span> <span class="keyword">def</span> _200: PartialFunction[Resource, Response] = {
    <span class="keyword">case</span> resource <span class="keyword">if</span>(resource.exists) =&gt;
      <span class="string">"HTTP/1.1 200 OK"</span> ::
      (<span class="string">"Date "</span> + <span class="keyword">new</span> java.util.Date) ::
      <span class="string">"Content-Type: text/html"</span> ::
      (<span class="string">"Content-Length: "</span> + resource.contentLength) ::
      System.getProperty(<span class="string">"line.separator"</span>) ::
      resource.contents
    }
    <span class="keyword">private</span> <span class="keyword">def</span> _404: PartialFunction[Resource, Response] = {
      <span class="keyword">case</span> _ =&gt; List(<span class="string">"HTTP/1.1 404 Not Found"</span>)
    }
}

<span class="comment">// 封装的有副作用的操作</span>
<span class="keyword">import</span> Pure._
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">IOResource</span><span class="params">(name: String)</span> <span class="keyword">extends</span> <span class="title">Resource</span> {</span>
  <span class="keyword">def</span> exists = <span class="keyword">new</span> File(name).exists
  <span class="keyword">def</span> contents = Source.fromFile(name).getLines.toList
  <span class="keyword">def</span> contentLength = Source.fromFile(name).count(x =&gt; <span class="keyword">true</span>)
}
implicit <span class="keyword">val</span> ioResourceLocator: ResourceLocator =
  name =&gt; IOResource(name)
</pre></td></tr></table></figure>

<h2 id="-">方法和函数</h2>
<p>One downside of using methods is that it’s easy
to depend on the state defined by the enclosing class without
explicitly passing the dependencies as parameters
be careful about that because that will take you away from having pure methods.</p>
<p>Scala infuses functional programming with OOP by
transforming functions into objects. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="regexp">//</span> 这是方法
<span class="class"><span class="keyword">class</span> <span class="title">UseResource</span> {</span>
  <span class="regexp">//</span> Here use <span class="keyword">is</span> a method defined <span class="keyword">in</span> the <span class="class"><span class="keyword">class</span> <span class="title">UseResource</span>. </span>
  def use(<span class="attribute">r</span>: Resource): Boolean = {...}
}

<span class="regexp">//</span> 这是函数
val <span class="function"><span class="title">succ</span> = <span class="params">(x: Int)</span> =&gt;</span> x + <span class="number">1</span>
// 也可以这样定义
val succFunction = <span class="keyword">new</span> Function1[Int, Int] {
  def apply(<span class="attribute">x</span>:Int) : Int = x + <span class="number">1</span>
}
<span class="regexp">//</span> Functions <span class="keyword">in</span> Scala are represented <span class="keyword">by</span> a type <span class="keyword">and</span> object,
<span class="regexp">//</span> but methods aren’t. Methods are only associated <span class="reserved">with</span> the enclosing <span class="class"><span class="keyword">class</span>.</span>

<span class="regexp">//</span> 可以这样改写????
val <span class="attribute">use_func</span>: Resource<span class="function"> =&gt;</span> Boolean = (<span class="keyword">new</span> UseResource).use _
</pre></td></tr></table></figure>

<h3 id="-">头等函数的应用</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre>val r: Resource = getResource()
try {
  useResourceToDoUsefulStuff(r)
} finally {
  r.dispose()
}

def use[<span class="link_label">A, B &lt;: Resource </span>](<span class="link_url">r: Resource</span>)(f: Resource =&gt; A): A = {
  try {
<span class="code">    f(r)</span>
  } finally {
<span class="code">    r.dispose()</span>
  }
}

// 面向对象的过程式的写法
val x = Person(firstName, lastName)
x.setInfo(someInfo)
println("log: new person is created")
mailer.mail("new person joined " + x)
x.firstName

// 提供一种函数式的解决思路
def tap[<span class="link_label">A</span>](<span class="link_url">a: A</span>)(sideEffect: A =&gt; Unit): A = {
  sideEffect(a)
  a
}
val x = Person(firstName, lastName)
tap(x) { p =&gt;
  import p._
  setInfo(someInfo)
  println("log: new person is created")
  mailer.mail("new person joined " + x)
}.firstName

// 用上 implicity, 可以这样
object Combinators {
  implicit def kestrel[<span class="link_label">A</span>](<span class="link_url">a: A</span>) = new {
<span class="code">    def tap(sideEffect: A =&gt; Unit): A = {</span>
<span class="code">      sideEffect(a)</span>
<span class="code">      a</span>
<span class="code">    }</span>
  }
}

Person("Nilanjan", "Raychaudhuri").tap(p =&gt; {
  println("First name " + p.firstName)
  Mailer("some address")
}).lastName
</pre></td></tr></table></figure>

<h3 id="-">柯里化函数</h3>
<p>Function currying is a technique for transforming a function that takes
multiple parameters into a function that takes a single parameter.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">def</span> taxIt(s: TaxStrategy, product: String) = { s.taxIt(product) }

<span class="keyword">val</span> taxItF = taxIt _
<span class="comment">// 等同于</span>
taxItF.curried

<span class="comment">// 可以这样直接定义柯里化的函数</span>
<span class="keyword">def</span> taxIt(s: TaxStrategy)(product: String) = { s.taxIt(product) }
</pre></td></tr></table></figure>

<h3 id="-">偏函数</h3>
<p>A partial function is a function that’s only defined
for a subset of input values.</p>
<p>In Scala partial functions are defined by trait PartialFunction[-A, +B] and
extend scala.Function1 trait.</p>
<p>PartialFunction declares the
apply method and an additional method called def isDefinedAt(a: A):Boolean.
This isDefinedAt method determines whether the given partial function is defined
for a given parameter.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
<span class="comment">// 定义一个偏函数</span>
def intToChar: PartialFunction[Int, Char] = {
  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">'a'</span>
  <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="string">'c'</span>
}

<span class="comment">// scala 会这样翻译</span>
<span class="keyword">new</span> PartialFunction[Int, Char] {
  def apply(i: Int) = i match {
    <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">'a'</span>
    <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="string">'c'</span>
  }
  def isDefinedAt(i: Int): Boolean = i match {
    <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="keyword">true</span>
    <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="keyword">true</span>
    <span class="keyword">case</span> _ =&gt; <span class="keyword">false</span>
  }
}
</pre></td></tr></table></figure>

<p>The PartialFunction trait provides two interesting combinatory methods called
orElse and andThen.</p>
<p>The orElse method lets you combine this partial function with
another partial function. It’s much like if-else.</p>
<p>The andThen lets you compose transformation functions with a partial function
that works on the result produced by the partial function. </p>
<h3 id="-">递归</h3>
<p>Recursion is where a function calls itself.
One of the main benefits of recursion is that it lets you create solutions without
mutation.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(xs: List[Int])</span>:</span> Int = xs match {
  case Nil =&gt; <span class="number">0</span>
  case x :: ys =&gt; x + sum(ys)
}
</pre></td></tr></table></figure>

<h4 id="-">尾递归</h4>
<p>Head recursion is the more traditional way of doing recursion,
where you perform the recursive call
first and then take the return value from the recursive function and
calculate the result.</p>
<p>In tail recursion you perform your calculation first and then execute the recursive
call by passing the result of the current step to the next step.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>// 如果调用过多的, 会造成 栈溢出
<span class="function"><span class="keyword">def</span> <span class="title">length</span>[<span class="title">A</span>]<span class="params">(xs: List[A])</span>:</span> Int = xs match {
  case Nil =&gt; <span class="number">0</span>
  case x :: ys =&gt; <span class="number">1</span> + length(ys)
}
// 尾递归
<span class="function"><span class="keyword">def</span> <span class="title">length2</span>[<span class="title">A</span>]<span class="params">(xs: List[A])</span>:</span> Int = {
  <span class="decorator">@tailrec</span>
  <span class="function"><span class="keyword">def</span> <span class="title">_length</span><span class="params">(xs: List[A], currentLength: Int)</span>:</span> Int = xs match {
    case Nil =&gt; currentLength
    case x :: ys =&gt; _length(ys, currentLength + <span class="number">1</span>)
  }
  _length(xs, <span class="number">0</span>)
}
</pre></td></tr></table></figure>

<h3 id="adt">ADT</h3>
<p>Algebraic data type (ADT) is a classification.
A data type in general is a set of values.</p>
<p>Once you’ve created ADTs, you use them in functions. ADT s become much easier
to deal with if they’re implemented as case classes because pattern matching works
out of the box. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// 用 case class 定义 </span>
<span class="class"><span class="keyword">object</span> <span class="title">ADT</span> {</span>
  <span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Account</span></span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">CheckingAccount</span><span class="params">(accountId: String)</span> <span class="keyword">extends</span> <span class="title">Account</span></span>
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">SavingAccount</span><span class="params">(accountId: String, limit: Double)</span></span>
      <span class="keyword">extends</span> Account
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">PremiumAccount</span><span class="params">(corporateId: String, accountHolder: String)</span></span>
     <span class="keyword">extends</span> Account
}
</pre></td></tr></table></figure>

<h3 id="function-compose">function compose</h3>
<p>To compose the two functions together,
Scala provides a method called andThen, available to all function types
except those with zero arguments. This andThen method behaves similarly to Unix
pipes—it combines two functions in sequence and creates one function.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>def doubleAllEven = evenFilter andThen <span class="built_in">map</span>(<span class="keyword">double</span>)
</pre></td></tr></table></figure>

<p>The only difference between andThen and compose is that the
order of evaluation for compose is right to left.</p>
<ul>
<li>Write pure functions that do one thing and do it well.</li>
<li>Write functions that can compose with other functions.</li>
</ul>
<h3 id="monad">Monad</h3>
<ul>
<li>Monads let you compose functions that don’t compose well,
such as functions that have side effects.</li>
<li>Monads let you order computation within
functional programming so that you can model sequences of actions.</li>
</ul>
<p>This application needs to calculate a
price for a product by following a sequence of steps:</p>
<ol>
<li>Find the base price of the product.</li>
<li>Apply a state code-specific discount to the base price.</li>
<li>Apply a product-specific discount to the result of the previous step.</li>
<li>Apply tax to the result of the previous step to get the final price.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="class"><span class="keyword">object</span> <span class="title">PriceCalculatorWithoutMonad</span> {</span>
  <span class="keyword">import</span> Stubs._
  <span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">PriceState</span><span class="params">(productId: String, stateCode: String,price: Double)</span></span>
  
  <span class="keyword">def</span> findBasePrice(productId: String, stateCode: String): PriceState = {
    <span class="keyword">val</span> basePrice = findTheBasePrice(productId: String)
    PriceState(productId, stateCode, basePrice)
  }

  <span class="keyword">def</span> applyStateSpecificDiscount(ps: PriceState): PriceState = {
    <span class="keyword">val</span> discount = findStateSpecificDiscount(ps.productId, ps.stateCode)
    ps.copy(price = ps.price - discount)
  }
  
  <span class="keyword">def</span> applyProductSpecificDiscount(ps: PriceState): PriceState = {
    <span class="keyword">val</span> discount = findProductSpecificDiscount(ps.productId)
    ps.copy(price = ps.price - discount)
  }

  <span class="keyword">def</span> applyTax(ps: PriceState): PriceState = {
    <span class="keyword">val</span> tax = calculateTax(ps.productId, ps.price)
    ps.copy(price = ps.price + tax)
  }
  <span class="keyword">def</span> calculatePrice(productId: String, stateCode: String): Double = {
    <span class="keyword">val</span> a = findBasePrice(productId, stateCode)
    <span class="keyword">val</span> b = applyStateSpecificDiscount(a)
    <span class="keyword">val</span> c = applyProductSpecificDiscount(b)
    <span class="keyword">val</span> d = applyTax(c)
    d.price
  }

}
<span class="class"><span class="keyword">object</span> <span class="title">Stubs</span> {</span>
  <span class="keyword">def</span> findTheBasePrice(productId: String) = <span class="number">10.0</span>
  <span class="keyword">def</span> findStateSpecificDiscount(productId: String, stateCode: String) = <span class="number">0.5</span>
  <span class="keyword">def</span> findProductSpecificDiscount(productId: String) = <span class="number">0.5</span>
  <span class="keyword">def</span> calculateTax(productId: String, price: Double) = <span class="number">5.0</span>
}
</pre></td></tr></table></figure>

<p>版本二, 使用 state monad</p>
<p>state monad 详解</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">State</span>[<span class="title">S</span>, +<span class="title">A</span>] {</span>
  <span class="keyword">def</span> apply(s: S): (S, A)
}
<span class="comment">// 状态子(stateMonad), 状态(state)</span>
<span class="comment">// 每一次变化, 都抽象成一个状态</span>
<span class="comment">// 一个状态子(StateMonad), 就是对一次状态变化的封装</span>
<span class="class"><span class="keyword">object</span> <span class="title">StateMonad</span> {</span>
  <span class="class"><span class="keyword">trait</span> <span class="title">State</span>[<span class="title">S</span>, +<span class="title">A</span>] {</span>
    <span class="comment">// 每一次对 状态 操作, 都会产生一个新的状态 S, 以及一个新的值 A</span>
    <span class="comment">// 如Stack,  [a, b, c, d], pop操作后, 新的状态 [b, c, d], 和新的值 a</span>
    <span class="comment">// 对 状态 s 的操作函数的串联</span>
    <span class="keyword">def</span> apply(s: S): (S, A)
    <span class="comment">// 每一次map, 都是对 新的值的操作</span>
    <span class="keyword">def</span> map[B](f: A =&gt; B): State[S, B] = state(apply(_) <span class="keyword">match</span> {
      <span class="keyword">case</span> (s, a) =&gt; (s, f(a))
    })
    <span class="comment">// 每一次 flatmap 是对 状态子 的操作</span>
    <span class="keyword">def</span> flatMap[B](f: A =&gt; State[S, B]): State[S, B] =
      state(apply(_) <span class="keyword">match</span> {
        <span class="keyword">case</span> (s, a) =&gt; f(a)(s)
      })
  }
  <span class="class"><span class="keyword">object</span> <span class="title">State</span> {</span>
    <span class="keyword">def</span> state[S, A](f: S =&gt; (S, A)) = <span class="keyword">new</span> State[S, A] {
      <span class="keyword">def</span> apply(s: S) = f(s)
    }
    <span class="keyword">def</span> init[S]: State[S, S] = state[S, S](s =&gt; (s, s))
    <span class="comment">// 产生一个对 状态操作的 状态子</span>
    <span class="keyword">def</span> modify[S](f: S =&gt; S) =
      init[S] flatMap (s =&gt; state(_ =&gt; (f(s), ())))
  }

}
</pre></td></tr></table></figure>

<p>map and flatMap are critical parts of the
monad interface—without them, no function can become a monad in Scala.</p>
<p>The map method of the State monad helps transform the value inside the State
monad. On the other hand, flatMap helps transition from one state to another. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>
<span class="keyword">def</span> findBasePrice(ps: PriceState): Double
<span class="keyword">def</span> applyStateSpecificDiscount(ps: PriceState): Double
<span class="keyword">def</span> applyProductSpecificDiscount(ps: PriceState): Double
<span class="keyword">def</span> applyTax(ps: PriceState): Double

<span class="keyword">import</span> StateMonad.State._
<span class="keyword">def</span> modifyPriceState(f: PriceState =&gt; Double) =
  modify[PriceState](s =&gt; s.copy(price = f(s)))
<span class="comment">// 整个函数, 都是对 state 进行操作的不完全实现(柯里化函数) 的串联</span>
<span class="keyword">val</span> stateMonad = <span class="keyword">for</span> {
  _ &lt;- modifyPriceState(findBasePrice)
  _ &lt;- modifyPriceState(applyStateSpecificDiscount)
  _ &lt;- modifyPriceState(applyProductSpecificDiscount)
  _ &lt;- modifyPriceState(applyTax)
} <span class="keyword">yield</span> ()

<span class="comment">// 最后可以这样拿来用</span>
<span class="keyword">val</span> initialPriceState = PriceState(productId, stateCode, <span class="number">0.0</span>)
<span class="keyword">val</span> finalPriceState = stateMonad.apply(initialPriceState)._1
<span class="keyword">val</span> finalPrice = finalPriceState.price
</pre></td></tr></table></figure>

<p>翻译后是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
def calculatePrice2(productId: String, stateCode: String): Double = {
  <span class="comment">// modify 封装对当前状态操作的一个函数, 返回一个状态子</span>
  def modifyPriceState(f: PriceState =&gt; Double) =
    modify[PriceState](s =&gt; s.copy(price = f(s)))
  <span class="comment">// 很像 functor 的 monad 实现</span>
  <span class="comment">// 这里可以看出 flatmap 的意义</span>
  val stateMonad = modifyPriceState(findBasePrice) flatMap {a =&gt;
    modifyPriceState(applyStateSpecificDiscount) flatMap {b =&gt;
      modifyPriceState (applyProductSpecificDiscount) flatMap {c =&gt;
        modifyPriceState (applyTax) map {d =&gt;() }
      }
    }
  }
  val initialPriceState = PriceState(productId, stateCode, <span class="number">0.0</span>)
  val finalPriceState = stateMonad.apply(initialPriceState)._1
  val finalPrice = finalPriceState.price
  finalPrice
}
</pre></td></tr></table></figure>

<p>加入 log 信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>
def calculatePriceWithLog(productId: String, stateCode: String): Double = {
  def modifyPriceState f: PriceState =&gt; Double) =
    modify[PriceState](s =&gt; s.copy(price = f(s)))
  def logStep(f: PriceState =&gt; String) = gets(f)

  <span class="comment">// 每一步都有对 都是对 state 的一个操作的函数</span>
  val stateMonad = <span class="keyword">for</span> {
    _ &lt;- modifyPriceState(findBasePrice)
    a &lt;- logStep(s =&gt; <span class="string">"Base Price "</span> + s)
    _ &lt;- modifyPriceState(applyStateSpecificDiscount)
    b &lt;- logStep(s =&gt; <span class="string">"After state discount "</span> + s)
    _ &lt;- modifyPriceState(applyProductSpecificDiscount)
    c &lt;- logStep(s =&gt; <span class="string">"After product discount "</span> + s)
    _ &lt;- modifyPriceState(applyTax)
    d &lt;- logStep(s =&gt; <span class="string">"After tax "</span> + s)
  } <span class="keyword">yield</span> a :: b :: c :: d :: Nil
  val (finalPriceState, log) =
    stateMonad.apply(PriceState(productId, stateCode, <span class="number">0.0</span>))
  finalPriceState.price

}
<span class="comment">// gets 的定义</span>
def gets[S,A](f: S =&gt; A): State[S, A] =
  init[S] flatMap (s =&gt; state(_ =&gt; (s, f(s))))
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day57-Mybatis]]></title>
    <link href="http://zhpooer.github.io/2014/07/15/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day57-mybatis/"/>
    <id>http://zhpooer.github.io/2014/07/15/传智播客day57-mybatis/</id>
    <published>2014-07-15T01:12:17.000Z</published>
    <updated>2014-07-15T13:12:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">概况</h1>
<p><img src="/img/mybatis_api.png" alt="mybatis api"></p>
<p>mybatis配置</p>
<ol>
<li>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</li>
<li>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。
此文件需要在SqlMapConfig.xml中加载。</li>
<li>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</li>
<li>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li>
<li>mybatis底层自定义了Executor接口操作数据库，
Executor接口有两个实现，一个是基本实现一个是缓存实现。</li>
<li>Mapped Statement也是mybatis一个底层对象，
它包装了mybatis配置信息及sql映射信息等。
mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li>
<li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，
Executor通过 Mapped Statement在执行sql前将输入的java对象映射至sql中，
输入参数映射就是jdbc编程中对preparedStatement设置参数。</li>
<li>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，
Executor通过 Mapped Statement在执行sql后将输出结果映射至java对象中，
输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</li>
</ol>
<h1 id="demo">Demo</h1>
<p>log4j.properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="preprocessor"># Global logging configuration</span>
log4j<span class="preprocessor">.rootLogger</span>=DEBUG, stdout
<span class="preprocessor"># Console output...</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.stdout</span>=org<span class="preprocessor">.apache</span><span class="preprocessor">.log</span>4j<span class="preprocessor">.ConsoleAppender</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.stdout</span><span class="preprocessor">.layout</span>=org<span class="preprocessor">.apache</span><span class="preprocessor">.log</span>4j<span class="preprocessor">.PatternLayout</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.stdout</span><span class="preprocessor">.layout</span><span class="preprocessor">.ConversionPattern</span>=%<span class="number">5</span>p [%t] - %m%n
</pre></td></tr></table></figure>

<p>SqlMapConfig.xml是mybatis核心配置文件，上边文件的配置内容为数据源、事务管理</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">environments</span> <span class="attribute">default</span>=<span class="value">"development"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">environment</span> <span class="attribute">id</span>=<span class="value">"development"</span>&gt;</span>
            <span class="comment">&lt;!-- 配置事务  --&gt;</span>
            <span class="tag">&lt;<span class="title">transactionManager</span> <span class="attribute">type</span>=<span class="value">"JDBC"</span>/&gt;</span>
            <span class="tag">&lt;<span class="title">dataSource</span> <span class="attribute">type</span>=<span class="value">"POOLED"</span>&gt;</span>
			    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"com.mysql.jdbc.Driver"</span> /&gt;</span>
			    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span> /&gt;</span>
			    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"root"</span> /&gt;</span>
			    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span> /&gt;</span>
			<span class="tag">&lt;/<span class="title">dataSource</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">environment</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">environments</span>&gt;</span>
    <span class="tag">&lt;<span class="title">mappers</span>&gt;</span>
        <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">resource</span>=<span class="value">"sqlmap/User.xml"</span>&gt;</span><span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">mappers</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">&lt;!-- User.xml --&gt;</span>
<span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">namespace</span>=<span class="value">"test"</span>&gt;</span>
    <span class="comment">&lt;!-- 根据用户账号查询单个用户信息
         将定义的select 理解为一个sql, 这个sql对应statement
         可以将sql的id理解为statement的id--&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"findUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"java.lang.Integer"</span> <span class="attribute">resultType</span>=<span class="value">"po.User"</span>&gt;</span>
       select * from user where id=#{id}
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;<span class="title">insert</span> <span class="attribute">id</span>=<span class="value">"insertUser"</span> <span class="attribute">parameterType</span>=<span class="value">"po.User"</span>&gt;</span>
        <span class="comment">&lt;!-- 指定主键映射的pojo对象的属性  --&gt;</span>
        <span class="comment">&lt;!-- order selectKey, 的执行顺序 --&gt;</span>
        <span class="comment">&lt;!-- 一般不用自增, 而是用 uuid --&gt;</span>
        <span class="tag">&lt;<span class="title">selectKey</span> <span class="attribute">keyProperty</span>=<span class="value">"id"</span> <span class="attribute">order</span>=<span class="value">"AFTER"</span> <span class="attribute">resultType</span>=<span class="value">"java.lang.Integer"</span>&gt;</span>
            select last_insert_id()
        <span class="tag">&lt;/<span class="title">selectKey</span>&gt;</span>
        insert into user(username, birthday, sex, address, detail, score)
        values(#{username}, #{birthday}, #{sex}, #{address}, #{detail}, #{score})
    <span class="tag">&lt;/<span class="title">insert</span>&gt;</span>
    <span class="tag">&lt;<span class="title">update</span> <span class="attribute">id</span>=<span class="value">"updateUserUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"po.User"</span>&gt;</span>
        update user set username=#{username}, birthday=#{birthday},
        sex=#{sex}, address=#{address}, detail=#{detail}, score=#{score}
        where id=#{id}
    <span class="tag">&lt;/<span class="title">update</span>&gt;</span>
    <span class="tag">&lt;<span class="title">delete</span> <span class="attribute">id</span>=<span class="value">"deleteUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"java.lang.Integer"</span>&gt;</span>
        delete from user where id=#{value}
    <span class="tag">&lt;/<span class="title">delete</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>String resource = "sqlMapConfig.xml";
// 通过输入流读取配置文件
InputStream inputStream = Resources.getResourceAsStream(resource);

// 通过sqlSessionFactoryBuilder, 获取SqlSessonFactory
SqlSessoinFactory fac = new SqlSessionFactoryBuilder().build(inputStream);
SqlSession session = fac.openSession();

// 查询用户
// 命名空间 + id
User user = session.selectOne("test.findUserById", 1);

// 插入数据
session.<span class="operator"><span class="keyword">insert</span>(<span class="string">"test.insertUser"</span>, <span class="keyword">user</span>);</span>
sqlSession.<span class="operator"><span class="keyword">commit</span>();</span> // 提交事务

// 更新记录
session.<span class="operator"><span class="keyword">update</span>(<span class="string">"test.updateUserById"</span>, <span class="keyword">user</span>);</span>
sqlSession.<span class="operator"><span class="keyword">commit</span>();</span> // 提交事务

// 删除记录
session.<span class="operator"><span class="keyword">delete</span>(<span class="string">"test.deleteUserById"</span>, <span class="keyword">user</span>);</span>
sqlSession.<span class="operator"><span class="keyword">commit</span>();</span> // 提交事务

session.close();
</pre></td></tr></table></figure>

<h1 id="api-">API 介绍</h1>
<h2 id="sqlsessionfactorybuilder">SqlSessionFactoryBuilder</h2>
<p>SqlSessionFacoty是通过SqlSessionFactoryBuilder进行创建，
SqlSessionFactoryBuilder只用于创建SqlSessionFactory，
可以当成一个工具类，在使用时随时拿来使用不需要特殊处理为共享对象。</p>
<h2 id="sqlsessionfactory">SqlSessionFactory</h2>
<p>SqlSessionFactory是一个接口，
接口中定义了openSession的不同方式，
mybatis默认使用DefaultSqlSessionFactory作为接口实现，
SqlSessionFactory一但创建后可以重复使用，实际应用时通常设计为单例模式。</p>
<h2 id="sqlsession">SqlSession</h2>
<p>SqlSession是一个接口，定义了数据库操作。</p>
<p>执行过程如下：</p>
<ul>
<li>加载数据源等配置信息
<code>Environment environment = configuration.getEnvironment();</code></li>
<li>创建数据库链接</li>
<li>创建事务对象</li>
<li><p>创建Executor，SqlSession所有操作都是通过Executor完成，mybatis源码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">if</span> (ExecutorType.BATCH == executorType) {
    executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);
} <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) {
    executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);
} <span class="keyword">else</span> {
    executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);
}
<span class="keyword">if</span> (cacheEnabled) {
    executor = <span class="keyword">new</span> CachingExecutor(executor, autoCommit);
}
</pre></td></tr></table></figure>
</li>
<li><p>SqlSession的实现类即DefaultSqlSession，此对象中对操作数据库实质上用的是 Executor</p>
</li>
</ul>
<p>结论：每个线程都应该有它自己的SqlSession实例。
SqlSession的实例不能共享使用，它也是线程不安全的。
因此最佳的范围是请求或方法范围。
绝对不能将SqlSession实例的引用放在一个类的静态字段甚至是实例字段中。</p>
<h2 id="namespace">Namespace</h2>
<p>命名空间除了对sql进行隔离，mybatis中对命名空间有特殊的作用，
用于定义mapper接口地址</p>
<h2 id="mapper-">Mapper 接口</h2>
<p>// 原生实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> {</span>
    <span class="keyword">public</span> User <span class="title">findUserById</span>(String id);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUser</span>(User user);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pudateUserById</span>(User user);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span>(String id);
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> {</span>
    <span class="keyword">private</span> SqlSessionFactory fac;
    
    <span class="keyword">public</span> User <span class="title">findUserById</span>(String id){
        SqlSession session = fac.openSession();
        User u = session.selectOne(<span class="string">"test.selectUserById"</span>, <span class="number">1</span>);
        session.close();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUser</span>(User user){
        SqlSession session = fac.openSession();
        User u = session.insert(<span class="string">"test.insertUser"</span>, user);
        session.commit();
        session.close();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pudateUserById</span>(User user){
        SqlSession session = fac.openSession();
        session.update(<span class="string">"test.updateUser"</span>, user);
        session.commit();
        session.close();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span>(String id){
        SqlSession session = fac.openSession();
        session.update(<span class="string">"test.deleteUserById"</span>, i);
        session.commit();
        session.close();
    }
}
</pre></td></tr></table></figure>

<p>第一个例子中，在访问sql映射文件中定义的sql时需要调用sqlSession的selectOne
方法，并将sql的位置(命名空间+id)和参数传递到selectOne方法中，
且第一个参数是一个长长的字符串，第二个参数是一个object对象，
这对于程序编写有很大的不方便，很多问题无法在编译阶段发现。
虽然上边对提出的面向接口编程问题进行解决，
但是dao实现方法中仍然是调用sqlSession的selectOne方法，且重复代码多。</p>
<p>解决方法:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// 将 namespace 修改为 cn.mapper.UserMapper</span>
<span class="keyword">public</span> <span class="keyword">interface</span> UserMapper {
    <span class="keyword">public</span> User <span class="title">findUserById</span>(String id);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inserUser</span>(User user);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pudateUserById</span>(User user);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span>(String id);
}

<span class="keyword">public</span> <span class="keyword">void</span> testFindUserById {
    sqlSession sqlSession = sqlSessionFactory.openSession();
    <span class="comment">// 指定mapper接口类型, mybatis生成一个代码对象实现mapper接口</span>
    UserMapper userMapper = sqlSessioin.getMapper(UserMapper.class);
    userMapper.findUserById(<span class="number">1</span>);
}
</pre></td></tr></table></figure>

<ul>
<li>Mapper接口方法名和mapper.xml中定义的每个sql的id相同</li>
<li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</li>
<li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li>
<li>Mapper.xml文件中的namespace即是mapper接口的类路径。</li>
</ul>
<h1 id="-">配置详解</h1>
<h2 id="properties">properties</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="preprocessor"># db.properties</span>
driver=<span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>
url=jdbc:mysql://localhost:<span class="number">3306</span>/mybatis
username=root
password=mysql
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">properties</span> <span class="attribute">resource</span>=<span class="value">"db.properties"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">environments</span> <span class="attribute">default</span>=<span class="value">"development"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">environment</span> <span class="attribute">id</span>=<span class="value">"development"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">transactionManager</span> <span class="attribute">type</span>=<span class="value">"JDBC"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">dataSource</span> <span class="attribute">type</span>=<span class="value">"POOLED"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"${driver}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"${url}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${username}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${password}"</span> /&gt;</span>
        <span class="tag">&lt;/<span class="title">dataSource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">environment</span>&gt;</span>
<span class="tag">&lt;/<span class="title">environments</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="settings">settings</h2>
<p>全局配置参数, 会影响到 mybatis 的运行行为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">settings</span>&gt;</span>
        <span class="tag">&lt;<span class="title">setting</span> <span class="attribute">name</span>=<span class="value">"cacheEnabled"</span> <span class="attribute">value</span>=<span class="value">"false"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">settings</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">别名</h2>
<table>
<thead>
<tr>
<th>别名</th>
<th>映射的类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>_byte</td>
<td>byte</td>
</tr>
<tr>
<td>_long</td>
<td>long</td>
</tr>
<tr>
<td>_short</td>
<td>short</td>
</tr>
<tr>
<td>_int</td>
<td>int</td>
</tr>
<tr>
<td>_integer</td>
<td>int</td>
</tr>
<tr>
<td>_double</td>
<td>double</td>
</tr>
<tr>
<td>_float</td>
<td>float</td>
</tr>
<tr>
<td>_boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>integer</td>
<td>Integer</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>date</td>
<td>Date</td>
</tr>
<tr>
<td>decimal</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>bigdecimal</td>
<td>BigDecimal</td>
</tr>
</tbody>
</table>
<p>定义别名</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">typeAliases</span>&gt;</span>
    <span class="tag">&lt;<span class="title">typeAlias</span> <span class="attribute">alias</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"cn.itcast.mybatis.po.User"</span>&gt;</span><span class="tag">&lt;/<span class="title">typeAlias</span>&gt;</span>
    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类 --&gt;</span>
	<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"cn.itcast.mybatis.po"</span>/&gt;</span>
    <span class="comment">&lt;!-- 就可以使用 po.User -&gt; user --&gt;</span>
<span class="tag">&lt;/<span class="title">typeAliases</span>&gt;</span>
</pre></td></tr></table></figure>

<p>使用注解方式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>@Alias(<span class="string">"user"</span>)
<span class="keyword">public</span> <span class="keyword">class</span> User{
}
</pre></td></tr></table></figure>

<h2 id="-">类型处理器</h2>
<p>将java类型和 sql 映射文件进行映射,
mybatis自带的类型处理器基本上满足日常需求，不需要单独定义。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- parameterType：指定输入数据类型为int，即向statement设置值 --&gt;</span>
<span class="comment">&lt;!-- resultType：指定输出数据类型为自定义User，即将resultset转为java对象 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserById"</span> <span class="attribute">parameterType</span>=<span class="value">"int"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user where id = #{id}
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="environments-">environments(环境集合属性对象)</h2>
<p>MyBatis可以配置多种环境. 这会帮助你将SQL映射应用于多种数据库之中.</p>
<p>多数据库配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">environments</span> <span class="attribute">default</span>=<span class="value">"development"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">environment</span> <span class="attribute">id</span>=<span class="value">"development_mysql"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">transactionManager</span> <span class="attribute">type</span>=<span class="value">"JDBC"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">dataSource</span> <span class="attribute">type</span>=<span class="value">"POOLED"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"${mysql.driver}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"${mysql.url}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${mysql.username}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${mysql.password}"</span> /&gt;</span>
        <span class="tag">&lt;/<span class="title">dataSource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">environment</span>&gt;</span>
        <span class="tag">&lt;<span class="title">environment</span> <span class="attribute">id</span>=<span class="value">"development_oracle"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">transactionManager</span> <span class="attribute">type</span>=<span class="value">"JDBC"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">dataSource</span> <span class="attribute">type</span>=<span class="value">"POOLED"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driver"</span> <span class="attribute">value</span>=<span class="value">"${oracle.driver}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"url"</span> <span class="attribute">value</span>=<span class="value">"${oracle.url}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${oracle.username}"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${oracle.password}"</span> /&gt;</span>
        <span class="tag">&lt;/<span class="title">dataSource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">environment</span>&gt;</span>
<span class="tag">&lt;/<span class="title">environments</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>mysql<span class="preprocessor">.driver</span>=<span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>
mysql<span class="preprocessor">.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/mybatis
mysql<span class="preprocessor">.username</span>=root
mysql<span class="preprocessor">.password</span>=mysql

oracle<span class="preprocessor">.driver</span>=oracle<span class="preprocessor">.jdbc</span><span class="preprocessor">.driver</span><span class="preprocessor">.OracleDriver</span>
oracle<span class="preprocessor">.url</span>=jdbc:oracle:thin:<span class="localvars">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1521</span>:yycg
oracle<span class="preprocessor">.username</span>=yycg
oracle<span class="preprocessor">.password</span>=yycg
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// 需要用到 oracle 数据库</span>
sqlSessionFactory_oracle = <span class="keyword">new</span> SqlSessionFactoryBuilder()
    .build(Resources.getResourceAsStream(resource), <span class="string">"development_oracle"</span>);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">mapper</span>&gt;</span>
    <span class="comment">&lt;!-- 只对 mysql 有效 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"getNow"</span> <span class="attribute">resultType</span>=<span class="value">"date"</span>&gt;</span>
        select now()
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="comment">&lt;!-- 只对 oracle 有效 --&gt;</span>
    <span class="comment">&lt;!-- 重新定义一个 getNow_Oracle的接口 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"getNow_Oracle"</span> <span class="attribute">resultType</span>=<span class="value">"date"</span>&gt;</span>
        select sysdate from dual
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
</pre></td></tr></table></figure>

<p>可以用 databaseIdProvider 提供多数据库支持</p>
<h3 id="databaseidprovider-id-">databaseIdProvider(数据库ID提供者)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">&lt;!-- SqlMapConfig.xml, 定义 databaseIdProvider --&gt;</span>
<span class="tag">&lt;<span class="title">databaseIdProvider</span> <span class="attribute">type</span>=<span class="value">"DB_VENDOR"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"SQL Server"</span> <span class="attribute">value</span>=<span class="value">"sqlserver"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"DB2"</span> <span class="attribute">value</span>=<span class="value">"db2"</span>/&gt;</span>
    <span class="comment">&lt;!-- oracle的 databaseid 事务 oracle--&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"Oracle"</span> <span class="attribute">value</span>=<span class="value">"oracle"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"MySQL"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">databaseIdProvider</span>&gt;</span>

<span class="tag">&lt;<span class="title">mapper</span>&gt;</span>
    <span class="comment">&lt;!-- 只对 mysql 有效 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">databaseid</span>=<span class="value">"mysql"</span> <span class="attribute">id</span>=<span class="value">"getNow"</span> <span class="attribute">resultType</span>=<span class="value">"date"</span>&gt;</span>
        select now()
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="comment">&lt;!-- 只对 oracle 有效 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">databaseid</span>=<span class="value">"oracle"</span> <span class="attribute">id</span>=<span class="value">"getNow"</span> <span class="attribute">resultType</span>=<span class="value">"date"</span>&gt;</span>
        select sysdate from dual
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mapper</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-mapper-">指定mapper文件位置</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 指定mapper文件的配置 --&gt;</span>
<span class="tag">&lt;<span class="title">mappers</span>&gt;</span>
    <span class="comment">&lt;!-- 使用相对于类路径的资源 --&gt;</span>
    <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">resource</span>=<span class="value">"sqlmap/user.xml"</span> /&gt;</span>
    
    <span class="comment">&lt;!-- 使用完全限定路径 --&gt;</span>
    <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">url</span>=<span class="value">"file:///D:\workspace_spingmvc\mybatis_01\config\sqlmap\user.xml"</span> /&gt;</span>
    
    <span class="comment">&lt;!-- 使用mapper接口类路径 --&gt;</span>
    <span class="comment">&lt;!-- 此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中 --&gt;</span>
    <span class="tag">&lt;<span class="title">mapper</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.mybatis.mapper.UserMapper"</span>/&gt;</span>
    
    <span class="comment">&lt;!-- 注册指定包下的所有mapper接口 --&gt;</span>
    <span class="comment">&lt;!-- 此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中 --&gt;</span>
    <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"cn.itcast.mybatis.mapper"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">mappers</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="mapper-xml">Mapper.xml</h2>
<p>输入类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserById"</span>  <span class="attribute">parameterType</span>=<span class="value">"int"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user where id = #{id}
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- ${}只显示内容, 不管类型 --&gt;</span>
<span class="comment">&lt;!-- ${}和#{}不同，${}是将参数值不加修饰的拼在sql中，
     相当中用jdbc的statement拼接sql，使用${}不能防止sql注入，
     但是有时用${}会非常方便 --&gt;</span>
 <span class="comment">&lt;!--${}中只能写value --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserByName"</span>  <span class="attribute">parameterType</span>=<span class="value">"int"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user where username like '${value}%'
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- 如果传递的是模型类 ${} 要写属性名  --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserByUser"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user where id=#{id} and username like '%${username}%'
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- 传递hashmap综合查询用户信息 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserByHashmap"</span> <span class="attribute">parameterType</span>=<span class="value">"hashmap"</span> <span class="attribute">resultType</span>=<span class="value">"user"</span>&gt;</span>
    select * from user where id=#{id} and username like '%${username}%'
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<p>输出类型:</p>
<ul>
<li>输出pojo对象和输出pojo列表在sql中定义的resultType是一样的。</li>
<li>返回单个pojo对象要保证sql查询出来的结果集为单条，
使用session.selectOne方法调用，mapper接口使用pojo对象作为方法返回值。</li>
<li>返回pojo列表表示查询出来的结果集可能为多条，
只能使用session.selectList方法调用，
mapper接口使用List<pojo>对象作为方法返回值。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 获取用户信息列表, 返回hashmap --&gt;</span>
<span class="comment">&lt;!-- 输出pojo对象可以改用hashmap输出类型，
     将输出的字段名称作为map的key，value为字段值 --&gt;</span>
<span class="comment">&lt;!-- 输出hashmap类型必须保证sql查询出来的记录为单条 --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserByHashmap"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span> <span class="attribute">resultType</span>=<span class="value">"hashmap"</span>&gt;</span>
    select * from user where id=#{id} and sex=#{sex}
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- resultMap --&gt;</span>
<span class="comment">&lt;!-- 返回类型 Person{userid:int, name:String, addr:String} --&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selectUserByHashmap"</span> <span class="attribute">parameterType</span>=<span class="value">"user"</span> <span class="attribute">resultType</span>=<span class="value">"resultMapPerson"</span>&gt;</span>
    select * from user where id=#{id} and sex=#{sex}
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- 定义rsultMap --&gt;</span>
<span class="tag">&lt;<span class="title">resultMap</span> <span class="attribute">type</span>=<span class="value">"person"</span> <span class="attribute">id</span>=<span class="value">"resultMapPerson"</span>&gt;</span>
    <span class="comment">&lt;!-- 结果集的属性  --&gt;</span>
    <span class="tag">&lt;<span class="title">id</span> <span class="attribute">property</span>=<span class="value">"userid"</span> <span class="attribute">column</span>=<span class="value">"id"</span>&gt;</span><span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">column</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">property</span>=<span class="value">"addr"</span> <span class="attribute">column</span>=<span class="value">"address"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
<span class="tag">&lt;/<span class="title">resultMap</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="Mybatis" scheme="http://zhpooer.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day56-Spring mvc]]></title>
    <link href="http://zhpooer.github.io/2014/07/13/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day56-spring-mvc/"/>
    <id>http://zhpooer.github.io/2014/07/13/传智播客day56-spring-mvc/</id>
    <published>2014-07-13T01:05:32.000Z</published>
    <updated>2014-07-13T09:49:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="springmvc-">SpringMVC 原理</h1>
<p>前端控制器(DispatcherServlet) 通过 映射处理器(HandlerMaping)
找到 处理器(Handler) 和拦截器(HandlerInterceptor),
它们被封装到 HandlerExecutionChain.</p>
<p>前端控制器通过适配器(HandlerAdapter)调用 处理器(Handler),
处理器返回模型和视图(ModelAndView).</p>
<p>前端控制器把通过视图解析器(ViewResolver)解析出视图(View),
再把视图渲染, 返回给用户</p>
<h1 id="demo">DEMO</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvc <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span> org.springframework.web.servlet.DispatcherServlet <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span> 1 <span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
    <span class="comment">&lt;!-- 如果不配置也会默认找 springmvc-servlet.xml --&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>
        contextConfigLocation
        <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>
        classpath:springmvc-servlet.xml
        <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
<span class="comment">&lt;!-- post提交解决乱码过滤器 --&gt;</span>
<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> CharactorEncoding<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span> CharactorEncodingFilter <span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> CharactorEncoding <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> /* <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>

<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span> springmvc <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> *.action <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>springmvc-servlet.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 映射器 --&gt;</span>
<span class="comment">&lt;!-- 将bean的名字当做请求的url --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 简单url映射器,和 beannamehandler 可以共存--&gt;</span>
<span class="comment">&lt;!-- &lt;bean class="SimpleUrlhandlerMapping"&gt; --&gt;</span>
<span class="comment">&lt;!--     &lt;property name="mappings"&gt; --&gt;</span>
<span class="comment">&lt;!--         &lt;props&gt; --&gt;</span>
<span class="comment">&lt;!--             &lt;prop key="/hello.action"&gt;hello_controller&lt;/prop&gt; --&gt;</span>
<span class="comment">&lt;!--         &lt;/props&gt; --&gt;</span>
<span class="comment">&lt;!--     &lt;/property&gt; --&gt;</span>
<span class="comment">&lt;!-- &lt;/bean&gt; --&gt;</span>

<span class="comment">&lt;!-- 适配器 --&gt;</span>
<span class="comment">&lt;!-- 所有实现了 mvc.Controller 都可以作为后端控制器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"SimpleControllerHandlerAdaptor"</span>&gt;</span>
    <span class="comment">&lt;!-- 配置前缀和后缀  --&gt;</span>
    <span class="comment">&lt;!-- 在设置后, 在设置视图时 /WEB-INFO/jsp/hello.jsp =&gt; hello --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 需要实现 HttpRequestHandler 接口  --&gt;</span>
<span class="comment">&lt;!-- &lt;bean class="HttpRequestHandlerAdaptor"&gt;&lt;/bean&gt; --&gt;</span>

<span class="comment">&lt;!-- jsp 视图解析器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"InternalResourceViewResolver"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 控制器, 可以访问 hello.action --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"hello_controller"</span> <span class="attribute">name</span>=<span class="value">"/hello.action"</span> <span class="attribute">class</span>=<span class="value">"HelloWorldController"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> <span class="keyword">implements</span> <span class="title">Controller</span> {</span>
    <span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span>(reqeust, response) {
        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();
        <span class="comment">// 设置模型数据</span>
        modelAndView.addObject(<span class="string">"message"</span>, <span class="string">"hello world"</span>);
        <span class="comment">// 设置 jsp 地址</span>
        modelAndView.setViewName(<span class="string">"hello"</span>);
        <span class="keyword">return</span> modelAndView;
    }
}
<span class="comment">// hello.jsp: ${message}</span>
</pre></td></tr></table></figure>

<h1 id="-">其他控制器</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 参数控制器 实现简单的视图转发, 转发到 success.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">name</span>=<span class="value">"/success.action"</span> <span class="attribute">class</span>=<span class="value">"ParameterizableViewController"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"viewName"</span> <span class="attribute">value</span>=<span class="value">"success"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="comment">// &lt;!-- 命令控制器 --&gt;, 自动完成 pojo 的注入</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandController</span> <span class="keyword">extends</span> <span class="title">AbstractCommandController</span> {</span>
    <span class="keyword">public</span> <span class="title">MyCommandController</span>() {
        <span class="keyword">this</span>.setCommandClass(Student.class);
    }
    <span class="annotation">@Override</span> <span class="keyword">protected</span> ModelAndView <span class="title">handler</span>(request, response, object, errors) {
        Student studuent = ojbect;
        println(student);
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }
    
    <span class="comment">// 注册字符串转日期</span>
    <span class="annotation">@Override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBnder</span>(request, binder) {
        <span class="comment">// true 为, 允许为空</span>
        binder.registerCustomerEditor(Date.class, <span class="keyword">new</span> CustomerDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>), <span class="keyword">true</span>));
    }
}

<span class="comment">// 表单控制器</span>
<span class="comment">// 配置:</span>
<span class="comment">// property name=formView value=userform, 配置表单视图</span>
<span class="comment">// property name=sucess value=success, 配置成功页面</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFormContorller</span> <span class="keyword">extends</span> <span class="title">SimplerFormController</span>{</span>
    <span class="keyword">public</span> <span class="title">MyformController</span>(){
        <span class="keyword">this</span>.setCommandClass(Student.class);
        <span class="keyword">this</span>.setCommandName(<span class="string">"student"</span>);
    }
    <span class="comment">// 通过get 请求进入此方法</span>
    <span class="annotation">@Override</span> <span class="keyword">protected</span> <span class="title">showForm</span>(){}
    <span class="comment">// 通过post 请求进入此方法</span>
    <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSubmitAciton</span>(Object command){}
}
</pre></td></tr></table></figure>

<p>参数控制器, 命令控制器, 表单控制器缺点:
传递参数格式固定为命令对象, 不灵活, controller中的方法固定,
不能任意定义控制方法</p>
<h1 id="-">使用注解</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"action"</span>&gt;</span><span class="tag">&lt;/<span class="title">context:component-scan</span>&gt;</span>
<span class="comment">&lt;!-- 注解Mapping --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 注解适配器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"RequestMappingHandlerAdaptor"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 视图解析器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"InternalResourceViewResolver"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>@Controller
<span class="keyword">public</span> <span class="keyword">class</span> HelloWorldController {
    <span class="comment">// 控制器的方法</span>
    @RequestMapping(<span class="keyword">value</span>=<span class="string">"/hello"</span>) <span class="comment">// 配置访问的链接</span>
    <span class="keyword">public</span> String <span class="title">helloworld</span>(HttpServletRequest request, Student student, Model model){
        model.addAttribute(<span class="string">"message"</span>, <span class="string">"HelloWorld"</span>); <span class="comment">// 通过model将参数传回页面</span>
        <span class="comment">// view: ${student.name}</span>
        model.addAttribute(<span class="string">"student"</span>, <span class="keyword">new</span> Student(<span class="string">"张三"</span>));
        <span class="keyword">return</span> <span class="string">"hello"</span>; <span class="comment">// 返回的视图, 经过视图解析器解析成 hello.jsp</span>
    }
}
</pre></td></tr></table></figure>

<h2 id="uri">URI</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="annotation">@ResourceeMapping</span>(<span class="string">"/user"</span>) <span class="comment">// 设置模块路径</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> {</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/userlist"</span>)
    <span class="keyword">public</span> String <span class="title">userlist</span>(Model model) <span class="keyword">throws</span> Exception {
        <span class="keyword">return</span> <span class="string">"user/userlist"</span>;
    }
    
    <span class="annotation">@RequestMapping</span>(<span class="string">"/useradd"</span>)
    <span class="comment">// 使用model, modelMap, map 都可以将数据传回页面, 都是一样di``</span>
    <span class="keyword">public</span> String <span class="title">useradd</span>(Request req, Response res,
         Session session, Model model,
         Map map, ModelMap modelMap,
         
    ) {
        <span class="keyword">return</span> <span class="string">"user/useradd"</span>;
    }
    
    <span class="annotation">@RequestMapping</span>(<span class="string">"/useraddsubmit"</span>, method=RequestMethod.POST)
    <span class="comment">// 如果对象以属性点的方式来提交数据, 如 student.**, 那么可以这样做 User{student}</span>
    <span class="keyword">public</span> String <span class="title">useraddsubmit</span>(Model model, User student) {
        <span class="keyword">return</span> <span class="string">"redirect:/user/userlist.action"</span>; <span class="comment">// 重定向</span>
    }

    <span class="comment">// 通过模板设置 userid, 以及设定方法</span>
    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/useredit/{userid}"</span>, method={RequestMethod.GET, RequestMethod.POST})
    <span class="comment">// 也可以通过正则表达式来限定</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/useredit/{userid:\\d+}"</span>)
    <span class="keyword">public</span> String <span class="title">useredit</span>(@PathVariable String usesrid, Model model) {
    }
    <span class="comment">// 批量删除</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/userdeletelist"</span>)
    <span class="comment">// 提交checkbox</span>
    <span class="keyword">public</span> String <span class="title">deletelist</span>(String[] deleteid){
    
        <span class="keyword">return</span> <span class="string">"success"</span>;
    }

    <span class="comment">// 批量添加</span>
    <span class="comment">// User{studnets:List}</span>
    <span class="comment">// name=studnets[0...].name ...</span>
    <span class="comment">// 提交list给服务器</span>
    <span class="comment">// 同理也可以将Map提交给服务器 name=scores['name']</span>
    <span class="annotation">@RequestMapping</span>(<span class="string">"/useraddlist"</span>)
    <span class="keyword">public</span> String <span class="title">useraddlist</span>(Model model, User user,
      @<span class="title">RequestPram</span>(defaultValue=<span class="string">"2"</span>, required=<span class="keyword">true</span>, value=<span class="string">"group"</span> ) String groupid){
        <span class="keyword">return</span> <span class="string">"user/useraddlist"</span>;
    }
    
    <span class="comment">// 注册类型转换器</span>
    <span class="annotation">@InitBinder</span>
    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBnder</span>(request, binder) {
        <span class="comment">// true 为, 允许为空</span>
        binder.registerCustomerEditor(Date.class, <span class="keyword">new</span> CustomerDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>), <span class="keyword">true</span>));
    }
}
</pre></td></tr></table></figure>

<h1 id="-json-">实现json数据交互</h1>
<p><code>@RequestBody</code>, 注解用户读取http请求的内容(字符串), 通过springMVC
提供的HttpMessageConverter 接口将读到的内容转换为 json, xml
等格式的数据并绑定到controller方法的参数上</p>
<p><code>@ResponseBody</code>, 该注解用于将Controller的方法返回的对象,
通过HttpMessageConverter接口转换为指定格式的数据如：json,xml等,
通过Response响应给客户端</p>
<p>Springmvc默认用 <code>MappingJacksonHttpMessageConverter</code> 对json数据进行转换，
需要加入jackson的包，<code>jackson-core-asl.jar</code>, <code>jackson-mapper-asl.jar</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 注解适配器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"messageConverters"</span>&gt;</span>
	    <span class="tag">&lt;<span class="title">list</span>&gt;</span>
		    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
		<span class="tag">&lt;/<span class="title">list</span>&gt;</span>
	<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> {</span>
    <span class="annotation">@RequstMapping</span>(<span class="string">"/"</span>)
    <span class="comment">// 请求参数是 json, 响应也是json</span>
    <span class="keyword">public</span> @ResponseBody Student <span class="title">requestjson</span>(@RequestBody Student student) {
        <span class="keyword">return</span> student;
    }
}
</pre></td></tr></table></figure>

<h1 id="-">简化配置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 可以用如下配置简化其他注解配置 --&gt;</span>
<span class="comment">&lt;!--  如注解映射器, 注解适配器--&gt;</span>
<span class="tag">&lt;<span class="title">mvc:annotation-driven</span> /&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">拦截器</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> {</span>
    <span class="javadoc">/**
    * controller执行前调用此方法
    * 返回true表示继续执行，返回false中止执行
    * 这里可以加入登录校验、权限拦截等
    */</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span>(HttpServletRequest request,
        HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception {
        <span class="comment">// false 表示被拦截, 不执行 controller 方法</span>
        <span class="comment">// true 表示方向</span>
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
    
    <span class="javadoc">/**
    * controller执行后但未返回视图前调用此方法
    * 这里可在返回用户前对模型数据进行加工处理，
    * 比如这里加入公用信息以便页面显示
    */</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span>(HttpServletRequest request,
        HttpServletResponse response, Object handler,
        ModelAndView modelAndView) <span class="keyword">throws</span> Exception {
        
    }
    <span class="javadoc">/**
    * controller执行后且视图返回后调用此方法
    * 这里可得到执行controller时的异常信息
    * 这里可记录操作日志，资源清理等
    */</span>
	<span class="annotation">@Override</span>
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span>(HttpServletRequest request,
        HttpServletResponse response, Object handler, Exception ex) {
	}

}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 对某种映射器配置拦截器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptors"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"handlerInterceptor1"</span> /&gt;</span>
            <span class="tag">&lt;<span class="title">ref</span> <span class="attribute">bean</span>=<span class="value">"handlerInterceptor2"</span> /&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"handlerInterceptor1"</span> <span class="attribute">class</span>=<span class="value">"springmvc.intercapter.HandlerInterceptor1"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"handlerInterceptor2"</span> <span class="attribute">class</span>=<span class="value">"springmvc.intercapter.HandlerInterceptor2"</span> /&gt;</span>

<span class="comment">&lt;!-- 针对所有mapping配置全局拦截器 --&gt;</span>
<span class="tag">&lt;<span class="title">mvc:interceptors</span>&gt;</span>
    <span class="tag">&lt;<span class="title">mvc:interceptor</span>&gt;</span>
        <span class="tag">&lt;<span class="title">mvc:mapping</span> <span class="attribute">path</span>=<span class="value">"/**"</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">mvc:mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"HandlerIntercetpor1"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">mvc:interceptor</span>&gt;</span>
    <span class="tag">&lt;<span class="title">mvc:interceptor</span>&gt;</span>
        <span class="tag">&lt;<span class="title">mvc:mapping</span> <span class="attribute">path</span>=<span class="value">"/**"</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">mvc:mapping</span>&gt;</span>
        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"HandlerIntercetpor2"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">mvc:interceptor</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mvc:interceptors</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-demo">用户认证DEMO</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span>{</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span>(HttpServletRequest request,
        HttpServletResponse response, Object handler) <span class="keyword">throws</span> Exception {
        <span class="comment">//如果是登录页面则放行</span>
        <span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>){
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }
        HttpSession session = request.getSession();
        <span class="comment">//如果用户已登录也放行</span>
        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>){
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }
        <span class="comment">//用户没有登录挑战到登录页面</span>
        request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);
        
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="Spring MVC" scheme="http://zhpooer.github.io/tags/Spring%20MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-OOP in Scala]]></title>
    <link href="http://zhpooer.github.io/2014/07/12/scala-in-action-oop-in-scala/"/>
    <id>http://zhpooer.github.io/2014/07/12/scala-in-action-oop-in-scala/</id>
    <published>2014-07-12T13:56:24.000Z</published>
    <updated>2014-07-15T03:37:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">一些特性</h1>
<h2 id="-_root_-"><code>_root_</code>的使用</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">package</span> monads { <span class="class"><span class="keyword">class</span> <span class="title">IOMonad</span> }</span>
<span class="keyword">package</span> io {
  <span class="keyword">package</span> monads {
    <span class="class"><span class="keyword">class</span> <span class="title">Console</span> {</span> <span class="keyword">val</span> m = <span class="keyword">new</span> _root_.monads.IOMonad }
  }
}

<span class="keyword">import</span> java.util.Date
<span class="keyword">import</span> java.sql.{Date =&gt; SqlDate}
<span class="comment">// 也可以这样</span>
<span class="keyword">import</span> java.sql.{Date =&gt; _ }
</pre></td></tr></table></figure>

<h2 id="bean-">bean方法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 如果在构造函数中没有定义 var 或者 val, 将会是似有的</span>
<span class="keyword">class</span> Person(<span class="keyword">var</span> firstName:<span class="keyword">String</span>, <span class="keyword">var</span> lastName:<span class="keyword">String</span>,
        <span class="keyword">private</span> <span class="keyword">var</span> _age:Int) <span class="comment">{
  def age = _age
  def age_=(newAge: Int) = _age = newAge
}</span>
</pre></td></tr></table></figure>

<h2 id="object-">object 的工厂方法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> {</span> <span class="keyword">def</span> canAccess(page: String): Boolean }
<span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Role</span> {</span>
  <span class="keyword">override</span> <span class="keyword">def</span> canAccess(page:String) = <span class="keyword">true</span>
}
<span class="class"><span class="keyword">class</span> <span class="title">SuperAnalyst</span> <span class="keyword">extends</span> <span class="title">Role</span> {</span>
  <span class="keyword">override</span> <span class="keyword">def</span> canAccess(page:String) = page != <span class="string">"Admin"</span>
}
<span class="class"><span class="keyword">class</span> <span class="title">Analyst</span> <span class="keyword">extends</span> <span class="title">Role</span> {</span>
  <span class="keyword">override</span> <span class="keyword">def</span> canAccess(page:String) = <span class="keyword">false</span>
}
<span class="class"><span class="keyword">object</span> <span class="title">Role</span> {</span>
  <span class="keyword">def</span> apply(roleName:String) = roleName <span class="keyword">match</span> {
    <span class="keyword">case</span> <span class="string">"root"</span> =&gt; <span class="keyword">new</span> Root
    <span class="keyword">case</span> <span class="string">"superAnalyst"</span> =&gt; <span class="keyword">new</span> SuperAnalyst
    <span class="keyword">case</span> <span class="string">"analyst"</span> =&gt; <span class="keyword">new</span> Analyst
  }
}
</pre></td></tr></table></figure>

<h2 id="package-object">package object</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 一般放在 package.scala文件下</span>
<span class="comment">// minimumAge and verifyAge will be available to</span>
<span class="comment">// all members of the package bar</span>
<span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">bar</span> {</span>
  <span class="keyword">val</span> minimumAge = <span class="number">18</span>
  <span class="keyword">def</span> verifyAge = {}
}

<span class="comment">// 用法如下</span>
<span class="keyword">package</span> bar
<span class="class"><span class="keyword">class</span> <span class="title">BarTender</span> {</span>
  <span class="keyword">def</span> serveDrinks = { verifyAge; ... }
}
</pre></td></tr></table></figure>

<h2 id="trait">trait</h2>
<p>In OOP languages, a mixin is a class that provides certain functionality
that could be used by other classes.</p>
<p>Another difference between traits and abstract classes in Scala is that an
abstract class can have constructor parameters, but traits can’t take any param-
eters. Both can take type parameters.</p>
<p>The difference between def and val is that val gets evaluated when an
object is created, but def is evaluated every time a method is called.</p>
<h2 id="case-class">case class</h2>
<p>when you prefix a class with case, the following things will hap-
pen automatically:</p>
<ul>
<li>Scala prefixes all the parameters with val, and that will make them public value.
But remember that you still never access the value directly; you always access
through accessors.</li>
<li>Both equals and hashCode are implemented for you based on the given
parameters.</li>
<li>The compiler implements the toString method that returns the class name
and its parameters.</li>
<li>Every case class has a method named copy that allows you to easily create a mod-
ified copy of the class’s instance. You’ll learn about this later in this chapter.</li>
<li>A companion object is created with the appropriate apply method, which takes
the same arguments as declared in the class.</li>
<li>The compiler adds a method called unapply, which allows the class name to be
used as an extractor for pattern matching (more on this later).</li>
<li>A default implementation is provided for serialization:<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>scala&gt; val me = Person(<span class="string">"Nilanjan"</span>, <span class="string">"Raychaudhuri"</span>)
<span class="label">me:</span> Person = Person(Nilanjan,Raychaudhuri)

scala&gt; val myself = Person(<span class="string">"Nilanjan"</span>, <span class="string">"Raychaudhuri"</span>)
<span class="label">myself:</span> Person = Person(Nilanjan,Raychaudhuri)

scala&gt; me<span class="preprocessor">.equals</span>(myself)
<span class="label">res1:</span> Boolean = true

scala&gt; me<span class="preprocessor">.hashCode</span>
<span class="label">res2:</span> Int = <span class="number">1688656232</span>

scala&gt; myself<span class="preprocessor">.hashCode</span>
<span class="label">res4:</span> Int = <span class="number">1688656232</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="copy-constructor">copy constructor</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>scala&gt; val skipOption = <span class="keyword">Skip</span>(<span class="number">10</span>, NoOption)
  skipOption: <span class="keyword">Skip</span> = <span class="keyword">Skip</span>(<span class="number">10</span>,NoOption())
  
scala&gt; val skipWithLimit = skipOption.<span class="keyword">copy</span>(anotherOption = Limit(<span class="number">10</span>, NoOption))
  skipWithLimit: <span class="keyword">Skip</span> = <span class="keyword">Skip</span>(<span class="number">10</span>,Limit(<span class="number">10</span>,NoOption))

<span class="comment">// 内部结构如下</span>
<span class="keyword">case</span> <span class="keyword">class</span> <span class="keyword">Skip</span>(number: Int, anotherOption: QueryOption)
    extends QueryOption <span class="comment">{
  def copy(number: Int = number,
  anotherOption: QueryOption = anotherOption) = {
    Skip(number, anotherOption)
  }</span>
}
</pre></td></tr></table></figure>

<h2 id="abstract-override">abstract override</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">DogMood</span> {</span>
  <span class="keyword">def</span> greet
}

<span class="class"><span class="keyword">trait</span> <span class="title">AngryMood</span> <span class="keyword">extends</span> <span class="title">DogMood</span> {</span>
  <span class="comment">// 父方法是抽象方法, 错误</span>
  <span class="keyword">override</span> <span class="keyword">def</span> greet = {
    println(<span class="string">"bark"</span>)
    <span class="keyword">super</span>.greet
  }
}
<span class="comment">// 但是可以这样</span>
<span class="comment">//  abstract override, which means it should be mixed in</span>
<span class="comment">// with some class that has the concrete definition of the greet method.</span>
<span class="class"><span class="keyword">trait</span> <span class="title">AngryMood</span> <span class="keyword">extends</span> <span class="title">DogMood</span> {</span>
 <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="keyword">def</span> greet = {
   println(<span class="string">"bark"</span>)
   <span class="keyword">super</span>.greet
 }
}
</pre></td></tr></table></figure>

<h2 id="sealed">sealed</h2>
<p>classes marked final in Scala
can’t be overridden by subclasses. But classes marked sealed can be overridden as
long as the subclasses belong to the same source file.</p>
<h1 id="value-class">Value Class</h1>
<p>Scala allows user-defined value classes (which could be case
classes as well) that extend AnyVal. Value classes are a new mechanism to avoid run-time allocation of the objects.
To create a value class you need to abide by some
important rules, including:</p>
<ul>
<li>The class must have exactly one val parameter (vars are not allowed).</li>
<li>The parameter type may not be a value class.</li>
<li>The class can not have any auxiliary constructors.</li>
<li>The class can only have def members, no vals or vars.</li>
<li>The class cannot extend any traits, only universal traits.</li>
</ul>
<p>Value classes allow you to add extension
methods to a type without the runtime overhead of creating instances.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span><span class="params">(val name: String)</span> <span class="keyword">extends</span> <span class="title">AnyVal</span> {</span>
  <span class="keyword">def</span> up() = name.toUpperCase
}

<span class="keyword">val</span> w = <span class="keyword">new</span> Wrapper(<span class="string">"hey"</span>)
w.up()

<span class="comment">// 他被编译成这样</span>
<span class="class"><span class="keyword">object</span> <span class="title">Wrapper</span> {</span>
  <span class="keyword">def</span> up$extension(_name: String) = _name.toUpperCase
}
</pre></td></tr></table></figure>

<p>A value class can only extend a universal trait, one that extends Any (normally traits by
default extend AnyRef). Universal traits can only have def members and no initializa-
tion code:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Printable</span> <span class="keyword">extends</span> <span class="title">Any</span> {</span>
  <span class="keyword">def</span> p() = println(<span class="keyword">this</span>)
}
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Wrapper</span><span class="params">(val name: String)</span> <span class="keyword">extends</span> <span class="title">AnyVal</span> <span class="keyword">with</span> <span class="title">Printable</span> {</span>
  <span class="keyword">def</span> up() = name.toUpperCase
}
...
<span class="keyword">val</span> w = Wrapper(<span class="string">"Hey"</span>)
w.p()
</pre></td></tr></table></figure>

<p>Even though now you can invoke the p method on a Wrapper instance at runtime an
instance will also be created because the implementation of the p method prints the
type. There are limitations when allocation is necessary; if you assign a value class to
an array, the optimization will fail.</p>
<h1 id="implicit">implicit</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>implicit <span class="keyword">def</span> double2Int(d: Double): Int = d.toInt

<span class="keyword">val</span> someInt: Int = <span class="number">2.3</span>

-- rewritten by the compiler:
<span class="keyword">val</span> someInt: Int = double2Int(<span class="number">2.3</span>)

-- we can avoid the runtime cost by turning our implicit classes
-- into value classes
implicit <span class="class"><span class="keyword">class</span> <span class="title">RangeMaker</span><span class="params">(val left: Int)</span> <span class="keyword">extends</span> <span class="title">AnyVal</span> {</span>
  <span class="keyword">def</span> --&gt;(right: Int): Range = left to right
}
</pre></td></tr></table></figure>

<h1 id="demo-mongo">DEMO: Mongo</h1>
<h2 id="1">1</h2>
<p>As a developer, I want an easier way to connect to my MongoDB server and access
document databases.</p>
<p>As a developer, I want to query and manage documents.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">package</span> com.scalainaction.mongo

<span class="class"><span class="keyword">class</span> <span class="title">MongoClient</span><span class="params">(val host:String, val port:Int)</span> {</span>
  require(host != <span class="keyword">null</span>, <span class="string">"You have to provide a host name"</span>)
  <span class="keyword">private</span> <span class="keyword">val</span> underlying = <span class="keyword">new</span> Mongo(host, port)
  <span class="keyword">def</span> <span class="keyword">this</span>() = <span class="keyword">this</span>(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>)
  <span class="keyword">def</span> version = underlying.getVersion
  <span class="keyword">def</span> dropDB(name:String) = underlying.dropDatabase(name)
  <span class="keyword">def</span> createDB(name:String) = DB(underlying.getDB(name))
  <span class="keyword">def</span> db(name:String) = DB(underlying.getDB(name))
}

<span class="keyword">package</span> com.scalainaction.mongo
<span class="keyword">import</span> com.mongodb.{DB =&gt; MongoDB}
<span class="comment">// 私有构造器, 除了伴生对象能够访问</span>
<span class="class"><span class="keyword">class</span> <span class="title">DB</span> <span class="title">private</span><span class="params">(val underlying: MongoDB)</span> {</span>
  <span class="keyword">def</span> collectionNames = <span class="keyword">for</span>(name &lt;- <span class="keyword">new</span>
    JSetWrapper(underlying.getCollectionNames)) <span class="keyword">yield</span> name

}
<span class="class"><span class="keyword">object</span> <span class="title">DB</span> {</span>
  <span class="keyword">def</span> apply(underlying: MongDB) = <span class="keyword">new</span> DB(underlying)
}
</pre></td></tr></table></figure>

<p>case class 的 unapply</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>object Person {
def apply(firstName:<span class="built_in">String</span>, lastName:<span class="built_in">String</span>) = {
  <span class="keyword">new</span> Person(firstName, lastName)
}
def unapply(p:Person): <span class="keyword">Option</span>[(<span class="built_in">String</span>, <span class="built_in">String</span>)] =
  Some((p.firstName, p.lastName))
}
</pre></td></tr></table></figure>

<h2 id="2">2</h2>
<p>The second user story you need to implement in your driver is an ability to create,
delete, and find documents in a MongoDB database.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre>
<span class="keyword">package</span> com.scalainaction.mongo
<span class="keyword">import</span> com.mongodb.{DBCollection =&gt; MongoDBColleciton}
<span class="keyword">import</span> com.mongodb.DBObject

<span class="class"><span class="keyword">class</span> <span class="title">DBCollection</span><span class="params">(override val underlying: MongoDBCollection)</span> <span class="keyword">extends</span> <span class="title">ReadOnly</span></span>

<span class="class"><span class="keyword">trait</span> <span class="title">ReadOnly</span> {</span>
  <span class="keyword">val</span> underlying:MongoDBCollection
  <span class="keyword">def</span> name = underlying getName
  <span class="keyword">def</span> fullName = underlying getFullName
  <span class="keyword">def</span> find(doc: DBObject) = underlying find doc
  <span class="keyword">def</span> findOne(doc: DBObject) = underlying findOne doc
  <span class="keyword">def</span> findOne = underlying findOne
  <span class="keyword">def</span> getCount(doc: DBObject) = underlying getCount doc
}

<span class="class"><span class="keyword">trait</span> <span class="title">Administrable</span> <span class="keyword">extends</span> <span class="title">ReadOnly</span> {</span>
  <span class="keyword">def</span> drop: Unit = underlying drop
  <span class="keyword">def</span> dropIndexes: Unit = underlying dropIndexes
}

<span class="class"><span class="keyword">trait</span> <span class="title">Updatable</span> <span class="keyword">extends</span> <span class="title">ReadOnly</span> {</span>
  <span class="keyword">def</span> -=(doc: DBObject): Unit = underlying remove doc
  <span class="keyword">def</span> +=(doc: DBObject): Unit = underlying save doc
}

<span class="class"><span class="keyword">trait</span> <span class="title">Memoizer</span> <span class="keyword">extends</span> <span class="title">ReadOnly</span> {</span>
  <span class="keyword">val</span> history = scala.collection.mutable.Map[Int, DBObject]()
  <span class="keyword">override</span> <span class="keyword">def</span> findOne = {
    history.getOrElseUpdate(-<span class="number">1</span>, { <span class="keyword">super</span>.findOne })
  }
  <span class="keyword">override</span> <span class="keyword">def</span> findOne(doc: DBObject) = {
    history.getOrElseUpdate(doc.hashCode, { <span class="keyword">super</span>.findOne(doc) })
  }
}


<span class="keyword">import</span> com.mongodb.{DB =&gt; MongoDB}
<span class="keyword">import</span> scala.collection.convert.Wrappers._
<span class="class"><span class="keyword">class</span> <span class="title">DB</span> <span class="title">private</span><span class="params">(val underlying: MongoDB)</span> {</span>
  <span class="keyword">private</span> <span class="keyword">def</span> collection(name: String) = underlying.getCollection(name)
  <span class="keyword">def</span> readOnlyCollection(name: String) =
      <span class="keyword">new</span> DBCollection(collection(name)) <span class="keyword">with</span> Memoizer
  <span class="keyword">def</span> administrableCollection(name: String) =
      <span class="keyword">new</span> DBCollection(collection(name)) <span class="keyword">with</span> Administrable <span class="keyword">with</span> Memoizer
  <span class="keyword">def</span> updatableCollection(name: String) =
      <span class="keyword">new</span> DBCollection(collection(name)) <span class="keyword">with</span> Updatable <span class="keyword">with</span> Memoizer
  <span class="keyword">def</span> collectionNames = <span class="keyword">for</span>(name &lt;- <span class="keyword">new</span>
    JSetWrapper(underlying.getCollectionNames)) <span class="keyword">yield</span> name
}
<span class="class"><span class="keyword">object</span> <span class="title">DB</span> {</span>
  <span class="keyword">def</span> apply(underlying: MongoDB) = <span class="keyword">new</span> DB(underlying)
}
</pre></td></tr></table></figure>

<h2 id="3">3</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">QueryOption</span></span>
<span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NoOption</span> <span class="keyword">extends</span> <span class="title">QueryOption</span></span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Sort</span><span class="params">(sorting: DBObject, anotherOption: QueryOption)</span></span>
    <span class="keyword">extends</span> QueryOption
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Skip</span><span class="params">(number: Int, anotherOption: QueryOption)</span></span>
    <span class="keyword">extends</span> QueryOption
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Limit</span><span class="params">(limit: Int, anotherOption: QueryOption)</span></span>
    <span class="keyword">extends</span> QueryOption

<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Query</span><span class="params">(q: DBObject, option: QueryOption = NoOption)</span> {</span>
  <span class="keyword">def</span> sort(sorting: DBObject) = Query(q, Sort(sorting, option))
  <span class="keyword">def</span> skip(skip: Int) = Query(q, Skip(skip, option))
  <span class="keyword">def</span> limit(limit: Int) = Query(q, Limit(limit, option))
}

<span class="class"><span class="keyword">trait</span> <span class="title">ReadOnly</span> {</span>
  <span class="keyword">val</span> underlying: MongoDBCollection
  <span class="keyword">def</span> name = underlying getName
  <span class="keyword">def</span> fullName = underlying getFullName
  <span class="keyword">def</span> find(query: Query): DBCursor = {
    <span class="keyword">def</span> applyOptions(cursor:DBCursor, option: QueryOption): DBCursor = {
      option <span class="keyword">match</span> {
        <span class="keyword">case</span> Skip(skip, next) =&gt; applyOptions(cursor.skip(skip), next)
        <span class="keyword">case</span> Sort(sorting, next)=&gt; applyOptions(cursor.sort(sorting), next)
        <span class="keyword">case</span> Limit(limit, next) =&gt; applyOptions(cursor.limit(limit), next)
        <span class="keyword">case</span> NoOption =&gt; cursor
      }
    }
  applyOptions(find(query.q), query.option)
}
  <span class="keyword">def</span> find(doc: DBObject): DBCursor = underlying find doc
  <span class="keyword">def</span> findOne(doc: DBObject) = underlying findOne doc
  <span class="keyword">def</span> findOne = underlying findOne
  <span class="keyword">def</span> getCount(doc: DBObject) = underlying getCount doc
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala in Action-scala 入门]]></title>
    <link href="http://zhpooer.github.io/2014/07/12/scala-in-action-scala-%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/07/12/scala-in-action-scala-入门/</id>
    <published>2014-07-12T01:20:07.000Z</published>
    <updated>2014-07-12T09:01:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">面向对象</h1>
<p>什么是纯粹的面向对象语言</p>
<ul>
<li>Encapsulation/information hiding.(封装)</li>
<li>Inheritance.(继承)</li>
<li>Polymorphism/dynamic binding.(多态)</li>
<li>All predefined types are objects.</li>
<li>All operations are performed by sending messages to objects.</li>
<li>All user-defined types are objects.</li>
</ul>
<p>every value is an object, and every operation is a message send,
<code>1+2</code> 的被scala翻译为 <code>1.+(2)</code></p>
<p>Along with the pure object-oriented features, Scala has made some <em>innovations</em> on
OOP space:</p>
<ul>
<li>模块混入(Modular mixin composition), This feature of Scala has traits in common with
both Java interfaces and abstract classes. You can define contracts using one or
more traits and provide implementations for some or all of the methods.(trait)</li>
<li><em>Self-type</em> — A mixin doesn’t depend on any methods or fields of the class that it’s
mixed into, but sometimes it’s useful to use fields or methods of the class it’s
mixed into, and this feature of Scala is called self-type.</li>
<li><em>Type abstraction</em>, 类型抽象 — There are two principle forms of abstraction in programming
languages: parameterization and abstract members. Scala supports both forms
of abstraction uniformly for types and values.</li>
</ul>
<h1 id="-">函数式编程</h1>
<p>Functional programming is a programming paradigm
that treats computation as the evaluation of mathematical functions and avoids state
and mutable data.(像数学方法调用, 去除状态和可变数据)</p>
<p><strong>Mutable vs. immutable data</strong></p>
<p>An object is called mutable when you can alter the contents of the object if you have
a reference to it. In the case of an immutable object, the contents of the object can’t
be altered if you have a reference to it.</p>
<p>It’s easy to create a mutable object; all you have to do is provide access to the muta-
ble state of the object. The disadvantage of mutable objects is keeping track of the
changes. In a multithreaded environment you need lock/synchronization techniques
to avoid concurrent access. For immutable objects, you don’t have to worry about
these situations.</p>
<p>A function relates every value of the domain (the input) to exactly one value of the codomain (the out-
t). (输入与结果的不变性)</p>
<p>Another aspect of functional program-ming
is that it doesn’t have side effects or mutability. </p>
<p>Functional programming languages that
support this style of programming provide at least
some of the following features:</p>
<ul>
<li>Higher-order functions </li>
<li>Lexical closures </li>
<li>Pattern matching</li>
<li>Single assignment </li>
<li>Lazy evaluation </li>
<li>Type inference </li>
<li>Tail call optimization </li>
<li>List comprehensions</li>
<li>Mondadic effects </li>
</ul>
<p>scala支持 头等函数(first-class)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>val <span class="function"><span class="title">inc</span> = <span class="params">(x:Int)</span> =&gt;</span> x + <span class="number">1</span>
inc(<span class="number">1</span>)

List<span class="function"><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span>.<span class="title">map</span><span class="params">((x:Int) =&gt; x + <span class="number">1</span>)</span></span>
</pre></td></tr></table></figure>

<h1 id="-">多范式编程</h1>
<p>提供多范式编程的原因:
可以为程序员提供各种解决问题的方案, 以及最佳实现取解决问题.
函数式编程可以提供一些简单的组件(function)非常容易地实现一个有趣的功能.
面向对象使用继承, 类等功能简单地实现一个复杂的系统.</p>
<p>In the case of OOP , building blocks are objects, and in
functional programming building blocks are functions.
In Scala, functions are treated as objects.</p>
<h2 id="-">函数即对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).map((x:Int) =&gt; x + <span class="number">1</span>)
// 会被翻译成
List(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).map(new Function1[Int, Int]{ <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(x:Int)</span>:</span> Int = x + <span class="number">1</span>})
</pre></td></tr></table></figure>

<p>scala 提供了简单的语言胶合机制, 使添加新的语言特性变得简单方便.
你可以使用提供一些方法, 结合中缀操作符, 后缀操作符以及闭包, 传名函数.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">loopTill</span><span class="params">(cond: =&gt; Boolean)</span><span class="params">(body: =&gt; Unit)</span> :</span>Unit = {
    <span class="keyword">if</span>(conf) {
        body
        loopTill(cond)(body)
    }
}
var i = <span class="number">10</span>
loopTill(i&gt;<span class="number">0</span>) {
    println(i)
    i -= <span class="number">1</span>
}
</pre></td></tr></table></figure>

<blockquote>
<p>什么是闭包<br>Closure is a first-class function with free variables that are bound
in the lexical environment. In the loopTill example, the free variable is i.
Even though it’s defined outside the closure, you could still use it inside. The
second parameter in the loopTill example is a closure, and in Scala that’s
represented as an object of type scala.Function0.</p>
</blockquote>
<p>The biggest complaint from the dynamic language camp about
statically typed languages is that they don’t help the productivity of the programmer
and they reduce productivity by forcing programmers to write boilerplate code. And</p>
<p>Counting the number of lines in a file in Scala</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>val src = scala<span class="preprocessor">.io</span><span class="preprocessor">.Source</span><span class="preprocessor">.fromFile</span>(“someFile<span class="preprocessor">.txt</span>”)
val count = src<span class="preprocessor">.getLines</span>()<span class="preprocessor">.map</span>(<span class="built_in">x</span> =&gt; <span class="number">1</span>)<span class="preprocessor">.sum</span>
</pre></td></tr></table></figure>

<h1 id="-">静态类型</h1>
<p>静态类型:
Static typing is a typing system where the values and the variables
have types. A number variable can’t hold anything other than a number.
Types are determined and enforced at compile time or declaration time.</p>
<p>动态类型:
Dynamic typing is a typing system where values have types but the
variables don’t. It’s possible to successively put a number and a string inside
the same variable.</p>
<p>静态类型的类型检查, 可以在编译时防止错误的发送,
但是动态类型需要在运行时, 发现错误</p>
<p>静态类型的另一个好处就是可以有一个强大的 IDEs 帮助你重构</p>
<p>传统的静态类型语言在声明一个变量或者调用一个函数时,强制你提供过于的类型信息.
但是scala 提供了类型推断来帮助程序员像编写动态函数一样编写scala</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>val computers <span class="subst">=</span> <span class="built_in">Array</span>(
    <span class="built_in">Map</span>(<span class="string">"name"</span> <span class="subst">-&gt; </span><span class="string">"Macbook"</span>, <span class="string">"color"</span> <span class="subst">-&gt; </span><span class="string">"white"</span>),
    <span class="built_in">Map</span>(<span class="string">"name"</span> <span class="subst">-&gt; </span><span class="string">"HP Pavillion"</span>, <span class="string">"color"</span> <span class="subst">-&gt; </span><span class="string">"black"</span>)
)
</pre></td></tr></table></figure>

<p><em>COMPILE MACROS</em> The Scala 2.10 release adds experimental support for
compile-time macros.11 This allows programmers to write macro defs: func-
tions that are transparently loaded by the compiler and executed during com-
pilation. This realizes the notion of compile-time metaprogramming for Scala.</p>
<table>
<thead>
<tr>
<th>sbt 命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>:help</td>
<td>帮助</td>
</tr>
<tr>
<td>:cp</td>
<td>进入复制文本模式</td>
</tr>
<tr>
<td>:load</td>
<td>载入 scala 文件</td>
</tr>
<tr>
<td>:replay or :r</td>
<td>从新载入</td>
</tr>
<tr>
<td>:quite or :q</td>
<td>退出</td>
</tr>
<tr>
<td>:type</td>
<td>显示类型</td>
</tr>
<tr>
<td>:import</td>
<td>显示所有已经导入的包</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>val <span class="keyword">first</span> :: <span class="property">rest</span> = List(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)
</pre></td></tr></table></figure>

<p>If the function has side effects, the common convention is to use “()” even though it
isn’t required.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> </span>myFirstMethod = <span class="string">"exciting times ahead"</span>
</pre></td></tr></table></figure>

<h1 id="command-line-rest-client">Command-line REST client</h1>
<p>REST, REpresentational State Transfer</p>
<ul>
<li>Application state and functionality are divided into resources.</li>
<li>Every resource is uniquely addressable using a universal syntax.</li>
<li>All resources share a uniform interface for transfer of state between client
and resource, consisting of well-defined operations (GET, POST, PUT, DELETE,
OPTIONS, and so on, for RESTful web services) and content types.</li>
<li>A protocol that’s client/server, stateless cacheable, and layered.</li>
</ul>
]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day55-Oracle管理]]></title>
    <link href="http://zhpooer.github.io/2014/07/11/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day55-oracle%E7%AE%A1%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/07/11/传智播客day55-oracle管理/</id>
    <published>2014-07-11T02:08:35.000Z</published>
    <updated>2014-07-12T12:08:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dbca">DBCA</h1>
<p>DBCA 是一个管理Oracle数据库的工具</p>
<ul>
<li>ASM, 自动存储管理, 数据库文件在外设文件存储介质管理</li>
<li>创建数据库</li>
<li>配置数据库选项</li>
<li>删除数据库</li>
<li>管理模板</li>
</ul>
<p>DBA工作:</p>
<ul>
<li>评测数据库服务器硬件</li>
<li>安装Oracle数据库软件</li>
<li>规划数据库<ul>
<li>计划数据库的逻辑存储结构<ul>
<li>多少磁盘驱动器</li>
<li>需要多少数据文件</li>
<li>需要用多大的表空间</li>
<li>专用存储的类型和尺寸, 哪种类型才信息将被存储</li>
</ul>
</li>
<li>数据库总设计</li>
<li>数据库备份策略</li>
</ul>
</li>
<li>创建并且打开数据库</li>
<li>数据库备份</li>
<li>注册用户</li>
<li>实现数据库计划</li>
<li>全库备份/增量备份</li>
<li>调整数据库性能</li>
</ul>
<p>数据仓库, 分析, 一般只做查询</p>
<p>归档, 如果在非归档模式下,
数据库是不能做联机备份的,
只能脱机备份, 定期压缩备份</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>arhive <span class="command">log</span> <span class="type">list</span>
</pre></td></tr></table></figure>

<p>数据库四个状态</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">shutdown</span>
unmount
mount
<span class="keyword">open</span>
</pre></td></tr></table></figure>

<h1 id="-flashback-">闪回(flashback)</h1>
<p>使用情景</p>
<ul>
<li>错误的删除了数据, 并且commit</li>
<li>错误地删除了表<code>drop table</code></li>
<li>如何获取表上的历史记录</li>
<li>如何撤销一个已经提交了的事务</li>
</ul>
<p>闪回类型</p>
<ul>
<li>闪回表, 将表会退到过去的一个时间上</li>
<li>闪回删除, 操作oracle回收站</li>
<li>闪回版本查询, 表上的历史记录</li>
<li>闪回事务查询, 回去一个 undo_sql</li>
<li>闪回数据库, 将数据库会退到过期的一个时间上</li>
<li>闪回归档日志</li>
</ul>
<p>传统的恢复技术缓慢, 闪回命令很容易</p>
<h2 id="-">闪回表</h2>
<p>将表中的数据快速恢复到过去的一个时间点, 使用到与撤销表空间相关的
undo信息</p>
<p>用户的表数据的修改操作, 都记录在撤销表空间中, 如某个操作在提交之后
被记录在撤销表空间中, 保留时间为900秒,  用户可以在900秒内对表进行闪回操纵</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">show</span> parameter undo;</span>
<span class="comment">-- 单位是秒</span>
<span class="comment">-- scope取值有三个:</span>
<span class="comment">-- memory(只改当前数据库, 重启恢复)</span>
<span class="comment">-- spfile(重启以后才生效)</span>
<span class="comment">-- both</span>

<span class="operator"><span class="keyword">alter</span> system <span class="keyword">set</span> undo_retention=<span class="number">1200</span> scope=<span class="keyword">both</span>;</span>


<span class="comment">-- 赋予权限</span>
<span class="operator"><span class="keyword">grant</span> flash <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 系统该变号 scn</span>
<span class="comment">-- 得到时间SCN 222222</span>
<span class="operator"><span class="keyword">select</span> to_char(sysdate, <span class="string">'yyyy-mm-dd hh24:mi:ss:mm'</span>) 时间,
timestamp_to_scn(sysdate) SCN <span class="keyword">from</span> dual;</span>


<span class="comment">-- do some insert</span>
<span class="operator"><span class="keyword">commit</span>;</span>

<span class="comment">-- 必须先打开表的行移动</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> flashback_table enable rowmovement;</span>

flashback table falshback_table to SCN 222222;
<span class="comment">-- 如何获取离该操作最近的一个时间点 或者 scn</span>
</pre></td></tr></table></figure>

<ul>
<li>系统表不能被闪回</li>
<li>不能跨越 DDL操作(如<code>create table</code>)</li>
<li>会被写入警告日志</li>
<li>产生撤销和重做的数据</li>
</ul>
<h2 id="-">闪回删除</h2>
<p>实际上从系统的回收站将已经删除的对象, 恢复到删除之前的状态.
只对普通用户有效</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">-- 回收站</span>
show recyclebin;
<span class="comment">-- 清空回收站</span>
purge recyclebin;

<span class="comment">-- 彻底删除表, 不经过回收站</span>
drop table testtable purge;

<span class="comment">-- 闪回删除</span>
flashback table test1 <span class="keyword">to</span> <span class="keyword">before</span> drop;
<span class="comment">-- 通过回收站中的名字闪回删除</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop;

<span class="comment">-- 如果如果存在重名的表, 会先闪回后删除的</span>

<span class="comment">-- 如果已经存在重复命名的表</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop rename <span class="keyword">to</span> test1new;
<span class="comment">-- 放到回收站时, 默认会禁掉 触发器</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop enable triggers;
</pre></td></tr></table></figure>

<h2 id="-">闪回版本查询</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- versions_xid 事务号</span>
<span class="operator"><span class="keyword">select</span> vid, vname, versions_operation, versions_starttime, versions_endtime,
versions_xid
<span class="keyword">from</span> versions_table
versions between <span class="keyword">timestamp</span> minvalue <span class="keyword">and</span> maxvalue;</span>
</pre></td></tr></table></figure>

<h2 id="-">闪回事务查询</h2>
<p>闪回事务查询实际上是闪回版本查询的一个补充,
通过它可以审计某个事务甚至撤销一个已经提交的事务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">-- 事务视图, 从该视图中可以获取事务的历史操作记录以及撤销语句</span>
desc flashback_transaction_query;

<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">transaction</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 通过闪回版本查询得到 versions_xid</span>
<span class="operator"><span class="keyword">select</span> operation, undo_sql <span class="keyword">from</span> flashback_transaction_query
<span class="keyword">where</span> xid=<span class="string">"xidxxxxx"</span>;</span>
<span class="comment">-- 执行 undo_sql, 就可以撤销这个事务</span>
</pre></td></tr></table></figure>

<h1 id="-">导入和导出</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">-- 表方式导出</span>
cmd &gt; <span class="built_in">exp</span> scott/tiger <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.lgo tables=dept,emp
<span class="comment">-- 用户方式导出</span>
cmd &gt; <span class="built_in">exp</span> scott/tiger <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.lgo
<span class="comment">-- 库方式导出</span>
<span class="built_in">exp</span> <span class="keyword">system</span>/password@localhost:<span class="number">1521</span>/orcl <span class="built_in">file</span>=d:/temp/full.dmp <span class="built_in">log</span>=d:/temp/<span class="built_in">log</span>.<span class="built_in">log</span> full=y

<span class="comment">-- 导入一张表</span>
cmd &gt; imp emi/password <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span> table=dept,emp
fromuser=scott touser=emi commit=y ignore=y
<span class="comment">-- 导入用户下的表</span>
cmd &gt; imp emi/password <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span>
fromuser=scott touser=emi commit=y ignore=y
<span class="comment">-- 导入数据库</span>
cmd &gt; imp <span class="keyword">system</span>/passowrd@localhost <span class="built_in">file</span>=d:/cc.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span> full=y ignore=y destroy=y
</pre></td></tr></table></figure>

<h1 id="-schema-">管理方案(Schema)</h1>
<p>启动 <code>OracleDBConsolord</code>, 访问 <code>http://locahost:1158</code>,
<code>grant select_catalog_role to scott</code></p>
<p>方案: 用户和方案是一一对应的关系, 表, 存储过程以及View等都是管理方案</p>
<p>通过网页管理数据库</p>
<p>临时表</p>
<h1 id="-">管理用户安全</h1>
<p>概览</p>
<ul>
<li>用户</li>
<li>角色</li>
<li>权限</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 创建用户 itcast0509/password</span>
conn / as sysdba
<span class="comment">-- 三种认证方式 password(密码验证)/external(以主机用户登陆)/global(生物认证,token方式)</span>
<span class="comment">-- 预定义账户: SYS账户(数据库拥有者), SYSTEM账户(DBA)</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> itcast0509 identified <span class="keyword">by</span> password;</span>
<span class="comment">-- 授予登陆权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> itcast0509;</span>

<span class="comment">-- 解锁</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> scott account unlock;</span>
<span class="comment">-- 改密码</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> scott identified <span class="keyword">by</span> newpassword;</span>
</pre></td></tr></table></figure>

<p>用户权限由两种</p>
<ul>
<li>系统权限, 允许用户执行对于数据库的特定操作, 如创建表, 创建用户等</li>
<li>对象权限, 允许用户访问和操作一个特定的对象, 如其他方案下的表的查询<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> employee <span class="keyword">to</span> scott;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">权限的级联</h2>
<p>ADMIN OPTION, 只对系统权限而言, 撤销权限不能级联撤销</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> jeff identified <span class="keyword">by</span> password;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> emi identified <span class="keyword">by</span> password;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> jeff;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> emi;</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> jeff quota unlimited <span class="keyword">on</span> users;</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> emi quota unlimited <span class="keyword">on</span> users;</span>

<span class="comment">-- 给予权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> jeff <span class="keyword">with</span> admin <span class="keyword">option</span>;</span>

<span class="comment">-- login as jeff, jeff 授权给emi</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> emi;</span>

<span class="comment">-- login as admin</span>
<span class="comment">-- 撤销了jeff的权限, 但是没有级联撤销emi的权限</span>
revoke <span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">from</span> jeff;</span>
</pre></td></tr></table></figure>

<p>GRANT OPTION, 只对对象权限而言, 会产生级联的效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">-- login as scott</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">to</span> jeff <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>

<span class="comment">-- login as jeff</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> scott.emp <span class="keyword">to</span> emi;</span>

<span class="comment">-- login as scott, 级联撤销权限</span>
revoke <span class="operator"><span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">from</span> jeff;</span>
</pre></td></tr></table></figure>

<h2 id="-role-">角色 (Role)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">-- 角色</span>
<span class="operator"><span class="keyword">create</span> role hr_mgr;</span>
<span class="operator"><span class="keyword">create</span> role hr_clerk;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> hr_clerk;</span>

<span class="comment">-- 继承关系</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span>, hr_clerk <span class="keyword">to</span> hr_mgr;</span>

<span class="comment">-- 将角色赋予给用户</span>
<span class="operator"><span class="keyword">grant</span> hr_mgr <span class="keyword">to</span> jeff;</span>
</pre></td></tr></table></figure>

<p>数据库已经预定义了各种常用角色:</p>
<ul>
<li>CONNECT, 登陆</li>
<li>RESOURCE, 创建表, 触发器, 视图, 分配用户空间等权限</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">-- 创建新用户</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> testuser identified <span class="keyword">by</span> password;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource <span class="keyword">to</span> testuser;</span>
</pre></td></tr></table></figure>

<h1 id="-profile-">概要文件(profile)</h1>
<ul>
<li>定义用户创建规则, 如密码复杂度, 登陆失败处理, 密码修改策略,</li>
<li>以及对资源的使用控制</li>
</ul>
<h1 id="-">分布式数据库</h1>
<p>物理上被存放在网络的多个节点上, 逻辑上是一个整体</p>
<p>独立性, 不必关系数据如何分割和存储, 只关心数据本身</p>
<p>分布操作, 创建数据库链路, 本地服务名</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">-- 通过工具, 创建本地服务名配置文件 remoteorcl</span>
<span class="comment">-- 授予远程登陆权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">database</span> link <span class="keyword">to</span> scott;</span>
<span class="comment">-- 创建数据库链路</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> link l2 <span class="keyword">connect</span> <span class="keyword">to</span> scott identified <span class="keyword">by</span>
tiger <span class="keyword">using</span> <span class="string">'remoteorcl'</span>;</span>

<span class="comment">-- 分布式数据库查询</span>
<span class="comment">-- 查询员工信息, emp在远端, dept在本地</span>
<span class="operator"><span class="keyword">create</span> synonym  remoteemp <span class="keyword">for</span> emp@L2;</span>

<span class="operator"><span class="keyword">select</span> ename, dname
<span class="keyword">from</span> dept, remoteemp
<span class="keyword">where</span> remoteemp.deptno=dept.deptno;</span>

<span class="comment">-- 建立远程表的本地视图</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">view</span> emp
<span class="keyword">as</span>
    <span class="keyword">select</span> * <span class="keyword">from</span> emp1@L1
    <span class="keyword">union</span>
    <span class="keyword">select</span> * <span class="keyword">from</span> emp2@L2;</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span>
</pre></td></tr></table></figure>

<h2 id="-">分布式数据库跨节点更新</h2>
<p>快照, 定义快照维护关系表的异步副本.
主表修改后的指定时间内刷新副本, 用户主表修改少, 单查询查询的表.
定义在备份端</p>
<p>触发器, 同步完成, 定义在主数据库端</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">-- 定义快照</span>
<span class="operator"><span class="keyword">create</span> snapshot emp refresh
-- 第一次刷新刷新
<span class="keyword">start</span> <span class="keyword">with</span> sysdate
-- 到下个星期刷新一次
<span class="keyword">next</span> next_day(sysdate, <span class="string">'Monday'</span>)
<span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp@L1;</span>


<span class="comment">-- 定义触发器</span>
<span class="comment">-- 实现数据的同步备份</span>
<span class="operator"><span class="keyword">create</span> ro <span class="keyword">replace</span> <span class="keyword">trigger</span> syncsal
<span class="keyword">after</span> <span class="keyword">update</span>
<span class="keyword">on</span> emp
<span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>
<span class="keyword">begin</span>
   -- 将涨后的薪水备份到远端数据库中
   <span class="keyword">update</span> remoteemp <span class="keyword">set</span> sal=:new.sal <span class="keyword">where</span> empno=:new.empno;</span>
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="oracle" scheme="http://zhpooer.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day54-PL/SQL]]></title>
    <link href="http://zhpooer.github.io/2014/07/10/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day54-plsql/"/>
    <id>http://zhpooer.github.io/2014/07/10/传智播客day54-plsql/</id>
    <published>2014-07-10T01:02:36.000Z</published>
    <updated>2014-07-10T08:07:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>安装 SQL Developer</p>
<p>文档 books: pl/sql</p>
<p>PL/SQL(Procedure Language/SQL): SQL 语言的过程化扩展</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 给员工涨工资, 总裁1000, 经理800, 其他400</span>
<span class="comment">-- jdbc 代码效率不高, 所以要用 PLSQL</span>

<span class="comment">-- Hello world 程序</span>
declare
<span class="comment">-- 说明部分</span>
<span class="comment">-- 定义变量</span>
<span class="operator"><span class="keyword">begin</span>
    dbms_output.put_line(<span class="string">'hello world'</span>);</span>
<span class="operator"><span class="keyword">end</span>

<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span> <span class="comment">-- 打开程序输出开关</span>

desc dbms_output;  <span class="comment">-- 查看文档信息</span>
</pre></td></tr></table></figure>

<h2 id="-">说明变量</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>varl char(15)
married boolean := true;
psal number(7,2);
my_name emp.ename%type;  <span class="comment">-- 引用型变量, 与列变量类型一样</span>
emp_rec emp%rowtype;     <span class="comment">-- 记录型变量, 代表表中的一行, 数组</span>


<span class="comment">-- 查询并打印7839的姓名和薪水</span>
<span class="comment">-- 方式一: 使用引用型变量</span>
<span class="operator"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>
<span class="keyword">declare</span>
    pename  emp.ename%type;</span>
    psal    emp.sal%type;
<span class="operator"><span class="keyword">begin</span>
    -- 得到<span class="number">7839</span>的姓名和薪水
    -- 使用 <span class="keyword">select</span> 和 <span class="keyword">into</span>
    <span class="keyword">select</span> ename, sal <span class="keyword">into</span> pename, psal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7839</span>;</span>
    dbms_outpu.put_line(pname||'薪水是'||psal);
<span class="operator"><span class="keyword">end</span>
-- 方式二: 使用记录型变量
<span class="keyword">declare</span>
    emp_rec emp%rowtype;</span>
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">select</span> * <span class="keyword">into</span> emp_rec <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7839</span>;</span>
    dbms_output.put_line(emp_rec.ename||'薪水是'||emp.sal)
<span class="operator"><span class="keyword">end</span></span>
</pre></td></tr></table></figure>

<h2 id="-">流程控制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">-- 判断用户输入的数字</span>
set serveroutput on

<span class="comment">-- 接受键盘输入</span>
<span class="comment">-- 关键 num 表示的是一个内存地址值, 在该地址上保存了输入的值</span>
accept num prompt <span class="string">'请输入一个数字'</span>;

declare
    <span class="comment">-- 定义变量保存输入的数字</span>
    <span class="comment">-- 隐式转换</span>
    pnum number := &num;
begin
    <span class="keyword">if</span> pnum = <span class="number">9</span> <span class="keyword">then</span> dbms_output.put_line(<span class="string">'您输入的是0'</span>);
        elsif pnum = <span class="number">1</span> <span class="keyword">then</span> dbms_output.put_line(<span class="string">'您输入的是1'</span>);
        <span class="keyword">else</span> dbms_output.put_line(<span class="string">'您输入的是其他数字'</span>);
    <span class="keyword">end</span> <span class="keyword">if</span>;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-">循环控制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>
<span class="keyword">while</span> [condition]
<span class="keyword">loop</span>
-- <span class="keyword">do</span> something
<span class="keyword">end</span> <span class="keyword">loop</span>;

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>
<span class="keyword">loop</span>
-- <span class="keyword">do</span> somethings
<span class="keyword">end</span> <span class="keyword">loop</span>


-- 打印 <span class="number">1</span>-<span class="number">10</span>

<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    pnum number := <span class="number">1</span>
begin
    <span class="keyword">loop</span>
        <span class="keyword">exit</span> <span class="keyword">when</span> pnum &gt; <span class="number">10</span>;
        dbms_output.put_line(pnum);
        pnum := pnum + <span class="number">1</span>;
    <span class="keyword">end</span> <span class="keyword">loop</span>;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-cursor-">光标(Cursor)</h2>
<p>光标的属性:</p>
<ul>
<li>%isopen, 是否打开</li>
<li>%rowcount, 返回的行数</li>
<li>%notfound</li>
<li>%found</li>
</ul>
<p>默认情况下, 一次性只能打开300个光标</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>conn sys/password@localhost:1521/orcl as sysdba
<span class="comment">-- 查询关于abcd的各种参数</span>
<span class="operator"><span class="keyword">show</span> parameter abcd;</span>
shwo parameter cursor;
<span class="comment">-- 修改</span>
<span class="operator"><span class="keyword">alter</span> system|<span class="keyword">session</span> <span class="keyword">set</span> open_cursors=<span class="number">300</span>;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre>cursor c1 is <span class="operator"><span class="keyword">select</span> ename <span class="keyword">from</span> emp;</span>
open c1;
fetch c1 into pename;   <span class="comment">-- 取一行到变量中</span>
close c1;

<span class="comment">-- 使用光标打印所有员工的工资和薪水</span>
<span class="operator"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span>
declare
    cursor cemp is <span class="operator"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp;</span>
    pename emp.ename%type;
    psal emp.sal%type;
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">open</span> cemp;</span>
    loop
        <span class="comment">-- 取当前记录</span>
        fetch cemp into pename, psal;
        <span class="comment">-- 退出条件</span>
        exit when cemp%notfound
        dbms_output.put_line(pename||'的薪水是'||psal);
    <span class="operator"><span class="keyword">end</span> loop;</span>
    clse cemp;
<span class="operator"><span class="keyword">end</span>;</span>

<span class="comment">-- 涨工资 TODO ()</span>
<span class="operator"><span class="keyword">set</span> serveroutpu <span class="keyword">on</span>;</span>
declare
    cursor cemp is <span class="operator"><span class="keyword">select</span> empno, sal, job <span class="keyword">from</span> emp;</span>
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">rollback</span>;</span>
    open cemp;
    
    close cemp;
    <span class="operator"><span class="keyword">commit</span>;</span>
<span class="operator"><span class="keyword">end</span>

-- 带参数的光标
-- 查询某个部门中员工的姓名
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span>
declare
    cursor cemp(dno number) is <span class="operator"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=dno;</span>
    pename emp.ename%type;
<span class="operator"><span class="keyword">begin</span>
   <span class="keyword">open</span> cemp(<span class="number">10</span>);</span>
   loop
       fetch cemp into pename;
       exit when cemp%notfound;
       dbms_output.put_line(pename);
   <span class="operator"><span class="keyword">end</span> loop;</span>
   close cemp;
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h2 id="-exception-">异常(Exception)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>-- 被<span class="number">0</span>除处理
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    pnum number;
begin
    pnum := <span class="number">1</span>/<span class="number">0</span>
exception
    <span class="keyword">when</span> zero_divide <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'1:0b不能做被除数');</span>
    <span class="keyword">when</span> value_error <span class="keyword">then</span> dbms_ouput.put_line(<span class="comment">'算数或者转换错误');</span>
    <span class="keyword">when</span> others <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'其他例外');</span>
<span class="keyword">end</span>;

-- 自定义异常
-- 查询<span class="number">50</span>号部门的员工姓名
<span class="keyword">declare</span>
    cursor cemp <span class="keyword">is</span> seect ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">50</span>;
    pename emp.ename%type;
    -- 自定义异常
    no_emp_fount exception;
begin
    open cemp;
    fetch cemp <span class="keyword">into</span> pename;
    <span class="keyword">if</span> cemp%notfound <span class="keyword">then</span>
       raise no_emp_found;
    <span class="keyword">end</span> <span class="keyword">if</span>;
    close cemp;
exception
    <span class="keyword">when</span> no_emp_found <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'没有找到员工');</span>
    <span class="keyword">when</span> others <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'其他例外');</span>
<span class="keyword">end</span>;
</pre></td></tr></table></figure>

<h1 id="-">案例</h1>
<p>瀑布模型</p>
<ul>
<li>需求分析</li>
<li>设计<ul>
<li>概要设计(High Level Design), 框架, 模块</li>
<li>详细设计(Low Level Design), 如何实现具体模块</li>
</ul>
</li>
<li>编码, 实现功能模块, 类</li>
<li>测试</li>
<li>部署运营</li>
</ul>
<h2 id="-">统计每年入职的员工个数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
declare
   cursor cemp <span class="keyword">is</span> <span class="keyword">select</span> to_char(hiredate, <span class="string">'YYYY'</span>) <span class="keyword">from</span> emp;
   phiredate varchar2(<span class="number">4</span>);
<span class="keyword">begin</span>
   open cursor;
   <span class="keyword">loop</span>
       fetch cemp <span class="keyword">into</span> phiredate;
       <span class="keyword">exit</span> when cemp%notfound;
       -- 判断入职年份
       <span class="keyword">if</span> phiredate = <span class="string">'1980'</span> <span class="keyword">then</span> count80:=count80+<span class="number">1</span>;
          elsif phiredate = <span class="string">'1981'</span> <span class="keyword">then</span> count81+<span class="number">1</span>;
       <span class="keyword">end</span> <span class="keyword">if</span>;
   <span class="keyword">end</span> <span class="keyword">loop</span>;
   close cursor;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-">涨工资</h2>
<p>涨工资, 没人涨10%, 但是总额不超过5万元,
计算涨工资的人数和涨工资后的工资总额, 并输出涨工资人数和工资总额</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>-- 有bug, 自己解决
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    cursor cemp <span class="keyword">is</span> <span class="keyword">select</span> empno, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;
    pempno emp.empno%type;
    psal emp.sal%type;
    countEmp number := <span class="number">0</span>;
    salTotal number;
begin
    -- 工资总额初识值
    <span class="keyword">select</span> sum(sal) <span class="keyword">into</span> salTotal <span class="keyword">from</span> emp;
    open cemp;
    <span class="keyword">loop</span>
        <span class="keyword">exit</span> <span class="keyword">when</span> salTotal &gt; <span class="number">50000</span>;
        fetch cemp <span class="keyword">into</span> pempno, psal;
        <span class="keyword">exit</span> <span class="keyword">when</span> cemp%notfound;
        update emp <span class="keyword">set</span> sal=sal*<span class="number">1.1</span> <span class="keyword">where</span> empno=pempno;
        countEmp := countEmp + <span class="number">1</span>;
        -- 涨后的工资总额
        salTotal := salTotal = psal*<span class="number">0.1</span>;
    <span class="keyword">end</span> <span class="keyword">loop</span>;
    close cemp;
    commit;
    dbms_ouput.put_line(<span class="comment">'人数:');</span>
<span class="keyword">end</span>;
</pre></td></tr></table></figure>

<h2 id="-">统计工资</h2>
<p>按部门分段(6000, 6000-3000, 3000)统计部门工资,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="keyword">declare</span>
    cursor cdept <span class="keyword">is</span> <span class="keyword">select</span> deptno <span class="keyword">from</span> dept;
    pdeptno dept.deptno%type;
    cursor cemp(dno number) <span class="keyword">is</span> <span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=dno;
    count1 number
    count2 number;
    count3 number;
    salTotal number;
begin
    open cdept;
    <span class="keyword">loop</span>
        fetch cdept <span class="keyword">into</span> pdeptno;
        <span class="keyword">exit</span> <span class="keyword">when</span> cdept%notfound;
        -- 初始化计数器
        count1:=<span class="number">0</span>; count2:=<span class="number">0</span>; count3:=<span class="number">0</span>;
        <span class="keyword">select</span> sum(sal) <span class="keyword">into</span> salTotal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=pdeptno;
        -- 得到部门中员工的薪水
        open cemp(cdept);
        <span class="keyword">loop</span>
            fetch cemp <span class="keyword">into</span> psal;
            <span class="keyword">exit</span> <span class="keyword">when</span> cemp%notfound;
            <span class="keyword">if</span> psal &lt; <span class="number">3000</span> <span class="keyword">then</span> count1 := count1 + <span class="number">1</span>;
              elsif psal &gt; <span class="number">6000</span> <span class="keyword">then</span> count3 := count3 + <span class="number">1</span>;
              <span class="keyword">else</span> count2 :- count2 + <span class="number">1</span>;
            <span class="keyword">end</span> <span class="keyword">if</span>;
        <span class="keyword">end</span> <span class="keyword">loop</span>;
        close cemp;
        insert <span class="keyword">into</span> msg values(pdeptno, count1, count2, count3, nvl(salTotal));
    <span class="keyword">end</span> <span class="keyword">loop</span>;
    close cdept;
    commit;
    dbms_outpu.put_line(<span class="string">""</span>);
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h1 id="-">存储过程</h1>
<p>存储在数据库中供所有用户程序调用的子程序叫存储过程(无返回), 存储函数(有返回).</p>
<p>调用存储过程</p>
<ol>
<li><code>exec sayHelloWorld();</code></li>
<li><code>begin sayHelloWorld() end; /</code></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="title">sayHelloWorld</span>
<span class="title">as</span>
  -- 说明部分
<span class="title">begin</span>
    <span class="title">dbms_output</span>.<span class="title">put_line</span><span class="params">(<span class="string">'hello world'</span>)</span>;</span>
<span class="keyword">end</span>;

-- 带参数的存储过程
-- 如果存储过程带了参数, 需要指明是输入参数还是输出
<span class="keyword">create</span> <span class="keyword">or</span> repalce <span class="function"><span class="keyword">procedure</span> <span class="title">raiseSalary</span><span class="params">(eno <span class="keyword">in</span> number)</span>
<span class="title">as</span>
    -- 定义变量保存涨前的薪水
    <span class="title">psall</span> <span class="title">emp</span>.<span class="title">sal</span>%<span class="title">type</span>;</span>
<span class="keyword">begin</span>
    <span class="keyword">select</span> sal <span class="keyword">into</span> psal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=eno;
    -- 涨<span class="number">100</span>
    update emp <span class="keyword">set</span> sal=sal+<span class="number">100</span> <span class="keyword">where</span> empno=eno;
    -- 要不要commit??
    -- 不需要, 一般不在存储过程中提交; 要在调用者中提交
    dbms_output.put_line(<span class="string">'涨前'</span>||psal<span class="string">' 涨后:'</span>(psal+<span class="number">100</span>));
<span class="keyword">end</span>;

<span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="params">(pno <span class="keyword">in</span> number, addsal <span class="keyword">in</span> number)</span>
<span class="title">as</span>
    <span class="title">psal</span> <span class="title">emp</span>.<span class="title">sal</span>%<span class="title">type</span>
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">sal</span> <span class="title">into</span> <span class="title">psal</span> <span class="title">from</span> <span class="title">emp</span> <span class="title">where</span> <span class="title">empno</span>=<span class="title">pno</span>;</span>
    update emp <span class="keyword">set</span> sal=sal+sddsal <span class="keyword">where</span> empno=pno;
    dbms_output.put_line(<span class="string">'涨前:1'</span>||psal||<span class="string">' 涨后:'</span>||psal+addsal)
<span class="keyword">end</span>;

-- sum(a, b);可以这样调用
-- sum(a=&gt;<span class="number">2</span>, b=&gt;<span class="number">3</span>);

-- 运行调试 TODO
-- grant debug connect session, debug
</pre></td></tr></table></figure>

<h1 id="-">存储函数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 查询某个员工的年收入</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> function queryEmpIncome(eno <span class="keyword">in</span> <span class="keyword">number</span>)
    return <span class="keyword">number</span>
<span class="keyword">as</span>
    -- 月薪和奖金
    psal emp.sal%type;</span>
    pcomm emp.comm%type;
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">select</span> sal, comm <span class="keyword">into</span> psal, pcomm form emp <span class="keyword">where</span> empno=eno;</span>
    <span class="comment">-- 返回年收入</span>
    return psal*12+nvl(pcomm, 0);
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h1 id="in-out">in和out</h1>
<p>存储过程和存储函数可以通过out指定一个或者多个输出参数</p>
<p>如果只有一个返回值, 用存储函数；否则用存储过程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>-- 查询某个员工的姓名 月薪 和 职位
<span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpInfo</span><span class="params">(eno <span class="keyword">in</span> number,
                                         pename <span class="keyword">out</span> varchar2,
                                         psal <span class="keyword">out</span> number,
                                         pjob <span class="keyword">out</span> varchar2)</span>
<span class="title">as</span>
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">ename</span>, <span class="title">sal</span>, <span class="title">empjob</span> <span class="title">into</span> <span class="title">pename</span>, <span class="title">psal</span>, <span class="title">pjob</span> <span class="title">frmo</span> <span class="title">emp</span> <span class="title">whre</span> <span class="title">empno</span>=<span class="title">eno</span>;</span>
<span class="keyword">end</span>;

-- 思考
-- <span class="number">1</span>. 查询某个员工的所有信息(<span class="keyword">out</span>参数太多)
-- <span class="number">2</span>. 查询某个部门中所有员工的所有信息
-- 可以使用集合
</pre></td></tr></table></figure>

<h1 id="jdbc">JDBC</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> JDBCUtils {
    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="string">"oracle.jdbc.OracleDriver"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"soctt"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"tiger"</span>;
    <span class="keyword">static</span> {
        Class.forName(driver);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>(){
        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span>(Connection conn, Statement st, ResultSet rs) {
        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>) {
            <span class="keyword">try</span>{
                st.close(); 
            } <span class="keyword">catch</span>(SQLException e) {
            } finnally {
                rs = <span class="keyword">null</span>;
            }
        }
        <span class="comment">// TODO jta</span>
    }
}

<span class="keyword">public</span> <span class="keyword">class</span> TestOracle {
    <span class="comment">// 调用存储过程</span>
    @Test <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcedure</span>(){
        String sql = <span class="string">"{call queryEmpInfo(?,?,?,?)}"</span>;
        Connection conn = <span class="keyword">null</span>;
        CallableStatement call = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            conn = JDBCUtils.getConnection();
            call = conn.prepareCall(sql);
            <span class="comment">// 对于in参数, 赋值</span>
            call.setInt(<span class="number">1</span>, <span class="number">7839</span>);
            
            <span class="comment">// 对于out参数, 申明</span>
            <span class="comment">// 申明类型输出参数类型</span>
            call.registerOutParameter(<span class="number">2</span>, OracleTypes.VARCAR);
            call.registerOutParameter(<span class="number">3</span>, OracleTypes.NUMBER);
            call.registerOutParameter(<span class="number">4</span>, OracleTypes.VARCHAR);
            call.execute();
            <span class="comment">// 取出结果</span>
            String name = call.getString(<span class="number">2</span>);
            <span class="keyword">double</span> sal = call.getDouble(<span class="number">3</span>);
            String job = call.getString(<span class="number">4</span>);
            println(name + <span class="string">"\t"</span> + sal + <span class="string">"\t"</span> + job);
        } <span class="keyword">catch</span> (Exception e) {
        }
    }
    @Test <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span>(){
        String sql = <span class="string">"{?=call queryEmpIncom(?)}"</span>;
        Connection conn = <span class="keyword">null</span>;
        CallableStatement call = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            conn = JDBCUtils.getConnection();
            call = conn.prepareCall(sql);
            call.registerOutParameter(<span class="number">1</span>, OracleTypes.NUMBER);
            <span class="comment">// 对于in参数, 赋值</span>
            call.setInt(<span class="number">2</span>, <span class="number">7839</span>);
            call.execute();
            <span class="comment">// 取出结果</span>
            <span class="keyword">double</span> sal = call.getDouble(<span class="number">1</span>);
        } <span class="keyword">catch</span> (Exception e) {
        }
    }
}
</pre></td></tr></table></figure>

<h1 id="-out-cursor-">在 out 中 使用游标(cursor)</h1>
<p>申明包结构</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">create</span> <span class="keyword">or</span> replace
package MYPACKAGE <span class="keyword">as</span>
    <span class="keyword">type</span> empcursor <span class="keyword">is</span> ref cursor;
    <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpList</span><span class="params">(dno <span class="keyword">in</span> number, empList <span class="keyword">out</span> empcursor)</span>;</span>
    <span class="comment">// 可以定义多个存储函数</span>
<span class="keyword">end</span> MYPACKAGE;

<span class="keyword">create</span> <span class="keyword">or</span> replace
package body MYPACKAGE <span class="keyword">as</span>
    <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpList</span><span class="params">(dno <span class="keyword">in</span> number, empList <span class="keyword">out</span> empcursor)</span> <span class="title">as</span>
    <span class="title">begin</span>
        <span class="title">open</span> <span class="title">empList</span> <span class="title">for</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">emp</span> <span class="title">where</span> <span class="title">deptno</span>=<span class="title">dno</span>;</span>
    <span class="keyword">end</span> queryEmpList;
<span class="keyword">end</span> MYPACKAGE;


<span class="keyword">desc</span> mypackage;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>@Test public void testCursor(){
    String sql = <span class="string">"{call MYPACKAGE.queryEmpList(?, ?)}"</span><span class="comment">;</span>
    Connection conn = null<span class="comment">;</span>
    ResultSet sr = null<span class="comment">;</span>
    CallableStatement <span class="keyword">call</span> = null<span class="comment">;</span>
    try {
        conn = JDBCUtils<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
        <span class="keyword">call</span> = conn<span class="preprocessor">.prepareCall</span>(sql)<span class="comment">;</span>
        
        // 对于<span class="keyword">in</span>参数, 赋值
        <span class="keyword">call</span><span class="preprocessor">.setInt</span>(<span class="number">1</span>, <span class="number">7839</span>)<span class="comment">;</span>
        <span class="keyword">call</span><span class="preprocessor">.registerOutParameter</span>(<span class="number">2</span>, OracleTypes<span class="preprocessor">.CURSOR</span>)<span class="comment">;</span>
        <span class="keyword">call</span><span class="preprocessor">.execute</span>()<span class="comment">;</span>
        // 取出结果
        rs = ((OracleCallableStatement) <span class="keyword">call</span>)<span class="preprocessor">.getCursor</span>(<span class="number">2</span>)<span class="comment">;</span>
        while(rs<span class="preprocessor">.next</span>()) {
            String name = rs<span class="preprocessor">.getString</span>(<span class="string">"ename"</span>)<span class="comment">;</span>
            double sal = rs<span class="preprocessor">.getDouble</span>(<span class="string">"sal"</span>)<span class="comment">;</span>
            String job = rs<span class="preprocessor">.getString</span>(<span class="string">"empjob"</span>)<span class="comment">;</span>
        }
    } catch (Exception e) {
        -- 关闭结果集, 会关闭光标
    }
    
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="oracle" scheme="http://zhpooer.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day53-oracle 2]]></title>
    <link href="http://zhpooer.github.io/2014/07/08/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day53-oracle-2/"/>
    <id>http://zhpooer.github.io/2014/07/08/传智播客day53-oracle-2/</id>
    <published>2014-07-08T11:06:52.000Z</published>
    <updated>2014-07-10T09:05:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">子查询</h1>
<p>解决不能一步求解的问题</p>
<p>注意问题</p>
<ol>
<li>括号</li>
<li>合理的书写风格</li>
<li>可以在主查询的 where select from having 后面放子查询</li>
<li>不可以在主查询的 group by后面放置子查询</li>
<li>强调from后面的子查询</li>
<li>主查询和子查询可以不是同一张表, 只要子查询返回结果</li>
<li>一般不在子查询中使用 order by, 但在 Top-N 分析问题中使用排序</li>
<li>一般先执行子查询, 在执行主查询；但相关子查询除外</li>
<li>单行子查询只能使用单行操作符, 多行子查询只能使用多行操作符</li>
<li>子查询中的null</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'scott'</span>);</span>

<span class="comment">-- 单行子查询, 只返回一条记录</span>
<span class="operator"><span class="keyword">select</span> ename, sal, (<span class="keyword">select</span> job <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7389</span>) <span class="keyword">from</span> emp;</span>

<span class="comment">-- 强调 from 后面的子查询</span>
<span class="comment">-- 查询员工的姓名和薪水</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp);</span>
<span class="comment">-- 查询员工的姓名和薪水,年薪</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> ename, sal, sal*<span class="number">12</span> annlsal <span class="keyword">from</span> emp);</span>

<span class="comment">-- 6. 主查询和子查询可以不是同一张表, 只要子查询返回结果</span>
<span class="comment">-- 查询部门名称为sales的员工信息</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno =
    (<span class="keyword">select</span> depton <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'sales'</span>);</span>
<span class="comment">-- 也可以使用多表查询</span>
<span class="comment">-- 优化5: 理论上, 尽量使用多表查询</span>

<span class="comment">-- 9. 单行子查询只能使用单行操作符, 多行子查询只能使用多行操作符</span>
<span class="comment">-- 单行操作符: &gt; = &lt;</span>
<span class="operator"><span class="keyword">select</span> department_id, <span class="aggregate">min</span>(salary)
<span class="keyword">from</span> employees
<span class="keyword">group</span> <span class="keyword">by</span> department_id
<span class="keyword">having</span> <span class="aggregate">min</span>(salary) &gt;
    (<span class="keyword">select</span> <span class="aggregate">min</span>(salary) <span class="keyword">from</span> employees <span class="keyword">where</span> department_id=<span class="number">50</span>);</span>

<span class="comment">-- 多行比较操作: in 在集合中</span>
<span class="comment">-- 查询部门名称是 sales 和 accounting 的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span>
    (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'sales'</span> <span class="keyword">or</span> dname=<span class="string">'accounting'</span>);</span>
    
<span class="comment">-- any: 在集合中的任意一个值比较</span>
<span class="comment">-- 查询工资比30号部门任意一个员工高的部门( &gt; ( min() ))</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="keyword">any</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>);</span>

<span class="comment">-- all: 和集合的所有值比较</span>
<span class="comment">-- 查询工资比30号部门所有工资高的员工信息( &gt; ( max() ))</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="keyword">all</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>);</span>


<span class="comment">-- 10. 子查询中的null</span>
<span class="comment">-- 多行中的null</span>

<span class="comment">-- 是老板的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">in</span> (<span class="keyword">select</span> mgr <span class="keyword">from</span> emp);</span>
<span class="comment">-- 不是老板的员工, not in (10, 20, null)</span>
<span class="comment">-- not in 意思是 不等于 所有, a!=null 永远为假</span>
<span class="comment">-- in 操作符 等同于 any</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span>
</pre></td></tr></table></figure>

<h1 id="-">集合运算</h1>
<p>操作两个或者多个集合</p>
<ul>
<li>并集: UNION/UNION ALL(相同的部分出现两次)</li>
<li>交集: INTERSECT</li>
<li>差集: MINUS</li>
</ul>
<p>注意问题</p>
<ol>
<li>参与运算的各个集合必须列数相同且类型一致</li>
<li>采用第一个集合的表头作为最后的表头</li>
<li>如果排序, 必须在每个排序后使用相同的 order by</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>
<span class="keyword">union</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span>;</span>

<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> rollup(deptno, job);</span>
<span class="comment">-- 等同于</span>
<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job
<span class="keyword">union</span>
<span class="keyword">select</span> deptno, to_char(<span class="keyword">null</span>), <span class="aggregate">sum</span>(sal) <span class="keyword">group</span> <span class="keyword">by</span> deptno
<span class="keyword">union</span>
<span class="keyword">select</span> to_number(<span class="keyword">null</span>), to_char(<span class="keyword">null</span>), <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> deptno;</span>

break on deptno skip 2;

<span class="comment">-- 优化6, 尽量不要使用集合运算 </span>

<span class="comment">-- 打开记录语句执行时间</span>
<span class="operator"><span class="keyword">set</span> timing <span class="keyword">on</span></span>
</pre></td></tr></table></figure>

<h1 id="-">课堂练习</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="comment">-- rownum 行号, 伪列</span>
<span class="comment">-- 1. 按照默认的顺序生成, 从小到达</span>
<span class="comment">-- 2. rownum 只能使用 &lt;=, &lt;, 不能使用 &gt;, &gt;=, 行号永远从1开始(像是 iterator )</span>
<span class="comment">-- 下面这条语句是错误的!!!!, 行号在 order by 后会乱序</span>
<span class="operator"><span class="keyword">select</span> rownum, empno, ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> rownum&lt;=<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span>

<span class="comment">-- 一: 找到员工表中工资最高的前三名, 分页显示可以这样用, 可以把里层的 rownum 取别名</span>
<span class="operator"><span class="keyword">select</span> rownum, empno, ename, sal
     (<span class="keyword">select</span> empno, ename, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) <span class="keyword">where</span> rownum&lt;=<span class="number">3</span> ;</span>

<span class="comment">-- 二: 找到员工表中薪水大于本部门的薪水员工</span>
<span class="operator"><span class="keyword">select</span> e.empno, e.ename, e.sal, d.avgsal
<span class="keyword">from</span> emp e, (<span class="keyword">select</span> deptno, <span class="aggregate">avg</span>(sal) avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) d
<span class="keyword">where</span> e.deptno=d.deptno <span class="keyword">and</span> s.sal&gt;d.avgsal;</span>

<span class="comment">-- 相关子查询, 将主查询中的某个值, 作为参数传递给子查询</span>
<span class="operator"><span class="keyword">select</span> empno, ename, sal, (<span class="keyword">select</span> <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=e.deptno) avgsal
<span class="keyword">from</span> emp e
<span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=e.deptno);</span>

<span class="comment">-- 三, 统计每年入职的员工个数(不使用子查询)</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) Total, <span class="aggregate">sum</span>(decode(to_char(hiredate, <span class="string">'RR'</span>), <span class="string">'81'</span>),<span class="number">1</span>,<span class="number">0</span>),
<span class="aggregate">sum</span>(decode(to_char(hiredate, <span class="string">'RR'</span>), <span class="string">'82'</span>),<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">from</span> emp;</span>

<span class="comment">-- 四. 相关子查询</span>


<span class="comment">-- 五 1 =&gt; 1,2,3,4; 1 =&gt;张三, 2=&gt; 李四..; 1 =&gt; 张三, 李四</span>
<span class="comment">-- 组函数 wm_concat</span>
<span class="comment">-- select deptno, wm_concat(ename) names from emp group by deptno;</span>
<span class="operator"><span class="keyword">set</span> linesize <span class="number">200</span>;</span>

<span class="operator"><span class="keyword">select</span> ci_id, wm_concat(stu_name) <span class="keyword">names</span>
<span class="keyword">from</span> (
    <span class="keyword">select</span> ci_id, stu_name
    <span class="keyword">from</span> pm_stu s, pm_ci c
    <span class="keyword">where</span> instr(c.stu_ids, s.stu_id) &gt; <span class="number">0</span>
) <span class="keyword">group</span> <span class="keyword">by</span> ci_id;</span>
</pre></td></tr></table></figure>

<h1 id="-">处理数据</h1>
<p>SQL 的类型</p>
<ol>
<li>DML(数据操作语句) : insert update delete select</li>
<li>DDL(数据定义语句) : create alter drop truncate </li>
<li>DCL(数据控制语言) : grant revoke</li>
</ol>
<h2 id="insert">insert</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, sal, dptno) <span class="keyword">values</span> (<span class="number">100</span>, <span class="string">'finance'</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span>

<span class="comment">-- 地址符 &, PreparedStatement</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, sal, deptno) <span class="keyword">values</span> (&empno, &ename, &sal, &deptno);</span>

<span class="operator"><span class="keyword">select</span> empno, ename, &t <span class="keyword">from</span> emp;</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> &t;</span>

<span class="comment">-- 批处理</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> emp10 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span>
<span class="comment">-- 一次性将emp中所有10号部门的员工插入到emp10</span>
<span class="comment">-- 将insert中加入子查询</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp10
  <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>;</span>

<span class="comment">-- 如果插入海量数据, 如何</span>
<span class="comment">-- 1. 数据bang (data dump)</span>
<span class="comment">-- 2. SQL*LOADER</span>
<span class="comment">-- 3. 外部表(External table)</span>
</pre></td></tr></table></figure>

<h2 id="update">update</h2>
<h2 id="delete-truncate">delete &amp; truncate</h2>
<p>delete和truncate区别</p>
<ol>
<li>delete 逐条删除; truncate先摧毁表, 再重建</li>
<li>delete是DML(可以回滚), truncate是DDL(不可以回滚)</li>
<li>delete不会释放空间, truncate 会</li>
<li>delete会产生碎片, truncate不会; 碎片会影响查询数据<pre><code> 去掉碎片
 1. alter table &lt;表名&gt; move; -- 如果数据庞大, 会消耗大量时间
 2. 数据导入和导出
</code></pre></li>
<li>delete可以闪回(被提交了,反悔), truncate不可以</li>
</ol>
<p>Oracle 中 delete 比 truncate 快</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 导入外部数据</span>
<span class="operator"><span class="keyword">set</span> feedback off;</span> <span class="comment">-- 关闭回显</span>
@d:\test.sql      <span class="comment">-- 导入</span>
<span class="comment">-- 开启运行时间回显</span>
<span class="operator"><span class="keyword">set</span> timing <span class="keyword">on</span>;</span>
</pre></td></tr></table></figure>

<h1 id="oracle-">Oracle 中的事务</h1>
<ol>
<li>起始标志: 该事务中的第一条DML语句</li>
<li>结束标志<pre><code> 提交: 
   1. 显式, commit
   2. 隐式, 正常退出exit或DDL, DCL
 回滚:
   1. 显式, rollback
   2. 隐式, 非正常退出
</code></pre></li>
</ol>
<h2 id="-">控制事务</h2>
<p>保存点(savepoint)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> testsavepoint
(tid <span class="keyword">number</span>
tname varchar2(<span class="number">20</span>));</span>
<span class="operator"><span class="keyword">set</span> feedback <span class="keyword">on</span>;</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testsavepoint <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'tom'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testsavepoint <span class="keyword">values</span>(<span class="number">2</span>, mary<span class="string">');
-- 定义保存点
savepoint a;
-- some operator
rollback to savepoint a;</span></span>
</pre></td></tr></table></figure>

<h2 id="-">数据的隔离级别</h2>
<p>Oracle 只支持四个隔离级别中的两个</p>
<ol>
<li>READ COMMITED, 读已经提交事务</li>
<li>SERIALIZABLE, 串行化</li>
</ol>
<p>额外提供级别: <code>READONLY</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">-- 设置只读</span>
<span class="operator"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span>
</pre></td></tr></table></figure>

<h1 id="ddl-">DDL 语句</h1>
<p>管理数据库的对象</p>
<p>必须条件:</p>
<ol>
<li><code>create table</code> 权限</li>
<li>存储空间</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test1(
    tid <span class="keyword">number</span>,
    tname varchar2(<span class="number">20</span>),
    hiredate <span class="keyword">date</span> <span class="keyword">default</span> sysdate
);</span>

<span class="comment">-- rowid 行地址, 伪列, 相当于指针(指向数据)</span>
<span class="operator"><span class="keyword">select</span> rowid, empno, ename <span class="keyword">from</span> emp;</span>

<span class="comment">-- 用子查询创建表</span>
<span class="comment">-- 用一个永远为假的条件创建一个新的空表</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> emp10
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span>

<span class="comment">-- 修改表</span>
<span class="comment">-- 追加新列</span>
<span class="operator"><span class="keyword">alter</span> talbe test1 <span class="keyword">add</span> photo blob;</span>
<span class="comment">-- 修改列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 modify tname varchar2(<span class="number">40</span>);</span>
<span class="comment">-- 删除列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">drop</span> <span class="keyword">column</span> tname;</span>
<span class="comment">-- 重命名列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 rename <span class="keyword">column</span> tname <span class="keyword">to</span> username;</span>

<span class="comment">-- 重命名表</span>
<span class="operator">rename test1 <span class="keyword">to</span> test2;</span>

<span class="comment">-- 删除表</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> tab;</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">table</span> test2;</span>  <span class="comment">-- 并不是真的删除, 只是放到回收站</span>

<span class="comment">-- oracle的回收站</span>
<span class="comment">-- 查看</span>
<span class="operator"><span class="keyword">show</span> recyclebin;</span>
<span class="comment">-- 清空</span>
purge recyclebin;

<span class="comment">-- 不是每个用户都由回收站, 管理员没有回收站</span>

<span class="comment">-- 以管理员方式登陆</span>
<span class="comment">-- 以密码认证登陆</span>
sqlpus sys/password as sysdba;
<span class="comment">-- 主机认证登陆</span>
sqlplus / as sysdba
</pre></td></tr></table></figure>

<h2 id="-">约束</h2>
<p>类型</p>
<ul>
<li><p>CHECK, 检查性约束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test3 (
tid <span class="keyword">number</span>,
tname varchar2(<span class="number">20</span>),
-- 给约束起名字
gender varchar2(<span class="number">2</span>)
    <span class="keyword">constraint</span> emp_gender 
    <span class="keyword">check</span> (gender <span class="keyword">in</span>(<span class="string">'男'</span>, 女)),
salary <span class="keyword">number</span> <span class="keyword">check</span> (salary &gt; <span class="number">0</span>) 
);</span>
</pre></td></tr></table></figure>
</li>
<li><p>NOT NULL,</p>
</li>
<li>UNIQUE,</li>
<li>PRIMARY KEY,</li>
<li>FOREIGN KEY, 主表的外键必须是附表的主键<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>on <span class="operator"><span class="keyword">delete</span> <span class="keyword">cascade</span>;</span> 删除父表时, 级联删除子表记录
on <span class="operator"><span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span> 删除父表时, 相关外键记录设子为 null
</pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> student(
    sid <span class="keyword">number</span> <span class="keyword">constraint</span> student_PK <span class="keyword">primary</span> <span class="keyword">key</span>,
    sname varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> studnet_namenotnull <span class="keyword">not</span> <span class="keyword">null</span>,
    gender varcher2(<span class="number">2</span>) <span class="keyword">constraint</span> student_gender_check (gender <span class="keyword">in</span>(<span class="string">'男'</span>, <span class="string">'女'</span>)),
    email varchar2(<span class="number">40</span>) <span class="keyword">constraint</span> student_email_unique <span class="keyword">unique</span>
                       <span class="keyword">constraint</span> student_email_notnull <span class="keyword">not</span> <span class="keyword">null</span>,
    deptno <span class="keyword">number</span> <span class="keyword">constraint</span> student_FK refereces dept(deptno) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span>
);
<span class="comment">-- 可以把约束和表的创建分开</span>
</pre></td></tr></table></figure>

<h2 id="-view-">视图(view)</h2>
<p>从表中抽出的逻辑上相关的数据集合,
视图是基于表创建, 理解为存储起来的 select 语句,
<em>为了简化复杂查询</em>, 但是不能提高性能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="comment">-- 需要 create view 权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 创建视图</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">view</span> empinfo
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp

<span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span>  empinfo
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp
<span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">view</span> view10
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>
<span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span>
<span class="comment">-- with check option 会使下面语句不成功</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> view10 <span class="keyword">values</span>(****, <span class="number">20</span>);</span>

<span class="comment">-- 不建议通过视图对表进行修改</span>
<span class="comment">-- 通过视图修改数据有限制!!!!</span>

<span class="comment">-- 删除视图, 只是删除视图的定义, 不会删除表的数据</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">view</span> viewname;</span>
</pre></td></tr></table></figure>

<h2 id="-sequence-">序列(sequence)</h2>
<p>可供多个用户用来产生唯一数值的数据库对象
(内存中的数组,默认长度20), 可以提高访问效率</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> sequence myseq
increment <span class="keyword">by</span> <span class="number">2</span>
<span class="keyword">start</span> <span class="keyword">with</span> <span class="number">2</span>
maxvalue <span class="number">10000</span>
minvalue <span class="number">1</span>
[cycle|nocycle]
[cache <span class="number">20</span> | nocache];</span>

<span class="operator"><span class="keyword">create</span> sequence myseql increment <span class="keyword">by</span> <span class="number">5</span> nochace;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> testseq(
    tid <span class="keyword">number</span>,
    tname varchar2(<span class="number">20</span>)
);</span>
<span class="comment">-- nextval 必须在 currval 之前</span>
<span class="operator"><span class="keyword">select</span> myseql.nextval <span class="keyword">from</span> dual;</span>
<span class="operator"><span class="keyword">select</span> myseql.currval <span class="keyword">from</span> dual;</span>

<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testseq <span class="keyword">values</span>(myseq.nextval, <span class="string">'aa'</span>);</span>

<span class="comment">-- 修改序列</span>
<span class="comment">-- alter sequence ....;</span>
</pre></td></tr></table></figure>

<p>序列在某些情况下会出现裂缝</p>
<ul>
<li>回滚</li>
<li>系统异常</li>
<li>多个表同时使用同一序列</li>
</ul>
<h2 id="-index-">索引(index)</h2>
<p>通过指针加速查询</p>
<p>Oracle中的索引</p>
<ol>
<li>B树索引, 默认</li>
<li>位图索引</li>
</ol>
<p>什么时候建立索引</p>
<ol>
<li>列中数据值分布范围很广</li>
<li>列经常在where子句或连接条件中出现</li>
<li>表经常被访问且数据量很大</li>
</ol>
<p>不适合建立索引</p>
<ol>
<li>经常更新</li>
<li>表非常小</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 基于部门号创建索引表, 存储 rowid</span>
<span class="operator"><span class="keyword">create</span> index myindex <span class="keyword">on</span> emp(deptno);</span>

<span class="comment">-- 删除</span>
<span class="operator"><span class="keyword">drop</span> index myindex;</span>
</pre></td></tr></table></figure>

<h2 id="-">同义词, 别名</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> hr.employees;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> hr.employees <span class="keyword">to</span> scott;</span>

<span class="comment">-- 为 hr.employees 取别名</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> synonym <span class="keyword">to</span> scott;</span>
<span class="operator"><span class="keyword">create</span> synonym hremp <span class="keyword">for</span> hr.employees;</span>
<span class="comment">-- 共有同义词</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">public</span> synonym hremp <span class="keyword">for</span> hr.employees;</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> hremp;</span>
</pre></td></tr></table></figure>

<h1 id="-">触发器</h1>
<p>数据库触发器是一个表相关的, 存储的 PL/SQL程序,
每当一个特定你的数据操作语句(Insert, update, delete)在指定的表上发出时,
Oracle 在动地执行触发器中定义的语句序列</p>
<p>触发器可用于:</p>
<ul>
<li>数据确认</li>
<li>实施复杂的安全性检查</li>
<li>做审计(日志), 跟踪表上所作的数据操作等</li>
<li>数据的备份和同步</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 每当插入语句之后, 打印一条语句</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> sayNewEmp
<span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> emp
<span class="keyword">declare</span>
<span class="keyword">begin</span>
    dbms_output.put_line(<span class="string">'成功插入语句'</span>);</span>
<span class="operator"><span class="keyword">end</span>;</span>

<span class="operator"><span class="keyword">create</span> [<span class="keyword">or</span> <span class="keyword">replace</span>] <span class="keyword">trigger</span>
{<span class="keyword">before</span> | <span class="keyword">after</span>}
{<span class="keyword">delete</span> | <span class="keyword">insert</span> | <span class="keyword">update</span> [<span class="keyword">of</span> 列名]}
<span class="keyword">on</span> 表名
[<span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> [<span class="keyword">when</span> 条件]] -- 开始行级触发器
<span class="keyword">end</span></span>
</pre></td></tr></table></figure>

<p>触发器的类型</p>
<ul>
<li>语句级触发器, 针对的是表</li>
<li>行级触发器, 针对的是行, 提供伪列 :new :old</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">-- 语句级触发一次</span>
<span class="comment">-- 行级触发器触发n次</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp10 <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> emp=<span class="number">10</span>;</span>
</pre></td></tr></table></figure>

<h2 id="-">触发器应用</h2>
<p>实施复杂安全性检查:
禁止在非工作时间插入新员工</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 周末: to_char(sysdate, 'day') in ('星期六', '星期日')</span>
<span class="comment">-- 上班前,  to_number(to_char(sysdate, 'hh24')) not between 9 and 18;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> securityemp
<span class="keyword">before</span> <span class="keyword">insert</span>
<span class="keyword">on</span> emp
<span class="keyword">begin</span>
    <span class="keyword">if</span> to_char(sysdate, <span class="string">'day'</span>) <span class="keyword">in</span> (<span class="string">'星期六'</span>, <span class="string">'星期日'</span>) <span class="keyword">or</span>
       to_number(to_char(sysdate, <span class="string">'hh24'</span>)) <span class="keyword">not</span> between <span class="number">9</span> <span class="keyword">and</span> <span class="number">18</span> <span class="keyword">then</span>
       -- 错误代码必须在 <span class="number">20000</span> - <span class="number">50000</span>
       raize_application_error(-<span class="number">20001</span>, <span class="string">'不能在非工作时间插入新员工'</span>)
    <span class="keyword">end</span> <span class="keyword">if</span>;</span>
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<p>数据确认: 涨后的工资不能少于涨前的工资</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> checksal
<span class="keyword">before</span> <span class="keyword">update</span>
<span class="keyword">on</span> emp
<span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> 
<span class="keyword">begin</span>
    <span class="keyword">if</span> :new.sal &lt; :old.sal <span class="keyword">then</span>
        raise_application_error(-<span class="number">20002</span>, <span class="string">' 涨后的工资不能少于涨前的工资'</span>);</span>
    <span class="operator"><span class="keyword">end</span> <span class="keyword">if</span>;</span>
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h1 id="-">数据字典</h1>
<p>需要知道自己的权限, 自己的信息, 数据库本身的信息, 这些信息被放在 数据字典</p>
<ul>
<li>基本表: 描述数据库信息</li>
<li>用户表: 用户自定义信息</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> dictionary;</span> <span class="comment">-- 描述基本表的信息</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> user_tables;</span>
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数据字典的命名规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>用户自己的</td>
</tr>
<tr>
<td>ALL</td>
<td>用户可以访问到的</td>
</tr>
<tr>
<td>DBA</td>
<td>管理员视图</td>
</tr>
<tr>
<td>V$</td>
<td>性能相关数据</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">-- 加注释</span>
comment on table emp is '这是员工信息表'
<span class="comment">-- 查看注释</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> user_tab_comments <span class="keyword">where</span> table_name=<span class="string">'EMP'</span>;</span>
</pre></td></tr></table></figure>

<!-- 老师号码: 13488899975 -->
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
</feed>
