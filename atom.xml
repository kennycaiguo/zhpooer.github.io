<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[Hello World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-04-11T14:17:35.383Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[java泛型]]></title>
    <link href="http://yoursite.com/2014/04/11/java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://yoursite.com/2014/04/11/java泛型/</id>
    <published>2014-04-11T12:28:59.000Z</published>
    <updated>2014-04-11T13:14:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">泛型入门</h1>
<p>Jdk1.5 出现安全机制.</p>
<p>好处:</p>
<ol>
<li>将运行时期的问题 ClasscastException 到了编译时期</li>
<li>避免了强制类型转换的麻烦</li>
</ol>
<p>什么时候用&lt;&gt;, 当操作的引用数据类型不确定的时候.就使用&lt;&gt;.
他表示一个用于接受具体引用数据类型的参数范围.</p>
<p>泛型即使是给编译器使用的技术, 用于编译时期, 确保了编译的安全.
运行时, 会将泛型去掉, 生成的class是不带泛型的, 称为泛型的擦除.</p>
<p>泛型的补偿: 运行时, 通过获取元素的类型进行转换动作,
不用进行强制转换.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/** 泛型定义在类上 **/</span>
<span class="class"><span class="keyword">class</span> <span class="title">Tool</span>&lt;<span class="title">e1</span>, <span class="title">e2</span>&gt; {</span>
   <span class="comment">/** 泛型定义在方法上 **/</span>
   <span class="keyword">public</span> &lt;W&gt; <span class="keyword">void</span> show(W <span class="keyword">str</span>) {}

   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> method(T t) {}
}

<span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;{</span>
}

<span class="comment">/**泛型接口**/</span>
<span class="class"><span class="keyword">interface</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt;{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> show(T t)
}

<span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span>&lt;<span class="title">T</span>&gt; <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; {</span>}
</pre></td></tr></table></figure>

<h1 id="-">泛型的通配符号</h1>
<p>泛型的通配符: ?,代表未知类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;?&gt; al){}
</pre></td></tr></table></figure>

<h1 id="-">泛型的限定</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="javadoc">/**这里只能传Person类的对象**/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;Person&gt; al){}

<span class="javadoc">/**这里只可以传可以传Person类的子类对象  上限 **/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;? extends Person&gt; al){}

<span class="javadoc">/**这里只可以传可以传Person类的父类对象 下限 **/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;? <span class="keyword">super</span> Person&gt; al){}

class MyCollection&lt;E&gt;{
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span>(MyCollection&lt;? extends E&gt; e){}
}
<span class="javadoc">/** 当对集合中的元素进行取出操作时, 可以用下限 **/</span>
TreeSet(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="泛型" scheme="http://yoursite.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java集合框架]]></title>
    <link href="http://yoursite.com/2014/04/11/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2014/04/11/java集合框架/</id>
    <published>2014-04-11T08:38:52.000Z</published>
    <updated>2014-04-11T14:16:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">集合初识</h1>
<p>集合类的由来:</p>
<blockquote>
<p>对象用于封装特有的数据, 对象多了需要存储, 如果对象不确定.
存储就使用集合容器进行</p>
</blockquote>
<p>集合特点:</p>
<ol>
<li>用于存储对象的容器</li>
<li>集合长度是可变的</li>
<li>集合不可存储基本数据类型</li>
</ol>
<p>集合体系的共同父类 <code>java.util.Collection</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>boolean <span class="function">add(E e)</span>;
boolean <span class="function">contains(Object o)</span>;
void <span class="function">clear()</span>
boolean <span class="function">containsAll(Collection&lt;?&gt; c)</span>;
boolean <span class="function">remove(Object o)</span>;
boolean <span class="function">removeAll(Collection&lt;?&gt; c)</span>;
int <span class="function">size()</span>;
Iterator&lt;E&gt; <span class="function">iterator()</span>; <span class="comment">// 迭代器</span>
boolean <span class="function">retainAll(Collection coll)</span>; <span class="comment">// 取交集</span>
<span class="tag">Object</span><span class="attr_selector">[]</span> <span class="function">toArray()</span>; <span class="comment">// 集合转数组</span>
</pre></td></tr></table></figure>

<h2 id="iterator">Iterator</h2>
<p>Iterator 对象必须依赖于具体容器, 因为每一个容器的数据结构都不同.
所以该迭代器对象在容器中进行内部实现的.
<strong>Iterator用法</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">for</span>(iterator <span class="keyword">it</span> = coll.iterator(); <span class="keyword">it</span>.hasNext();){
    <span class="keyword">it</span>.next();
}
</pre></td></tr></table></figure>

<h2 id="collection-">Collection 的继承结构图</h2>
<p><img src="/img/collections_hierachy.png" alt="Collection 的继承结构图"></p>
<h1 id="list-set">List 和 Set</h1>
<p>List 和 Set 都从 Collection 继承</p>
<p>List: 有序,元素有索引, 元素可以重复</p>
<p>Set: 元素不能重复, 无序</p>
<h2 id="java-util-list">java.util.List</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>void add(<span class="keyword">index</span>, element);
void add(<span class="keyword">index</span>, collection);

<span class="keyword">Object</span> remove(<span class="keyword">index</span>);
<span class="keyword">Object</span> <span class="keyword">set</span>(<span class="keyword">index</span>, element);

<span class="keyword">Object</span> get(<span class="keyword">index</span>);
int indexOf(<span class="keyword">object</span>);
int lastIndexOf(<span class="keyword">object</span>);
List subList(from, <span class="keyword">to</span>);
</pre></td></tr></table></figure>

<p>Iterator 接口在迭代过程中不能执行添加操作,
可以使用Iterator的子接口ListIterator进行操作.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ListIterator it = list<span class="preprocessor">.listIterator</span>()<span class="comment">;</span>
it<span class="preprocessor">.add</span>(<span class="string">"xx"</span>)<span class="comment">;</span>
it<span class="preprocessor">.previous</span>()<span class="comment">;</span>
it<span class="preprocessor">.hasPrevious</span>()<span class="comment">;//允许逆向便利</span>
</pre></td></tr></table></figure>

<h3 id="vector">Vector</h3>
<p>内部是是数组数据结构, 是线程安全的, 长度可变, 增删查询都慢</p>
<h3 id="arraylist">ArrayList</h3>
<p>内部是是数组数据结构, 是线程不同步的, 长度可变, 查询速度快</p>
<h3 id="linkedlist">LinkedList</h3>
<p>内部是链表, 是不同步的, 增删元素的速度快</p>
<h2 id="set">Set</h2>
<p>Set接口中的方法和 Collection 接口的方法一致</p>
<h3 id="hashset">HashSet</h3>
<p>内部数据结构是哈希表, 是不同步的</p>
<p>使用元素的hashCode方法来确定位置, 如果位置相同,
在通过元素的equals来确定是否相同.
所以在使用一个新类时要重写类的方法 <code>hashCode()</code> 和 <code>equals()</code></p>
<h4 id="linkedhashset">LinkedHashSet</h4>
<p>有序的HashSet</p>
<h3 id="treeset">TreeSet</h3>
<p>可以对Set集合中的元素进行排序(从小到大), 是不同步的.
存储在里面的元素必须实现 <code>java.lang.Comparable</code> 接口,
他根本不看哈希码, 他判断元素的唯一性, 是看比较结果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">import</span> java.util.Comparator;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span> {</span>
   <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Object obj1, Object obj2){
       <span class="keyword">return</span> <span class="number">0</span>;
   }
}

ThreeSet ts = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> ComparatorByName());
</pre></td></tr></table></figure>

<h1 id="map">Map</h1>
<p>Map: 一次添加一对元素. Collection 一次添加一个元素.
Map集合中存储的是键值对, <strong>必须保证键的唯一性</strong>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>void <span class="function">clear()</span>;

V <span class="function">put(K key, V value)</span>; <span class="comment">//返回前一个和key关联的值, 如果没为null</span>
V <span class="function">remove(K key)</span>; <span class="comment">// 删除键值对, 返回值</span>

boolean <span class="function">containsKey(key)</span>;
boolean <span class="function">containsValue(value)</span>;
boolean <span class="function">isEmpty()</span>;

value <span class="function">get(key)</span>; <span class="comment">// 如果没有则返回null</span>
int <span class="function">size()</span>;

Set <span class="function">keySet()</span>;
Set&lt;<span class="tag">Map</span><span class="class">.Entry</span>&gt; <span class="function">entrySet()</span>;
Collection&lt;V&gt; <span class="function">values()</span>;
</pre></td></tr></table></figure>

<h2 id="hashtable">Hashtable</h2>
<p>内部结构是哈希表, 是同步的, 不支持空键和空值.</p>
<blockquote>
<p>Properties: 用来存储键值对型的配置文件信息, 可以和IO技术结合</p>
</blockquote>
<h2 id="hashmap">HashMap</h2>
<p>内部结构是哈希表, 不是同步的. 允许空值和空键.</p>
<h2 id="treemap">TreeMap</h2>
<p>内部是二叉树, 不是同步的. 可以对Map中的键进行排序. </p>
<h2 id="linkedhashmap">LinkedHashMap</h2>
<p>有序的存储Map中的键</p>
<h1 id="-">集合框架工具</h1>
<h2 id="collections">Collections</h2>
<p>是集合框架的工具类, 里面的方法都是静态的.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>Collections<span class="built_in">.</span>sort(<span class="built_in">list</span>, comparator); <span class="comment">//对list集合进行指定顺序的排序</span>
Collections<span class="built_in">.</span>sort(<span class="built_in">list</span>); <span class="comment">//对list集合进行指定顺序的排序</span>
Collections<span class="built_in">.</span>swap(<span class="built_in">list</span>); <span class="comment">//对list位置进行交换</span>

Collections<span class="built_in">.</span>binarySearch(<span class="built_in">list</span>, comparator); <span class="comment">// 二分法查找, 必须先排序</span>
Collections<span class="built_in">.</span><span class="keyword">max</span>(<span class="built_in">set</span>);
Collections<span class="built_in">.</span><span class="keyword">min</span>(<span class="built_in">set</span>);

Collections<span class="built_in">.</span>reverseOrder(); <span class="comment">// 对排序进行逆转</span>
<span class="literal">new</span> TreeSet<span class="subst">&lt;</span>Sring<span class="subst">&gt;</span>(Collections<span class="built_in">.</span>reverseOrder());

Collections<span class="built_in">.</span>replaceAll(<span class="built_in">list</span>, old, <span class="literal">new</span>);
Collections<span class="built_in">.</span>reverse(<span class="built_in">list</span>);
Collections<span class="built_in">.</span>fill(<span class="built_in">list</span>, obj); <span class="comment">// 替换成所有同一个元素</span>

Collections<span class="built_in">.</span>shuffle(<span class="built_in">list</span>, obj); <span class="comment">// 乱序排序</span>

Collections<span class="built_in">.</span><span class="built_in">list</span>(enumeration); <span class="comment">// 转成Arraylist</span>

Collections<span class="built_in">.</span>synchronizedCollection(Collection<span class="subst">|</span><span class="built_in">Set</span><span class="subst">|</span><span class="built_in">Map</span>); <span class="comment">//返回一个同步的集合</span>
</pre></td></tr></table></figure>

<h2 id="arrays">Arrays</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>binarySearch();
copyOf();
copyOfRange();
fill();
equals(); <span class="comment">// 比较两个数组</span>
sort();
deepEquals();
toString(array);
<span class="javadoc">/** 如果数组中的元素是对象, 那么转成集合时, 直接将数组中的元素作为集合中的元素进行集合存储
** 如果数组中的元素是基本类型, 那么会将该数组作为集合中的元素进行存储
**/</span>
asList(array); <span class="comment">// 将一个数组转换成固定长度的List</span>
<span class="keyword">int</span> [] a = {<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>}
List&lt;<span class="keyword">int</span>[]&gt; x = Arrays.asList(a)
</pre></td></tr></table></figure>

<p>集合变数组</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 集合变成数组, 不能进行增删</span>
<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>()
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"1"</span>)
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"2"</span>)
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"3"</span>)

<span class="built_in">String</span><span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup"> arr = list.toArray(new String</span><span class="preprocessor">[</span><span class="number">4</span><span class="preprocessor">]</span><span class="markup">) // </span><span class="preprocessor">[</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="built_in">null</span><span class="preprocessor">]</span><span class="markup"></span>
</pre></td></tr></table></figure>

<h1 id="-">静态导入</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>import static java<span class="preprocessor">.util</span><span class="preprocessor">.Collections</span>.*<span class="comment">; // 导入类中的静态成员</span>

impport static java<span class="preprocessor">.lang</span><span class="preprocessor">.System</span>.*<span class="comment">;</span>

<span class="keyword">out</span><span class="preprocessor">.println</span>(<span class="string">"hello world"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java基本数据类型学习]]></title>
    <link href="http://yoursite.com/2014/04/11/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2014/04/11/java基本数据类型学习/</id>
    <published>2014-04-11T08:09:58.000Z</published>
    <updated>2014-04-11T08:36:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">基本数据类型对象包装类</h1>
<p>为了方便操作基本数据类型, 将其封装成了对象,
在对象中定义了属性和行为丰富了数据的操作.
用于描述该对象的类就称为基本数据包装类型.</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Char</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<h2 id="-">用法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">Integer</span><span class="built_in">.</span>parseInt(<span class="string">"123"</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>parseInt(<span class="string">"121"</span>, <span class="number">2</span>); <span class="comment">// 以2进制读取</span>
Boolean<span class="built_in">.</span>parseBoolean(<span class="string">"true"</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>MAX_VALUE;
<span class="built_in">Integer</span><span class="built_in">.</span>toBinaryString(<span class="subst">-</span><span class="number">6</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>toOctalString(<span class="subst">-</span><span class="number">6</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>toString(<span class="number">60</span>, <span class="number">2</span>); <span class="comment">// 转换成2进制</span>
<span class="literal">new</span> <span class="built_in">Integer</span>(<span class="number">2</span>)<span class="built_in">.</span>intValue(); <span class="comment">// 转换成基本数据类型</span>
</pre></td></tr></table></figure>

<h2 id="-">自动装箱</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="built_in">Integer</span> x <span class="subst">=</span> <span class="number">129</span>;
<span class="built_in">Integer</span> y <span class="subst">=</span> <span class="number">129</span>;
println(x<span class="subst">==</span>y); <span class="comment">// false</span>
println(x<span class="built_in">.</span><span class="keyword">equals</span>(y)); <span class="comment">//true</span>

<span class="comment">// jdk1.5以后, 自动装箱如果是一个字节, 那么数据不会创建一个新的空间</span>
<span class="built_in">Integer</span> x <span class="subst">=</span> <span class="number">127</span>; 
<span class="built_in">Integer</span> y <span class="subst">=</span> <span class="number">127</span>;
println(x<span class="subst">==</span>y); <span class="comment">// true</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="基本数据类型" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[string类学习]]></title>
    <link href="http://yoursite.com/2014/04/11/string%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2014/04/11/string类学习/</id>
    <published>2014-04-11T06:34:24.000Z</published>
    <updated>2014-04-11T08:09:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">字符串初识</h1>
<ol>
<li><p>字符串是一个特殊的对象</p>
</li>
<li><p>字符串一旦初始化, 就不可以被改变</p>
<p> 字符串初始化在字符串常量池</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">String</span> s <span class="subst">=</span> <span class="string">"abc"</span>; <span class="comment">// 在常量池当中</span>
<span class="built_in">String</span> s1 <span class="subst">=</span> <span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>); <span class="comment">// 在堆内存中生成</span>
println(s<span class="subst">==</span>s1); <span class="comment">// false</span>
println(s<span class="built_in">.</span><span class="keyword">equals</span>(s1)); <span class="comment">// true</span>
</pre></td></tr></table></figure>
</li>
<li><p>字符串的构造</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>byte[] arr = {<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>};
<span class="keyword">new</span> <span class="built_in">String</span>(arr); <span class="comment">// ABCD</span>
<span class="keyword">new</span> <span class="built_in">String</span>({<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>});<span class="comment">// abcd</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">字符串方法</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre><span class="javadoc">/** 获取字符的长度 **/</span>
<span class="keyword">int</span> length(); 

<span class="javadoc">/** 根据位置获取字符 **/</span>
<span class="keyword">char</span> charAt(<span class="keyword">int</span> pos)

<span class="javadoc">/** 字符第一次出现位置
* 没有找到返回-1
**/</span>
<span class="keyword">int</span> indexOf(<span class="keyword">int</span> ch);
<span class="keyword">int</span> indexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex);
<span class="keyword">int</span> indexOf(String str, <span class="keyword">int</span> fromIndex);

<span class="keyword">int</span> lastIndexOf(<span class="keyword">int</span> ch);
<span class="keyword">int</span> lastIndexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> from Index);

<span class="comment">/* 获取部分子串 */</span>
String substring(<span class="keyword">int</span> beginIndex);
String substring(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex);

<span class="comment">/* 变成字符数组 */</span>
<span class="keyword">char</span>[] toCharArray();

<span class="comment">/* 变成Byte */</span>
<span class="keyword">byte</span>[] getBytes();

<span class="comment">/* 变大小写 */</span>
String toUpperCase();
String toLowerCase();

<span class="comment">/* 替换 */</span>
String replace(<span class="keyword">char</span> old, <span class="keyword">char</span> <span class="keyword">new</span>);
String replace(CharSequence old, CharSequence <span class="keyword">new</span>);

<span class="comment">/* 去掉前后空白字符 */</span>
String trim();

<span class="comment">/* 将字符串进行连接 */</span>
String concat(String str);

<span class="comment">/* valueOf */</span>
String.valueOf(<span class="number">4</span>); <span class="comment">// toString</span>

<span class="comment">/* 字符串比较 */</span>
<span class="keyword">boolean</span> equalsIgnoreCase(String str);
<span class="keyword">boolean</span> equals(Object obj);

<span class="comment">/* 是否包含 */</span>
<span class="keyword">boolean</span> contains();

<span class="comment">/* 是否指定开头和结尾 */</span>
<span class="keyword">boolean</span> endsWith(String s);
<span class="keyword">boolean</span> startsWith(String s);
</pre></td></tr></table></figure>

<h2 id="-">字符串切割</h2>
<blockquote>
<p>String [] split(String regex);</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">String</span> s = <span class="string">"a,b,c"</span>;
s.<span class="built_in">split</span>(<span class="string">","</span>)
</pre></td></tr></table></figure>

<h2 id="intern-">intern方法</h2>
<p>对字符串操作, 当返回常量池中的字符串, 如果常量池中没有, 就插入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">String</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>).intern();
<span class="comment">/* equals */</span>
<span class="built_in">String</span> = <span class="string">"abc"</span>;
</pre></td></tr></table></figure>

<h1 id="stringbuffer">StringBuffer</h1>
<p>StringBuffer 是字符串缓冲,用于存储数据的容器</p>
<ol>
<li>长度是可变的</li>
<li>可以存储不同类型的容器</li>
<li>最终转换成字符串</li>
<li>可对字符串进行修改, 可添加 <code>append(data)</code>,
可插入 <code>insert(pos, data)</code>, 删除 <code>delete(pos, pos)</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">//初始化一个长度为40的空间</span>
StringBuffer sb = <span class="built_in">new</span> StringBuffer(<span class="string">"40"</span>); 
sb.<span class="built_in">append</span><span class="number">(4</span>).<span class="built_in">append</span>(<span class="constant">false</span>).<span class="built_in">append</span>(<span class="string">"haha"</span>);
sb.insert<span class="number">(1</span>, <span class="string">"hehe"</span>);


StringBuffer sb = <span class="built_in">new</span> StringBuffer(<span class="string">"abc"</span>);
sb.insert<span class="number">(1</span>, <span class="string">"hehe"</span>); <span class="comment">// ahehebc</span>

sb.<span class="built_in">delete</span><span class="number">(1</span>,<span class="number"> 4</span>); <span class="comment">// abc</span>
sb.deleteCharAt<span class="number">(0</span>); <span class="comment">//bc</span>

<span class="comment">// 清空</span>
sb.<span class="built_in">delete</span><span class="number">(0</span>, sb.length());

<span class="comment">// 查找, 类似String</span>
<span class="comment">// 修改</span>
sb.replace<span class="number">(1</span><span class="number">,3</span>,<span class="string">"123"</span>);
sb.setCharAt<span class="number">(0</span>, <span class="string">'c'</span>);

sb.setLength<span class="number">(0</span>); <span class="comment">// 可清空缓冲区</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="stringbuilder">StringBuilder</h2>
<p>StringBuilder 和 StringBuffer 功能和用法一模一样,
StringBuffer 线程安全, StringBuilder 线程不安全,
单线程推荐使用 StringBuilder</p>
]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="StringBuffer" scheme="http://yoursite.com/tags/StringBuffer/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程学习]]></title>
    <link href="http://yoursite.com/2014/04/10/java%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2014/04/10/java线程学习/</id>
    <published>2014-04-10T12:14:27.000Z</published>
    <updated>2014-04-11T06:34:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-java-">运行java程序两个线程</h1>
<ol>
<li><p>执行main函数的线程
 该线程的任务代码都定义在main函数中</p>
</li>
<li><p>负责垃圾回收的线程, 调用 <code>System.gc()</code></p>
</li>
</ol>
<h1 id="-">多线程的创建方法</h1>
<ol>
<li><p>继承Thread</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> run(){
       <span class="comment">// Do some thing</span>
       <span class="comment">/* 获取线程的名称 Thread-编号
       * 在创建的同时已经给予编号
       */</span>
       getName();
       Thread.currentThread().getName(); <span class="comment">//当前运行线程的名称</span>
    }
}
Thread t = <span class="keyword">new</span> MyThread();
t.start(); <span class="comment">//开启线程</span>
</pre></td></tr></table></figure>
</li>
<li><p>实现runable接口</p>
<p> 好处: 1. 将线程任务从线程的子类中分离出来, 进行单独封装  </p>
<ol>
<li>避免单继承的局限性<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span>{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> run(){}
}
Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Demo());
t.start();
t.start(); <span class="comment">// 多次启动会报异常</span>
</pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h1 id="-">线程的生命周期</h1>
<ol>
<li>被创建 <code>new()</code></li>
<li>运行 <code>start()</code></li>
<li>消亡 <code>stop()</code> 或 等任务结束</li>
<li><p>冻结 <code>sleep()</code> 或 <code>wait()</code></p>
<p> <code>wait()</code>不占有锁, 使用<code>notify()</code>唤醒;
 <code>sleep()</code>占有锁, 自己唤醒.</p>
</li>
</ol>
<h1 id="-">线程安全</h1>
<p>产生的原因:</p>
<ol>
<li>多个线程在操作共享的数据</li>
<li>操作共享数据的线程代码有多条</li>
</ol>
<p>当一个线程在执行操作共享数据的多条代码的过程中,
其他线程参与了运算, 就会产生线程安全问题.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){<span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;}
</pre></td></tr></table></figure>

<h2 id="-">解决思路</h2>
<p>必须在当前代码执行完以后, 其他线程才能参与运算</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">synchronized</span> (<span class="keyword">this</span>) {
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<p>弊端: 降低了效率</p>
<p>前提: 多个线程在同步中必须使用同一个锁</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">private</span> obj = <span class="keyword">new</span> Object();
<span class="keyword">synchronized</span>(obj){
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<h3 id="-">同步函数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<p>同步函数和和没有指定this对象同步锁, 锁定的是同一个对象this</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){} <span class="comment">// 锁定的对象是this.getClass()</span>
</pre></td></tr></table></figure>

<h2 id="-">单例下的多线程安全</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>class Single{
    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;
    <span class="keyword">private</span> <span class="title">Single</span>(){}
    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(s==<span class="keyword">null</span>) s = <span class="keyword">new</span> Single();    <span class="comment">// 线程安全</span>
        <span class="keyword">return</span> s;
    }
    <span class="comment">// 解决方方法一: 写成同步函数</span>
    <span class="comment">// 解决方法二:</span>
    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(s==<span class="keyword">null</span>){  <span class="comment">// 解决效率问题</span>
            <span class="keyword">synchronized</span>(Single.class){  <span class="comment">// 解决线程安全问题</span>
                <span class="keyword">if</span>(s==<span class="keyword">null</span>) s = <span class="keyword">new</span> Single()
            }
        }
        <span class="keyword">return</span> s;
    }
}
</pre></td></tr></table></figure>

<h2 id="-">死锁</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">synchronized</span>(obj){
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">synchronized</span>(obj){
       <span class="keyword">synchronized</span>(<span class="keyword">this</span>){}
    }
}
</pre></td></tr></table></figure>

<h1 id="-">多线程通信</h1>
<p>多个线程在处理同一资源, 但是任务却不同.</p>
<h2 id="-">等待唤醒机制</h2>
<ol>
<li><code>wait()</code>: 让线程处于冻结状态, 被wait的线程会存储在线程池中.</li>
<li><code>notify()</code>: <em>唤醒线程池中的一个线程.</em></li>
<li><code>notifyAll()</code>: 唤醒线程池中的所有线程.</li>
</ol>
<p>这些方法必须定义在同步中,<br>因为这些方法是用于操作线程状态的方法.<br>必须要明确到底操作的是哪个锁上的线程. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">//Thread1:</span>
<span class="keyword">synchronized</span>(r){
    <span class="keyword">while</span>(flag) r.wait(); <span class="comment">//不能是if, 会出现数据错误</span>
    doSome();
    flag = <span class="keyword">true</span>;
    r.notifyAll();  <span class="comment">// 如果是用notify, 可能会阻塞</span>
}

<span class="comment">//Thread2:</span>
<span class="keyword">synchronized</span>(r){
    <span class="keyword">while</span>(!flag) r.wait();
    doSome();
    flag = <span class="keyword">false</span>;
    r.notifyAll(); 
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">//都必须捕捉</span>
try{
    <span class="function">wait()</span>;
    <span class="function">sleep()</span>;
}<span class="function">catch(InterruptedException e)</span> {}
</pre></td></tr></table></figure>

<h1 id="java-util-concurrency-locks-">java.util.concurrency.locks.*</h1>
<p>jdk1.5以后将同步和锁封装成了对象</p>
<p>Lock 替代了 synchronized 方法和语句, 可以加上多组监视器.</p>
<p>Condition 替代了 <code>notify()</code> 和 <code>wait()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// Lock是接口</span>
Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 互斥锁</span>

<span class="keyword">lock</span>.<span class="keyword">lock</span>();
<span class="keyword">try</span>{
  doSome();
} <span class="keyword">finally</span>{
    <span class="keyword">lock</span>.unlock();
}

Condition cond = <span class="keyword">lock</span>.newCondition();
cond.<span class="keyword">await</span>();
cond.singnal();
cond.singnalAll();
</pre></td></tr></table></figure>

<p>From API Referrence: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre>class BoundedBuffer {
   final Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();
   final Condition notFull  = <span class="keyword">lock</span>.newCondition(); 
   final Condition notEmpty = <span class="keyword">lock</span>.newCondition(); 

   final Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];
   <span class="keyword">int</span> putptr, takeptr, count;

   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span>(Object x) throws InterruptedException {
     <span class="keyword">lock</span>.<span class="keyword">lock</span>();
     <span class="keyword">try</span> {
       <span class="keyword">while</span> (count == items.length)
         notFull.<span class="keyword">await</span>();
       items[putptr] = x;
       <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;
       ++count;
       notEmpty.signal();
     } <span class="keyword">finally</span> {
       <span class="keyword">lock</span>.unlock();
     }
   }

   <span class="keyword">public</span> Object <span class="title">take</span>() throws InterruptedException {
     <span class="keyword">lock</span>.<span class="keyword">lock</span>();
     <span class="keyword">try</span> {
       <span class="keyword">while</span> (count == <span class="number">0</span>)
         notEmpty.<span class="keyword">await</span>();
       Object x = items[takeptr];
       <span class="keyword">if</span> (++takeptr == items.length) takeptr = <span class="number">0</span>;
       --count;
       notFull.signal();
       <span class="keyword">return</span> x;
     } <span class="keyword">finally</span> {
       <span class="keyword">lock</span>.unlock();
     }
   }
 }
</pre></td></tr></table></figure>

<h1 id="wait-sleep-">wait 和 sleep 的区别</h1>
<ol>
<li><p>wait可以指定时间也可以不指定, sleep必须指定时间</p>
</li>
<li><p>在同步中时, 对cpu的执行权和锁的处理不同.</p>
<p> wait: 释放执行权,释放锁
 sleep: 释放执行权, 不释放锁</p>
</li>
</ol>
<h1 id="-">停止线程的方法</h1>
<ol>
<li>调用 <code>stop()</code> <code>susppend()</code>方法, 已经过时, 由安全问题</li>
<li><p>等 <code>run()</code> 方法结束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// 控制, 但是线程处于冻结状态, 无法读取标志</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">while</span>(flag){ doSome(); }
}
</pre></td></tr></table></figure>
</li>
<li><p>调用 <code>interrupt()</code>,让线程从冻结状态中强制恢复过来,<code>sleep()</code> 和 <code>wait()</code> 会抛出异常</p>
</li>
</ol>
<h1 id="-">守护线程</h1>
<p><code>thread.setDeamon(true)</code> 必须在启动线程钱调用, 当正在运行的
的线程都是守护线程时, java虚拟机退出.</p>
<h1 id="join">join</h1>
<p><code>thread.join()</code> 主线程等待<code>thread</code>线程终止, 再执行.</p>
<h1 id="-">线程其他设置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="javadoc">/**设置线程优先级**/</span>
thread.setPriority(THREAD.MAX_PRIORITY); <span class="comment">// 最大为10</span>

<span class="javadoc">/**设置线程组**/</span>
<span class="keyword">new</span> Thread(TreadGroup tg)
tg.interrupt();

<span class="comment">/* yield */</span>
thread.<span class="keyword">yield</span>(); <span class="comment">//暂时释放执行权</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[testdisk 磁盘恢复总结]]></title>
    <link href="http://yoursite.com/2014/04/10/testdisk-%E7%A3%81%E7%9B%98%E6%81%A2%E5%A4%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2014/04/10/testdisk-磁盘恢复总结/</id>
    <published>2014-04-10T10:17:11.000Z</published>
    <updated>2014-04-10T10:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>上次手贱把移动硬盘里的磁盘全部格式化, 分区没了, 我X, 我所有的资料啊... 这该如何是好?不过根据经验磁盘里面的数据没有
被重写, So, 上天有好生之德, 赐予了我 TestDisk 来拯救于我水火之中. 膜拜写这个软件的前辈, 以及再次感叹Linux的工具集
的丰富.</p>
<p>下面是这个软件的介绍</p>
<blockquote>
<p>TestDisk可以解决一些因为分区的原因而造成数据无法访问的问题。该工具可以帮助你恢复丢失的分区，
让磁盘重新变得可以启动，整理分区表，恢复主引导记录，恢复引导扇区以及文件系统表，
可以从NTFS、FAT、exFAT和ext2类型的文件系统中恢复被删除的文件，
还能从已经删除了的NTFS、FAT、exFAT和ext2/3/4文件系统中拷贝文件。</p>
</blockquote>
<p>testdisk是一个Linux命令行工具, 我主要是用这个来恢复我丢失的分区, 但是因为分区表被重写,
所以需要花比较长的时间来扫描硬盘, 来找到原来的分区信息, 所以大家需要耐心ho.ho.
总之,他是一个比较很实用 简单的Linux工具.</p>
<p>至于要恢复被删除掉的文件, 就需要Testdist的孪生兄弟 PhotoRec 来帮忙了.</p>
<blockquote>
<p>如果你主要是想恢复视频、文档和归档类文件，你应该试试PhotoRec。
PhotoRec的优点在于它完全忽略了文件系统，只去搜寻底层的数据。
这表示如果设备损坏或者被重新格式化了PhotoRec仍然能工作。</p>
</blockquote>
<p>这个工具我没有用过, 不过他和testdisk都出自于同一个人之手,
估计也是灰常实用和简单的工具. 再次膜拜他!</p>
<p>最后, 打个广告, ~.~, 有哪个妹子需要我恢复数据的, <strong>朝我开枪吧.</strong></p>
]]></content>
    
    
      <category term="testdisk" scheme="http://yoursite.com/tags/testdisk/"/>
    
      <category term="磁盘恢复" scheme="http://yoursite.com/tags/%E7%A3%81%E7%9B%98%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day09]]></title>
    <link href="http://yoursite.com/2014/04/10/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day09/"/>
    <id>http://yoursite.com/2014/04/10/传智播客day09/</id>
    <published>2014-04-10T00:33:53.000Z</published>
    <updated>2014-04-10T10:58:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="servlet">Servlet</h1>
<p>servlet是运行在服务器中的动态资源, 能接收用户的请求,发出响应.</p>
<h2 id="-servlet-">创建 Servlet 步骤</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast;
<span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> java.io.*;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> {</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span>(ServletRequest req, ServletRespons res)
                        <span class="keyword">throws</span> IOExcetpion, ServletException {
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">set</span> classpath=%classpath;c:\*.jar ; 在windows上
<span class="keyword">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:*.jar ; 在linux上
javac <span class="operator">-d</span> . HelloServlet.java
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="subst">&lt;</span>web<span class="attribute">-app</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>servlet<span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-name</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-name</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-class</span><span class="subst">&gt;</span><span class="literal">cn</span><span class="built_in">.</span>itcast<span class="built_in">.</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-class</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/servlet<span class="subst">&gt;</span>
    <span class="subst">&lt;</span>servlet<span class="attribute">-mapping</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-name</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-name</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>url<span class="attribute">-pattern</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/url<span class="attribute">-pattern</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/servlet<span class="attribute">-mapping</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>welcome<span class="attribute">-file</span><span class="attribute">-list</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>welcome<span class="attribute">-file</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>/welcome<span class="attribute">-file</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/welcome<span class="attribute">-file</span><span class="attribute">-list</span><span class="subst">&gt;</span>
<span class="subst">&lt;</span>/web<span class="attribute">-app</span><span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet的生命周期</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> {</span>
   <span class="comment">//只实例化一次</span>
    <span class="keyword">public</span> <span class="title">HelloServlet</span>(){
         System.out.println(<span class="string">"调用了一次"</span>);
    }

    <span class="comment">//用户第一次访问</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(ServletConfig conf) <span class="keyword">throws</span> ServletException {
         System.out.println(<span class="string">"只调用了一次"</span>);
    }
    
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>(){
         System.out.println(<span class="string">"只调用了一次"</span>);
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span>(ServletRequest req, ServletRespons res)
                        <span class="keyword">throws</span> IOExcetpion, ServletException {
         System.out.println(<span class="string">"每次访问都调用"</span>);
    }
}
</pre></td></tr></table></figure>

<h2 id="-servlet-">编写servlet方法</h2>
<ol>
<li>编写类直接实现javax.servlet.Servlet接口</li>
<li>编写类直接继承javax.servlet.GernericServlet 接口</li>
<li><p>编写类直接继承javax.servlet.http.HttpServlet 接口</p>
<p> 原因: 服务端编程都是基于HTTP协议的</p>
<p> javax.servlet.*, javax.servlet.http.*, 一个具体包是实现了http协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">/*
* 建议不要重写service方法
* service(HttpServletRequest req, HttpServletResponse resp)
*/</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(HttpServletRequest res, HttpServletResponse req){}
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span>(HttpServletRequest res, HttpServletResponse req){}
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPut</span>(HttpServletRequest res, HttpServletResponse req){}
}
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="servlet-">servlet 的一些细节</h2>
<ol>
<li><p>一个servlet可以被映射到多个地址</p>
</li>
<li><p>servlet的映射可以使用通配符*
 方式一: 以*开头,以某些扩展名结尾 <code>*.do</code></p>
<p> 方式二: 以/开头, 以*结尾 <code>/test/*</code></p>
<p> 方式三: 匹配所有地址 <code>/*</code></p>
<p> 缺省: <code>/</code></p>
</li>
<li><p>如果用户的访问路径,在web.xml中由多个匹配情况下,按照以下原则优先级</p>
<ol>
<li>绝对匹配</li>
<li>以斜线开头的</li>
<li>以*开头的匹配路径</li>
</ol>
</li>
<li><p>用户的所有访问都经过servlet</p>
<p> 在tomcat/conf/web.xml下的配置中有一个 <code>/</code>,设置默认访问servlet</p>
</li>
</ol>
<h3 id="-">配置应用启动时就初始化的顺序</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet线程安全</h2>
<p>servlet在内存中只有一份和生命周期有关的</p>
<p>在servlet里面尽量不要使用实例变量, 使用局部变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">// 解决方法一, 不靠谱</span>
<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">goGet</span>()
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet 核心继承图</h2>
<p><img src="/img/servlet_api.png" alt="sevlet核心继承图"></p>
<h2 id="servletconfig-">ServletConfig 详解</h2>
<p>ServletConfig 是由服务器产生的</p>
<h3 id="-servletconfig">获取 ServletConfig</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
     <span class="annotation">@Override</span>
     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(HttpServletRequest res, HttpServletResponse req){
         <span class="keyword">this</span>.getServletConfig();
     }
}
</pre></td></tr></table></figure>

<h3 id="-servletconfig">配置 ServletConfig</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>name <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span> <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>ServletConfig cfg = getServletConfig();
<span class="built_in">String</span> value = cfg.getInitParameter(<span class="string">"name"</span>); <span class="comment">//没有,返回Null</span>

Enumeration e = cfg.getInitParameterNames();
<span class="keyword">while</span>(e.hasMoreElements()) {
    <span class="built_in">String</span> paramName = (<span class="built_in">String</span>) e.nextElement();
}
</pre></td></tr></table></figure>

<h2 id="servletcontext">ServletContext</h2>
<ol>
<li><p>Servlet代表整个JavaWeb应用, 每个应用都会有一个唯一的 ServletContext
实例.</p>
</li>
<li><p>生命周期: 在应用被服务器加载时由容器完成创建, 和应用一同存在</p>
</li>
<li>获取Context的实例<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ServletConfig cfg = getServletConfig()<span class="comment">;</span>
ServletContext sc = cfg<span class="preprocessor">.getServletContext</span>()
// <span class="keyword">or</span> 
ServletContext sc = getServletContext()
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="servletcontext-">ServletContext应用</h3>
<p>多个Servlet可以通过ServletContext通讯,进行数据共享</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>&lt;web-app&gt;
    &lt;context-<span class="built_in">param</span>&gt;
        &lt;<span class="built_in">param</span>-name&gt; &lt;/<span class="built_in">param</span>-name&gt;
        &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt; &lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;
    &lt;/context-<span class="built_in">param</span>&gt;
    &lt;context-<span class="built_in">param</span>&gt;
        &lt;<span class="built_in">param</span>-name&gt; &lt;/<span class="built_in">param</span>-name&gt;
        &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt; &lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;
    &lt;/context-<span class="built_in">param</span>&gt;
&lt;/web-app&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>ServletContext sc = getServletContext()<span class="comment">;</span>
// 共享变量
sc<span class="preprocessor">.setAttribute</span>(<span class="string">"p"</span>, <span class="string">"p1"</span>)<span class="comment">;</span>
Object obj = sc<span class="preprocessor">.getAttribute</span>(<span class="string">"p"</span>)<span class="comment">;</span>

sc<span class="preprocessor">.removeAttribute</span>(<span class="string">"p"</span>)<span class="comment">;</span>
Enumeration em = sc<span class="preprocessor">.getAttributeNames</span>()<span class="comment">;</span>

//获取context-param
sc<span class="preprocessor">.getInitParameter</span>(<span class="string">"p"</span>)<span class="comment">;</span>
Enumeration em = sc<span class="preprocessor">.getInitParameterNames</span>()<span class="comment">;</span>

//servlet转发,只是服务器上的转发,客户端不知道
RequestDispatcher rd = sc<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"/servlet/ServletDemo"</span>)<span class="comment">;</span>
rd<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>域对象的概念: 域表示存活范围, 表示的是应用范围, 与生命周期有关</p>
<h4 id="servletcontext-">ServletContext 实现下载</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">//得到文件的输入流(利用ServletContext获取文件的真实存在路径)</span>
String realPath = getServletContext().getRealPath(<span class="string">"/.jpg"</span>); <span class="comment">// 必须一斜线开头</span>
InputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(realPath);
<span class="comment">//告知客户端以下载的方式打开</span>
res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment:filename=1.jpg"</span>);
<span class="comment">//利用response的字节流输出内</span>
<span class="keyword">out</span> = response.getOutputStream();
<span class="keyword">int</span> len = -<span class="number">1</span>;
<span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];
<span class="keyword">while</span>((len=<span class="keyword">in</span>.read(b))!=-<span class="number">1</span>){
    <span class="keyword">out</span>.write(b, <span class="number">0</span>, len);
}
<span class="comment">//关流</span>
<span class="keyword">in</span>.close();
<span class="keyword">out</span>.close();
</pre></td></tr></table></figure>

<h4 id="-servlet-">读取Servlet下的配置文件</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">//读取各种配置文件和方式</span>
String path = getServletContext.getRealPath(<span class="string">"/cfg.properties"</span>);
<span class="comment">// String path = getServletContext.getRealPath("/WEB-INF/classes/");</span>
InputStream inStream = <span class="keyword">new</span> FileInputStream(path);
Properties props = <span class="keyword">new</span> Properties();
props.load()

<span class="javadoc">/** 用Resourcebundle**/</span>
ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"cfg"</span>); <span class="comment">// 专门读取类路径下的文件.properties</span>
ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"cn.itcast.sc.cfg"</span>);

<span class="javadoc">/** 利用ClassLoader, 不适合加载太大的文件 **/</span>
ClassLoader cl = MyServlet.<span class="keyword">class</span>.getClassLoader();

cl.getResourceAsStream(<span class="string">"cn/itcast/sc/cfg.properties"</span>);
<span class="comment">// or URL path = cl.getResource("cn/itcast/sc/cfg.properties"); URL编码出现问题</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day08]]></title>
    <link href="http://yoursite.com/2014/04/09/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day08/"/>
    <id>http://yoursite.com/2014/04/09/传智播客day08/</id>
    <published>2014-04-09T00:55:30.000Z</published>
    <updated>2014-04-10T01:16:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tips">Tips</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//带缓冲的输出流</span>
GZIPOutputStream gout = <span class="keyword">new</span> GZIPOutputStream(baos);
gout.<span class="keyword">write</span>(b);
baos.toByteArray();
</pre></td></tr></table></figure>

<h1 id="web-">web开发</h1>
<p>web资源: 静态web资源, 动态web资源</p>
<p>静态资源:  </p>
<ol>
<li>*.html</li>
<li>*.css</li>
<li>*.js</li>
<li>图片</li>
</ol>
<p>动态资源:  </p>
<ol>
<li>servlet</li>
<li>*.jsp</li>
</ol>
<h2 id="-">常见服务器</h2>
<p>WebLogic: Oracle公司产品, 支持JavaEE规范, 收费</p>
<p>WebShpereAS (Application Server): IBM, 支持JavaEE规范</p>
<p>JbossAS: redhat公司产品, 支持JavaEE规范</p>
<p>Tomcat: 轻量级, <em>只实现了 Servlet/JSP 规范</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>ServerSocket <span class="built_in">server</span> = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);
Socket client = <span class="built_in">server</span>.accept();
OutputStream out = client.getOutputStream();
InputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(<span class="string">""</span>);

<span class="built_in">int</span> <span class="built_in">len</span> = -<span class="number">1</span>;
byte b[] = <span class="keyword">new</span> byte[<span class="number">1024</span>];
<span class="keyword">while</span>((<span class="built_in">len</span> = <span class="keyword">in</span>.read(b)) != -<span class="number">1</span>) {
    out.write(b, <span class="number">0</span>, <span class="built_in">len</span>);
}
out.close();
<span class="built_in">server</span>.close();
<span class="keyword">in</span>.close();
</pre></td></tr></table></figure>

<h2 id="javaee-">JavaEE 规范</h2>
<p>是很多技术的总称, 有很多接口或抽象类组成, 如:<br>Servlet/JSP, JDBC, JNDI, JTA, JPA, JMS ...</p>
<p>我们按照规范的要求来开发web应用, 然后部署到服务器上运行</p>
<h1 id="tomcat-">Tomcat服务器</h1>
<table>
<thead>
<tr>
<th>Tomcat</th>
<th>servlet</th>
<th>j2ee版本</th>
<th>jdk版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>8.0</td>
<td>3.2</td>
<td>*</td>
<td>1.7</td>
</tr>
<tr>
<td>7.0</td>
<td>3.0</td>
<td>6.0</td>
<td>1.6</td>
</tr>
<tr>
<td>6.0</td>
<td>2.5</td>
<td>5.0</td>
<td>1.5</td>
</tr>
</tbody>
</table>
<p>启动成功后,访问 <a href="http://localhost:8080" target="_blank">http://localhost:8080</a></p>
<p>修改端口: server.xml</p>
<p>webapps目录存放开发的app应用</p>
<h2 id="web-">web应用的目录结构</h2>
<p><em>WEB-INF</em>: 放在web应用的根目录, 用户无法直接访问</p>
<p>classes: 在WEB-INFO下, 放class字节码文件</p>
<p>lib: 在WEB-INFO下, 放应用需要的jar包</p>
<p>web.xml: 在WEB-INFO下, 应用的配置文件</p>
<h3 id="-">存放类的地方</h3>
<ol>
<li>本应用的classes目录</li>
<li>本应用的lib中的jar包</li>
<li>Tomcat的lib目录</li>
</ol>
<p>按照123依次搜索</p>
<h3 id="-">发布</h3>
<ol>
<li>直接把应用目录放到 webapps 下</li>
<li>打包成war包, 放到webapps下 <code>jar -cvf</code></li>
</ol>
<h2 id="tomcat-">tomcat的组成结构</h2>
<h3 id="server-xml">server.xml</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Server</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Service</span>&gt;</span>
        <span class="tag">&lt;<span class="title">Connector</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">Connector</span>&gt;</span>
        <span class="tag">&lt;<span class="title">Engine</span>&gt;</span>
            <span class="tag">&lt;<span class="title">Host</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">Engine</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Service</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Server</span>&gt;</span>
</pre></td></tr></table></figure>

<p>用户的访问都是通过Tomcat连接器连接过来的,</p>
<p>tomcat应用管理这很多主机(Host)</p>
<p>每个主机管理着很多应用(Context)</p>
<h3 id="-context-">配置虚拟目录(Context)</h3>
<p>把任意目录配成Tomcat管理的应用</p>
<p>方式一: 弊端，需要重启</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Host</span>&gt;</span>
    <span class="comment">&lt;!-- path: 用户访问的应用目录了, 一般以/ 开头 --&gt;</span>
    <span class="comment">&lt;!-- doBase: 应用的真是存放目录 --&gt;</span>
    <span class="comment">&lt;!-- localhost/shit/1.html --&gt;</span>
    <span class="tag">&lt;<span class="title">Context</span> <span class="attribute">path</span>=<span class="value">"/shit"</span> <span class="attribute">docBase</span>=<span class="value">"E://"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
</pre></td></tr></table></figure>

<p>方式二: 推荐，优点不用重启</p>
<ol>
<li><p>新建SH.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"fullpath"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>放在 Tomcat_home/conf/localhost/SH.xml</p>
</li>
<li>访问 <a href="http://localhost/SH/*.html" target="_blank">http://localhost/SH/*.html</a></li>
</ol>
<p><strong> 实际开发中直接把文件拷贝到webapp目录 </strong></p>
<h3 id="-">配置虚拟主机主机</h3>
<p>虚拟主机：不同域名下的访问目录</p>
<ul>
<li>在Engine添加以下内容<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Host</span> <span class="attribute">name</span>=<span class="value">"www.google.com"</span> <span class="attribute">appBase</span>=<span class="value">"dir"</span>
      <span class="attribute">unpackWARS</span>=<span class="value">"true"</span> <span class="attribute">autoDeploy</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Context</span>&gt;</span> <span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="-">配置默认应用, 默认主页, 默认端口</h3>
<p><code>http://localhost:8080/home/index.html</code> =&gt; <code>http://localhost</code></p>
<ol>
<li><p>修改端口</p>
<p> server.xml 8080 -&gt; 80</p>
</li>
<li><p>修改默认应用</p>
<ol>
<li><p>修改应用名称为ROOT</p>
</li>
<li><p>touch tomcat/conf/Catalina/localhost/ROOT.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"Myapp"</span>/&gt;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>修改应用默认主页
修改应用下的web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;welcome-<span class="type">file</span>-<span class="type">list</span>&gt;
    &lt;welcome-<span class="type">file</span>&gt;<span class="number">1.</span>html&lt;/welcome-<span class="type">file</span>&gt;
&lt;/welcome-<span class="type">file</span>-<span class="type">list</span>&gt;
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="http-">http协议</h1>
<ol>
<li>作用: 描述客户端和服务端的数据的传递的协议</li>
<li>全称: 超文本传输协议.</li>
<li><p>版本: 1.0, 1.1</p>
<p> 1.0: 连接 请求 响应 关闭, 无状态</p>
<p> 1.1: 连接 (请求 响应)*n 关闭</p>
</li>
</ol>
<h2 id="html-">html协议的组成</h2>
<h3 id="-">请求部分</h3>
<ul>
<li><p>请求消息行,位于请求部分第一行, 必须小于1KB, 如 <code>GET /  HTTP/1.1</code></p>
<p>  默认的请求方式是GET,常用的为GET POST HEAD OPTIONS</p>
<p>  URL: 协议+ip:端口+资源地址</p>
<p>  URI: 资源地址</p>
</li>
<li><p>请求消息头, 从第二行开始至第一个空行结束</p>
<p>  作用: 向服务器端传递一些附加信息</p>
<p>  形式: Header-Name: headervalue1, headerValue2</p>
<p>  Accept: 告知服务器, 浏览器能接受的MIME类型, 在<code>conf/web.xml</code>里面查看</p>
<p>  Accept-Charset: 告知服务器, 客户端能接受的字符集</p>
<p>  Accept-Encoding: 告知服务器, 客户端能接受的压缩编码</p>
<p>  Accept-Language: 告知服务器, 客户端能支持的语言</p>
<p>  Referer: 告知服务器, 当前页面是由哪一个页面转过来的.
  若用户是直接访问,就没有.</p>
<p>  Content-Type: 告知服务器,客户端提交的正文的MIME类型.默认是
  application/x-formdata-urlencode. 可以通过表单的form的enctype属性指定.
  可选值multipart/form-data(文件上传)</p>
<p>  If-Modified-Since: 告知服务器, 本地所缓存的资源的最后的修改时间</p>
<p>  User-Agent: 浏览器类型</p>
<p>  Content-Length: 请求正文的长度</p>
<p>  Connection: 需要持久连接</p>
<p>  Cookie: 向服务器发送cookie数据</p>
<p>  Date: 发送请求的时间</p>
</li>
<li><p>请求体, 从第一个空行到结束</p>
</li>
</ul>
<h3 id="-">响应部分</h3>
<ul>
<li><p>响应码, 如 <code>HTTP/1.1 200 OK</code></p>
<p>  状态码,说明了本次请求的结果状态</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>2xx</td>
<td>成功接受请求</td>
</tr>
<tr>
<td>200</td>
<td>成功</td>
</tr>
<tr>
<td>304</td>
<td>未修改</td>
</tr>
<tr>
<td>302</td>
<td>307: 临时重定向</td>
</tr>
<tr>
<td>404</td>
<td>访问的资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
</tr>
</tbody>
</table>
<ul>
<li><p>响应消息头,从第二行开始至第一个空行结束</p>
<p>  Location: 返回一个地址, 和302一起使用,实现请求重定向</p>
<p>  Server: 显示服务器类型</p>
<p>  Content-Encoding: 告知客户端,服务端的压缩格式</p>
<p>  Content-Length: 告知客户端,响应正文的内容长度</p>
<p>  Content-Type: 告知客户端,响应正文的MIME类型
  <code>Content-Type: text/html;charset=utf-8</code></p>
<p>  Last-Modified: 文件的最后修改时间, 节省带宽</p>
<p>  Refresh: 浏览器定时刷新时间</p>
<p>  Content-Disposition: 告知客户端, 以下载方式打开
  <code>Content-Disposition:attachment:filename=1.jpg</code></p>
<p>  Expire: -1<br>  Cache-Control:no-cache  (1.1)<br>  Progma:no-cache (1.0)  </p>
</li>
<li><p>响应正文, 从第一个空行到结束  </p>
</li>
</ul>
]]></content>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
      <category term="http协议" scheme="http://yoursite.com/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php基本语法]]></title>
    <link href="http://yoursite.com/2014/04/07/php%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2014/04/07/php语法/</id>
    <published>2014-04-07T11:51:06.000Z</published>
    <updated>2014-04-10T05:51:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="php-">php语法</h1>
<h2 id="php-">php标签</h2>
<p>php是嵌入式语言，意味着代码的混编，为了区别，所以有四种标签</p>
<ul>
<li><p>两种标准标签</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>  `content` <span class="preprocessor">?&gt;</span></span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">“php"</span>&gt;</span><span class="javascript">
echo <span class="string">'php'</span>;
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>兼容标记<br>短标记,修改php配置,<code>open_short_tags=on</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?</span> <span class="keyword">echo</span> <span class="string">'h'</span>; <span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>asp标签风格, 修改配置 <code>aps_tags=on</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;% <span class="built_in">echo</span> <span class="string">'h'</span>;  %&gt;
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="html-php-">html模式和php模式</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span><span class="php"><span class="preprocessor">&lt;?</span> <span class="preprocessor">?&gt;</span></span><span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">语句结束符</h2>
<p>语句结束符是<code>;</code></p>
<blockquote>
<p><code>echo &quot;Yes&quot;;</code></p>
</blockquote>
<h2 id="-">注释</h2>
<ul>
<li>单行: <code>//</code> 或 <code>#</code></li>
<li>多行: <code>/**  **/</code></li>
</ul>
<h2 id="-zend">解释器zend</h2>
<blockquote>
<p>php是编译型语言和解释型语言</p>
</blockquote>
<p>流程: 读入源代码 -&gt; 词法分析 -&gt; 语法分析 -&gt; 生成opcode -&gt; 由zendEngine执行</p>
<h2 id="-">变量</h2>
<p><code>$</code> 不是变量的一部分,只是语法,使用变量用<code>$</code>来引用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$name</span> = <span class="string">'itcast'</span>;
<span class="keyword">echo</span> <span class="variable">$name</span>;
functioni name(){
}
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>

<h3 id="-">变量名</h3>
<p>定义语法, 由字母 下划线 数字 组成</p>
<blockquote>
<p>$student_name = &#39;&#39;</p>
</blockquote>
<h3 id="-">变量的操作</h3>
<ul>
<li>增加 <code>$name = &#39;itcast&#39;;</code></li>
<li>删除 <code>unset($name)</code></li>
</ul>
<h3 id="-">变量的赋值</h3>
<h4 id="-">值传递</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="variable">$var_name</span> = <span class="string">"value"</span>;
<span class="variable">$new_var_name</span> = <span class="variable">$var_name</span>;
<span class="variable">$var_name</span> = <span class="string">"change"</span>;
<span class="keyword">echo</span> <span class="variable">$new_var_name</span>;  <span class="comment">// value</span>
</pre></td></tr></table></figure>

<h4 id="-">引用传递</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="variable">$var_name</span> = <span class="string">"value"</span>;
<span class="variable">$new_var_name</span> = &<span class="variable">$var_name</span>;
<span class="variable">$new_var_name</span> = <span class="string">"change"</span>
<span class="keyword">echo</span> <span class="variable">$var_name</span>; <span class="comment">// change</span>
</pre></td></tr></table></figure>

<h3 id="-">可变变量</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="variable">$name</span> = <span class="string">"hello"</span>;
<span class="variable">$hello</span> = <span class="string">"itcast-php"</span>;
<span class="keyword">echo</span> <span class="variable">$$name</span> <span class="comment">//itcast-php</span>

<span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span> {</span>}
<span class="variable">$f_name</span> = <span class="string">'f1'</span>;
<span class="variable">$f_name</span>();
</pre></td></tr></table></figure>

<h2 id="-">常量</h2>
<figure class="highlight php:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">define</span></span>(<span class="string">'pai'</span>, <span class="number">3.1415926</span>);
echo pai;

<span class="class"><span class="keyword">define</span></span>(<span class="string">"-_-"</span>, <span class="string">"haha"</span>);
<span class="comment">// echo -_-, 非法</span>
echo constant(<span class="string">"-_-"</span>);
</pre></td></tr></table></figure>

<blockquote>
<p>Define(&#39;变量名&#39;,&#39;值&#39;,&#39;是否区分大小写&#39;) //0 区分, 1 不区分</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">defined</span>(<span class="string">"pai"</span>); <span class="regexp">//</span>常量是否被定义
</pre></td></tr></table></figure>

<h3 id="-">常量相关函数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>get_defined_constants(); <span class="comment">//获取所有定义的常量</span>
<span class="comment">//预定义常量</span>
<span class="keyword">echo</span> PHP_OS;
<span class="keyword">echo</span> PHP_VERSION;
<span class="comment">//魔术常量</span>
<span class="keyword">echo</span> <span class="keyword">__FILE__</span>;  <span class="comment">//文件在的路径</span>
<span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">//当前行数</span>
<span class="keyword">echo</span> <span class="keyword">__DIR__</span>;  <span class="comment">//目录绝对地址</span>
</pre></td></tr></table></figure>

<h3 id="const-">const 定义</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">const</span> SOME = <span class="string">"some"</span>;
<span class="keyword">echo</span> SOME;
</pre></td></tr></table></figure>

<h3 id="-">数据类型</h3>
<p>php是弱类型语言,指变量没有类型之分,一个变量可以存储任意格式的数据,而数据是有类型之分的.</p>
<blockquote>
<p><code>var_dump()</code> 输出数据的值和类型</p>
</blockquote>
<ol>
<li><p>整型, int, integer<br>存储需求: 4byte, 32bit<br><code>PHP_INT_MAX</code> int最大值<br>如果再增加,会变为其他数据类型,<code>PHP_INT_MAX+1; //float()</code><br><code>echo time();</code> 获取时间戳
进制间转换, 16-hex, 10-Dec, 8-oct, 2-bin,
<code>hexdec(); deccbin(); decoct();</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$int1</span> = <span class="number">10</span>;
<span class="variable">$int2</span> = <span class="number">010</span>; <span class="regexp">//</span>进制
<span class="variable">$int3</span> = <span class="number">0x16</span>; <span class="regexp">//</span><span class="number">16</span>进制
</pre></td></tr></table></figure>
</li>
<li><p>浮点<br>php能存储精度为14位的有效数字, 理论最大值是1.8E308<br>不能相信浮点数的比较</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$f1</span> = <span class="number">1.23</span>*<span class="number">10</span>^<span class="number">10</span>;
<span class="variable">$f2</span> = <span class="number">1.23E10</span>;
<span class="variable">$f3</span> = <span class="number">1234E-10</span>;
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>布尔  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="char">$b</span>1 = <span class="keyword">true</span><span class="localvars">|flase|</span><span class="class">TRUR</span>|<span class="class">FALSE</span>;
</pre></td></tr></table></figure>
</li>
<li><p>字符串<br>定义方法: 单引号,双引号,heredoc,nowdoc(定界符)<br>单引号: 所有内容都当字符看待<br>双引号: 可以解析一切特殊的<br><code>chr(65)</code> 转成字符<br>heredoc: 定义复杂字符<br>nowdoc: 不可以解析变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$s1</span> = <span class="string">"itcast"</span>;
var_dump(<span class="variable">$s1</span>); <span class="comment">// String(6) "itcast"</span>

<span class="variable">$s2</span> = <span class="string">"hello, $s1"</span>;
<span class="variable">$s2</span> = <span class="string">"hello, ${s1}"</span>;
<span class="variable">$s3</span> = <span class="string">"\122"</span>; <span class="comment">// ascii</span>

<span class="comment">/* heredoc */</span>
<span class="variable">$s4</span> = <span class="string">&lt;&lt;&lt;END
$变量名
content0
END;</span>

<span class="comment">/* nowdoc */</span>
<span class="variable">$s4</span> = <span class="string">&lt;&lt;&lt;'END'
content
content0
END;</span>
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>数组<br>数据的组合, 数据的集合<br>一个元素也称为一个键值对, 键只能是整形和字符串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$a1</span> = <span class="keyword">array</span>(<span class="string">'key'</span> =&gt; <span class="string">'value'</span>, <span class="string">'key0'</span> =&gt; <span class="string">'value0'</span>);
<span class="keyword">echo</span> <span class="variable">$a1</span>[<span class="string">"key"</span>];

<span class="variable">$a2</span>[<span class="string">'new'</span>] = <span class="string">'new value'</span>;

<span class="variable">$a3</span> = <span class="keyword">array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);
<span class="keyword">echo</span> <span class="variable">$a3</span>[<span class="number">0</span>]; <span class="comment">// 'a'</span>
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>对象<br>一个对象可以保存多个值, 每个数据称之为属性.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="variable">$o1</span> = <span class="keyword">new</span> Stdclass();

<span class="variable">$o1</span>-&gt;name = <span class="string">"name"</span>;
<span class="variable">$o1</span>-&gt;age = <span class="number">22</span>;
<span class="variable">$o2</span>-&gt;gender=<span class="string">'male'</span>;

<span class="class"><span class="keyword">class</span> <span class="title">Stu</span>{</span>
    <span class="keyword">public</span> <span class="variable">$name</span>;
    <span class="keyword">public</span> <span class="variable">$age</span>;
    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addAge</span><span class="params">()</span>{</span>
        <span class="variable">$this</span>-&gt;age++;
    }
}
<span class="variable">$o2</span> = <span class="keyword">new</span> Stu;
<span class="variable">$o2</span>-&gt;addAge();
</pre></td></tr></table></figure>
</li>
<li><p>NULL<br>表示什么数据都没有<br>常见的输出Null, 只有一个值, 不区分大小写.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">echo</span> <span class="variable">$not_defined</span>;

<span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span>{</span>};
<span class="keyword">echo</span> f1();
</pre></td></tr></table></figure>
</li>
<li><p>资源<br>外部资源, 不能手动创建, 只能通过php内置函数得到.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>$link = mysql_connect(<span class="string">'127.0.0.1'</span><span class="keyword">...</span>);
var_dump($link);    // resource
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">类型转换</h2>
<ul>
<li><p>期望类型和得到类型不一致</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$cond</span> = <span class="number">1243</span>;
<span class="keyword">if</span>(<span class="variable">$cond</span>) {  <span class="regexp">//</span>转换为<span class="constant">True</span>
}
</pre></td></tr></table></figure>
</li>
<li><p>参与运算的不一致</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="variable">$s1</span> = <span class="string">"12abc"</span>;
<span class="variable">$i1</span> = <span class="number">23</span>;
<span class="keyword">echo</span> <span class="variable">$s1</span> + <span class="variable">$i1</span>; <span class="comment">// 12abc23</span>

<span class="variable">$cond1</span> = <span class="string">"abc"</span>; <span class="comment">// =&gt; 0</span>
<span class="variable">$cond2</span> = <span class="number">0</span>; 
<span class="keyword">echo</span> <span class="variable">$cond1</span> == <span class="variable">$cond2</span>; <span class="comment">//true</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p>转换的方式:</p>
<ol>
<li>php自己完成, 称之为自动类型转换<br>按照默认的行为完成</li>
<li><p>用户强制完成, 称之为强制类型转换  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>(<span class="keyword">bool</span>)<span class="string">'abc'</span>;
</pre></td></tr></table></figure>
</li>
<li><p>不同类型转换</p>
</li>
<li>布尔类型转换<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>&lt;?php
<span class="comment">// 只有空数组,0,null 转为false</span>
(<span class="keyword">bool</span>) <span class="string">'abce'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'0'</span>; <span class="comment">//false</span>
(<span class="keyword">bool</span>) <span class="string">'0.0'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'00'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'null'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) array(); <span class="comment">//false</span>
(<span class="keyword">bool</span>) <span class="number">0.0</span> ; <span class="comment">//false</span>
(<span class="keyword">bool</span>) array(<span class="keyword">false</span>) ; <span class="comment">//true</span>
(<span class="keyword">bool</span>) array(<span class="keyword">null</span>) ; <span class="comment">//false</span>
?&gt;
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="-">类型和变量中常用的函数</h3>
<p><code>var_dump()</code> <code>unset()</code> <code>isset()</code> <code>empty()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="variable">$a</span> = array(<span class="string">'a'</span> =&gt; <span class="number">10</span>, <span class="number">20</span>);
var_dump(<span class="variable">$a</span>[<span class="number">0</span>]); <span class="regexp">//</span> <span class="number">20</span>
unset(<span class="variable">$a</span>[<span class="number">0</span>]);
var_dump(<span class="variable">$a</span>);

<span class="variable">$c</span> = <span class="constant">NULL</span>;
isset(<span class="variable">$c</span>); <span class="regexp">//</span> <span class="keyword">false</span>

empty(<span class="number">0</span>); <span class="regexp">//</span> null array() <span class="number">0</span>.<span class="number">0</span> <span class="string">''</span> <span class="string">'0'</span> ==&gt; <span class="keyword">true</span> (bool)反义词

is_array();
is_int(<span class="string">'10'</span>); <span class="regexp">//</span> <span class="keyword">true</span>
is_numeric(<span class="string">'10'</span>); <span class="regexp">//</span> <span class="keyword">true</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day07]]></title>
    <link href="http://yoursite.com/2014/04/07/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day07/"/>
    <id>http://yoursite.com/2014/04/07/传智播客day07/</id>
    <published>2014-04-07T01:01:39.000Z</published>
    <updated>2014-04-09T12:52:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tips">Tips</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// propoties 的快捷方法</span>
ResourceBundle res = ResourceBundle.getBundle(<span class="string">"db"</span>); <span class="comment">//文件名为 db.prop</span>
res.getString(<span class="string">"user"</span>)
</pre></td></tr></table></figure>

<p>.properties 不支持中文。使用jdk工具字符串转码工具</p>
<blockquote>
<p>native2ascii</p>
</blockquote>
<h1 id="junit-">junit 使用</h1>
<ol>
<li>线程独立</li>
<li>测试方法<br>1.public<br>2.没有返回<br>3.方法不能有参数  </li>
<li>独立测试体，调用指定对象</li>
</ol>
<blockquote>
<p>类一般为Test结尾，如果类名没有以Test结尾，类继承TestCase类</p>
</blockquote>
<h1 id="-">泛型</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>val entrys = maps<span class="preprocessor">.entrySet</span>()<span class="comment">;</span>
entrys<span class="preprocessor">.iterator</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// T 不能是基本数据类型</span>
<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">print</span>(T [] arr){
    
}
</pre></td></tr></table></figure>

<h1 id="-">可变参数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span>(<span class="keyword">int</span>... <span class="keyword">params</span>) {

}
</pre></td></tr></table></figure>

<h1 id="for-">for循环</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> Arrays<span class="built_in">.</span>asList(arr);
for (<span class="built_in">String</span> str : <span class="built_in">list</span>) println(str); <span class="comment">// 实现的对象要实现 iterable 接口</span>
</pre></td></tr></table></figure>

<h1 id="-">枚举</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">enum</span> <span class="title">Role</span> {
    boss, manager, emp; <span class="comment">//私有构造类</span>
}
Role.values() <span class="comment">//返回对象数组</span>
</pre></td></tr></table></figure>

<h2 id="-">枚举的扩展</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">enum</span> Week {
   Mon(<span class="string">"星期一"</span>){<span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span>(){}}, Tue(<span class="string">"星期二"</span>);
   <span class="keyword">private</span> String week;

   <span class="keyword">private</span> <span class="title">Week</span>(String week) {
       <span class="keyword">this</span>.week = week;
   }
   <span class="comment">// getWeek(); setWeek();</span>
   
   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getName</span>();
}

Week.Mon.name();
Week.Mon.ordinal(); <span class="comment">//脚标，0</span>
</pre></td></tr></table></figure>

<h1 id="-">反射</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>Class clazz = Class<span class="preprocessor">.forName</span>(<span class="string">""</span>)<span class="comment">;</span>
Class clazz = ref<span class="preprocessor">.getClass</span>()<span class="comment">;</span>

// 字段
Object instance = clazz<span class="preprocessor">.newInstance</span>()<span class="comment">;</span>
Field field = clazz<span class="preprocessor">.getDeclaredField</span>(<span class="string">"field"</span>)<span class="comment">; // or getField() 获取public的字段</span>
field<span class="preprocessor">.setAccessible</span>(true)<span class="comment">; // private 变为 public</span>
field<span class="preprocessor">.set</span>(instance, <span class="string">"list"</span>)<span class="comment">;</span>

// 获取方法
Method m = clazz<span class="preprocessor">.getDeclaredMethod</span>(<span class="string">"print"</span>, String<span class="preprocessor">.class</span>)<span class="comment">; //方法的名字和方法的参数</span>
// <span class="keyword">or</span>  clazz<span class="preprocessor">.getDeclaredMethod</span>(<span class="string">"print"</span>, null)<span class="comment">;</span>
m<span class="preprocessor">.setAccessible</span>(true)<span class="comment">; // private to public</span>
m<span class="preprocessor">.invoke</span>(instance, <span class="string">"parameters"</span>)<span class="comment">;</span>

Constructor con = clazz<span class="preprocessor">.getConstructor</span>(String<span class="preprocessor">.class</span>, String<span class="preprocessor">.class</span>)<span class="comment">;</span>
con<span class="preprocessor">.newInstance</span>(<span class="string">""</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>用scala实现的调用的java反射</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="keyword">package</span> io.zhpooer.test

<span class="keyword">import</span> org.scalatest.FlatSpec
<span class="keyword">import</span> org.scalatest.matchers.ShouldMatchers
<span class="keyword">import</span> scala.beans.BeanProperty

<span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span>
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> name: String = _
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> age: Int = _
  <span class="keyword">override</span> <span class="keyword">def</span> toString = name + <span class="string">", "</span> + age 
}

<span class="class"><span class="keyword">class</span> <span class="title">ReflectSpec</span> <span class="keyword">extends</span> <span class="title">FlatSpec</span> <span class="keyword">with</span> <span class="title">ShouldMatchers</span> {</span>
  it should <span class="string">"通过Java反射机制得到类的包名和类名"</span> in {
    <span class="keyword">val</span> p = <span class="keyword">new</span> Person;
    println(<span class="string">"包名字: "</span> + p.getClass().getPackage().getName())
    println(<span class="string">"类名: "</span> + p.getClass().getSimpleName())
    println(<span class="string">"完整类名: "</span> + p.getClass().getName())
  }

  it should <span class="string">"通过Java反射机制，用 Class 创建类对"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)

    clazz.newInstance() <span class="keyword">match</span> {
      <span class="keyword">case</span> p: Person =&gt;
        p.setAge(<span class="number">12</span>)
        p.setName(<span class="string">"lest"</span>)
        println(p)
    }
  }
  
  it should <span class="string">"通过Java反射机制，用 Field 设置属性"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)
    <span class="keyword">val</span> p = <span class="keyword">new</span> Person;
    p.setAge(<span class="number">12</span>);
    p.setName(<span class="string">"test"</span>)
    
    <span class="keyword">val</span> field = clazz.getDeclaredField(<span class="string">"name"</span>) 
    field.setAccessible(<span class="keyword">true</span>)
    field.set(p, <span class="string">"change"</span>)
    println(field.get(p) +  <span class="string">" "</span> + p)
  }
  
  it should <span class="string">"通过Java反射机制得到类的一些成员信息 方法等"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)

    <span class="keyword">for</span> ( field &lt;- clazz.getDeclaredFields()) {
      println(field.getModifiers() + <span class="string">" "</span> + field.getName())
    }
    
    <span class="keyword">for</span> ( method &lt;- clazz.getDeclaredMethods()) {
      println(method.getModifiers() + <span class="string">" "</span> + method.getReturnType() + <span class="string">" "</span> + method.getName())
    }
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day06]]></title>
    <link href="http://yoursite.com/2014/04/06/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day06/"/>
    <id>http://yoursite.com/2014/04/06/传智播客day06/</id>
    <published>2014-04-06T00:47:01.000Z</published>
    <updated>2014-04-06T07:37:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="xml-">xml解析</h1>
<ol>
<li>dom<br>文档放入都内存中，方便CRUD</li>
<li>sax<br>逐行解析，方便查询，速度快，但不能CRUD</li>
</ol>
<h2 id="dom-jaxp">DOM, jaxp</h2>
<p>解析包：javax.xml.parsers</p>
<ol>
<li>获取解析器的工厂对象<br><code>DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();</code></li>
<li>获取文档解析对象<br><code>DocumentBuilder docBuilder = factory.newDocumentBuilder;</code></li>
<li>加载xml文件<br><code>docBuilder.parse(&quot;xml&quot;)</code></li>
<li><p>获取Document对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>import org<span class="preprocessor">.w</span>3c<span class="preprocessor">.dom</span><span class="preprocessor">.Document</span><span class="comment">;</span>
Document document = documentBuilder<span class="preprocessor">.newDocument</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>
</li>
<li><p>操作<br>节点Node： 文本是一个节点，属性也是一个节点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>NodeList nodeList = document<span class="preprocessor">.getElementByTagName</span>(<span class="string">"book"</span>)<span class="comment">;</span>
Node node = nodelist<span class="preprocessor">.item</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="node-">Node继承结构</h3>
<p>Node是中心<br><code>nodelist.getNodeType()</code><br>继承Node： Text，Attr，Comment，Document, Element...<br>Text: 空白行也算<br><code>fac.setIgnoringElementContentWhitespace(true)// 忽略回车换行</code>,只对有约束的文档起作用</p>
<h3 id="-">操作元素</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">//1.创建元素</span>
<span class="keyword">val</span> elm  = doc.createElement(<span class="string">"div"</span>)
<span class="comment">//2.创建文本</span>
<span class="keyword">val</span> txtElm = doc.createTextNode(<span class="string">"hello dom"</span>)
<span class="comment">//3. 添加</span>
elm.appendChild(txtElm)
<span class="comment">//4. 删除</span>
txtElm.getParentNode().removeChild(txtElm);
<span class="comment">//5. 回写</span>
<span class="keyword">val</span> transFac = TransformerFactory.newInstance()
<span class="keyword">val</span> trans = transFac.newTransformer()
trans.transform(<span class="keyword">new</span> DOMSource(doc), <span class="keyword">new</span> StreamResult(<span class="string">"filepath"</span>))
</pre></td></tr></table></figure>

<h2 id="sax">SAX</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">val</span> saxFac = SAXParserFactory.newInstance()
<span class="keyword">val</span> saxPaser = saxFac.newSAXParser()
<span class="keyword">val</span> handler = <span class="keyword">new</span> DefaultHandler {
    <span class="keyword">override</span> <span class="keyword">def</span> characters(ch:Array[Char], start:Int, length:Int):Unit = println(ch)
    <span class="keyword">override</span> <span class="keyword">def</span> startDocument() = println(<span class="string">"start doc"</span>)
    <span class="keyword">override</span> <span class="keyword">def</span> endDocument() = println(<span class="string">"end doc"</span>)

    <span class="keyword">override</span> <span class="keyword">def</span> startElement(uri:String, localName:String, qname:String, attr:Attributes) = println(	<span class="string">"start attr"</span>)
    <span class="keyword">override</span> <span class="keyword">def</span> endElement(uri:String, localName:String, qname:String) = println(<span class="string">"end elm"</span>)
}
saxPaser.parse(<span class="string">"filepath.xml"</span>, handler)
</pre></td></tr></table></figure>

<h2 id="dom4j">DOM4j</h2>
<p>结合了SAX和japx<br>核心是Element，japx核心是Node</p>
]]></content>
    
    
      <category term="xml" scheme="http://yoursite.com/tags/xml/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="SAX" scheme="http://yoursite.com/tags/SAX/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse上的emacs]]></title>
    <link href="http://yoursite.com/2014/04/05/eclipse%E4%B8%8A%E7%9A%84emacs/"/>
    <id>http://yoursite.com/2014/04/05/eclipse上的emacs/</id>
    <published>2014-04-05T12:19:30.000Z</published>
    <updated>2014-04-05T13:14:02.000Z</updated>
    <content type="html"><![CDATA[<p>清明闲来无事，又要开始折腾 emacs 和我的编程环境。<br>作为一个 emacser ，小指头总会忍受各种折磨，下面贴出我在Linux下解决办法 ^_^</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>;; 修改 ~/.XmodMap 
;; 交换右ctrl键和Caps键
keysym Menu = Super_L
remove <span class="operator"><span class="keyword">Lock</span> = Caps_Lock
remove Control = Control_R
keysym Control_R = Caps_Lock
keysym Caps_Lock = Control_R
<span class="keyword">add</span> <span class="keyword">Lock</span> = Caps_Lock
<span class="keyword">add</span> Control = Control_R</span>
</pre></td></tr></table></figure>

<p>这个还是很有效果的，比以前使用左下角Ctrl轻松不少，不过用久了肩膀还是疼啊！！!
泪奔,投奔vim党。</p>
<p>以上是开胃菜，言归正传，身为一个Java程序猿，在IDE上编程总会有各种不适，从前研究过在
emacs上使用emacs-jde编写java；在emacs上通过eclime使用eclipse的功能；或者在eclipse上用vim插件；
均因为种种原因以失败告终，我可悲可叹的emacser人生，最后决定用 IdeaJ，他的按键绑定可以设置的很有emacs风格，
不过还是和eclipse的使用习惯有一定的不习惯，特别是项目管理。直到今天，我发现了 <a href="&quot;http://blog.csdn.net/lzw_java/article/details/17016279&quot;">把Eclipse打造成Emacs</a></p>
<p>先按装好插件Emacs+，具体的我就不多说了，秀一下我的按键绑定吧：</p>
<ol>
<li>Ctrl+C Ctrl+C : run</li>
<li>Shift+Ctrl+/ : redo</li>
<li>Ctrl+Q : quick fix</li>
<li>Shift+Alt+&#39; :  Previous View</li>
<li>Alt+&#39;: next View</li>
<li>Alt+P : Previous Tab</li>
<li>Alt+N: Next Tab</li>
<li>Alt+O: Next Editor</li>
</ol>
]]></content>
    
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="emacs" scheme="http://yoursite.com/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day05]]></title>
    <link href="http://yoursite.com/2014/04/04/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day05/"/>
    <id>http://yoursite.com/2014/04/04/传智播客day05/</id>
    <published>2014-04-04T01:20:29.000Z</published>
    <updated>2014-04-05T05:42:30.000Z</updated>
    <content type="html"><![CDATA[<h1 id="xml-">xml语言</h1>
<ul>
<li>作用：传输数据 存储数据</li>
</ul>
<h2 id="xml-">xml结构</h2>
<ul>
<li>xml1.1 发一次请求，多次响应</li>
<li>xml1.0 发一次请求，一次响应<figure class="highlight xml:"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> <span class="comment">&lt;!--声明--&gt;</span>

<span class="tag">&lt;<span class="title">books</span>&gt;</span>  <span class="comment">&lt;!--必须要有根元素--&gt;</span>
    <span class="tag">&lt;<span class="title">book</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span> cnontent <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
<span class="tag">&lt;/<span class="title">books</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p><strong> 注意： 大小写敏感 </strong></p>
<h2 id="dtd-xml-">dtd xml约束</h2>
<ul>
<li>DOCTYPE: 内部声明</li>
<li>ELEMENT: 元素声明</li>
</ul>
<figure class="highlight dtd:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="gbk"?&gt;</span>
<span class="tag">&lt;<span class="title">!ELEMENT</span> <span class="attribute">books</span> (<span class="attribute">book</span>?)&gt;</span>  <span class="comment">&lt;!-- + * ?: 出现一次或多次--&gt;</span>
<span class="tag">&lt;<span class="title">!ELEMENT</span> <span class="attribute">book</span> (<span class="attribute">name</span>, <span class="attribute">price</span>)&gt;</span>
<span class="tag">&lt;<span class="title">!ELEMENT</span> <span class="attribute">name</span> (#<span class="attribute">PCDATA</span>)&gt;</span>
<span class="tag">&lt;<span class="title">!ELEMENT</span> <span class="attribute">price</span> (#<span class="attribute">PCDATA</span>)&gt;</span>
<span class="tag">&lt;<span class="title">!ATTLIST</span> <span class="attribute">book</span> <span class="attribute">bid</span> <span class="attribute">CDATA</span> #<span class="attribute">REQUIRED</span> &gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight xml:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="gbk"?&gt;</span>
<span class="doctype">&lt;!DOCTYPE books [
   &lt;!ELEMENT books(book)&gt;
   &lt;!ELEMENT book(name, price, author|publish)&gt; &lt;!-- 必须按顺序写 --&gt;
   &lt;!ELEMENT name(#PCDATA)&gt;
   &lt;!ELEMENT price(#PCDATA)&gt;
]&gt;</span> <span class="comment">&lt;!-- 声明在头部 or --&gt;</span>

<span class="doctype">&lt;!DOCTYPE books SYSTEM "**path.dtd**"&gt;</span> <span class="comment">&lt;!-- 从本地引入dtd文件 --&gt;</span>

<span class="doctype">&lt;!DOCTYPE books PUBLIC "//UNKNOWN/" "unknown.dtd"&gt;</span> <span class="comment">&lt;!-- 从互联网引入 --&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">类型</h3>
<ul>
<li>CDATA: 字符数据</li>
<li>ID: id</li>
</ul>
<h3 id="-">约束</h3>
<ul>
<li>#REQUIRED</li>
<li>#FIXED value: 固定</li>
<li>#IMPLIED: 不是必须</li>
</ul>
<h3 id="cdata">CDATA</h3>
<blockquote>
<p><code>&lt;![CDATA[will be not parsed content]]&gt;</code></p>
</blockquote>
<h3 id="xml-css">xml css</h3>
<blockquote>
<p><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;book.css&quot;?&gt;</code></p>
</blockquote>
<h3 id="-entity">实体 entity</h3>
<blockquote>
<p><code>&lt;!ENTITY site &quot;www.itcast.cn&quot;&gt;</code></p>
<p><code>&lt;publish&gt;&amp;my;&lt;/publish&gt; &lt;!-- 引用 --&gt;</code></p>
</blockquote>
<h3 id="-">混合型</h3>
<blockquote>
<p><code>&lt;!ELEMENT note (#PCDATA|to|from|header|message)*&gt;</code></p>
</blockquote>
<h2 id="schema">schema</h2>
<p>Schema是一个xml文件扩展为xsd，替代dtd</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">schema</span> <span class="attribute">xmlns</span>=<span class="value">""</span>
        <span class="attribute">targetNamespace</span>=<span class="value">"*any*"</span><span class="value">i</span>
        <span class="attribute">xml</span> <span class="attribute">ns:tns</span>=<span class="value">"*any*"</span>
        <span class="attribute">elementForDefault</span>=<span class="value">"qualified"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"books"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">complexType</span>&gt;</span>
            <span class="tag">&lt;<span class="title">sequence</span>&gt;</span>
                <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"book"</span> <span class="attribute">minOcdcurs</span>=<span class="value">"2"</span> <span class="attribute">maxOccurs</span>=<span class="value">"3"</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">complexType</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">sequence</span>&gt;</span>
                            <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">type</span>=<span class="value">"string"</span>&gt;</span> <span class="tag">&lt;/<span class="title">element</span>&gt;</span>
                            <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"price"</span> <span class="attribute">type</span>=<span class="value">"tns:myprice"</span>&gt;</span> <span class="tag">&lt;/<span class="title">element</span>&gt;</span> <span class="comment">&lt;!--注意：自定义类型使用 --&gt;</span>
                            <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"publishtime"</span> <span class="attribute">type</span>=<span class="value">"date"</span>&gt;</span> <span class="tag">&lt;/<span class="title">element</span>&gt;</span>
                            <span class="tag">&lt;<span class="title">element</span> <span class="attribute">name</span>=<span class="value">"tel"</span> <span class="attribute">type</span>=<span class="value">"tns:mytel"</span>&gt;</span> <span class="tag">&lt;/<span class="title">element</span>&gt;</span>
                        <span class="tag">&lt;/<span class="title">sequence</span>&gt;</span>
                    <span class="tag">&lt;/<span class="title">complexType</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">element</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">sequence</span>&gt;</span>
            <span class="tag">&lt;<span class="title">attribute</span> <span class="attribute">name</span>=<span class="value">"bid"</span> <span class="attribute">type</span>=<span class="value">"int"</span> <span class="attribute">use</span>=<span class="value">"option"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">attribute</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">complexType</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">element</span>&gt;</span>
    <span class="comment">&lt;!-- 自定义元素 --&gt;</span>
    <span class="tag">&lt;<span class="title">simpleType</span> <span class="attribute">name</span>=<span class="value">"mytel"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">restriction</span> <span class="attribute">base</span>=<span class="value">"striing"</span>&gt;</span> <span class="comment">&lt;!-- 指定元素类型 进行加强 --&gt;</span>
            <span class="tag">&lt;<span class="title">parttern</span> <span class="attribute">value</span>=<span class="value">"\d{3}-\d{4}-\d{4}"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">parttern</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">restriction</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">simpleType</span>&gt;</span>
    <span class="tag">&lt;<span class="title">simpleType</span> <span class="attribute">name</span>=<span class="value">"myprice"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">restriction</span> <span class="attribute">base</span>=<span class="value">"double"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">maxInclusive</span> <span class="attribute">value</span>=<span class="value">"200"</span>&gt;</span> <span class="tag">&lt;/<span class="title">maxInclusive</span>&gt;</span>
            <span class="tag">&lt;<span class="title">minInclusive</span> <span class="attribute">value</span>=<span class="value">"100"</span>&gt;</span> <span class="tag">&lt;/<span class="title">minInclusive</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">restriction</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">simpleType</span>&gt;</span>
<span class="tag">&lt;/<span class="title">schema</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">books</span> <span class="attribute">xmlns</span>=<span class="value">""</span> <span class="attribute">xmlns:xsi</span>=<span class="value">""</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">""</span>&gt;</span>
<span class="tag">&lt;/<span class="title">books</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="xml" scheme="http://yoursite.com/tags/xml/"/>
    
      <category term="dtd" scheme="http://yoursite.com/tags/dtd/"/>
    
      <category term="schema" scheme="http://yoursite.com/tags/schema/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day04]]></title>
    <link href="http://yoursite.com/2014/04/03/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day04/"/>
    <id>http://yoursite.com/2014/04/03/传智播客day04/</id>
    <published>2014-04-03T00:55:12.000Z</published>
    <updated>2014-04-06T06:36:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="javascript">javascript</h1>
<h2 id="prototype">prototype</h2>
<p>prototype 是一个类的属性，是类的一个属性,
是类的一个实例，也就是说当一个类被声明后，js自动创建，
并且作为类的prototype属性而存在,称作类的<em>原型</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>function Person(){
}
<span class="keyword">log</span>(Person<span class="built_in">.</span>prototype) <span class="comment">// Person(){}</span>
<span class="built_in">var</span> p <span class="subst">=</span> <span class="literal">new</span> Person();
<span class="keyword">log</span>(p<span class="built_in">.</span>prototype); <span class="comment">// undefined</span>
<span class="keyword">log</span>(console<span class="built_in">.</span><span class="keyword">log</span>(p<span class="built_in">.</span>__proto__<span class="subst">==</span>Person<span class="built_in">.</span>prototype); <span class="comment">// true</span>

Person<span class="built_in">.</span>prototype<span class="built_in">.</span>name <span class="subst">=</span> <span class="string">"123"</span>; <span class="comment">// readonly</span>
<span class="keyword">log</span>(p<span class="built_in">.</span>name); <span class="comment">// 123</span>

p<span class="built_in">.</span>name <span class="subst">=</span> <span class="number">124</span>;
<span class="keyword">log</span>(p<span class="built_in">.</span>name); <span class="comment">// 124</span>
</pre></td></tr></table></figure>

<p>在扩展共用属性，用prototype；在应用个性化的属性时，用构造函数</p>
<h2 id="dom">DOM</h2>
<p>dom: 文档对象模型，是一套规范</p>
<p>dom 定义了哪些对象，这些对象有哪些方法和属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>window.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
    document.getElementsByTagName(<span class="string">"div"</span>) <span class="comment">// 获得所有的div</span>
    document.getElementsByName(<span class="string">"div"</span>)[<span class="number">0</span>]  <span class="comment">//获得集合，name值不唯一如'&lt;input type="radio/&gt;"'</span>
    <span class="keyword">var</span> div1 = document.getElementById() <span class="comment">// 获得的引用，代表对象</span>
    log(div1.innerHTML)
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;<span class="operator">div</span>&gt;&lt;/<span class="operator">div</span>&gt;<span class="comment"> // 代表标签</span>
</pre></td></tr></table></figure>

<p><em>标签和标签之间也都是文本</em>
/<em> 拷贝老师 </em>/！！！！！</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 如何获得div3 --&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span> <span class="tag">&lt;<span class="title">td</span> <span class="attribute">id</span>=<span class="value">"td1"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>div3<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> td1 = document.getElementById(<span class="string">"td1"</span>)
td1.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>] <span class="comment">// 所有容器对象，都有get*方法</span>
</pre></td></tr></table></figure>

<blockquote>
<p><code>document.forms</code> // 获得页面上所有的form</p>
</blockquote>
<h3 id="-">对象的属性和方法</h3>
<p>nodeName: 节点名称</p>
<blockquote>
<p>   元素节点，标签名</p>
<p>   属性节点，属性名</p>
<p>   文本节点，#text</p>
</blockquote>
<p>nodeValue: 节点值</p>
<blockquote>
<p>   元素节点，null</p>
<p>   属性节点，属性值</p>
<p>   文本节点，文本内容</p>
</blockquote>
<p>nodeType: 节点类型</p>
<blockquote>
<p>   元素节点，1</p>
<p>   属性节点，2</p>
<p>   文本节点，3</p>
</blockquote>
<h3 id="demo">DEMO</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"bj"</span>&gt;</span>
      北京
      <span class="tag">&lt;<span class="title">p</span>&gt;</span>海淀<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
      奥运
    <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="reserved">var</span> li = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);
<span class="built_in">console</span>.debug(li.childNodes);
<span class="keyword">for</span> (<span class="reserved">var</span> i=<span class="number">0</span>;i&lt;li.childNodes.length;i++){
  <span class="reserved">var</span> child = li.childNodes[i];
  <span class="keyword">if</span> (child.nodeType == <span class="number">3</span>)
    <span class="built_in">console</span>.log(child.nodeValue);
  <span class="keyword">else</span>
    <span class="built_in">console</span>.log(child.innerHTML);
}
</pre></td></tr></table></figure>

<h3 id="demo2">DEMO2</h3>
<p>打印明天你好</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">h1</span> <span class="attribute">id</span>=<span class="value">"h1"</span>&gt;</span>明天休息<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>var h1 = document<span class="preprocessor">.getElementById</span>(<span class="string">"h1"</span>)<span class="comment">;</span>
console<span class="preprocessor">.log</span>(h1<span class="preprocessor">.innerHTML</span>)<span class="comment">;</span>
console<span class="preprocessor">.log</span>(h1<span class="preprocessor">.firstChild</span><span class="preprocessor">.nodeValue</span>)<span class="comment">;</span>
console<span class="preprocessor">.log</span>(h1<span class="preprocessor">.lastChild</span><span class="preprocessor">.nodeValue</span>)<span class="comment">;</span>
console<span class="preprocessor">.log</span>(h1<span class="preprocessor">.childNodes</span>[<span class="number">0</span>]<span class="preprocessor">.nodeValue</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="demo3">DEMO3</h3>
<p>打印option中的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"select"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span>&gt;</span> aaa <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span>&gt;</span>bbb <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span>&gt;</span>ccc <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span>&gt;</span>dddd <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="reserved">var</span> options = <span class="built_in">document</span>.getElementById(<span class="string">"select"</span>).childNodes;

<span class="keyword">for</span>(<span class="reserved">var</span> i=<span class="number">0</span>;i&lt;options.length;i++){
  <span class="keyword">if</span>(options[i].nodeType == <span class="number">1</span>)
    <span class="built_in">console</span>.log(options[i].innerHTML);
}
</pre></td></tr></table></figure>

<h3 id="-">创建节点</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var <span class="keyword">tr</span> = document.createElement(<span class="string">"tr"</span>);
<span class="keyword">tr</span>.innerHTML = <span class="string">"&lt;td&gt;content&lt;/td&gt;"</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="xml"><span class="tag"><span class="value">&lt;a href='</span><span class="value">javascript:void(0)'</span> <span class="attribute">onclick</span>=<span class="value">'onClick(this)'</span>/&gt;</span></span>
</pre></td></tr></table></figure>

<p><code>所有的input元素都通过value来获得其值</code></p>
<h3 id="string-">string 转换</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span> <span class="keyword">return</span> <span class="string">""</span>}
<span class="string">"aa  "</span>.trim(); <span class="comment">// 字符串虽然是基本数据类型，但是会自动转换String对象</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;form onsubmit=“<span class="keyword">return</span> <span class="literal">false</span>;”&gt;&lt;<span class="regexp">/form&gt; /</span>/ <span class="keyword">not</span> work
</pre></td></tr></table></figure>

<h2 id="bom">BOM</h2>
<p>bom 浏览器对象模型</p>
<p>1 window, 顶级元素，每一个窗口都有一个window对象</p>
<p>javascript所有定义的全局变量和函数都是window对象的</p>
<p>2 frame</p>
<p>3 location</p>
<blockquote>
<p>window.location.href = &quot;<a href="http://url" target="_blank">http://url</a>&quot;</p>
</blockquote>
<p>4 history</p>
]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day03]]></title>
    <link href="http://yoursite.com/2014/04/01/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day03/"/>
    <id>http://yoursite.com/2014/04/01/传智播客day03/</id>
    <published>2014-04-01T01:03:33.000Z</published>
    <updated>2014-04-03T01:37:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="todo">TODO</h1>
<p><em>什么是 强类型，弱类型，动态类型，静态类型</em></p>
<h1 id="javascript">javascript</h1>
<h2 id="undefined-null">undefined 和 null</h2>
<p>undefined: 本身是数据类型，唯一的值是undefined，表示未定义和指定的</p>
<ol>
<li>var 声明变量，当时没赋值，是 undefined</li>
<li>js 所有函数都有返回值，如果没有明确返回什么，返回值是 undefined</li>
<li>访问的对象不存在属性时，值是 undefined</li>
</ol>
<p>null 本身是数据类型，唯一的值是 null, 表示一个无效的对象</p>
<blockquote>
<p><code>var o = null; o = new Date()</code></p>
</blockquote>
<h2 id="-">运算符种类</h2>
<h3 id="-">算数运算符</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/*
 * +: 有两个意义，
 * 1. 表示运算负求和
 * 2. 字符串链接符
 *    如果左右两边出现一个字符串的时候，就是字符串连接符
**/</span>
<span class="keyword">var</span> result = <span class="number">3</span> + <span class="string">"2"</span> <span class="comment">// 32</span>
<span class="keyword">var</span> result = <span class="literal">true</span> + <span class="number">2</span> <span class="comment">// 3</span>
<span class="keyword">var</span> result = <span class="literal">null</span> + <span class="number">2</span> <span class="comment">// 2</span>
<span class="keyword">var</span> result = <span class="literal">undefined</span> + <span class="number">2</span> <span class="comment">// NaN</span>
</pre></td></tr></table></figure>

<h3 id="-">逻辑算术符</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">/*
 * && : 寻找表示假的值，若没有找到，返回最后一个元素值，找到则返回那个值
 * || : 寻找表示真的的值，若没有找到，返回最后一个元素值, 返回最后一个元素值，找到则返回那个值
 *
**/</span>
<span class="keyword">var</span> result = <span class="string">"a"</span> && <span class="string">"b"</span> <span class="comment">// b</span>
<span class="keyword">var</span> result = <span class="string">"a"</span> || <span class="string">"b"</span> <span class="comment">// a</span>
<span class="keyword">var</span> result = !!<span class="string">"false"</span> <span class="comment">// true</span>
<span class="comment">// ||使用</span>
<span class="function"><span class="keyword">function</span> <span class="title">myFun</span><span class="params">(defaultValue)</span> {</span>
    <span class="keyword">var</span> result = result || <span class="number">1</span>;
}
</pre></td></tr></table></figure>

<h3 id="typeof-instanceof">typeof 和 instanceof</h3>
<p>typeof 用来判断一个值是哪种数据类型</p>
<p>instanceof 判断一个值是否是某个类的实例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">typeof</span> <span class="string">"hello"</span>; <span class="comment">// String</span>
<span class="keyword">typeof</span> <span class="number">1</span>; <span class="comment">// number</span>
<span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// undefined</span>
<span class="keyword">typeof</span> <span class="literal">true</span>; boolean
<span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object</span>
</pre></td></tr></table></figure>

<blockquote>
<p>typeof (new Date); // object</p>
<p>(new Date) instanceof Date // true</p>
</blockquote>
<h2 id="-">语句</h2>
<h3 id="if">if</h3>
<blockquote>
<p>if(num=9) // equals if(9)</p>
<p>if(9==num) 规避风险</p>
</blockquote>
<h3 id="for">for</h3>
<h3 id="while">while</h3>
<h3 id="demo-">DEMO 九九乘法表</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">// TODO 用table输出到页面，使格式对齐</span>
<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) {
  <span class="keyword">var</span> line = <span class="string">""</span>;
  <span class="keyword">for</span>(j = i; j &lt; <span class="number">10</span>; j ++){
    <span class="keyword">var</span> result = i*j;
    line += (i + <span class="string">"x"</span> + j + <span class="string">"="</span> + result + <span class="string">"  "</span>);
  }
  console.log(line);
}
<span class="comment">//表格</span>
<span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(content, tag)</span>{</span>
    <span class="keyword">var</span> result = <span class="string">""</span>;
    result += (<span class="string">"&lt;"</span> + tag + <span class="string">"&gt;"</span>);
    result += content;
    result += (<span class="string">"&lt;/"</span> + tag + <span class="string">"&gt;"</span>);
    <span class="keyword">return</span> result;
}
<span class="keyword">var</span> tableContent = <span class="string">""</span>;
<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) {
    <span class="keyword">var</span> row = <span class="string">""</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> j = i; j &lt;= <span class="number">9</span>; j ++){
        <span class="keyword">var</span> result = i*j;
        row += render( i + <span class="string">"x"</span> + j + <span class="string">"="</span> + result, <span class="string">"td"</span> );
    }
    tableContent += render( row, <span class="string">"tr"</span> );
}
document.write( render(tableContent, <span class="string">"table"</span>) );
</pre></td></tr></table></figure>

<h2 id="-">函数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">myfn</span><span class="params">()</span>{</span>}

    <span class="function"><span class="keyword">function</span> <span class="title">myfn2</span><span class="params">(args)</span>{</span>}

    myfun2() <span class="comment">// args passed undefined</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">onclick</span>=<span class="value">"myfn();"</span>/&gt;</span>
</pre></td></tr></table></figure>

<p>同名函数会被覆盖</p>
<h3 id="-arguments-">函数arguments参数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">myfn</span><span class="params">()</span></span>{}
myfun(<span class="string">"a"</span>,<span class="string">"b"</span>) // arguments =&gt; [<span class="string">"a"</span>, <span class="string">"b"</span>]
</pre></td></tr></table></figure>

<h3 id="-">函数是变量</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">myfn</span><span class="params">()</span></span>{}
// var myfn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{} 匿名函数
// var myfn = new Function(<span class="string">"arg_name, arg_name2"</span>, ”alert(<span class="string">'hello world'</span>);“);
<span class="function"><span class="keyword">function</span> <span class="title">handler</span><span class="params">( fun )</span></span>{ fun() }
handler(myfn)
</pre></td></tr></table></figure>

<h2 id="-">全局变量和局部变量</h2>
<p>在script标签内，在函数外定义变量都是全局变量</p>
<blockquote>
<p><code>for(var i=0;i&lt;1;i++){} log(i);</code> // i is 1</p>
<p><code>function myfn(){ a = &quot;1&quot;; var b = &quot;2&quot; }</code> // a是局部变量，b是全局变量</p>
</blockquote>
<h2 id="-">数组</h2>
<blockquote>
<p>var arr = new Array() | var arr = []</p>
</blockquote>
<p>可以跨越下标赋值，被跨越部分值是undefined,同一个数组可以装载不同类型值</p>
<blockquote>
<p>arr.length = 0 //清空数组</p>
</blockquote>
<h3 id="demo">demo</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">//求最大值</span>
<span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">()</span>{</span>
  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span> ) <span class="keyword">return</span> <span class="literal">undefined</span>;
  <span class="keyword">var</span> maxNum = <span class="built_in">arguments</span>[<span class="number">0</span>];
  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) {
    maxNum = maxNum &gt; <span class="built_in">arguments</span>[i] ? maxNum : <span class="built_in">arguments</span>[i];
  }
  <span class="keyword">return</span> maxNum;
}

max(<span class="number">23</span>, <span class="number">1</span>, <span class="number">990</span>, <span class="number">29</span>, <span class="number">100</span>, <span class="number">65</span>);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>
<span class="keyword">var</span> info = {
  <span class="string">"张三"</span>: [<span class="number">18</span>, <span class="string">"男"</span>, <span class="string">"本科"</span>],
  <span class="string">"李四"</span>: [<span class="number">17</span>, <span class="string">"男"</span>, <span class="string">"大专"</span>],
  <span class="string">"王五"</span>: [<span class="number">16</span>, <span class="string">"男"</span>, <span class="string">"高中"</span>]
};

<span class="function"><span class="keyword">function</span> <span class="title">getinfoFromName</span><span class="params">(name)</span> {</span>
  console.log(info[name]);
}

getinfoFromName(<span class="string">"张三"</span>);
getinfoFromName(<span class="string">"李四"</span>);
getinfoFromName(<span class="string">"王五"</span>);
getinfoFromName(<span class="string">"aa"</span>);
</pre></td></tr></table></figure>

<blockquote>
<p>new Array(23) // length == 23</p>
<p>new Array(2.3) // 无效</p>
</blockquote>
<h3 id="-">数组方法</h3>
<ol>
<li>push，向末尾添加</li>
<li>concat，连接两个或更多数组</li>
<li>join，拼接成字符串，指定连接符号，默认是逗号</li>
</ol>
<h2 id="-">面向对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">Persion</span><span class="params">()</span>{</span>};
<span class="keyword">var</span> p = <span class="keyword">new</span> Persion(); <span class="comment">// 创建对象</span>
p.name = <span class="string">""</span>; p[<span class="string">"age"</span>] = <span class="number">12</span>; <span class="comment">// 添加属性</span>
p.eat = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>}   <span class="comment">//添加方法</span>
</pre></td></tr></table></figure>

<h3 id="-">构造函数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span>{</span>
    <span class="keyword">this</span>.name = <span class="string">""</span>
    <span class="keyword">this</span>.age = <span class="number">12</span>;
    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>}
};
</pre></td></tr></table></figure>

<p>js每一个类都有一个属性constructor,表示构造函数
js中的每一个函数内部都有一个this,this表示当前对象(谁调用就是谁)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> name = <span class="string">"out"</span>
<span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.name;
}
<span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">//new 一个新的运行上下文</span>
p.name = <span class="string">"in"</span>;
p.sleep = sleep;

sleep();  <span class="comment">// out, this 表示 最外部这运行上下文(环境)</span>
p.sleep(); <span class="comment">// in, this 表示 p 这个对象的运行上下文(环境)</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客Day02]]></title>
    <link href="http://yoursite.com/2014/03/31/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day02/"/>
    <id>http://yoursite.com/2014/03/31/传智播客day02/</id>
    <published>2014-03-31T00:48:34.000Z</published>
    <updated>2014-04-06T00:55:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="html-">html剩余</h1>
<h2 id="div-span-p">div span p</h2>
<p>div: 块标签，主要用来封装数据，配合css使用</p>
<p>span: 行级标签，只占据一行中被封装数据的大小，主要用来封装数据</p>
<p>p:段落</p>
<h1 id="css">css</h1>
<p><code>CSS: 层叠样式表，用来美化和修饰页面，不区分大小写</code></p>
<h2 id="css-">css封装</h2>
<p>1.通过sytle标签属性，给其指定样式。<code>属性名:属性;属性名:属性;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"color:red;font-size:24px;background-color: #9966cc;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<p>2.把样式代码封装到style标签当中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">text</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
        <span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">24</span>px</span></span>;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#9966cc</span></span></span>;<span class="rule">}</span></span>
        <span class="tag">span</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">24</span>px</span></span>;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#9966cc</span></span></span>;<span class="rule">}</span></span>
    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
</pre></td></tr></table></figure>

<p>3.把样式代码提取到一个单独的文件</p>
<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">/* url.css */</span>
<span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">24</span>px</span></span>;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#9966cc</span></span></span>;<span class="rule">}</span></span>
<span class="tag">span</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">24</span>px</span></span>;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#9966cc</span></span></span>;<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
<span class="at_rule">@<span class="keyword">import</span> <span class="function">url(url.css)</span>
</span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="comment">&lt;!-- rel：引入的外部文件和当前页面的关系 --&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"url.css"</span>/&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">/* total.css */</span>
<span class="at_rule">@<span class="keyword">CHARSET</span> <span class="string">"UTF-8"</span></span>;
<span class="at_rule">@<span class="keyword">import</span> <span class="function">url(<span class="number">1</span>.css)</span>
@import <span class="function">url(<span class="number">2</span>.css)</span></span>
</pre></td></tr></table></figure>

<h2 id="-">选择器</h2>
<p>选择器： 用来确定被（操作）的标签的一种语法</p>
<ol>
<li>标签名称选择器,
<code>div{color:red}</code> or <code>span</code></li>
<li>类选择器,
<code>.class-name{color:red}</code>
<code>&lt;div class=&quot;class-name&quot;/&gt;</code></li>
<li>id选择器，
<code>#div-id{color:red}</code>
<code>&lt;div id=&quot;div-id&quot;/&gt;</code></li>
</ol>
<h3 id="-">选择器优先级</h3>
<p><code>style &gt; id &gt; class &gt; name</code></p>
<h3 id="-">组合选择器</h3>
<p>共用多个样式代码
<code>selector1, selector2 ... {color:red}</code></p>
<h3 id="-">关联选择器</h3>
<p>逐渐缩小范围，确定被操作元素
<code>parent child {color:red}</code></p>
<h3 id="-">伪类选择器</h3>
<p>要有顺序： lvha</p>
<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* :link, visited,:hover, :active */</span>
<span class="tag">selector</span><span class="pseudo">:active</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value"> red </span></span></span>}
</pre></td></tr></table></figure>

<h2 id="css-">css定位模型</h2>
<ol>
<li>基本流模型</li>
<li>浮动流模型定位：脱离基本流，按照指定方向浮动，
遮挡时文字环绕在周围<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 浮动流 */</span>
<span class="tag">div</span> <span class="rules">{ <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">8</span>px</span></span>;<span class="rule">}</span></span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="css-">css盒模型</h2>
<ul>
<li><p>margin: 外边距</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 上右下左*/</span>
<span class="label">margin:</span> <span class="number">10</span>px <span class="number">0</span>px <span class="number">10</span>px <span class="number">0</span>px
</pre></td></tr></table></figure>
</li>
<li><p>padding: 内边距</p>
</li>
<li>border: 边框<blockquote>
<p>border-width, border-color, border-style</p>
<p>total_width or height = padding + magin + border + width</p>
</blockquote>
</li>
</ul>
<h2 id="-">位置模型</h2>
<p>按照我们指定的位置显示相关的标签</p>
<blockquote>
<p>position: static | absolute | fixed | relative</p>
</blockquote>
<p>relative: 没有脱离基本流，相对于自身原来位置,<em>相对于第一个包含的相对定位或绝对定位</em></p>
<p>static: 默认值，按基本流排列</p>
<p>absolute: 脱离基本流，<em>相对于第一个包含的相对定位或绝对定位</em></p>
<p>fixed:　相对于窗口？</p>
<p>z-index: 决定谁在最顶端</p>
<blockquote>
<p>display: none | block <code>/* 显示隐藏标签 */</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">position</span><span class="value">: absolute;</span> <span class="attribute">top</span><span class="value">:<span class="number">20</span>px;</span> <span class="attribute">left</span><span class="value">:<span class="number">20</span>px;</span> <span class="attribute">z-index</span><span class="value">:<span class="number">100</span>;</span>
</pre></td></tr></table></figure>

<h2 id="demo">DEMO</h2>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>&lt;body&gt;
  &lt;<span class="keyword">div</span>&gt;
    &lt;img src=<span class="string">"xiaobao.png"</span>/&gt;
    Here’s an example <span class="keyword">that</span> shows an <span class="type">application</span> area <span class="keyword">for</span> which Scala <span class="keyword">is</span> particularly well
suited. Consider <span class="keyword">the</span> task <span class="keyword">of</span> implementing an electronic auction service. We use
an Erlang-style actor process model <span class="keyword">to</span> implement <span class="keyword">the</span> participants <span class="keyword">of</span> <span class="keyword">the</span> auction.
Actors are objects <span class="keyword">to</span> which messages are sent. Every actor has a “mailbox” <span class="keyword">of</span> <span class="keyword">its</span> <span class="keyword">in</span>-
coming messages which <span class="keyword">is</span> represented <span class="keyword">as</span> a queue. It can work sequentially <span class="keyword">through</span>
<span class="keyword">the</span> messages <span class="keyword">in</span> <span class="keyword">its</span> mailbox, <span class="keyword">or</span> search <span class="keyword">for</span> messages matching <span class="keyword">some</span> pattern.
For <span class="keyword">every</span> traded <span class="property">item</span> there <span class="keyword">is</span> an auctioneer actor <span class="keyword">that</span> publishes information <span class="keyword">about</span>
<span class="keyword">the</span> traded <span class="property">item</span>, <span class="keyword">that</span> accepts offers <span class="keyword">from</span> clients <span class="keyword">and</span> <span class="keyword">that</span> communicates <span class="keyword">with</span> <span class="keyword">the</span>
seller <span class="keyword">and</span> winning bidder <span class="keyword">to</span> close <span class="keyword">the</span> <span class="keyword">transaction</span>. We present an overview <span class="keyword">of</span> a
simple implementation here.
  &lt;/<span class="keyword">div</span>&gt;
  &lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"div1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
  &lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"div4"</span>&gt;
      &lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"div2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
  &lt;/<span class="keyword">div</span>&gt;

  &lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"div3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;/body&gt;
</pre></td></tr></table></figure>

<figure class="highlight css:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">600</span>px</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> solid <span class="number">9</span>px red</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">11</span>px</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">15</span>px</span></span>;
<span class="rule">}</span></span>
<span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">8</span>px</span></span>;
<span class="rule">}</span></span>
<span class="id">#div1</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> static</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50</span>px</span></span>;
    <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">20</span>px</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> yellow</span></span>;
<span class="rule">}</span></span>
<span class="id">#div2</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span>px</span></span>;
    <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">5</span>px</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> green</span></span>;
<span class="rule">}</span></span>
<span class="id">#div3</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50</span>px</span></span>;
    <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">20</span>px</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> static</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;
<span class="rule">}</span></span>
<span class="id">#div4</span> <span class="rules">{
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50</span>px</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">20</span>px</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> purple</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h1 id="javascript">javascript</h1>
<p><strong>javascript是运行在浏览器中的一门语言, 可以动态操作页面上的元素</strong></p>
<h2 id="-">嵌入浏览器</h2>
<ol>
<li><p>把代码放到script当中</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">“text</span>/<span class="attribute">javascript</span>"&gt;</span><span class="javascript">
<span class="comment">/* code */</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>从外部引入</p>
<figure class="highlight javascript:"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">“text</span>/<span class="attribute">javascript</span>" <span class="attribute">src</span>=<span class="value">"*.js"</span>/&gt;</span><span class="javascript"> <span class="comment">// 外部文件的编码格式，和html的编码格式要一致</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>写在标签里</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript: alert('hello world')"</span>/&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="javascript-">javascript核心语法</h2>
<h3 id="-">定义变量</h3>
<p>变量的类型由给定的值来确定  <code>var name = &quot;string&quot;</code></p>
<p>没赋值，为 undefined. <code>var name; // name为undefined</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>demo = <span class="string">"else"</span> <span class="comment">//不声明亦可, 有什么副作用?</span>
alert(demo)

result=<span class="number">3</span>*<span class="string">"a"</span> <span class="comment">// NaN</span>
result=<span class="number">3</span>*<span class="string">"2"</span> <span class="comment">//  6 , 自动类型转换</span>
<span class="number">0</span> <span class="literal">null</span> <span class="literal">NaN</span>　<span class="literal">undefined</span>　 <span class="comment">// 都表示假，其他表示真</span>
</pre></td></tr></table></figure>

<blockquote>
<p>基本数据类型：string, boolean(true|false), number, null, undefined<br>应用数据类型: object, function</p>
</blockquote>
]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客Day01]]></title>
    <link href="http://yoursite.com/2014/03/30/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day01/"/>
    <id>http://yoursite.com/2014/03/30/传智播客day01/</id>
    <published>2014-03-30T06:58:05.000Z</published>
    <updated>2014-04-06T00:52:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="html">html</h1>
<p>网页 = html + css + javascript</p>
<p>html:封装数据</p>
<p>css:美化数据</p>
<p>javascript: 操作数据</p>
<h2 id="html-">html语言规范</h2>
<p>html 是标记语言，是由标签组成</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="comment">&lt;!-- 注释 --&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="html-">html注释</h3>
<p>只有<!-- -->一种方式，本省就支持多行注释</p>
<h3 id="font-">font标签</h3>
<p><em>如何用eclipse建立静态网页</em></p>
<h4 id="font-">font 更改字体大小和颜色</h4>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">"7"</span>&gt;</span>我<span class="tag">&lt;/<span class="title">font</span>&gt;</span>今天很<span class="tag">&lt;<span class="title">font</span> <span class="attribute">color</span>=<span class="value">"red"</span>&gt;</span>开心<span class="tag">&lt;/<span class="title">font</span>&gt;</span>
</pre></td></tr></table></figure>

<p>size:改变字体大小</p>
<p>color：改变字体颜色</p>
<p>已经逐渐退出历史舞台，被css取代</p>
<h3 id="h-">h标签</h3>
<blockquote>
<p>h1 h2 h3 h4 h5 h6
<code>&lt;h1&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/h1&gt;</code>
<em>会如何显示</em></p>
</blockquote>
<h3 id="-">转义字符</h3>
<p><code>1&lt;bf&gt;2 &lt;12&gt; ab</code></p>
<p><bf>不会显示，<12>会显示</p>
<p> 空格: <code>&amp;nbsp;</code></p>
<h3 id="-">标签种类</h3>
<ol>
<li>有开始和结束标签，开始和结束标签成对出现。作用封装数据。</li>
<li>只有一个标签，没有结束标记。如<code>&lt;/br&gt;</code>,单一功能标签</li>
</ol>
<h3 id="-">列表相关标签</h3>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dl</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span><span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span><span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span><span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dl</span>&gt;</span>
</pre></td></tr></table></figure>

<p>dl:
    define list</p>
<p>dt:
    define title</p>
<p>dd:
    define data</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ol</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">ol</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">li</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>ol type=&quot;a/i/1/I/A&quot;</code></p>
<p>ol: ordered list</p>
<p>ul: unorded list</p>
<p>li: list item</p>
<h3 id="-">图像标签</h3>
<p><code>&lt;img src=&quot;图片地址&quot; alt=&quot;谢谢，无法正常显示&quot;/&gt;</code>
功能性标签，width、height不推荐</p>
<h4 id="-">绝对路径</h4>
<h4 id="-">相对路径</h4>
<h3 id="-table">表格标签table</h3>
<p>表格是由行组成的，行是由列组成</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span> <span class="attribute">width</span>=<span class="value">"400px"</span> <span class="attribute">bordercolor</span>=<span class="value">"red"</span>
       <span class="attribute">cellpadding</span>=<span class="value">"3"</span> <span class="attribute">cellspacing</span>=<span class="value">"5"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="title">caption</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span> <span class="attribute">align</span>=<span class="value">"center"</span> <span class="attribute">colspan</span>=<span class="value">"2"</span>&gt;</span> title1 加粗居中 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> title2 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span> data1 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span> data2 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span> <span class="attribute">rowspan</span>=<span class="value">"2"</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span> datax1 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span> datax2 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<p>th: 加粗居中</p>
<p>rowspan: 跨行</p>
<p>calspan: 跨列</p>
<p>table width: 可设为百分比</p>
<h3 id="-">超链接</h3>
<p><code>&lt;a href=&quot;http://www.163.com&quot;&gt;网易&lt;/a&gt;</code></p>
<p><code>&lt;a href=&quot;javascript:void(0)&quot;&gt;网易&lt;/a&gt;</code></p>
<p><del><code>&lt;a href=&quot;www.163.com&quot;&gt;网易&lt;/a&gt;</code></del></p>
<h4 id="-">协议</h4>
<ul>
<li>mailto</li>
<li>http</li>
<li>thunder</li>
<li>ftp</li>
<li>file</li>
</ul>
<h4 id="-">锚点</h4>
<p><code>&lt;a name=&quot;top&quot;&gt;定义锚点&lt;/a&gt;</code></p>
<p><code>&lt;a href=&quot;#top&quot;&gt;定位锚点&lt;/a&gt;</code></p>
<h3 id="frameset">frameset</h3>
<p>左右结构</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span>
    <span class="tag">&lt;<span class="title">head</span>&gt;</span> <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">frameset</span> <span class="attribute">cols</span>=<span class="value">"200px,"</span> <span class="attribute">noresize</span>=<span class="value">"noresize"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">frame</span> <span class="attribute">src</span>=<span class="value">"relative-path"</span> &gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span> <span class="attribute">target</span>=<span class="value">"right_frame"</span>/&gt;</span>
        <span class="tag">&lt;/<span class="title">frameset</span>&gt;</span>
        <span class="tag">&lt;<span class="title">frame</span> <span class="attribute">name</span>=<span class="value">"righ_frame"</span> <span class="attribute">src</span>=<span class="value">"relative-path"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">frameset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<p>上下，左右结构</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">frameset</span> <span class="attribute">rows</span>=<span class="value">"20%,"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">frame</span>&gt;</span> <span class="tag">&lt;/<span class="title">frame</span>&gt;</span>
    <span class="tag">&lt;<span class="title">frameset</span> <span class="attribute">cols</span>=<span class="value">"20%,*"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">frame</span>&gt;</span> <span class="tag">&lt;/<span class="title">frame</span>&gt;</span>
        <span class="tag">&lt;<span class="title">frame</span>&gt;</span> <span class="tag">&lt;/<span class="title">frame</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">frameset</span>&gt;</span>
<span class="tag">&lt;/<span class="title">frameset</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="iframe">iframe</h3>
<p>iframe: 嵌入一个窗口,用法如frameset</p>
<figure class="highlight html:"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"*"</span> <span class="attribute">name</span>=<span class="value">"*"</span> <span class="attribute">display</span>=<span class="value">"none"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h3 id="form-">form标签</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">""</span> <span class="attribute">method</span>=<span class="value">"post/get"</span>&gt;</span>
    <span class="comment">&lt;!-- 文本框  --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"user"</span>/&gt;</span>
    <span class="comment">&lt;!-- 密码框 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"psy"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"repsy"</span>/&gt;</span>
    <span class="comment">&lt;!-- 单选框，name要同一组 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"sex"</span>/&gt;</span>男
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"sex"</span>/&gt;</span>女
    <span class="comment">&lt;!-- 多选框 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span> <span class="attribute">value</span>=<span class="value">"1"</span>  <span class="attribute">name</span>=<span class="value">"intere"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">value</span>=<span class="value">"2"</span> <span class="attribute">name</span>=<span class="value">"intere"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"intere"</span>/&gt;</span>
    <span class="comment">&lt;!-- 下拉 --&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"none"</span> &gt;</span> 选择省份 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"b"</span> <span class="attribute">selected</span>&gt;</span> 北京 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span>&gt;</span> 上海 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span>&gt;</span> 广州 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="comment">&lt;!-- 多行文本框 --&gt;</span>
    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"30"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
    <span class="comment">&lt;!-- 上传 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span>/&gt;</span>
    <span class="comment">&lt;!-- 隐藏框 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span>/&gt;</span>
    <span class="comment">&lt;!-- 提交 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span>/&gt;</span>
    <span class="comment">&lt;!-- 重置 --&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"reset"</span> <span class="attribute">value</span>=<span class="value">"重置"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>没有name属性，不会提交</code></p>
<p>要有value和name标签</p>
]]></content>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The first blog]]></title>
    <link href="http://yoursite.com/2014/03/29/the-first-blog/"/>
    <id>http://yoursite.com/2014/03/29/the-first-blog/</id>
    <published>2014-03-29T06:51:46.000Z</published>
    <updated>2014-03-29T09:08:09.000Z</updated>
    <content type="html"><![CDATA[<p>子曰：独学而无友，则孤陋而寡闻。我想开一个技术博客的想法由来已久，却一直兴致缺缺，可能跟我自己沉闷的性格有一点关系。
从第一个工作到现在辞职，我看了很多书，专研了很多的技术，从java语言到函数式编程、从eclipse到emacs和vim、从windows到linux...
到头来发现自己所有到知识都只有浅尝辄止，也没有形成一个系统，跟别说再去找一个好工作。希望以后这里可以作为我的一个交流阵地。</p>
<p>子曰：天何言哉？四时行焉，百物生焉，天何言哉？老子又说：大音稀声。庄子还说：天地有大美而不言，四时有明法而不议，万物有成理而不说。
一直以来，我都把少说当成自己的生活态度，以致我缺少必要的说话锻炼，以及语言思维锻炼，看来只有先成魔才能成佛。
这种“不言”到艺术，也只能是辩者的专利了。有言道“知行合一”，我并不懂“知行合一”的真实意义，
但是根据我浅显的理解，可以作为这个博客的指导思想。</p>
<p>作为一个技术人员，写博客是一个锻炼，希望我把平常学到、用过到技术一一记录，也希望这也是对我从前从网络获取知识的一个反馈，
也希望这个博客能鞭策我以后勤勤勉勉地学习。</p>
]]></content>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
