<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[Hello World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-05-12T13:11:11.164Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[传智播客day28-struts]]></title>
    <link href="http://zhpooer.github.io/2014/05/12/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day28-struts/"/>
    <id>http://zhpooer.github.io/2014/05/12/传智播客day28-struts/</id>
    <published>2014-05-12T01:14:18.000Z</published>
    <updated>2014-05-12T09:15:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="servlet-">Servlet 缺点</h1>
<ol>
<li>写一个 servelt 需要在 web.xml 中配置8行, 如果一个系统中servlet很多, 会导致
web.xml中文件中的内容多多</li>
<li>在项目中很多人编辑一个 web.xml 文件会出现文件冲突</li>
<li>在一个 servlet 中方法的入口只有一个, 如果在一个 servlet 中写很多方法, 这些方法
应该传递参数, 根据每次请求参数不一致来判断执行哪个方法</li>
<li>servlet 中的方法都有两个参数 request,response,这两个参数具有严重的容器依赖性,
所以在servlet不能单独测试</li>
<li>如果在表单中的元素很多, 在servlet 中要想获取表单的数据,
那么在servlet的方法必须调用大量的 <code>request.getParameter()</code></li>
<li>在一个servlet属性中声明一个数据, 会存在线程安全问题</li>
</ol>
<p>优点: 因为是最底层的mvc, 所以效率比较高</p>
<p>很多项目中对servlet 进行了重构, 重构目标是:</p>
<ol>
<li>更有利于团队协作开发</li>
<li>把servlet的缺点一次进行修改</li>
</ol>
<h1 id="-servlet">重构 Servlet</h1>
<p>在 web.xml 文件中只写一个servlet, 中控servlet</p>
<p>model 层为action</p>
<p>在中控 servlet 中利用java 的反射机制动态调用该action</p>
<h2 id="-">重构效果</h2>
<p>只写一个servlet</p>
<p>只需要在 web.xml 配置一个 servlet</p>
<h2 id="-">步骤</h2>
<ul>
<li><p>创建一个servlet</p>
<p>  需求: 访问 <code>http://localhost:8080/userAction.action</code>, 调用 <code>UserAction.execute()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">listener</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>ActionListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
<span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>...<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-parttern</span>&gt;</span>*.actions<span class="tag">&lt;/<span class="title">url-parttern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>写一个监听器</p>
<p>  写一个监听器, 在该监听器中写一个Map, map中的key存放url的action中的部分: userAction, 
  value 存放对应类的字符串形式, 把该map放入到application域中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span>(ServletContextEvent e) {
        e.getSevletContext().setAttribute(<span class="string">"actions"</span>, <span class="keyword">null</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span>(ServletContextEvent e) {
       Map map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();
       map.put(<span class="string">"userAction"</span>, <span class="string">"cn.itcast.Action.UserAction"</span>);
       e.getSevletContext().setAttribute(<span class="string">"actions"</span>, map);
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>中控 servlet 执行</p>
<ol>
<li>把url中的urserAction做一个解析</li>
<li>提取 application 域中的map, 根据 userAction key, 找到value</li>
<li>执行 <code>UserAction.execute(request, response)</code></li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp){
        String fullActionName = req.getRequestURI().subString(req.getContextPath().length); <span class="comment">// userAction.action</span>
        String actionName = fullActionName.replace(<span class="string">"^(.*)\\.action"</span>, <span class="string">"$1"</span>);
        Map actionMap = getServletContext().getAttribute(<span class="string">"actions"</span>);
        String actionClassName = actionMap.get(actoinName);
        String clazz = Class.forName(actionClassName);
        Method m = clazz.getMethod(<span class="string">"execute"</span>, HttpServletRequest.class, HttpServletResponse.class);
        String result = method.invoke(clazz.newInstance(), req, resp); <span class="comment">// 返回要转发地址</span>
        req.getRequestDispatcher(result).forward(req, resp);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span>(req, resp) { doGet(req, resp); }
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> {</span>
    <span class="keyword">public</span> string <span class="title">execute</span>(HttpServletRequest res, HttpServletResponse resp) {
        <span class="keyword">return</span> <span class="string">"index.jsp"</span>;
    }
}
</pre></td></tr></table></figure>

<h1 id="servlet-">Servlet 进化史</h1>
<ol>
<li>03-05, mvc框架是 servlet</li>
<li>apache 的 struts1,实现松耦合 , 没由解决容器依赖性问题</li>
<li>webwork, 让action没有任何容器依赖性, 把文件上传, 检验工作和保存用户的工作松耦合</li>
<li>struts 和 webwork整合成struts2</li>
</ol>
<h1 id="struts-helloworld">Struts HelloWorld</h1>
<p>导入包:</p>
<ul>
<li>freemarker, 模板</li>
<li>ognl, 表达式, 为了显示存储在数据, 功能类似于el表达式</li>
<li>struts2-core, struts核心包</li>
<li>xworks-core, web-work核心包</li>
</ul>
<ol>
<li><p>编写Web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>&lt;<span class="built_in">filter</span>&gt;
    &lt;<span class="built_in">filter</span>-name&gt;struts2 &lt;/<span class="built_in">filter</span>-name&gt;
    &lt;<span class="built_in">filter</span>-<span class="keyword">class</span>&gt;
        org.apache.struts2.dispatcher.ng.<span class="built_in">filter</span>.strutsPrepareAndExecuteFilter
    &lt;/<span class="built_in">filter</span>-<span class="keyword">class</span>&gt;
&lt;/<span class="built_in">filter</span>&gt;
&lt;<span class="built_in">filter</span>-mapping&gt;
    &lt;<span class="built_in">filter</span>-name&gt;struts2 &lt;/<span class="built_in">filter</span>-name&gt;
    &lt;url-pattern&gt;/* &lt;/url-pattern&gt;
&lt;/<span class="built_in">filter</span>-mapping&gt;
</pre></td></tr></table></figure>
</li>
<li><p>编写Action</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> HelloWorldAction {
    <span class="keyword">public</span> String <span class="title">execute</span>(){
        println(<span class="string">"hello"</span>)
        <span class="keyword">return</span> <span class="string">"index"</span>;
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>写配置文件, 在src下面写一个 struts.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">struts</span>&gt;</span>
    <span class="comment">&lt;!-- package 功能是用来管理 action 的, 一般情况下package是针对模块划分的 --&gt;</span>
    <span class="comment">&lt;!-- name 为 package 的名称, 是唯一的 --&gt;</span>
    <span class="comment">&lt;!-- extends 实际上是把 package 中 name为 *struts-default* 包中所有的功能继承下来 --&gt;</span>
    <span class="comment">&lt;!-- namespace 设置访问的相对路径, 和 配置 action 转向到jsp页面时的查找路径--&gt;</span>
    <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"helloworld"</span> <span class="attribute">namespace</span>=<span class="value">"/"</span> <span class="attribute">extends</span>=<span class="value">"struts-default"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"helloworldAction"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.action.HelloWorldAction"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">result</span> <span class="attribute">name</span>=<span class="value">"index"</span>&gt;</span> index.jsp <span class="tag">&lt;/<span class="title">result</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">package</span>&gt;</span>
<span class="tag">&lt;/<span class="title">struts</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="struts2-">struts2 好处</h2>
<p>web.xml 中只有一个过滤器, 不用繁琐的配置</p>
<p>action就是一个简单的javabean, 与servlet容器没有任何依赖</p>
<p>多出了一个struts.xml, 配置Action的行为</p>
<h1 id="-">配置文件解析</h1>
<p>在struts过滤器初始化时, 加载了几个配置文件
<code>struts-default.xml(在struts2核心包的根目录下)</code> <code>struts.xml(供程序员使用)</code> <code>struts-plugins.xml</code></p>
<p>struts 先加载 <code>struts-default.xml</code>, 后加载 <code>struts.xml</code>, 如果出现相同元素, 后加载覆盖先加载</p>
<p><code>package</code> 分模块管理action,</p>
<ul>
<li>属性 <code>name</code>, 包名字, 值唯一</li>
<li><p>属性 <code>extends</code>, 用法 <code>extends=&quot;struts-default&quot;</code>,
把 package 中 name为 <em>struts-default</em> 包中所有的功能继承下来</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 继承了 helloworld --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"childOfHello"</span> <span class="attribute">extends</span>=<span class="value">"helloworld"</span>&gt;</span> <span class="tag">&lt;/<span class="title">package</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>属性<code>namespace</code>, 与url相关,  如果 <code>namespace=&quot;/base&quot;</code>,
则要访问 <code>${contextPath/base/helloWorldaction.action}</code>, 但是 <code>${contextPath/base/a/helloWorldAction.action}</code>也能访问</p>
<ul>
<li>查找规则, 先在 <code>/base/a</code> 下找, 然后在 <code>/base</code> 下找</li>
<li>如果<code>Action.execute()</code>返回了<code>&quot;index&quot;</code>, 则struts 会找根据配置文件在<code>/base/</code>文件夹下查找<code>index.jsp</code></li>
</ul>
</li>
<li>标签 <code>&lt;result name=&quot;name&quot; type=&quot;&quot;&gt;&lt;/result&gt;</code>, 结果集<ol>
<li><code>Action.execute</code> 返回一个字符串, 返回的字符串要和struts的配置文件中的<code>result</code>标签的<code>name</code>属性值匹配</li>
<li><code>name</code>属性, 可以省略, 默认为 <em>&quot;success&quot;</em></li>
<li><code>type</code>属性, 结果集类型, 可省略, 默认为值为 &quot;dispatcher&quot;, 在<code>struts-default.xml</code> 定义 <code>&lt;result-type name=&quot;dispatcher&quot;/&gt;</code></li>
</ol>
</li>
<li><code>include</code> 标签, 保证可以存在很多个 struts 配置文件<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">struts</span>&gt;</span> <span class="tag">&lt;<span class="title">include</span> <span class="attribute">file</span>=<span class="value">"included-struts.xml"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">struts</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="struts-action-">struts Action 配置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">opensymphony</span>.<span class="title">xwork2</span>.<span class="title">Action</span> {</span>
    <span class="keyword">public</span> String <span class="title">execute</span>(){
        <span class="keyword">return</span> SUCCESS; <span class="comment">// Action 中定义的常量, 匹配配置文件 struts.xml 中的 action.name</span>
    }
}
<span class="comment">// 方式二</span>
<span class="comment">// 封装了一些常用功能, 如国际化 表单验证 等功能</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAction</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">opensymphony</span>.<span class="title">xwork2</span>.<span class="title">ActionSupport</span> {</span>
    <span class="keyword">public</span> String <span class="title">execute</span>() {
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 方式三 --&gt;</span>
<span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"anyName"</span>&gt;</span> <span class="comment">&lt;!-- 没有写 class, 默认执行 com.opensymphony.xwork2.ActionSupport --&gt;</span>
    <span class="tag">&lt;<span class="title">result</span>&gt;</span> indelx.jsp <span class="tag">&lt;/<span class="title">result</span>&gt;</span>
<span class="tag">&lt;/<span class="title">action</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">通配符映射</h2>
<p>在配置文件的 Action 标签中, 可以配置 action 被执行行为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 方式一 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m1/userAction.action 时,默认会调用 UserAction 的 saveUser 方法 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m1"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"userAction"</span> <span class="attribute">method</span>=<span class="value">"saveUser"</span> <span class="attribute">class</span>=<span class="value">"**.UserAction"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>

<span class="comment">&lt;!-- 方式二 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m2/userAction!deleteUser.action 时,
     会调用 UserAction 的 deleteUser 方法 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m2"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"userAction"</span> <span class="attribute">class</span>=<span class="value">"**.UserAction"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>

<span class="comment">&lt;!-- 方式三 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m3/a_add.action 或 ${contextPath}/m3/**_add.action 时,
     都会调用 UserAction 的 saveUser 方法 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m3"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"*_add"</span> <span class="attribute">method</span>=<span class="value">"saveUser"</span> <span class="attribute">class</span>=<span class="value">"**.UserAction"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>

<span class="comment">&lt;!-- 方式四 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m4/saveUser_add.action 时,
     会调用 UserAction 的 saveUser 方法 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m4"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"*_add"</span> <span class="attribute">method</span>=<span class="value">"{1}"</span> <span class="attribute">class</span>=<span class="value">"**.UserAction"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>

<span class="comment">&lt;!-- 方式五 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m5/UserAction_pattern.action 时,
     会调用 UserAction 的 pattern 方法 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m5/PersonAction_pattern.action 时,
     会调用 PersonAction 的 pattern 方法 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m5"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"*_pattern"</span> <span class="attribute">method</span>=<span class="value">"pattern"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.{1}"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>

<span class="comment">&lt;!-- 方式六 --&gt;</span>
<span class="comment">&lt;!-- 访问 ${contextPath}/m6/UserAction_saveUser.action 时,
     会调用 UserAction 的 saveUser 方法, 并返回 saveUser.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m6"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"UserAction_*"</span> <span class="attribute">method</span>=<span class="value">"{1}"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.UserAction"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>{1}.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>
<span class="comment">&lt;!-- 变体 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"method"</span> <span class="attribute">namespace</span>=<span class="value">"/m6"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"*_*"</span> <span class="attribute">method</span>=<span class="value">"{2}"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.{1}"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span>&gt;</span>{2}.jsp<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>通配的程度越高, 匹配的范围越大, 越容易出问题</strong></p>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day27-estore4]]></title>
    <link href="http://zhpooer.github.io/2014/05/11/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day27-estore4/"/>
    <id>http://zhpooer.github.io/2014/05/11/传智播客day27-estore4/</id>
    <published>2014-05-11T01:01:06.000Z</published>
    <updated>2014-05-11T07:39:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">订单的删除</h1>
<p>在订单未付款的状态下, 用户可以去取消订单
注意在 OrderService 要加入事务控制, 参考 <a href="/2014/04/26/传智播客day20-orm简介/#-">orm简介</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">// OrderCancelServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp) {
    <span class="comment">// 获取要取消的订单</span>
    String orderid = req.getParameter(<span class="string">"orderid"</span>);
    orderService.cancelOrder(orderid);
    resp.sendRedirect(<span class="string">"/orderSearch"</span>);
}

<span class="comment">// OrderService</span>
<span class="keyword">public</span> <span class="keyword">class</span> OrderService {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelOrder</span>(String orderid){
        orderDao.deleteOrderItem(orderid);
        orderDao.deleteOrder(orderid);
    }
}

<span class="comment">// OrderDao </span>
<span class="keyword">public</span> <span class="keyword">class</span> OrderDao {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOrder</span>(String orderid) {
        String sql = <span class="string">"delete from orderitem where order_id=?"</span>;
        queryRunner.update(conn, sql, orderid);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOrderItem</span>(String orderid) {
        String sql = <span class="string">"delete from orders where id=?"</span>;
        queryRunner.update(conn, sql, orderid);
    }
}
</pre></td></tr></table></figure>

<h1 id="-">定时清理未支付订单(任务调度)</h1>
<p>监听器 Listener</p>
<p>定时器</p>
<ol>
<li><code>java.util.Timer</code> 结合 <code>java.util.TimerTask</code></li>
<li><code>java.util.concurrent.ScheduledExcutorService</code></li>
<li><code>Quantz</code> <strong>框架</strong></li>
</ol>
<p>功能需求: 用户生成订单后,  有效支付时间24小时, 如果24小时不支付,
系统自动清理订单</p>
<h2 id="-">启动定时任务</h2>
<p><code>ServletContextListener</code> 中启动定时任务</p>
<p><code>Timer</code> API</p>
<ul>
<li><p><code>Timer.schedule(TimerTask task, Date firstTime, long period)</code></p>
</li>
<li><p><code>Timer.schedule(TimerTask task, long delay, long period)</code></p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">// cn.itcast.estore.web.Listener</span>
<span class="comment">// 清理24小时未付款的订单</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCleanListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span>{</span>
    Timer timer = <span class="keyword">null</span>;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(){
        Timer timer = <span class="keyword">new</span> timer();
        timer.schedule(<span class="keyword">new</span> TimerTask(){
            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
                orderService.cleanUnPayOrders();
            }
        }, <span class="number">0</span>, <span class="number">1000</span>l*<span class="number">60</span>*<span class="number">30</span>); <span class="comment">// 每隔30分钟执行一次, 加上 L 防止越界</span>
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>(){
        <span class="keyword">if</span>(timer!=<span class="keyword">null</span>) timer.cancel();
    }
}

<span class="comment">// OrderService</span>
<span class="keyword">public</span> <span class="keyword">void</span> OrderService {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanUnPayOrders</span>() {
        <span class="comment">//查询所有订单</span>
        List&lt;Order&gt; orders = orderDao.findAllOrders();
        <span class="keyword">for</span>(Order order : orders) {
            <span class="keyword">if</span>(order.getPayState == <span class="number">0</span> && System.currentTimeMillis()-order.getCreatetime().getTime() &gt;= <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>) {
                cancelOrder(order.getId());
            }
        }
    }
}
</pre></td></tr></table></figure>

<h1 id="-">系统权限管理</h1>
<ol>
<li>URL 级别权限控制</li>
<li>方法级别权限控制 (一次请求会执行多个方法, 注解+动态代理+反射)</li>
</ol>
<p>引入配置文件进行权限控制</p>
<ul>
<li>系统用户 admin, normal</li>
<li>存在三种页面: 未登录可以访问, user 可以访问, admin 可以访问</li>
<li><p>配置两个文件</p>
<ul>
<li><p><code>admin.conf</code> 需要管理员才能访问</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>/active
/addCart
/delcartProduct
/orderAdd
/orderCancel
/pay
/updateCarrtProductNum
/cart<span class="preprocessor">.jsp</span>
/order_add<span class="preprocessor">.jsp</span>
</pre></td></tr></table></figure>
</li>
<li><p><code>user.conf</code> 用户才能访问</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>/orderCancel
/order<span class="preprocessor">.jsp</span>
/product_add<span class="preprocessor">.jsp</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过过滤器来进行权限控制</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> {</span>
    <span class="keyword">private</span> List&lt;String&gt; adminPaths = <span class="keyword">new</span> ArrayList&lt;String&gt;;
    <span class="keyword">private</span> List&lt;String&gt; userPath = <span class="keyword">new</span> ArrayList&lt;String&gt;;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(FilterConfig filterConfig) {
        String adminFile = filterConfig.getServletContext().getRealPath(<span class="string">"/WEB-INF/classes/admin.conf"</span>);
        String userFile = getClass().getResource(<span class="string">"/user.conf"</span>).getFile();
        BufferedReader  r1 = <span class="keyword">new</span> BufferedReader(FileReader(adminFile));
        BufferedReader  r2 = <span class="keyword">new</span> BufferedReader(FileReader(userFile));
        <span class="keyword">while</span>((tmp=r1.readLine())!=<span class="keyword">null</span>) {
            adminPaths.add(tmp);
        }
        r1.close();
        <span class="keyword">while</span>((tmp=r2.readLine())!=<span class="keyword">null</span>) {
            userPaths.add(tmp);
        }
        user.close();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(req, resp, chain) {
        <span class="comment">// 字段访问资源路径是不是在admin.con或者user.con配置,</span>
        String uri = req.getRequestURI();
        String reqPath = uri.subString(req.getContextPath().length);
        <span class="comment">// 如果 存在于 admin 或者 user 需要登陆, 获取当前登陆 角色,</span>
        <span class="comment">// 判断对应访问是否包含当前资源访问路径</span>
        <span class="keyword">if</span>(adminPaths.contains(reqPath) || userPaths.contains(reqPath)){
            User user = req.getSession().getAttribute(<span class="string">"user"</span>);
            <span class="keyword">if</span>(user==<span class="keyword">null</span>){
                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足, 请先登陆"</span>);
            } <span class="keyword">else</span> {
                <span class="keyword">if</span>(user.getRole().equals(<span class="string">"admin"</span>)) {
                    <span class="keyword">if</span>(adminPaths.contains(reqPath)){
                        chain.doFilter(req, resp);
                    } <span class="keyword">else</span> {
                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足"</span>);
                    }
                } <span class="keyword">else</span> <span class="keyword">if</span>(user.getRole().equals(<span class="string">"user"</span>)) {
                    <span class="keyword">if</span>(userPath.contains(reqPath)){
                        chain.doFilter(req, resp);
                    } <span class="keyword">else</span> {
                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不足"</span>);
                    }
                }
            }
        } <span class="keyword">else</span> {
            <span class="comment">// 如果不存在, 不需要登陆, 直接放行</span>
            chain.doFiler(req, resp);            
        }
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>(){
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">异常页面的编写</h1>
<p>Servlet : 配置web.xml 指定的异常处理页面</p>
<p>JSP: <code>&lt;%@page errorPage=&quot;...&quot;%&gt;</code>, 解决 500</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">&lt;!-- web.xml 配置异常处理 --&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span> 500 <span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/500.jsp <span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span> 404 <span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span>/404.jsp <span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
</pre></td></tr></table></figure>

<ul>
<li><p>404.jsp, 自动跳转到系统主页面</p>
<ol>
<li><code>response.setHeader(&quot;refresh&quot;, &quot;时间(秒);url=/&quot;);</code></li>
<li><code>&lt;meta&gt;</code> 标签<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"refresh"</span> <span class="attribute">content</span>=<span class="value">"200;url=www.google.com"</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>500页面, 在错误页面, 获取 异常 信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;<span class="variable">%page</span> isErrorPage=<span class="string">"true"</span><span class="variable">%&gt;</span>

&lt;<span class="variable">%=</span>exception.getClass().getName()<span class="variable">%&gt;</span>
&lt;<span class="variable">%=</span>exception.getMessage()<span class="variable">%&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">日志记录</h1>
<p>在软件开发时 或者 项目后期运维时, 用户系统信息记录到指定的文件中</p>
<ul>
<li>用户调试</li>
<li>根据日志信息修复系统Bug</li>
</ul>
<h2 id="-">日志技术选型</h2>
<ul>
<li>JDK Logging, <code>java.util.logging</code></li>
<li>Log4j 日志技术, Apache后来运维, 第三方日志框架, <code>log4j1.x</code>和<code>log2.x</code><ul>
<li>主流: log4j1.2.x</li>
</ul>
</li>
<li>commons-logging(Apache), JCL, 主要是为了统一不同的日志实现框架<ul>
<li>commons-logging + log4j</li>
<li>commons-logging + jdk loggin</li>
<li>开发人员只需要学习 commongs-logging 接口, 就集成不同日志实现技术(最新的struts2, spring 使用 commons-logging)</li>
</ul>
</li>
<li>slf4j (Simple Logging Facade for Java), 作用类似 commons-logging, 起到同一日志接口实现<ul>
<li>Hibernate 使用 slf4j 日志接口</li>
</ul>
</li>
</ul>
<h2 id="-log4j">日志实现技术 log4j</h2>
<p>区分: 日志技术和 System.out</p>
<ul>
<li>System.out将信息打印到控制台, 有些服务器, 将控制台所有信息记录日志文件</li>
<li>日志技术, 向日志文件记录日志, 分等级记录, 通过控制等级, 控制不同级别日志输出</li>
</ul>
<h2 id="-log4j">编写Log4j</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> test不写日志文件() {
    <span class="comment">// 1. 需要创建日志记录器</span>
    Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass());
    <span class="comment">// 2. 指定记录器的输出源(日志输出到哪里去)</span>
    BasicConfigurator.configure(); <span class="comment">//将日志输出到控制台</span>
    <span class="comment">// 3. 记录日志(提供6个日志级别)</span>
    <span class="comment">// 在输出日志时, 只会输出比指定日志级别更高日志级别</span>
    logger.setLevel(Level.ERROR);
    <span class="comment">// 默认日志级别是Debug</span>
    <span class="comment">// fatal error warn</span>
    <span class="comment">// info debug trace</span>
    logger.debug(<span class="string">"调试信息"</span>);
}
</pre></td></tr></table></figure>

<h2 id="-log4j-">编写Log4j配置文件</h2>
<ul>
<li>xml 格式: log4j.xml</li>
<li>properties 格式: log4j.properties(最常见)<ul>
<li>在src下新建 log4j.properties 配置文件</li>
<li>配置记录器 logger (采用那个输出源, 疏忽日志级别)</li>
<li>配置输出源 Appender (输出到哪里)<ul>
<li>org.apache.log4j.ConsoleAppender(控制台) </li>
<li>org.apache.log4j.FileAppender(文件) </li>
<li>org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件) </li>
<li>org.apache.log4j.RollingFileAppender (文件到达指定大小时产生一个新文件) </li>
<li>org.apache.log4j.WriterAppender (将日志信息以流格式发送到任何地方) </li>
</ul>
</li>
<li>配置布局 layouts (输出格式)<ul>
<li>org.apache.log4j.HTMLLayout （以HTML表格形式布局）</li>
<li>org.apache.log4j.PatternLayout （可以灵活地指定布局模式）<ul>
<li>%m 输出代码中指定的消息</li>
<li>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</li>
<li>%r 输出自应用启动到输出该log信息耗费的毫秒数</li>
<li>%c 输出所属的类目，通常就是所在类的全名</li>
<li>%t 输出产生该日志事件的线程名</li>
<li>%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”</li>
<li>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921</li>
<li>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)基本应用</li>
</ul>
</li>
<li>org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）</li>
<li>org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等信息）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>log4j<span class="preprocessor">.rootLogger</span>(默认记录级别) = DEBUG, A1 <span class="preprocessor"># 输出级别 + 输出源...</span>
log4j<span class="preprocessor">.logger</span>.包名(包记录级别) = 输出级别 , 输出源<span class="number">1</span> , 输出源<span class="number">2</span>

<span class="preprocessor"># appender</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.A</span>1 = org<span class="preprocessor">.apache</span><span class="preprocessor">.log</span>4j<span class="preprocessor">.ConsoleAppender</span>

<span class="preprocessor"># layout</span>
<span class="preprocessor"># log4j.appender.输出源名称.layout = 布局实现类</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.A</span>1<span class="preprocessor">.layout</span> = org<span class="preprocessor">.apache</span><span class="preprocessor">.log</span>4j<span class="preprocessor">.PatternLayout</span> <span class="preprocessor"># 使用</span>
<span class="preprocessor"># 自定义输出格式</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.A</span>1<span class="preprocessor">.layout</span><span class="preprocessor">.ConversionPattern</span> = %-<span class="number">4</span>r [%t] %-<span class="number">5</span>p %c %<span class="built_in">x</span> - %m%n

<span class="preprocessor"># 输出到文件</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.FILE</span> = org<span class="preprocessor">.apache</span><span class="preprocessor">.log</span>4j<span class="preprocessor">.FileAppender</span>
log4j<span class="preprocessor">.appender</span><span class="preprocessor">.FILE</span><span class="preprocessor">.File</span> = /var/log
</pre></td></tr></table></figure>

<h1 id="-log4j">在项目代码中配置 Log4j</h1>
<ol>
<li><p>定义记录器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(OrderService.class);
</pre></td></tr></table></figure>
</li>
<li><p>在程序中使用六个级别方法, 记录日志<br>常用级别: ERROR, WARN, INFO, DEBUG</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>LOG<span class="preprocessor">.error</span>(e<span class="preprocessor">.getMessage</span>(), e)<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-todo">项目TODO</h1>
<ul>
<li>分页控制, 提取标签</li>
<li>配置多个tomcat运行, 集群处理(Apache + tomcat)</li>
<li>缓存优化, 静态缓存</li>
<li>Tomcat配置 gzip 压缩<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">compress</span>=<span class="value">"on"</span> <span class="attribute">compressableMimeType</span>=<span class="value">"text/html, text/css"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Connector</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day26-estore3]]></title>
    <link href="http://zhpooer.github.io/2014/05/09/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day26-estore3/"/>
    <id>http://zhpooer.github.io/2014/05/09/传智播客day26-estore3/</id>
    <published>2014-05-09T01:05:29.000Z</published>
    <updated>2014-05-09T10:34:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">修改购物车</h1>
<p>解决页面 中数字显示, 保留位数问题</p>
<p>服务器Java代码解决方案<code>java.text.NumberFormat</code></p>
<p>页面中解决方案: jstl 提供的 fmt 标签库 (用于国际化显示, 和格式化显示)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">"....jstl/fmt"</span> frefix=<span class="string">"c"</span> %&gt;</span>
<span class="tag">&lt;<span class="title">fmt:formatNumber</span> <span class="attribute">value</span>=<span class="value">"${0.111111}"</span> <span class="attribute">maxFractionDigits</span>=<span class="value">"2"</span>
                  <span class="attribute">minFractionDigits</span>=<span class="value">"2"</span> /&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">修改购物车商品数量</h2>
<p>修改数量后, 通过 js 的 blur 事件, 提交请求给服务器,
服务器根据请求修改购物车中的商品数量</p>
<ol>
<li>为页面添加 onblur 事件, 函数接受商品编号和修改后的数量</li>
<li>判断修改后的数量, 必须为正整数(不能是字母, 负数, 小数, 允许为0)</li>
<li>提交请求给服务器, 根据商品编号, 修改 Session 的购物车对象商品对应的数量.
如果修改后的数量为0, 删除购物商品</li>
<li>修改数量后, 回到购物车页面</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"${entry.value}"</span>
       <span class="attribute">onblur</span>=<span class="value">"changeBuyNum(${entry.key.id}, ${entry.key.pnum}, this.value);"</span>/&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span> <span class="title">changeBuyNum</span><span class="params">(id, maxnum, num)</span>{</span>
    <span class="comment">// 对修改后的合法性, 进行校验</span>
    <span class="keyword">var</span> regex = <span class="regexp">/^[0-9]+$/</span>
    <span class="keyword">if</span>(regex.test(num)) {
        <span class="keyword">if</span>(num&gt;maxnum) {
            <span class="comment">// 存货不足</span>
            alert(<span class="string">"商品库存数量不能草果库存数量"</span>)
        } <span class="keyword">else</span> {
            window.locatioin.href=<span class="string">"${pageContext.request.contextPath}/"</span> + 
            +<span class="string">"upldateCartItem?id="</span> + id + <span class="string">"&num="</span>  + num
        }
    } <span class="keyword">else</span> {
        alert(<span class="string">"请输入正确格式"</span>)
    }
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// UpdateCartItemServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp){
    <span class="keyword">int</span> id = Integer.parseInt(req.getParameter(<span class="string">"id"</span>));
    <span class="keyword">int</span> num = Integer.parseInt(req.getParameter(<span class="string">"num"</span>));
    
    <span class="comment">// 从session获取购物车对象</span>
    Map cart = req.getSession.getAttribute(<span class="string">"cart"</span>);
    
    <span class="comment">// 服务器校验商品数量(根据id查询商品数量)</span>
    ProductService productService = <span class="keyword">new</span> ProductService();
    <span class="keyword">int</span> num = productService.findProductNumById(id);
    <span class="keyword">if</span>(num&gt;pnum) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"库存不足"</span>);
    }

    <span class="comment">// 修改数量</span>
    Product product = <span class="keyword">new</span> Product();
    product.setId(id);
    <span class="keyword">if</span>(num==<span class="number">0</span>){
        cart.remove(product);
    } <span class="keyword">else</span> {
        cart.put(product, num); <span class="comment">// key不会覆盖, value覆盖</span>
    }
    resp.sendRedirect(<span class="string">"/cart.jsp"</span>);
}

<span class="comment">// ProductService</span>
<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findProductNumById</span>(<span class="keyword">int</span> id){
    <span class="keyword">return</span> productDao.findProductNumById(id);
}

<span class="comment">// ProductDao</span>
<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findProductNumById</span>(<span class="keyword">int</span> id){
    String sql = <span class="string">"select pnum from project where id = ?"</span>;
    <span class="keyword">return</span> queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler(<span class="string">"pnum"</span>), id);
}
</pre></td></tr></table></figure>

<h2 id="-">商品删除</h2>
<ol>
<li>在页面中显示购物车信息时, 每个商品后, 提供删除按钮</li>
<li>点击删除按钮, 将不需要购买商品编号, 发送到服务器</li>
<li>根据商品编号, 从Session的cart对象, 移除商品<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"deleteCartItem?id=${entry.key.id}"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// DelCartItemServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
    <span class="keyword">int</span> id = req.getParameter(<span class="string">"id"</span>);
    Map cart = req.getSession().getAttribute(<span class="string">"cart"</span>);

    Product product = <span class="keyword">new</span> Product();
    product.setId(id);

    <span class="comment">// 因为重写的hashCode和equals</span>
    cart.remove(product);
    <span class="comment">// 跳转回购物车页面</span>
    resp.sendRedirect(<span class="string">"/cart.jsp"</span>);
}
</pre></td></tr></table></figure>

<h1 id="-">订单生成</h1>
<p>在购物车选好后, 点击结算按钮, 跳转到订单生成页面</p>
<ol>
<li>在生成订单页面中, 生成真实的页面信息, 参考 cart.jsp 实现</li>
<li>产生订单</li>
</ol>
<p>分析数据变化:</p>
<ul>
<li>Order订单表: 存放订单整体信息(总金额, 创建时间, 支付状态, 收货人信息)</li>
<li>OrderItem 订单项目表, 存放每个商品购买几件</li>
</ul>
<p>生成订单页面, 需要提交收货人信息 和 订单总金额 到服务器<br>订单总金额用<code>&lt;input type=&#39;hidden&#39; value=&quot;totalprice&quot; name=&quot;totalprice&quot;/&gt;</code>来存放</p>
<h2 id="-">服务器代码</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">// OrderAddServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> doGet(){
    <span class="comment">// 将请求数据封装到model对象中</span>
    Order <span class="keyword">order</span> = <span class="keyword">new</span> Order();
    BeanUtils.populate(<span class="keyword">order</span>, req.getParameter());

    <span class="comment">// 生成订单号</span>
    DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);
    String id = <span class="string">"estore_"</span> + dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"_"</span> + UUID;
    <span class="keyword">order</span>.setId(id);

    <span class="keyword">order</span>.sestPaystate(<span class="number">0</span>);
    <span class="keyword">order</span>.setCreateTime(<span class="keyword">new</span> TimeStamp(System.currentTimeMillis()));

    User user = req.getSession().getAttribute(<span class="string">"user"</span>);
    <span class="keyword">order</span>.setUser_id(user.getId());

    List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> ArrayList&lt;OrderItem&gt;();
    <span class="comment">// 封转订单项项目</span>
    Map cart = req.getSession.getAttribute(<span class="string">"cart"</span>);
    <span class="keyword">for</span> (entry &lt;- cart.entrySet()) {
        OrderItem orderItem = <span class="keyword">new</span> OrderItem();
        orderItem.setOrder_id(orderid);
        orderItem.setProduct_id(entry.getKey().getId());
        orderItem.setBuynum(entry.getValue);
        orderItems.add(orderItem);
    }
    orderService.addOrder(<span class="keyword">order</span>, orderItems);

    req.getSession().removeAttribue(<span class="string">"cart"</span>);
}

<span class="comment">// OrderServiceImpl</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">OrderService</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> addOrder(Order <span class="keyword">order</span> , List&lt;OrderItem&gt; orderItems){
        orderDao.insert(<span class="keyword">order</span>, orderItems);
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDaoImpl</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">OrderDao</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> insert(Order <span class="keyword">order</span> , List&lt;OrderItem&gt; orderItems){
        String orderSql = <span class="string">"insert into orders values(?...)"</span>;
        queryRunner.update(conn, orderSql, <span class="keyword">order</span>.getId);
        <span class="comment">// 保存订单项数据</span>
        String orderitemSql = <span class="string">"insert into orderitem values(?,?,?)"</span>
        List&lt;Order []&gt; argList = <span class="keyword">new</span> ArrayList&lt;Order[]&gt;();
        <span class="keyword">for</span>(OrderItem orderItem : orderItems){
            <span class="comment">// 用 batch, 先将参数保存到二维数组</span>
            Object[] orderitemArgs = {orderItem.getOrder_id(), orderItem.getProduct_id(), any}
            argList.add(orderitemArgs);
        }
        <span class="comment">// 将多种参数, 一次提交给服务器, 提高效率</span>
        QueryRunner.update(conn, orderitemSql, argList.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>][]));
    }
}
</pre></td></tr></table></figure>

<p>tips: <code>Connection.setSavePoint()</code> 以及 <code>Connection.commit()</code> 要放在 错误处理里</p>
<h3 id="tips-">tips: 回滚点</h3>
<p>回滚点, 可以在事务执行过程中进行记录, 从而在回滚事物的时候, 不会滚到事务最开始,
而回滚到指定保存点.</p>
<p>主流场景: 大规模批量插入数据.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>Connection conn = <span class="keyword">null</span>;
Savepoint savepoint = <span class="keyword">null</span>;
<span class="keyword">try</span>{
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">1000000</span>; i++) {
        <span class="comment">// 每1000条, 发送一次</span>
        String sql = <span class="string">""</span>;
        Statement statement.addBatch(sql);
        <span class="keyword">if</span>(i%<span class="number">1000</span>==<span class="number">0</span>){
        <span class="comment">// 1000条发送一次, 清除缓存</span>
            statement.excuteBatch();
            statement.clearBatch();
            savepoint = connn.setSavePoint();
        }
        <span class="comment">// 如果插入1000条没有问题保存一个回滚点</span>
    }
} <span class="keyword">catch</span> {
    conn.rollback(savepoint);
} <span class="keyword">finally</span> {
    conn.commit();
}
</pre></td></tr></table></figure>

<h1 id="-">订单查询</h1>
<p>点击订单查看功能按钮, 在服务器端将订单信息输出, 显示页面</p>
<ul>
<li>管理员显示所有人的订单</li>
<li>用户显示自己的订单</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="comment">// OrderSearchServlet</span>
<span class="keyword">public</span> <span class="literal">void</span> doGet(req, resp) {
    <span class="comment">// 从Session中获取用户登陆信息</span>
    User user <span class="subst">=</span> req<span class="built_in">.</span>getSession()<span class="built_in">.</span>getAttribute(<span class="string">"user"</span>);
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="keyword">Order</span><span class="subst">&gt;</span> orders <span class="subst">=</span> orderService<span class="built_in">.</span>showOrders(user);
    req<span class="built_in">.</span>setAttribute(<span class="string">"orders"</span>, orders);
    req<span class="built_in">.</span>getRequestDispatcher(<span class="string">"orders.jsp"</span>)<span class="built_in">.</span>forward(req, resp);
}
<span class="comment">// OrderService</span>
<span class="keyword">public</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="keyword">Order</span><span class="subst">&gt;</span> showOrders(User user) {
    <span class="keyword">if</span>(user<span class="built_in">.</span>getRole()<span class="built_in">.</span><span class="keyword">equals</span>(<span class="string">"normal"</span>)){
        <span class="comment">// 普通用户</span>
        <span class="keyword">return</span> orderDao<span class="built_in">.</span>findOrdersByUser(user<span class="built_in">.</span>getId());
    } <span class="keyword">else</span> <span class="keyword">if</span>(user<span class="built_in">.</span>getRole()<span class="built_in">.</span><span class="keyword">equals</span>(<span class="string">"admin"</span>)){
        <span class="comment">// 管理员</span>
        <span class="keyword">return</span> orderDao<span class="built_in">.</span>findAllOrders();
    }
}
<span class="comment">// OrderDao</span>
<span class="keyword">public</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="keyword">Order</span><span class="subst">&gt;</span> findAllOrders(){
    <span class="built_in">String</span> sql <span class="subst">=</span> <span class="string">"select * from order"</span>
    <span class="comment">// 其余代码 参照 findOrdersByUser</span>
}
<span class="keyword">public</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="keyword">Order</span><span class="subst">&gt;</span> findOrdersByUser(int id){
    <span class="built_in">String</span> sql <span class="subst">=</span> <span class="string">"select * from order where user_id = ?"</span>
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="keyword">Order</span><span class="subst">&gt;</span> orders <span class="subst">=</span> queryRunner<span class="built_in">.</span>query(conn, sql, <span class="literal">new</span> BeanListHandler<span class="subst">&lt;&gt;</span>(), id);

    <span class="comment">// 根据用户id, 查询用户信息</span>
    sql <span class="subst">=</span> <span class="string">"select * from user where id=?"</span>;
    for(<span class="keyword">order</span> <span class="subst">&lt;-</span> orders){
        <span class="built_in">String</span> nickname <span class="subst">=</span> queryRunner<span class="built_in">.</span>query(sql, <span class="literal">new</span> ScalarHandler(<span class="string">"nickname"</span>), <span class="keyword">order</span><span class="built_in">.</span>getUser_id());
        <span class="keyword">order</span><span class="built_in">.</span>setNickname(nickname);
        <span class="comment">// 订单关联订单项, 查询订单项</span>
        <span class="built_in">String</span> sql2 <span class="subst">=</span> <span class="string">"select * from orderitem where order_id=?"</span>;
        <span class="built_in">List</span><span class="subst">&lt;</span>OrderItem<span class="subst">&gt;</span> orderItems <span class="subst">=</span> queryRunner<span class="built_in">.</span>query(conn, sql2, <span class="literal">new</span> BeanListHandler<span class="subst">&lt;&gt;</span>(), <span class="keyword">order</span><span class="built_in">.</span>getId);
        <span class="keyword">order</span><span class="built_in">.</span>setOrderItems(orderItems);
        <span class="comment">// 查询每个订单项 关联商品信息</span>
        for(OrderItem orderItem : orderItems) {
            <span class="built_in">String</span> sql4 <span class="subst">=</span> <span class="string">"select * from product where id=?"</span>;
            Product product <span class="subst">=</span> queryRunner<span class="built_in">.</span>query(conn, sql4, <span class="literal">new</span> BeanHandler(), orderItem<span class="built_in">.</span>getProduct_id);
            orderItem<span class="built_in">.</span>setProduct(product);
        }
    }
    <span class="keyword">return</span> orders;
}
</pre></td></tr></table></figure>

<h1 id="-">在线支付</h1>
<ul>
<li>支付方案一: 网站直接与银行对接<ul>
<li>服务器根据银行的接入规范, 生成银行需要的数据, 然后通知用户浏览器重定向到银行,
并把这些数据发给银行, 以完成支付</li>
<li>缺点, 网站需要针对不同银行开发不同的支付程序, 且银行规范一旦发生变动, 网站也要跟着改</li>
</ul>
</li>
<li>支付方案二: 网站通过第三方支付公司与银行对接<ul>
<li>用户登陆商城, 选择银行, 只需要根据根据第三方公司的接入规范,
将参数发给第三方支付公司, 再由第三方支付公司, 根据不同银行接入规范, 对接银行</li>
<li>缺点, 网站与第三方支付公司定期资金结算, 资金安全是个大问题,
也收取一定的手续费, 这种支付方案只适合金额在百万以下的公司</li>
</ul>
</li>
</ul>
<h2 id="-">易宝支付</h2>
<p>支付流程</p>
<ol>
<li>商城在易宝网站 商家注册(审核), 易宝提供给商家: 商家编号, 密钥</li>
<li>用户支付流程<ul>
<li>用户选择银行, 获取银行编码</li>
<li>商城根据订单号 金额 银行, 根据第三方公司接入规范,
将参数发送给第三方支付公司(302重定向)</li>
<li>第三方公司转到网银支付页面, 支付</li>
<li>支付完成, 网银重定向到支付公司页面, 支付公司通知商城, 并调用商城的返回页面</li>
</ul>
</li>
</ol>
<p>密钥解决数字签名</p>
<ul>
<li>商城将订单号 金额 callback 商家编号, 发送给支付公司,
支付公司为了验证消息来自商城, 商城将发送数据, 使用商家提供密码,
进行加密获取数字签名；支付公司将发送来的数据, 采用通用密钥也加密一次,
对比两个签名</li>
<li>支付公司在通知商城支付成功, 也要使用数字签名</li>
</ul>
<h2 id="-">编程实现</h2>
<ol>
<li>需要商家编号和加密密钥</li>
<li>在支付的第一步, 选择银行, 发送支付银行id<ul>
<li>修改Order.jsp, 将订单号和金额发送给选择银行的界面</li>
<li>选择好银行, 转到商城 Servlet, 根据第三方接入规范, 加密数据</li>
</ul>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">// PayServlet</span>
<span class="keyword">public</span> <span class="literal">void</span> doGet(req, resp) {
    <span class="built_in">String</span> orderId <span class="subst">=</span> req<span class="built_in">.</span>getParameter(<span class="string">"orderid"</span>);
    <span class="built_in">String</span> money <span class="subst">=</span> req<span class="built_in">.</span>getParameter(<span class="string">"mondey"</span>);
    <span class="built_in">String</span> pd_FrpId <span class="subst">=</span> req<span class="built_in">.</span>getParameter(<span class="string">"pd_FrpId"</span>);

    <span class="comment">// 根据第三方接入, 准备参数</span>
    <span class="built_in">String</span> p0_Cmd <span class="subst">=</span> <span class="string">"Buy"</span>;
    <span class="built_in">String</span> p1_MerId <span class="subst">=</span> <span class="string">"1234566"</span>;

    <span class="comment">// 将所有数据进行数字签名</span>
    <span class="built_in">String</span> key <span class="subst">=</span> <span class="string">""</span>; <span class="comment">// 密钥</span>
    <span class="built_in">String</span> hmac <span class="subst">=</span> PaymentUtil<span class="built_in">.</span>buildHmac(p0_cmd, p1_MerId);

    <span class="comment">// 将所有的数据发送给易宝指定页面</span>
    <span class="comment">// 或跳转到 确认支付页面</span>
    req<span class="built_in">.</span>getRequestDispatcher(<span class="string">""</span>)<span class="built_in">.</span>forward(req, resp);
}
</pre></td></tr></table></figure>

<p>当用户付款后, 第三方支付方重定向(第一次)商城支付结果页面, 提供给用户付款已经
成功提示,(并没有真正收到钱), 当银行通过程序通知第三方支付, 钱已经支付了,
第三方支付通知商城(第二次), 钱到了, 商城修改订单状态</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">// CallBackServlet 付款后回调程序</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
    <span class="comment">// 校验, 易宝数字签名</span>
    String p0 = req.getParameter(<span class="string">"p0"</span>);
    String hmac = req.getParameter(<span class="string">""</span>);

    <span class="comment">// 将响应数据加密, 校验 hmac</span>
    <span class="keyword">boolean</span> isValid = PaymentUtil.verifyCallback(hmac, ...);
    <span class="keyword">if</span>(isValid) {
        <span class="comment">// 区分两次访问类型</span>
        <span class="keyword">if</span>(r9_BType == <span class="number">1</span>){
            <span class="comment">//银行付款后的友好页面</span>
        } <span class="keyword">else</span> <span class="keyword">if</span>(r9_BType == <span class="number">1</span>) {
            <span class="comment">// 银行已经真正收到钱, 修改订单状态</span>
        }
    } <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数字签名错误"</span>);
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day25-estore2]]></title>
    <link href="http://zhpooer.github.io/2014/05/08/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day25-estore2/"/>
    <id>http://zhpooer.github.io/2014/05/08/传智播客day25-estore2/</id>
    <published>2014-05-08T00:52:58.000Z</published>
    <updated>2014-05-08T07:04:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">添加商品功能(图片上传)</h1>
<p>修改 Product_add.jsp</p>
<h2 id="-">文件上传必要知识</h2>
<p>文件上传, HTTP 请求格式, 符合MIME协议(Content-Type, Content-Disposition)</p>
<p>客户端: 请求提交方式必须是POST, 编码格式 multipart/form-data,
上传文件输入框必须提供 name 属性</p>
<p>服务端: 采用 apache commons-fileupload (早期流行技术 jsp smartload),
内置文件上传技术 Part 技术</p>
<p>上传文件问题:</p>
<ul>
<li>文件名乱码问题</li>
<li>上传文件重名问题</li>
<li>大文件上传, 空间占用</li>
</ul>
<h2 id="-">表现层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">// ProductAddServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp){
    <span class="comment">// 请求是否为文件上传</span>
    <span class="keyword">if</span>(ServletFileUpload.isMultipartContent(req)){
        <span class="comment">// 构造自定义请求参数 Map</span>
        Map parameterMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();
        DiskFileItemFactory fac = <span class="keyword">new</span> DiskFileItemFactory();
        ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(fac);
        List fileItems = sfu.parseRequest(req);
        <span class="keyword">for</span>(f &lt;- fileItems) {
            <span class="keyword">if</span>(f.isFormField()){
                <span class="comment">// 是普通元素</span>
                parameterMap.put(f.getFieldName(), f.getString(<span class="string">"UTF-8"</span>));
            } <span class="keyword">else</span> {
                <span class="comment">// 是上传元素</span>
                <span class="comment">// 上传图片, 唯一文件名字, 目录分散</span>
                InputStream <span class="keyword">in</span> = <span class="keyword">new</span> BufferInputStream(fileItem.getInputStream());
                <span class="comment">// 将图片信息保存到服务器</span>
                <span class="comment">// 商品图片是可以直接访问的, 建立在 WebRoot 下</span>
                String realName = fileItem.geName();
                <span class="comment">//根据真实文件名, 生成唯一文件名 UUID.扩展名</span>
                String filename = UploadUtils.generateRandomFileName(realName);
                String hashDir = UploadUtils.generateRandomDir(filename); <span class="comment">// /E8/A9</span>
                <span class="comment">// 存放文件的绝对路径</span>
                String absoluteDir = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/upload"</span>) + hasDir;
                <span class="keyword">new</span> File(absoluteDir).mkdirs();

                <span class="comment">// 创建文件输出流</span>
                OutputStream <span class="keyword">out</span> = <span class="keyword">new</span> FileOutputStream(absoluteDir + File.pathSaperate + filename);
                <span class="comment">// apache commonio.jar 拷贝文件 FileUtils.copyFile();</span>
                <span class="comment">// CopyUtils 拷贝文件 apache工具包, 简化下面操作</span>
                OutputStream <span class="keyword">out</span> = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">out</span>);
                <span class="keyword">int</span> b;
                <span class="keyword">while</span>(b=<span class="keyword">in</span>.read()!=-<span class="number">1</span>){
                     <span class="keyword">out</span>.write(b);
                }
                <span class="keyword">in</span>.close();
                <span class="keyword">out</span>.close();
                <span class="comment">// 在浏览器显示图片</span>
                parameterMap.put(<span class="string">"imgurl"</span>, <span class="string">"/upload"</span> + hashDir + <span class="string">"/"</span> + filename);
            }
        }
        <span class="comment">//将那个求取的的数据封装java对象</span>
        Product product = <span class="keyword">new</span> Product();
        BeanUtils.populate(product, parameterMap);
        productService.addProduct(product);
        <span class="comment">// 跳转</span>
    } <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"添加上传, 必须为 multipart/form-data"</span>)
    }
}
</pre></td></tr></table></figure>

<h2 id="-">业务层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span>(Product product);
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductService</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span>(Product product) {
        productDao.insert(product);
    }
}
</pre></td></tr></table></figure>

<h2 id="-">持久层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(Product product){
        String sql = <span class="string">"insert into product values(...);"</span>
        queryRunner.update(conn, sql, product.getName, ...);
    }
}
</pre></td></tr></table></figure>

<h1 id="-">查看商品</h1>
<p>查询所有商品功能, 先访问Servlet, 查询所有商品信息, 保存request对象, 转发, 用 jstl 显示</p>
<p><strong>把页面中的所有相对路径 都换成绝对路径</strong>,
如果 从 1.jsp 转发到 2.jsp, 但是url是 1.jsp, 会产生路径问题</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">// ProductSearchServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp) {
    <span class="comment">// 调用业务层, 查询商品集合列表</span>
    List products = products.listAllProducts()
    req.setAttribute(<span class="string">"products"</span>, products)
    <span class="comment">// 将列表通过request对象, 传递给jsp对象</span>
    req.getRequestDispatcher(<span class="string">"/product.jsp"</span>).forward(req,resp);
}

<span class="comment">// ProductService</span>
<span class="keyword">public</span> List <span class="title">listAllProducts</span>(){
    <span class="keyword">return</span> productDao.listAllProducts(); 
}

<span class="comment">// ProductDao</span>
<span class="keyword">public</span> List <span class="title">listAllProducts</span>(){
    String sql = <span class="string">"select * from Product"</span>;
    <span class="keyword">return</span> queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler());
}
</pre></td></tr></table></figure>

<h2 id="-">显示结果数据</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;c:<span class="keyword">for</span>Each var=<span class="string">"p"</span> items=<span class="string">"<span class="variable">${requestScope.products}</span>"</span>&gt;
    
&lt;/c:<span class="keyword">for</span>Each&gt;
</pre></td></tr></table></figure>

<p>展示列表的图片要使用缩略图</p>
<ul>
<li>使用 img 标签 width 和 height 缩放图片(但是不建议, 浪费带宽)</li>
<li>在上传图片过程中, 对图片缩放(老师工具包PicUtils)</li>
</ul>
<h1 id="-">购物车功能</h1>
<h2 id="-">添加商品到购物车</h2>
<p>在商品列表中点击购买, 将商品加入到购物车, 提示用户商品已经添加到购物车,
继续购物还是查看购物车. (修改product.jsp)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>// 购买链接
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">onclick</span>=<span class="value">"buy(${product.id}, ${procuct.pnum})"</span>&gt;</span>购买<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span> <span class="title">buy</span><span class="params">(id, pnum)</span>{</span>
    <span class="comment">//判断商品是否有货</span>
    <span class="keyword">if</span>(pnum==<span class="number">0</span>) {
        <span class="comment">// 无货</span>
        alert(<span class="string">"您购买的商品, 已经售罄"</span>);
        <span class="keyword">return</span>;
    }
    <span class="comment">// 递交请求给服务器, 加入购物车</span>
    window.loacation.href = <span class="string">"${pageContext.request.contextPath}/addCart?id="</span> + id;
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">// AddCartServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, resp){
    <span class="comment"><span class="xmlDocTag">///</span> 对 product 重写 hashcode 和 equals, 根据id生成</span>
    Map&lt;Product, Integer&gt; cart = req.getSession().getAttribute(<span class="string">"cart"</span>);
    <span class="keyword">if</span>(cart==<span class="keyword">null</span>) cart = <span class="keyword">new</span> HashMap();
    <span class="comment">// 判断是否存在在购物车中</span>
    <span class="keyword">int</span> id = Integer.parseInt(req.getParameter(<span class="string">"id"</span>));
    Product product = <span class="keyword">new</span> Product();
    product.setId(id);
    <span class="keyword">if</span>(cart.contains(product)) {
        cart.put(product, cart.<span class="keyword">get</span>(product) + <span class="number">1</span>);
    } <span class="keyword">else</span> {
        <span class="comment">// 商品没有在购物中, 放入新的商品, 数量为1</span>
        productService.findProduct(id);
        cart.put(p, <span class="number">1</span>);
        <span class="comment">// 调用业务层, 查询完整的商品信息</span>
    }
    req.getSession().setAttribute(<span class="string">"cart"</span>, cart);
    <span class="keyword">out</span>.print(<span class="string">"商品已经加入购物车, 查看购物车, 继续购物"</span>);
}

<span class="comment">// ProductService</span>
<span class="keyword">public</span> Product <span class="title">findProduct</span>(<span class="keyword">int</span> id) {
    <span class="keyword">return</span> productDao.findById(id);
}

<span class="comment">// ProductDao</span>
<span class="keyword">public</span> Product <span class="title">findById</span>(<span class="keyword">int</span> id) {
    String sql = <span class="string">"select * from product where id=?"</span>;
    <span class="keyword">return</span> queryRunner.query(conn,sql, <span class="keyword">new</span> Beanhandler&lt;&gt;(), id)
}
</pre></td></tr></table></figure>

<h2 id="-">查看购物车</h2>
<p>查看购物车, 只要修改 jsp 页面</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 计算节省和公花费 --&gt;</span>
<span class="comment">&lt;!-- 定义变量 --&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"saveprice"</span> <span class="attribute">scope</span>=<span class="value">"page"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"totalprice"</span> <span class="attribute">scope</span>=<span class="value">"page"</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="comment">&lt;!-- 计算价格 --&gt;</span>
<span class="tag">&lt;<span class="title">set</span> <span class="attribute">var</span>=<span class="value">"saveprice"</span> <span class="attribute">scope</span>=<span class="value">"page"</span> <span class="attribute">value</span>=<span class="value">"${saveprice+**}"</span>&gt;</span> <span class="tag">&lt;/<span class="title">set</span>&gt;</span>
<span class="tag">&lt;<span class="title">set</span> <span class="attribute">var</span>=<span class="value">"totalprice"</span> <span class="attribute">scope</span>=<span class="value">"page"</span> <span class="attribute">value</span>=<span class="value">"${totalprice+**}"</span>&gt;</span><span class="tag">&lt;/<span class="title">set</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day24-Estore商城项目]]></title>
    <link href="http://zhpooer.github.io/2014/05/06/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day24-estore%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE/"/>
    <id>http://zhpooer.github.io/2014/05/06/传智播客day24-estore商城项目/</id>
    <published>2014-05-06T01:07:03.000Z</published>
    <updated>2014-05-10T12:42:57.000Z</updated>
    <content type="html"><![CDATA[<p>Javaweb 课程 是 Javaee 课程基础, 课程定位网站开发(PHP .NET一样)
<a href="https://github.com/zhpooer/itcast-estore" target="_blank">最终代码</a></p>
<h1 id="-">软件开发流程</h1>
<ol>
<li>调研需求: 售前工程师(需求工程师)配合销售, 第一时间了解客户需求</li>
<li>需求分析: 需求工程师, 需求文档(系统描述项目有哪些功能)</li>
<li><em>制作系统静态页面</em><br>Java工程师, 做系统页面(Jquery easyUI 框架, ExtJS框架)</li>
<li>架构师进行技术选型, 搭建系统架构(资深开发人员, 技术经理)</li>
<li><em>数据库设计</em>(Power Designer)</li>
<li><em>功能开发</em></li>
<li>测试</li>
</ol>
<h1 id="estore-">Estore 商城需求功能分析</h1>
<ul>
<li>导入 Estore 静态页面<ul>
<li>导入项目方式, 不建议 import, 因为 myeclipse 项目, eclipse项目, maven项目,
ant项目, 结构都不一样<ol>
<li>新建 web 项目, estore, J2ee5.0</li>
<li>将demo代码赋值过来, 将源码和配置文件, 复制src, 将页面代码复制到</li>
<li>企业前端工程师(美工)提供静态页面(html)<br>我们要做的是, 就是将html中的静态数据, 连接数据库编程动态数据</li>
<li>部署到Tomcat</li>
</ol>
</li>
</ul>
</li>
<li>功能分析<ol>
<li>注册(验证码, 激活邮件, md5密码加密)</li>
<li>登陆</li>
<li>添加商品(文件上传)</li>
<li>查看商品(条件查询, 分页)</li>
<li>购物车(添加商品到购物车, 查看购物车, 修改购物车中的商品数量)</li>
<li>订单生成</li>
<li>订单查看</li>
<li>在线付款</li>
</ol>
</li>
</ul>
<h1 id="-">技术选型</h1>
<p>前端: JSP(jstl, el) + Servlet(Filter, Listener)</p>
<p>后端: Apache BeanUtils(将请求数据封装到 javabean) + javamail(邮件发送) + Apache FileUpload</p>
<p>数据库: C3P0 + Apache DBUtils + 在线支付 + log4j日志技术</p>
<p>MVC 设计模式(Web项目整体架构) + DAO模式(数据层)</p>
<p>数据库: mysql</p>
<p>Jar包:</p>
<ul>
<li>jstl(jstl.jar, standard.jar)</li>
<li>BeanUtils (beanutils.jar common-logging)</li>
<li>FileUpload (fileupload.jar, io)</li>
<li>Dbutils</li>
<li>c3p0 (c3p0.jar)</li>
<li>mysql驱动</li>
<li>日志(log4j)和javamail后期导入</li>
</ul>
<h1 id="-">目录开发结构</h1>
<p>三层结构: 表现层(web) + 业务层 + 数据层</p>
<p>包名规范: 公司 + 项目组 + 项目代号 + 分层 <code>cn.itcast.estore.*</code></p>
<ul>
<li><code>cn.itcast.estore.web</code>表现层</li>
<li><code>cn.itcast.estore.service</code> 业务层</li>
<li><code>cn.itcast.estore.dao</code> 数据层</li>
<li><code>cn.itcast.estore.utils</code> 工具类</li>
<li><code>cn.itcast.estore.entity</code> 实体</li>
</ul>
<h1 id="-">数据库设计</h1>
<p>Mysql 开发规则: 一个软件项目, 使用一个 database, 对应一个账户</p>
<h2 id="-">新建数据库</h2>
<p>注意编码问题, 配置 my.ini(my.conf) </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">'%char%'</span>;</span>
</pre></td></tr></table></figure>

<p>System 系统字符集, 系统决定, 无法修改</p>
<p>Server 服务器字符集,修改 <code>[mysqld] character-set-server=utf-8</code></p>
<p><code>[mysql] default-charactor-set</code> 可以修改:</p>
<ul>
<li>Client 客户端输入字符集</li>
<li>Connection 连接字符集</li>
<li>Results 结果字符集</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> estore;</span>
<span class="comment">-- 新建用户</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> angel@<span class="string">'localhost'</span> identified <span class="keyword">by</span> <span class="string">'angel'</span>;</span>
<span class="comment">-- create user angel@'%' 任意连接都可以</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> estore.* <span class="keyword">to</span> angel@<span class="string">'localhost'</span>;</span>
</pre></td></tr></table></figure>

<h2 id="-">数据库设计</h2>
<p>Power Designer 数据库建模</p>
<p>传统数据库分析设计 E-R实体关系图</p>
<p>涉及到实体: 用户, 商品(类别), 购物车, 订单</p>
<p>三个实体表: 用户表, 订单表, 商品表</p>
<p>用户和订单关系: 在订单表中添加用户编号, 不需要单独建表</p>
<p>订单和商品关系: 中间表(订单号, 商品编号, ) 
<img src="/img/er.png" alt="ER关系图"></p>
<h2 id="-">数据库建表</h2>
<p>建的表不一定和ER表中一样, 如为了代码功能增加, 增加字段(user邮箱激活码)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (
    id <span class="keyword">int</span> auto_increment <span class="keyword">primary</span> <span class="keyword">key</span>,
    email <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,
    password <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    nickname <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    role <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    active <span class="keyword">int</span>,
    activecode <span class="keyword">varchar</span>(<span class="number">255</span>)
)engine=innodb <span class="keyword">default</span> charset=utf-<span class="number">8</span>;</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> product (
    id <span class="keyword">int</span> auto_increment <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    category <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    markedprice <span class="keyword">double</span>,
    estoreprice <span class="keyword">double</span>,
    pnum <span class="keyword">int</span>,
    imgurl <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    description <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>
)engine=innodb <span class="keyword">default</span> charset=utf-<span class="number">8</span>;</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> orders(
    id <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
    totalprice <span class="keyword">double</span>,
    receiverinfo <span class="keyword">varchar</span>(<span class="number">255</span>),
    paystate <span class="keyword">int</span>,
    createtime <span class="keyword">timestamp</span>,
    user_id <span class="keyword">int</span>,
    <span class="keyword">constraint</span> user_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(id)
)engine=innodb <span class="keyword">default</span> charset=utf-<span class="number">8</span>;</span>

<span class="operator"><span class="keyword">create</span> orderitem(
   order_id <span class="keyword">varchar</span>(<span class="number">255</span>),
   product_id <span class="keyword">int</span>,
   buynum <span class="keyword">int</span>,
   <span class="keyword">constraint</span> order_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(order_id) <span class="keyword">references</span> orders(id),
   <span class="keyword">constraint</span> prodect_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(product_id) <span class="keyword">references</span> product(id)
)engine=innodb <span class="keyword">default</span> charset=utf-<span class="number">8</span>;</span>
</pre></td></tr></table></figure>

<h1 id="-">建立实体类</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> User {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> String nickname;
    <span class="keyword">private</span> String role;
    <span class="keyword">private</span> <span class="keyword">int</span> active;
    <span class="keyword">private</span> String activecode;
}

<span class="keyword">public</span> <span class="keyword">class</span> Product {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String category;
    <span class="keyword">private</span> <span class="keyword">int</span> pnum;
    <span class="keyword">private</span> <span class="keyword">double</span> marketprice;
    <span class="keyword">private</span> doublc estoreprice;
    <span class="keyword">private</span> String imgurl;
    <span class="keyword">private</span> String description;
}

<span class="keyword">public</span> <span class="keyword">class</span> Order{
    <span class="keyword">private</span> String id;
    <span class="keyword">private</span> <span class="keyword">double</span> totalprice;
    <span class="keyword">private</span> String receiverinfo;
    <span class="keyword">private</span> <span class="keyword">int</span> paystate;
    <span class="keyword">private</span> Timestamp createtime;
    <span class="keyword">private</span> Int user_id;
}

<span class="keyword">public</span> <span class="keyword">class</span> OrderItem {
    <span class="keyword">private</span> String order_id;
    <span class="keyword">private</span> <span class="keyword">int</span> product_id;
    <span class="keyword">private</span> <span class="keyword">int</span> buynum
}
</pre></td></tr></table></figure>

<h1 id="-">用户注册功能实现</h1>
<p><img src="/img/register_ui.png" alt="注册页面">
重要知识点: 激活邮件功能</p>
<h2 id="javamail-">JavaMail 技术入门</h2>
<h3 id="-">邮件软件开发的概念</h3>
<ul>
<li><p>邮件服务器和电子邮箱</p>
<p>  必须有专门的计算机, 安装邮件服务程序<br>  电子邮箱: 邮件服务器账户, 使用电子邮箱登录到邮件服务器</p>
</li>
<li><p>邮件传输协议</p>
<p>  SMTP协议: 发送邮件<br>  POP3协议: 接收协议, 下载到本地操作<br>  imap: 接收协议, 网络在线操作邮件, 很多邮件服务器不支持</p>
</li>
<li><p>邮件收发过程</p>
<p>  例如 aa@163.com 向 bb@sina.com 发送邮件</p>
<ol>
<li>aa 使用smtp协议登陆到163发送邮件服务器</li>
<li>发送邮件 163 smtp服务器将邮件投送到 新浪 smtp 服务器</li>
<li>新浪 smtp 服务器 将邮件保存到 bb 信箱</li>
<li>bb使用 pop3 协议 登陆sina 收取邮件服务器</li>
<li>sina 收取服务器 将邮件取出</li>
</ol>
</li>
</ul>
<p>可以用 易邮 在window上新建邮件服务器</p>
<h3 id="mx-a-">MX记录和A记录</h3>
<p>MX记录: 163 SMTP 服务器将信发送给 新浪 SMTP 服务器,
是如何知道 SMTP 服务器地址是什么?
解决 SMTP 服务器可以接受外来的邮件, </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>;; 查询域名
cmd&gt; nslookup 连接到互联网
&gt; <span class="keyword">set</span> <span class="built_in">type</span>=mx
&gt; sina.com
</pre></td></tr></table></figure>

<p>A记录: 个人用户, 使用 smtp 服务器发送邮件, 需要登陆 如果 163smtp 服务器
向 sina stmp 服务器投递邮件, 需不需要登陆? 存在于A记录中的服务器,
可以在向其他 stmp 服务器投递邮件时, 不需要登陆验证</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>;; 查询A记录
cmd&gt; nslookup 连接到互联网
&gt; <span class="keyword">set</span> <span class="built_in">type</span>=a
&gt; <span class="number">163</span>.com
</pre></td></tr></table></figure>

<h3 id="javamail-demo">JavaMail Demo</h3>
<h4 id="-">描述一封邮件</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// 使用javamail API 描述一份邮件内容</span>
Session session <span class="subst">=</span> <span class="built_in">null</span>; <span class="comment">// 代表邮件服务器的一个连接会话</span>
java<span class="built_in">.</span>mail<span class="built_in">.</span>Message msg <span class="subst">=</span> <span class="literal">new</span> MimeMessage(session);  <span class="comment">// 一封邮件</span>
<span class="comment">// 使用message生成RFC822文档要求的邮件内容</span>
msg<span class="built_in">.</span>setFrom(<span class="literal">new</span> InternetAddress(<span class="string">"aa@estore.com"</span>)); <span class="comment">// 发件人</span>
msg<span class="built_in">.</span>setRecipient(RecipientType<span class="built_in">.</span><span class="keyword">TO</span>, <span class="literal">new</span> InternetAddress(<span class="string">"bb@estore.com"</span>)); <span class="comment">// 设置收件人</span>
msg<span class="built_in">.</span>setSubject(<span class="string">"测试邮件"</span>);
msg<span class="built_in">.</span>setText(<span class="string">"简单文字内容"</span>); <span class="comment">// or setContent();</span>
<span class="comment">// 定义复杂内容</span>
msg<span class="built_in">.</span>setContent(<span class="string">"&lt;a href='xxx'&gt;激活&lt;/a&gt;"</span>, <span class="string">"text/html;charset=utf-8"</span>);
</pre></td></tr></table></figure>

<h4 id="-">发送一封邮件</h4>
<p><a href="http://pringles.iteye.com/blog/125196" target="_blank">更加详细的介绍</a></p>
<p>JavaMail 核心类:</p>
<ul>
<li>Message 代表一封邮件</li>
<li>Session 代表连接邮件服务器会话</li>
<li>Transport 用于发送邮件</li>
<li>Store 用于收取邮件</li>
</ul>
<p>发送流程</p>
<ol>
<li>配置smtp邮件服务器, 连接参数</li>
<li>编写邮件 Message</li>
<li>使用Transport 发送邮件</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>// 第一步配置 Session 
Properties p = new Properties()<span class="comment">;</span>
p<span class="preprocessor">.setProperty</span>(<span class="string">"mail.smtp.host"</span>, <span class="string">"localhost"</span>)<span class="comment">;</span>
p<span class="preprocessor">.setProperty</span>(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>)<span class="comment">;</span>
p<span class="preprocessor">.put</span>(<span class="string">"mail.smtp.auth"</span>,<span class="string">"true"</span>)<span class="comment">; // 如果是163需要验证, 要加上这句</span>
Session session = Session<span class="preprocessor">.getInstance</span>(p)<span class="comment">;</span>

// 第二步, 编写邮件, 按照上一节代码

// 第三步: 连接服务器发送邮件
Transport transport = session<span class="preprocessor">.getTransport</span>()<span class="comment">;</span>
transport<span class="preprocessor">.connect</span>(<span class="string">"aaa"</span>, <span class="string">"111"</span>)<span class="comment">; // 登陆,连接服务器</span>
transport<span class="preprocessor">.sendMessage</span>(msg, msg<span class="preprocessor">.getRecipient</span>(RecipientType<span class="preprocessor">.TO</span>))<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">完成注册</h2>
<p>验证码技术原理: 在页面加载时, 服务器生成验证码,
将其保存在Session, 防止恶意提交</p>
<ol>
<li>register.jsp 所有的表单元素, 添加 name 元素</li>
<li>修改 form 的 Action 地址</li>
<li><p>编写 表现层</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>// cn<span class="preprocessor">.itcast</span><span class="preprocessor">.estore</span><span class="preprocessor">.servlet</span><span class="preprocessor">.RegistServlet</span><span class="preprocessor">.java</span>
public void doGet(){
    // 判断密码是否一致
    String password = req<span class="preprocessor">.getParameter</span>(<span class="string">"password"</span>)<span class="comment">;</span>
    String repassword = req<span class="preprocessor">.getParameter</span>(<span class="string">"repassword"</span>)<span class="comment">;</span>
    if(!password<span class="preprocessor">.equals</span>(repassword)){
        request<span class="preprocessor">.setAttribute</span>(<span class="string">"msg"</span>, <span class="string">"两次密码不一致"</span>)<span class="comment">;</span>
        request<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"/regist.jsp"</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
    }
    // 判断验证码是否正确
    String checkcode = req<span class="preprocessor">.getParameter</span>(<span class="string">"checkcode"</span>)<span class="comment">; // 用户填写</span>
    String key = req<span class="preprocessor">.getSession</span>()<span class="preprocessor">.getAttribute</span>(<span class="string">"key"</span>)<span class="comment">;</span>
    if(key==null || !checkcode<span class="preprocessor">.equals</span>(key)){
        request<span class="preprocessor">.setAttribute</span>(<span class="string">"msg"</span>, <span class="string">"验证码错误"</span>)<span class="comment">;</span>
        request<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"/regist.jsp"</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
    }
    req<span class="preprocessor">.getSession</span>()<span class="preprocessor">.removeAttribute</span>(<span class="string">"key"</span>)<span class="comment">;</span>
    // 用户注册
    // <span class="number">1.</span> 将页面的数据封装到 User 对象, 采用BeanUtils
    User user = new User()<span class="comment">;</span>
    BeanUtils<span class="preprocessor">.populate</span>(user, req<span class="preprocessor">.getParameterMap</span>())<span class="comment">;</span>
    // <span class="number">2.</span> 将封装好的User对象传递给业务层处理
    UserService userService = new UserService()<span class="comment">;</span>
    userService<span class="preprocessor">.regist</span>(user)<span class="comment">;</span>

    res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=utf-8"</span>)<span class="comment">;</span>
    res<span class="preprocessor">.getWrite</span>()<span class="preprocessor">.write</span>(<span class="string">"请到邮箱去激活"</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>
</li>
<li><p>编写业务层</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">// cn.itcast.estore.service</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span>(User user);
}
<span class="comment">// cn.itcast.estore.service.impl</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span>(User user) {
        <span class="comment">// 1. 生成激活码, 发送激活邮件</span>
        String activeCode = UUID.randomUUID().toString();
        <span class="comment">// 发送邮件, 请参照发送邮件章节</span>
        Message msg = <span class="keyword">new</span> MimeMessage(session);
        msg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"admin@estore.com"</span>));
        <span class="comment">// msg.setRecipient(); msg.setSubject();</span>
        msg.setContent(<span class="string">"&lt;h2&gt;欢迎注册&lt;/h2&gt;&lt;a href='"</span>+ activeCode+<span class="string">"' &gt;激活&lt;/a&gt;"</span>);
        <span class="comment">// 2. 将用户信息保存到数据库</span>
        user.setActivecode(activeCode);
        user.setActive(<span class="number">0</span>);
        user.setRole(<span class="string">"user"</span>); <span class="comment">//普通用户</span>
        <span class="comment">// 3. 调用数据层</span>
        userDao.insert(user);
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>编写数据库接口和实现类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// cn.itcast.estore.dao</span>
<span class="keyword">public</span> <span class="keyword">interface</span> UserDAO {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(User user);
}
<span class="comment">// cn.itcast.estore.dao.impl</span>
<span class="keyword">public</span> <span class="keyword">class</span> UserDAOImpl {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(User user){
        <span class="comment">// 1. c3p0获取数据库连接池</span>
        DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();
        <span class="comment">// 2. 插入数据</span>
        QueryRunner qs = <span class="keyword">new</span> QueryRunner(ds);
        String sql = <span class="string">"insert into user values(null, ?, ?, ...)"</span>
        <span class="comment">// 用户的密码用密文保存</span>
        qs.update(sql, MD5Utils.md5(user.getPassword()));
    }
}
</pre></td></tr></table></figure>

</li>
</ol>
<p>乱码问题处理: 请参照之前章节, 重写 <code>getParameterMap()</code> <code>getParameter()</code> <code>getValues()</code></p>
<h3 id="-">注册用户激活</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre><span class="comment">// ActiveServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, res){
    String activecode = req.getParameter(<span class="string">"activecode"</span>);
    UserService userService = <span class="keyword">new</span> UserServiceImpl();
    <span class="keyword">int</span> result = userService.active(activecode);
    res.setContentType(<span class="string">"text/html;charset=utf-8"</span>);
    <span class="keyword">if</span>(result == Constants.ACTIVEMAIL_HASACTIVE){
        <span class="keyword">out</span>.print(<span class="string">"账户已经激活"</span>);
    } <span class="keyword">else</span> <span class="keyword">if</span> (result == Constants.ACTIVEMAIL_INVALIDATEACTIVCOD){
        <span class="keyword">out</span>.println(<span class="string">"激活码无效"</span>);
    } <span class="keyword">else</span> <span class="keyword">if</span> (result == Constants.ACTIVEMAIL_OK){
        <span class="keyword">out</span>.println(<span class="string">"激活成功"</span>);
    }
}
<span class="comment">// UserService, 返回数字 </span>
<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">active</span>(String activecode){
    <span class="comment">// 判断激活码是由有效</span>
    User user = userDAO.findByActiveCode(activecode);
    <span class="keyword">if</span>(user == <span class="keyword">null</span>) {
        <span class="comment">// 激活码无效</span>
        <span class="keyword">return</span> Constants.ACTIVEMAIL_INVALIDATEACTIVCOD;
    } <span class="keyword">else</span> {
        <span class="comment">// 已经激活</span>
        <span class="keyword">if</span>(user.getActive()==<span class="number">1</span>){
            <span class="keyword">return</span> Constants.ACTIVEMAIL_HASACTIVE;
        } <span class="keyword">else</span> {
            <span class="comment">//需要激活</span>
            userDao.updateActive(user.getId());
            <span class="keyword">return</span> Constants.ACTIVEMAIL_OK;
        }
    }
}

<span class="comment">// userDao</span>
<span class="keyword">public</span> User <span class="title">findByActiveCode</span>(String activecode){
    DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();
    QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);
    String sql = <span class="string">"select * from user where activecode=?"</span>;
    User user = qr.query(sql, <span class="keyword">new</span> Beanhandler&lt;User&gt;(), activecode);
    <span class="keyword">return</span> user;
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateActive</span>(<span class="keyword">int</span> id){
    DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();
    QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);
    String sql = <span class="string">"update user set active = 1 where id=?"</span>;
    qr.update(sql, id);
}

<span class="comment">// 存放操作常量</span>
<span class="keyword">public</span> <span class="keyword">class</span> Constants {
    <span class="comment">// 邮件激活的几种情况</span>
    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> ACTIVEMAIL_TIMEOUT = <span class="number">0</span>;
    <span class="comment">// 正常</span>
    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> ACTIVEMAIL_OK = <span class="number">1</span>;
    <span class="comment">// 已经激活过了</span>
    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> ACTIVEMAIL_HASACTIVE = <span class="number">2</span>;
    <span class="comment">// 无效</span>
    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> ACTIVEMAIL_INVALIDATEACTIVCOD = <span class="number">3</span>;
}
</pre></td></tr></table></figure>

<h2 id="-">用户登陆功能实现</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// servlet.LoginServlet</span>
<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">doGet</span>(req, res){
    <span class="comment">// 将请求的数据, 封装到user对象中</span>
    User user = <span class="keyword">new</span> User();
    BeanUtils.populate(user, request.getParameterMap());
    <span class="comment">// 调用业务层, 进行登陆</span>
    UserService userService = <span class="keyword">new</span> UserServiceImpl();
    User loginUser = userService.login(User);
    <span class="comment">// 判断登陆是否成功</span>
    <span class="keyword">if</span>(loginUser==<span class="keyword">null</span>){
        <span class="comment">// 失败</span>
        req.setAttribute(<span class="string">"msg"</span>, <span class="string">"用户名或者密码错误"</span>);
        req.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(req, res);
    } <span class="keyword">else</span> {
        <span class="keyword">if</span>(loginUser.getActive()==<span class="number">0</span>){
            req.setAttribute(<span class="string">"msg"</span>, <span class="string">"还没有激活"</span>);
            req.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(req, res);
        } <span class="keyword">else</span> {
            request.getSession().setAttribute(<span class="string">"user"</span>, loginUser);
            res.sendRedirect(req.getConentPath() + <span class="string">"/index.jsp"</span>);
        }
    }
}

<span class="comment">// UserService</span>
<span class="keyword">public</span> User <span class="title">login</span>(User user) {
    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();
    <span class="keyword">return</span> userDao.login(user);
}

<span class="comment">// UserDao</span>
<span class="keyword">public</span> User <span class="title">login</span>(User user) {
    String sql = <span class="string">"select * from user where email=? and password=?"</span>;
    User loginUser = qr.query(sql, <span class="keyword">new</span> Beanhandler&lt;User&gt;(), user.getEmail(), MD5Utiles.encode(user.getPassword()));
    <span class="keyword">return</span> loginUser;
}
</pre></td></tr></table></figure>

<h2 id="-">注销功能</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- Invalidate.jsp --&gt;</span>
<span class="vbscript">&lt;%
    sesssion.invalidate();
    <span class="built_in">response</span>.sendRedirect(<span class="string">"login.jsp"</span>);
%&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">记住用户</h2>
<p>只发生在登陆成功时</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// LoginServlet doGet() 成功登陆后, 添加代码</span>
<span class="keyword">if</span>(req.getParameter(<span class="string">"remember"</span>)!=<span class="keyword">null</span>){
    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"email"</span>, loginUser.getEmail);
    cookie.setPath(<span class="string">"/"</span>);
    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>); <span class="comment">// 一天</span>
    res.addCookie(cookie);
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day23-框架学习基础加强]]></title>
    <link href="http://zhpooer.github.io/2014/05/05/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day23-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/"/>
    <id>http://zhpooer.github.io/2014/05/05/传智播客day23-框架学习基础加强/</id>
    <published>2014-05-05T01:04:44.000Z</published>
    <updated>2014-05-05T09:45:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">回顾</h1>
<p>围绕 java5 特性: 泛型技术, 反射技术</p>
<h1 id="-">动态代理</h1>
<h2 id="-">代理模式和装饰者模式的区别</h2>
<p>装饰器模式: java基础IO流, javaWeb request 和 response包装<br>对原有代码功能进行增强</p>
<p>代理模式: 对真实对象访问的<strong>拦截作用</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">interface</span> <span class="title">DAO</span> {</span> <span class="comment">// 业务接口</span>
    <span class="keyword">void</span> insert();
}
<span class="class"><span class="keyword">class</span> <span class="title">MySQLDAO</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">DAO</span>{</span> <span class="comment">// 业务实现类</span>
    <span class="keyword">public</span> <span class="keyword">void</span> insert(){}
}
</pre></td></tr></table></figure>

<p>装饰模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// 装饰对象</span>
class LogDAO implement DAO {
    <span class="comment">// 传入被装饰对象</span>
    DAO dao;
    <span class="comment">// 构造方法传入</span>
    <span class="keyword">public</span> <span class="title">LogDAO</span>(DAO dao){
        <span class="keyword">this</span>.dao = dao;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(){
        <span class="comment">// 代码增强</span>
        dao.insert(); <span class="comment">// 调用被装饰对象insert()</span>
        <span class="comment">// 代码增强</span>
    }
}
<span class="comment">// 使用</span>
DAO dao = <span class="keyword">new</span> LogDAO(<span class="keyword">new</span> MySQLDAO());
</pre></td></tr></table></figure>

<p>代理模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">DAOProxy</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">DAO</span> {</span>
    <span class="comment">// 被代理对象</span>
    DAO dao;
    <span class="comment">// 构造方法传入被代理对象</span>
    <span class="keyword">public</span> DAOProxy(DAO dao){
        <span class="keyword">this</span>.dao = dao;
    }
    <span class="comment">//可以做代码增强, 和访问拦截</span>
    <span class="keyword">public</span> <span class="keyword">void</span> insert(){
        <span class="comment">// 判断是否具有权限</span>
        <span class="comment">// 代码增强</span>
        <span class="keyword">if</span>(有权限) dao.insert(); <span class="comment">// 调用被装饰对象insert()</span>
        <span class="keyword">else</span> 权限不足
        <span class="comment">// 代码增强</span>
    }
}
</pre></td></tr></table></figure>

<h2 id="-">动态代理</h2>
<p>代理模式(静态代理): 需要开发人员编写代理类</p>
<p>动态代理: 不需要开发人员编写代理类,
代理类在JVM中自动创建(动态构造)<br>Struts2 使用静态代理<br>Spring 使用动态代理</p>
<p>代理对象需要和被代理对象具有相同的业务方法(<em>同一个接口</em>)</p>
<h2 id="-">动态代理的过程</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="class"><span class="keyword">interface</span> <span class="title">DAO</span> {</span> <span class="comment">// 业务接口</span>
    <span class="keyword">void</span> insert();
    <span class="keyword">void</span> update();
}
<span class="class"><span class="keyword">class</span> <span class="title">MySQLDAO</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">DAO</span>{</span> <span class="comment">// 业务实现类</span>
    <span class="keyword">public</span> <span class="keyword">void</span> insert(){
        println(<span class="string">"insert"</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> update(){
        println(<span class="string">"update"</span>);
    }
}
</pre></td></tr></table></figure>

<p>在 MysqlDAO 中实现日志记录</p>
<ul>
<li>方式一: 继承代码, 覆盖业务方法, 添加新功能(要求业务对象必须是手动创建)</li>
<li>方式二: 装饰者, 对已经存在的对象进行功能<em>扩展</em></li>
<li><p>方式三: 代理, 对已经存在的对象进行功能<em>扩展</em></p>
<p>  利用 <code>java.reflect.Proxy</code> 类, 提供 <code>newProxyInstance(classLoader, interfaces[], invocation)</code> 方法, 构造动态类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>    <span class="keyword">final</span> DAO dao = <span class="keyword">new</span> MySQLDAO();
    DAO proxy = Proxy.newProxyInstance(dao.getClass().getClassLoader(),
        dao.getClass().getInterfaces(), <span class="keyword">new</span> invocationHandler {
        Object invoke(Object proxy, Method method, Object[] args){
            Object rs = method.invoke(dao, args);
            <span class="comment">// 代码增强拦截</span>
            log(<span class="string">"调用了方法"</span>);
            <span class="keyword">return</span> rs;
        }
    });
    <span class="comment">// 代理对象内部实现</span>
    $$Proxy implement DAO{
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span>(){
            handler.invoke(<span class="keyword">this</span>, method, args);
        }
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(){
            handler.invoke(<span class="keyword">this</span>, method, args);
        }
    }
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">动态代理案例,解决请求中文乱码</h2>
<p>index.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"request"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"msg"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"request"</span> <span class="attribute">method</span>=<span class="value">"get"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"msg"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(req, res, chain){
        req.setCharactorEncoding(<span class="string">"utf-8"</span>);
        ServletRequest proxy = Proxy.newProxyInstance(req.getClass().getClassLoader,
            req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler(){
                <span class="keyword">public</span> Object <span class="title">invoke</span>(Object proxy, Method method, Object[] args){
                   <span class="comment">// 判断清水方式是否为get</span>
                    <span class="keyword">if</span>(req.getMethod().equalsIgnoreCase(<span class="string">"get"</span>)){
                        <span class="keyword">if</span>(method.getName().equals(<span class="string">"getParameter"</span>)){
                            String value = method.invoke(req, args);
                            <span class="keyword">if</span>(value=!<span class="keyword">null</span>) {
                                value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);
                            }
                            <span class="keyword">return</span> value;
                        }
                    }
                    <span class="keyword">return</span> method.invoke(req, args);
                }
            });
        chain.doFilter(proxy, res);
    }
}
<span class="keyword">if</span>(req.getMethod().equalsIgnoreCase(<span class="string">"get"</span>)){
    String value = <span class="keyword">super</span>.getParameter(name);
    <span class="keyword">if</span>(value=!<span class="keyword">null</span>){
        value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);
    }
    <span class="keyword">return</span> value;
}
</pre></td></tr></table></figure>

<h1 id="-annotation-">注解技术(Annotation)</h1>
<p>注释: 给其他开发人员阅读</p>
<p>注解: 给程序阅读的注释, 取代配置文件</p>
<p>配置文件: 为了代码修改方便, 将经常变化信息, 写入配置文件</p>
<p>注解: 程序内部的配置信息, 出现原因: </p>
<ol>
<li>软件复杂, 配置文件太大</li>
<li>程序中都是接口, 没有实现类, <em>造成程序的可读性越来越差</em><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">List</span> <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList(); <span class="comment">//耦合</span>
<span class="comment">// 解决耦合</span>
<span class="keyword">List</span> <span class="keyword">list</span> = <span class="comment">// 工厂提供实现类, 工厂读取配置文件获取实现类</span>
<span class="comment">// 造成程序的可读性越来越差</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="jdk-">JDK常见的注解</h2>
<p>三种基本注解:</p>
<ul>
<li><code>@Override</code>: 重写父类方法, 编译时进行代码检查, 
JDK5 只能用于方法覆盖, JDK6 可以用于方法实现</li>
<li><code>@Desprecated</code>: 表示程序某个方法过时</li>
<li><code>@SuppressWarnings</code>: 抑制文件警告<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">@SuppressWarnings</span>(<span class="string">"all"</span>)
<span class="variable">@SuppressWarnings</span>(<span class="string">"Desprecated"</span>)
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">注解在企业开发中的应用</h2>
<p>完整应用步骤</p>
<ol>
<li>定义注解</li>
<li>在目标类或者方法、变量上, 应用注解</li>
<li>在程序运行时, 通过反射技术取解析获得注解中的信息</li>
</ol>
<p>在企业开发中, 最常见的是框架内部已经提供注解,
已经提供解析注解的程序, 只需要将注解应用到代码中.</p>
<h3 id="-">自定义注解</h3>
<p>Java 数据类型: 基本类型, 数组, class, enum, interface, @interface</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 定义注解</span>
<span class="keyword">public</span> @<span class="keyword">interface</span> PersonInfo {
    <span class="comment">// 作为配置文件的替代</span>
    <span class="comment">// 配置信息是通过属性完成</span>
    String name() <span class="keyword">default</span> <span class="string">"小强"</span>;
    <span class="keyword">int</span> age();
}
</pre></td></tr></table></figure>

<ul>
<li><p>注解支持类型:String, 基本数据类型, enum, Class, 其他注解类型, 以上数据类型 相应的一维数组</p>
</li>
<li><p>特殊注解,</p>
<ul>
<li>在应用注解中, 需要为每个属性赋值</li>
<li>如果只有 <code>value</code> 属性, 可以省略掉 <code>value=</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>  <span class="at_rule">@interface<span class="preprocessor"> DBInfo</span>{</span>
     String <span class="function">value()</span>;
  }
  <span class="comment">// 使用</span>
  <span class="at_rule">@<span class="function">DBInfo(<span class="string">"Mysql"</span>)</span></span>
</pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="jdk-">JDK元数据</h3>
<p>修饰注解的注解</p>
<ul>
<li><code>@Retention</code>, 修饰注解的有效范围<ul>
<li><code>RetentionPolicy.SOURCE</code>: 在.java文件中有效, 给编译器使用</li>
<li><code>RetentionPolicy.CLASS</code>: 给类加载器用</li>
<li><code>RetentionPolicy.RUNTIME</code>: 给程序使用</li>
</ul>
</li>
<li><code>@Target</code>: 表示注解可以应用的目标<ul>
<li><code>ElementType.ANNOTATION_TYPE</code></li>
<li><code>ElementType.CONSTTRCTOR</code></li>
<li><code>ElementType.FIELD</code></li>
<li><code>ElementType.Method</code></li>
<li><code>ElementType.LOCAL_VARIABLE</code></li>
<li><code>ElementType.TYPE</code>: 用于类和接口</li>
<li><code>ElementType.PACKAGE</code></li>
<li><code>ElementType.PARAMETER</code></li>
</ul>
</li>
<li><code>@Documented</code>: 生成的注解会被生成到文档</li>
<li><code>@Inherited</code>: 应用了这个注解的类的子类会自动继承注解</li>
</ul>
<h2 id="-">提取注解中的信息</h2>
<p>编写流程: </p>
<ol>
<li>编写注解类</li>
<li>应用注解</li>
<li>提取注解信息, 通过 <code>java.lang.reflect.AnnotatedElement</code>接口,
所有反射接口都实现了他<ul>
<li>拿到注解修饰目标的反射对象</li>
<li>通过 <code>AnnotatedElement</code> 接口提供的API, 操作注解</li>
</ul>
</li>
</ol>
<h3 id="-">案例一 银行转账控制</h3>
<p>需求: 每次最大金额20万</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
<span class="keyword">public</span> @<span class="keyword">interface</span> BankInfo{
    <span class="keyword">double</span> maxmoney();
}
<span class="keyword">public</span> <span class="keyword">class</span> Bankz {
    <span class="comment">// 执行转账</span>
    @BankInfo(maxmoney=<span class="number">200000</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(String <span class="keyword">from</span>, String to, <span class="keyword">double</span> money) {
        <span class="comment">// money 最大金额限制是200万元</span>
        <span class="comment">// 1. 传统方式, 读取properties, 最大金额</span>
        <span class="comment">// double maxmoney = Double.parseDouble(bundle.getBundle("bank"));</span>
        Class&lt;Bank&gt; c = Bank.Class;
        Method c = c.getMethod(<span class="string">"transfer"</span>, String.class, String.class, <span class="keyword">double</span>.class);
        <span class="comment">// 判断方法中是否由注解信息</span>
        <span class="keyword">if</span>(c.isAnnotationPresent(BankInfo.class)){
            BankInfo info = method.getAnnotaion(BankInfo.class);
            <span class="keyword">double</span> maxmoney = info.maxmoney();
        }
        <span class="keyword">if</span>(money &lt;= maxmoney)
            println(<span class="string">"正常转账, 从"</span> + <span class="keyword">from</span> + <span class="string">"账户向"</span> + to + <span class="string">"账户转了"</span> + money);
    }
}
</pre></td></tr></table></figure>

<h3 id="-">案例二 获得数据库连接参数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">// 定义注解</span>
<span class="annotation">@Retentioin</span>(RetentionPolicy.RUNTIME)
<span class="annotation">@Target</span>(ElementType.METHOD)
<span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">JdbcInfo</span> {</span>
    String url();
    String driverClass();
    String username();
    String password();
}
<span class="comment">// 应用注解, 配置注解信息</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConnection</span> {</span>
    <span class="annotation">@JdbcInfo</span>(driverCalss=<span class="string">"com.mysql.jdbc.Driver"</span>, url=<span class="string">"jdbc:mysql:///test"</span>,password=<span class="string">""</span>, user=<span class="string">""</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span>(){
        <span class="comment">// 运行时, 通过反射获取注解信息</span>
        Class cl = JdbcConnection.class;
        Method m = c.getMethod(<span class="string">"connect"</span>);
        <span class="keyword">if</span>(m.isAnnotationPresent(JdbcInfo.class)) {
            JdbcInfo info = m.getAnnotaion(JdbcInfo.class);
            String url = info.url(); <span class="comment">//</span>
            Class.forName(driverClass);
            <span class="comment">// 连接数据库</span>
            Connection conn = DriverManager.getConnection(url, user, password);
        } <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"连接失败"</span>);
        }
    }
}
</pre></td></tr></table></figure>

<h2 id="-">案例综合 权限控制</h2>
<p>基于动态代理和注解对方法级别实现细粒度权限控制</p>
<ul>
<li>粗粒度: URL级别的权限控制<ul>
<li>点击页面中的每个链接, 对应服务器一个URL地址, 一个请求, 一个 Servlet</li>
<li>在过滤器中判断当前登陆用户,是否具有访问url的权限</li>
<li>一次请求, 一次判断</li>
</ul>
</li>
<li>细粒度: 方法级别的权限控制<ul>
<li>每个功能对应一个url, 一个Sevlet, 调用多个业务层 Service, 多个持久层DAO</li>
<li>通过注解信息, 判断用户, 控制方法的访问</li>
<li>一次请求, 多次判断</li>
</ul>
</li>
</ul>
<h3 id="-">编程实现</h3>
<h4 id="-">建立数据库</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> privilege(
    id <span class="keyword">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increament,
    name <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
)
<span class="keyword">insert</span> <span class="keyword">into</span> privilege <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"添加权限"</span>),(<span class="number">2</span>,<span class="string">"删除权限"</span>), (<span class="number">3</span>, <span class="string">"更改权限"</span>);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(
    id <span class="keyword">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increament,
    username <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    password <span class="keyword">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
)
<span class="keyword">create</span> <span class="keyword">table</span> (
    user_id <span class="keyword">int</span>,
    privilege_id <span class="keyword">int</span>,
    <span class="keyword">constraint</span> user_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) reference <span class="keyword">user</span>(id),
    <span class="keyword">constraint</span> privilege_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(privilege_id) reference privilege(id),
)</span>
</pre></td></tr></table></figure>

<h4 id="-">代码框架</h4>
<p><img src="/img/privilege_control.png" alt="代码框架"></p>
<h5 id="-">登陆</h5>
<p>Login.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">h1</span>&gt;</span>登陆<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
${errMsg}
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"Login"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
   用户名: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>/&gt;</span>
   密码: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span>/&gt;</span>
   <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> User{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String username;
    <span class="keyword">private</span> String password;
}
</pre></td></tr></table></figure>

<p>LoginServlet.java</p>
<p>使用 c3p0 和 DBUtil</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>public void doGet(req, res){
    String username = req<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
    String password = req<span class="preprocessor">.getParameter</span>(<span class="string">"password"</span>)<span class="comment">;</span>

    DataSource ds = JDBCUtils<span class="preprocessor">.getDataSource</span>()<span class="comment">;</span>
    QueryRunner qr = new QueryRunner(ds)<span class="comment">;</span>
    User u = qr<span class="preprocessor">.query</span>(<span class="string">"select * from user where username=? and password=?"</span>, new BeanHandler&lt;User&gt;(User<span class="preprocessor">.class</span>), username, password)<span class="comment">;</span>
    if(user==null){
        req<span class="preprocessor">.setAttribute</span>(<span class="string">"errMsg"</span>, <span class="string">"密码错误"</span>)<span class="comment">;</span>
        req<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"login.jsp"</span>)<span class="preprocessor">.forward</span>(req,res)<span class="comment">;</span>
    } else {
        req<span class="preprocessor">.getSession</span>()<span class="preprocessor">.setAttribute</span>(<span class="string">"user"</span>, u)
        res<span class="preprocessor">.sendRedirect</span>(request<span class="preprocessor">.getContextPath</span>()+<span class="string">"main.jsp"</span>)
    }
}
</pre></td></tr></table></figure>

<p>访问页面的每一个链接, 执行Service的各种方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">h1</span>&gt;</span>主页<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">h1</span>&gt;</span>登陆用户: ${user.username}<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/productAdd"</span>&gt;</span>添加商品<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/productDel"</span>&gt;</span>删除商品<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/productUpdate"</span>&gt;</span>修改商品<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/productQuery"</span>&gt;</span>查询商品<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
</pre></td></tr></table></figure>

<h5 id="-">实现业务功能</h5>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// producetAddServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, res) {
    service.add();
}
<span class="comment">// producetDelServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, res) {
    service.del();
}
<span class="comment">// producetUpdateServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, res) {
    service.update();
}
<span class="comment">// producetQueryServlet</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(req, res) {
    service.update();
}
</pre></td></tr></table></figure>

<p>ProdectService.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> {</span>
    <span class="annotation">@PrivilegeInfo</span>(<span class="string">"添加商品"</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(){
        prinln(<span class="string">"add"</span>)
    }
    <span class="annotation">@PrivilegeInfo</span>(<span class="string">"删除商品)"</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span>(){
        prinln(<span class="string">"del"</span>)
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(){
        prinln(<span class="string">"update"</span>)
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span>(){
        prinln(<span class="string">"query"</span>)
    }
}
</pre></td></tr></table></figure>

<h4 id="-">通过注解和动态代理添加权限控制</h4>
<p>访问目标方法需要权限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)
<span class="annotation">@Target</span>(ElementType.METHOD)
<span class="annotation">@Inherited</span>
<span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">privilege</span> {</span>
    String value();
}
</pre></td></tr></table></figure>

<p>为了实现动态代理, 添加服务接口, 给服务类添加注解</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> IProdectService{
    @PrivilegeInfo(<span class="string">"添加商品"</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>();
    @PrivilegeInfo(<span class="string">"删除商品)"</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span>();
}
<span class="keyword">public</span> <span class="keyword">class</span> ProductService implement IProdectService{
}
</pre></td></tr></table></figure>

<p>动态代理实现权限控制</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="comment">// 在执行 doGet 之前</span>
<span class="keyword">public</span> <span class="title">beforeDoGet</span>(){
    User user = req.getSession().getAttribute(<span class="string">"user"</span>);
    service = ProducetProxyFactory.makeProxy(<span class="keyword">new</span> ProductService, user);
    service.doSome();
}

<span class="keyword">public</span> <span class="keyword">class</span> ProductProxyFactory {
    <span class="comment">// user 当前登陆用户</span>
    <span class="comment">// ProductService 当前业务对象</span>
    <span class="keyword">public</span> <span class="keyword">static</span> IProductService <span class="title">makeProxy</span>(final ProductService ps, User user) {
        Proxy.newProxyInstance(classLoader,
            ps.getClass().getClassLoader(), <span class="keyword">new</span> InvocationHandler(){
                <span class="keyword">public</span>  Object <span class="title">invoke</span>(proxy, method, args){
                    <span class="comment">// 判断用户是否登陆</span>
                    <span class="keyword">if</span>(user==<span class="keyword">null</span>){
                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户还没有登陆"</span>);
                    }
                    <span class="comment">// 获取业务方法上的注解信息</span>
                    <span class="keyword">if</span>(method.isAnnotationPresent(PrivilegeInfo.class)) {
                        method.getAnnotaion(PrivilegeInfo.class);
                        String needPrivilege = privilegeInfo.<span class="keyword">value</span>();

                        <span class="comment">// 判断用户数是由具有权限</span>
                        DataSource ds = JDBCUtils.getDataSource();
                        QueryRunner qr = <span class="keyword">new</span> QueryRunner(ds);
                        String sql = <span class="string">"select privilege.* from privilege "</span>
                            + <span class="string">"inner join user_privilege up on privilege.id=up.privilege_id where up.user=?"</span>
                        List&lt;Privilege&gt; privileges = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Privilege&gt;, user.getId);
                        <span class="keyword">for</span>(p &lt;- privileges) {
                            <span class="keyword">if</span>(p.getName().equals(needPrivilege))
                                method.invoke(ps, args);
                        }
                        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"权限不足"</span>);
                    } <span class="keyword">else</span> {
                        <span class="keyword">return</span> method.invoke(ps, args)
                    }
                }
            });
        <span class="keyword">return</span> proxy;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Privilege {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
}
</pre></td></tr></table></figure>

<h1 id="-">类加载器</h1>
<p>编写.java源码 -&gt; 编译器编译 -&gt; .class 字节码文件 -&gt; ClassLoader 加载.class文件</p>
<p>类加载器负责将.class文件 加载到内存中, 并为之生成 java.lang.Class 对象
<img src="/img/class_loader.png" alt="ClassLoader继承结构图"></p>
<ul>
<li><p>BootStrap 引导类加载器: 负责加载Java的核心类, 是C语言的代码, 负责加载 <code>JRE/lib/rt.jar</code>(所有常用JDK类, 都属于它)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>// ArrayList 位于rt<span class="preprocessor">.jar</span>, 由 BootStrape 加载
ArrayList list = new ArrayList()<span class="comment">;</span>
println(list<span class="preprocessor">.getClass</span>()<span class="preprocessor">.getClassLoader</span>())<span class="comment">;  // 是Null, 因为c语言写的, 没有类</span>
// 打印Bootstrap 加载类路径
URL[] urls=sun<span class="preprocessor">.misc</span><span class="preprocessor">.Launcher</span><span class="preprocessor">.getBootstrapClassPath</span>()<span class="preprocessor">.getURLs</span>()<span class="comment">; </span>
for (int i = <span class="number">0</span><span class="comment">; i &lt; urls.length; i++) { </span>
	System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(urls[i]<span class="preprocessor">.toExternalForm</span>())<span class="comment">; </span>
}
</pre></td></tr></table></figure>
</li>
<li><p>ExtClassLoader 扩展类加载器: 加载 <code>jre/lib/ext/*.jar</code></p>
</li>
<li><p>AppClassLoader (系统)应用类加载器, <code>ClassLoader.getSystemClassLoader()</code> 直接获得 系统类加载器</p>
</li>
</ul>
<h2 id="-">细节</h2>
<blockquote>
<p>面试题: 程序运行时, 加载类, 类不在工程代码中, 是否报错?</p>
</blockquote>
<p>工程代码中由 AppClassLoader 加载, 还有 BootStrap 和 ExtClassLoader 加载类</p>
<blockquote>
<p>类加载器顺序和特性?</p>
</blockquote>
<ol>
<li><p>委托机制: 优先由父类加载器加载,父类加载器找不到类,
子类加载器尝试加载, 如 <code>NoSuchMethodError</code>,
可能说明类加载器已经在之前加载了一个另一个类, 而那个类没有这个方法</p>
</li>
<li><p>全盘负责机制: 一个类被加载, 这个类所依赖和引用的类也会被这个类加载器加载</p>
</li>
</ol>
<blockquote>
<p>自定义类加载器, 不一定是采用委托机制</p>
</blockquote>
<p>所有自定义加载器, 必须继承 ClassLoader, 重写<code>findClass</code></p>
<blockquote>
<p>.class 文件字节码, 如何称为Class对象</p>
</blockquote>
<ol>
<li>通过io流, 读取.class文件, 生成byte数组</li>
<li>调用ClassLoader 提供的 <code>defineClass</code>, 生成 Class 对象</li>
</ol>
<blockquote>
<p>常见错误 <code>java.lang.ClassCassException</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Class c = myClassLoader<span class="preprocessor">.findClass</span>(<span class="string">"java.activition.MimeType"</span>)<span class="comment">;</span>
MimeType mimeType = (mimeType) c<span class="preprocessor">.newInstance</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>MimeType 遵循委托机制, 由父类加载器加载</p>
<p>c.newInstance() 由子类类加载器加载</p>
<p><strong>不同类加载器, 加载同一个类, 也会出现不同Class对象</strong></p>
<h2 id="tomcat-">Tomcat的类加载器</h2>
<p>Jndi: 通过配置, 将一个对象交给tomcat创建和管理, 在程序中目录访问原则,
获取到tomcat中的绑定的对象</p>
<p>Tomcat 类加载器是区别于JVM的加载器的</p>
<p>比传统三个类加载器, 添加 Common 类加载器(Tomcat/lib) 和 WebApp(WEB-INF/classes和lib)类加载器</p>
<p>违背父类委托机制, 优先加载当前工程下类和jar, 再去加载tomcat/lib公共类和jar包, 加载顺序:</p>
<ul>
<li>BootStrap classes of yourt JVM</li>
<li>System class loader classes</li>
<li>/WEB-INFO/calsses</li>
<li>/WEB-INFO/lib/*.jar</li>
<li>$CATALINA_HOME/lib</li>
<li>$CATALINA_HOME/lib/*.jar</li>
</ul>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day22-文件操作和监听器]]></title>
    <link href="http://zhpooer.github.io/2014/04/29/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day22-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://zhpooer.github.io/2014/04/29/传智播客day22-文件操作和监听器/</id>
    <published>2014-04-29T01:02:31.000Z</published>
    <updated>2014-04-29T09:12:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">文件上传</h1>
<ol>
<li>必须提供<code>&lt;input type=&quot;file&quot; name=&quot;&quot;/&gt;</code>的文件上传输入域</li>
<li>表单的提交方式必须是POST方式</li>
<li>设置 <code>&lt;form enctype=&quot;multipart/form-data&quot;&gt;</code></li>
</ol>
<h2 id="-">原理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- enctype: 指定请求体正文 --&gt;</span>
<span class="comment">&lt;!-- application/x-www-form-urlencoded(默认) --&gt;</span>
<span class="comment">&lt;!-- 可选值是multipart/form-data --&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">""</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"text"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span>
     <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"photo"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<p>表单的 enctype 不是  <code>application/x-www-form-urlencoded</code>, 传统的获取方式将失效</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// enctype = multipart/form-data</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
    ServletInputStream <span class="keyword">in</span> = req.getInputStream();
    <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];
    <span class="keyword">int</span> len = -<span class="number">1</span>;
    <span class="keyword">while</span>(){
        System.ot.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));
    }
    <span class="keyword">in</span>.close()
}
</pre></td></tr></table></figure>

<p>运行结果:
<img src="/img/upload.png" alt="运行结果"></p>
<h2 id="-">编码</h2>
<ul>
<li>搭建环境, 导入 <code>commons-fileupload.jar</code></li>
<li>组件的功能是 实现解析</li>
<li>上传类的功能解析<ul>
<li><code>DiskFileItemFactory</code>: 产生FileItem对象</li>
<li><code>ServletFileUpload</code>: 解析上传的核心类</li>
</ul>
</li>
</ul>
<p><img src="/img/upload_util.png" alt="对象描述"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
    <span class="comment">// 验证用户提交的数据是不是mutlipart/form-data类型</span>
    boolean isMultiPart = ServletFileUpload.isMultiPartContent(req)
    <span class="comment">// 0. 获取文件上传的真实路径</span>
    String storeDir = getServletContext().getRealPath(<span class="string">""</span>);
    <span class="comment">// 1. 创建产生FileItem的工厂实例</span>
    DiskFileItemFactory fac = <span class="keyword">new</span> DiskFileItemFactory();
    <span class="comment">// 上传过程中要使用缓存, 设置缓存大小, 默认10kb</span>
    <span class="comment">// 如果上传的文件超过10kb, 组建hi采用磁盘临时文件的缓存形式</span>
    fac.setSizeThreadhold(<span class="keyword">int</span> size);
    <span class="comment">// 设置磁盘临时文件的存放目录, 默认是操作系统用户的临时目录</span>
    fac.setRepository(File);
    <span class="comment">// 2. 得到解析请求内容的解析器 ServletFileUpload</span>
    ServletFileUpload sfu = <span class="keyword">new</span> Servlet(fac);
    <span class="comment">// 3. 解析请求内容, 得到很多的FileItem实例</span>
    List&lt;FileItem&gt; items = sfu.parseReqeust(req);
    <span class="comment">// 4. 遍历FileItem的实例</span>
    <span class="keyword">for</span>(FileItem item:items){
        <span class="keyword">if</span>(item.isFormField()){
            <span class="comment">//4.1 如果是普通字段</span>
            String fieldName = item.getFieldName(); <span class="comment">// 字段名</span>
            <span class="comment">// 中文乱码</span>
            String fieldValue = item.getString(<span class="string">"utf-8"</span>);   <span class="comment">// 字段值</span>
        } <span class="keyword">else</span>{
            <span class="comment">//4.2 如果是上传字段</span>
            InputStream <span class="keyword">in</span> = item.getInputStream();
            <span class="comment">// 获取上传的文件名</span>
            String filename = item.getName(); <span class="comment">// 根据浏览器不同传的不同, 有的是全路径名, 有的是名字</span>
            filename = filename.subString(filename.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);
            OutputStream <span class="keyword">out</span> = <span class="keyword">new</span> FileOutputStream(storeDir + <span class="string">"/"</span> + filename);
            
            <span class="keyword">int</span> len = -<span class="number">1</span>;
            <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]
            <span class="keyword">while</span>(){
                <span class="keyword">out</span>.write(b, <span class="number">0</span>, len);
            }
            <span class="keyword">in</span>.close();
            <span class="keyword">out</span>.close();
            item.delete();
        }
    }
}
</pre></td></tr></table></figure>

<h2 id="-">考虑的问题</h2>
<ul>
<li>保证服务器的安全<ul>
<li>把存放文件的目录放在<code>/WEB-INFO</code>下</li>
</ul>
</li>
<li>中文乱码问题<ul>
<li>普通字段的中文乱码<ul>
<li><code>FileItem.getString(&quot;utf-8&quot;)</code></li>
</ul>
</li>
<li>上传的是中文文件名<ul>
<li><code>reqeust.setCharactorEncoding(&quot;utf-8&quot;)</code> 只负责请求体中的</li>
</ul>
</li>
</ul>
</li>
<li>重名文件被覆盖<ul>
<li>把文件名弄成唯一 <code>filename=UUID.randomUUID.toString()</code></li>
</ul>
</li>
<li><p>防止同一个文件夹下的文件太多</p>
<ul>
<li>分不同的目录存储<ol>
<li>按照当前的日期存储文件</li>
<li>按照UUID文件名的hashCode生成目录<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>    String dir = makeDir(storeDir, filename); <span class="comment">// 用hashCode计算出一个目录</span>
    <span class="keyword">private</span> String <span class="title">makeDir</span>(String storeDir, String filename) {
        <span class="keyword">int</span> hashCode = filename.hashCode();
        <span class="keyword">int</span> dir1 = hashCode&<span class="number">0xf</span>;
        <span class="keyword">int</span> dir2 = (hashCode&<span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>;
        String dir = <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2;
        File file = <span class="keyword">new</span> File(dir1, dir2);
        <span class="keyword">if</span>(!file.exists()) file.mkdirs();
        <span class="keyword">return</span> dir;
    }
</pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><p>限制文件上传的大小</p>
<ul>
<li>限制单个文件的大小<ul>
<li><code>ServletFileUpload.setFileSizeMax(2*1024*1024)</code> 单位是字节,超出时 <code>parseReqeust</code> 会报错
<code>FileUploadBase.FileSizeSizeLimitException</code></li>
</ul>
</li>
<li>限制总文件的大小<ul>
<li><code>ServletFileUpload.setSizeMax(2*1024*1024)</code>, 报错 <code>FileUploadBase.SizeLimitExceededException</code></li>
</ul>
</li>
</ul>
</li>
<li><p>限制上传的文件类型</p>
<ul>
<li>判断文件的扩展名</li>
<li>判断文件的MIME类型(Tomcat/conf/web.xml)<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  <span class="built_in">String</span> mimeType = item.getContentType();
  <span class="keyword">if</span>(mimeType.startsWith(<span class="string">"image"</span>)) todo();
</pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多文件上传时, 有空的表单项</p>
<ul>
<li>通过检查文件MIME也可以避免</li>
</ul>
</li>
<li>大文件上传时的临时文件问题<ul>
<li>组件对于超出缓存的文件会使用临时文件的形式上传, 上传完毕后. 临时文件不会删除,
造成硬盘空间的浪费. 可以通过 <code>FileItem.delete()</code> 来配置</li>
</ul>
</li>
<li>上传进度指示条(目前做不了, 要用到异步交互ajax)<ul>
<li>注册监听器, 拿到百分比<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>  ServletFileUpload.setProgressListener( <span class="keyword">new</span> ProgressListener(){
      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(<span class="keyword">long</span> pBytes, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems) {
          (pBytes + <span class="number">0.0</span>)/pContentLength;
      }
  })
</pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="-">文件的下载</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="comment">// 罗列可下载的资源</span>
<span class="keyword">public</span> <span class="literal">void</span> doGet(){
    <span class="comment">//得到 WEB-INF/files 下的文件</span>
    <span class="built_in">String</span> storeDir <span class="subst">=</span> getServletContext()<span class="built_in">.</span>getRealPath();
    <span class="comment">// 递归遍历所有的文件, 把遍历到的信息封装起来</span>
    <span class="comment">// Map&lt;String,String&gt;.key:UUID, value: 老文件名</span>
    <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>,<span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">map</span> <span class="subst">=</span> <span class="literal">new</span> HashMap<span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">String</span><span class="subst">&gt;</span>();
    treeWalk(<span class="literal">new</span> File(storeDir), <span class="built_in">map</span>)
    <span class="comment">// 把Map封装到request域中</span>
    request<span class="built_in">.</span>setAttribute(<span class="string">"map"</span>, <span class="built_in">map</span>);
    <span class="comment">// 转发到jsp取</span>
    request<span class="built_in">.</span>getRequestDispatcher(<span class="string">"/listFiles.jsp"</span>)<span class="built_in">.</span>forward(req, res);
}
<span class="keyword">public</span> <span class="literal">void</span> treeWalk(File file, <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, <span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">map</span>){
    <span class="keyword">if</span>(file<span class="built_in">.</span>isFile()){
        <span class="built_in">String</span> filename <span class="subst">=</span> file<span class="built_in">.</span>getName();
        <span class="built_in">String</span> oldFileName <span class="subst">=</span> filename<span class="built_in">.</span>subString(filename<span class="built_in">.</span>indexOf(<span class="string">"_"</span>) <span class="subst">+</span> <span class="number">1</span>);
    } <span class="keyword">else</span> {
        File<span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup"> children = file.listFiles();
        for(File f:children){
            treeWalk(f, map);
        }
    }
}</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">""</span> <span class="attribute">var</span>=<span class="value">"me"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">c:url</span> <span class="attribute">value</span>=<span class="value">"/servlet/DownloadServlet"</span> <span class="attribute">var</span>=<span class="value">"url"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">c:param</span> <span class="attribute">name</span>=<span class="value">"filename"</span> <span class="attribute">value</span>=<span class="value">"${me.key}"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">c:param</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">c:url</span>&gt;</span>
         ${me.value}&nbsp; nbsp; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"${url}"</span>&gt;</span>下载<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre>public void doGet(){
    String realFilename= request<span class="preprocessor">.getParameter</span>(<span class="string">"filename"</span>)<span class="comment">;</span>
    realFilename = new String(realFilename<span class="preprocessor">.getBytes</span>(<span class="string">"ISO8859-1"</span>), <span class="string">"utf-8"</span>)<span class="comment">;</span>

    String storeDir = getServletContext()<span class="preprocessor">.getRealPath</span>()<span class="comment">;</span>
    String dir = makeDir(storeDir, realFilename)<span class="comment">;</span>

    File file = new File(storeDir + dir + <span class="string">"/"</span> + realFilename)<span class="comment">;</span>
    if(file<span class="preprocessor">.exists</span>()){
        InputStream <span class="keyword">in</span> = new FileInputStream(file)<span class="comment">;</span>
        // 截取老文件名, 并进行url编码
        String oldFileName = realFilename<span class="preprocessor">.subString</span>(realFilename<span class="preprocessor">.indexOf</span>(<span class="string">"_"</span>)+<span class="number">1</span>)<span class="comment">;</span>
        oldFileName = URLEncoder<span class="preprocessor">.encode</span>(oldFileName, <span class="string">"utf-8"</span>)<span class="comment">;</span>
        
        response<span class="preprocessor">.setHeader</span>(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + oldFileName)<span class="comment">;</span>
        
        OutputStream <span class="keyword">out</span> = response<span class="preprocessor">.getOutpuStream</span>()<span class="comment">;</span>
        while(){
            <span class="keyword">out</span><span class="preprocessor">.write</span>(b, <span class="number">0</span>, len)<span class="comment">;</span>
        }
        <span class="keyword">out</span><span class="preprocessor">.close</span>()<span class="comment">;</span>
        
        response<span class="preprocessor">.getOutpuStream</span>()<span class="preprocessor">.write</span>(<span class="string">"下载成功"</span>)<span class="comment">;// 重写获得outputStream对象</span>
    } else {
       response<span class="preprocessor">.getOutpuStream</span>()<span class="preprocessor">.write</span>(<span class="string">"下载失败"</span><span class="preprocessor">.getBytes</span>(<span class="string">"utf-8"</span>))<span class="comment">;</span>
    }
}
</pre></td></tr></table></figure>

<h1 id="-">观察者模式</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 事件源:发生事件的对象</span>
<span class="comment">// 监听器: 封装事件的接口</span>
<span class="comment">// 事件对象: 封装事件源</span>
Frame f = <span class="keyword">new</span> Frame(<span class="string">"我的窗体"</span>);
f.setSize(<span class="number">400</span>, <span class="number">280</span>);
f.setVisible(<span class="keyword">true</span>);
f.addWindowListener(<span class="keyword">new</span> MyWindowListener());
<span class="class"><span class="keyword">class</span> <span class="title">MyWindowListener</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">WindowAdapter</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> windowsClosing(WindowEvent e){
        Frame f = e.getSource();
        f.dispose();
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">// 事件源</span>
<span class="keyword">public</span> <span class="keyword">class</span> Student {
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> StudentListener listener;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudentListener</span>(){
        <span class="keyword">this</span>.listener = listener;
    }
    <span class="keyword">public</span> <span class="title">Student</span>(String name){}
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span>(){
        <span class="keyword">if</span>(<span class="keyword">this</span>.listener!=<span class="keyword">null</span>){
            listener.preStudy();
        }
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span>(){
        <span class="keyword">if</span>(<span class="keyword">this</span>.listener!=<span class="keyword">null</span>){
            listener.preSleep();
        }
    }
}
<span class="comment">// 监听器</span>
<span class="keyword">public</span> <span class="keyword">interface</span> StudentListener{
   <span class="keyword">void</span> preStudy(StudentEvent e);
   <span class="keyword">void</span> preSleep(StudentEvent e);
}
<span class="comment">// 事件对象</span>
<span class="keyword">public</span> <span class="keyword">class</span> StudentEvent{
    <span class="keyword">public</span> <span class="title">StudentEvent</span>(Object source){
        <span class="keyword">this</span>.source = source;
    }
    <span class="keyword">public</span> Object <span class="title">getSource</span>(){
        <span class="keyword">return</span> source;
    }
}
</pre></td></tr></table></figure>

<h1 id="servlet-">Servlet 中的监听器</h1>
<p>Servlet规范中, 提供了8个监听器(接口)</p>
<ul>
<li><p>监听 ServletContext, HttpSession, ServletRequest 三个对象的创建的创建和销毁</p>
<ol>
<li>ServletContextListener: 监听 ServletContext 的创建和销毁的监听器<br>应用启动时执行, 只执行一次<br>应用场景, 完成系统启动时的初始化工作(Spring框架)</li>
<li>HttpSessionListener: 监听 HttpSession 的创建和销毁的监听器<br>一个会话对象, 代表着一个客户端, 可以统计网站的访问量</li>
<li>ServletRequestListener: 监听 ServletReques 的创建和销毁的监听器<br>可以统计每次页面的访问次数</li>
</ol>
</li>
<li><p>监听 ServletContext, HttpSession, ServletRequest 三个对象域中数据变化的监听器</p>
<ol>
<li>ServletContextAttributeListener 监听数据的添加删除修改</li>
<li>HttpSessionAttributeListener 监听数据的添加删除修改<br>统计登陆用户列表</li>
<li>ServletRequestAttributeListener 监听数据的添加删除修改</li>
</ol>
</li>
<li><p>感知型监听器, 这种监听器不需要注册</p>
<ol>
<li><code>javax.servlet.http.HttpSessionBindingListener</code> 谁实现的这个接口, 就能感知自己合适被
HttpSession 绑定和解绑</li>
<li><code>javax.servlet.http.HttpSessionActiveListener</code> 谁实现的这个接口, 就能感知自己合适被
HttpSession 钝化和激活</li>
</ol>
</li>
</ul>
<h2 id="-">具体用法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>public class MyServletContextListener extends ServletContextListener{}
<span class="comment">&lt;!-- web.xml --&gt;</span>
<span class="tag">&lt;<span class="title">listener</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>.../MyServletContextListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
<span class="tag">&lt;<span class="title">listener</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span>.../MyHttpSessionListener<span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
<span class="tag">&lt;<span class="title">session-config</span>&gt;</span>
    <span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span> <span class="comment">&lt;!-- 一分钟后销毁 --&gt;</span>
<span class="tag">&lt;/<span class="title">session-config</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">监听器案例</h2>
<p>在线踢人</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> User{
   <span class="keyword">private</span> String username;
   <span class="keyword">private</span> String password;
}
</pre></td></tr></table></figure>

<p>Login.jsp</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"loginservlet"</span> <span class="attribute">method</span>=<span class="value">"posj"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<p>LoginServlet.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>public void doGet(){
    req<span class="preprocessor">.setCharactorEncoding</span>(<span class="string">"utf-8"</span>)<span class="comment">;</span>
    String user = req<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
    String password = req<span class="preprocessor">.getParameter</span>(<span class="string">"password"</span>)<span class="comment">;</span>
    User user = new User()<span class="comment">;</span>
    user<span class="preprocessor">.setUsername</span>(username)<span class="comment">;</span>
    user<span class="preprocessor">.setPassword</span>(password)<span class="comment">;</span>
    request<span class="preprocessor">.getSessioin</span>()<span class="preprocessor">.setAttribute</span>(<span class="string">"user"</span>, user)<span class="comment">;</span>
    res<span class="preprocessor">.sendRedirect</span>(req<span class="preprocessor">.getContexPath</span>())<span class="comment">; // 重定向到主页</span>
}
</pre></td></tr></table></figure>

<p>监听域中数据的变化</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">public</span> class OnlineUserListener implement HttpSessionAttributeListener {
    <span class="comment">// 设置登陆标记 </span>
    <span class="comment">// 监听到的目的: 找一个容器 Map&lt;用户名, httpSession&gt; 存起来, 让index.jsp能访问到</span>

    <span class="comment">// 向任何HttpSession域中放东西, 都会经过该方法</span>
    <span class="keyword">public</span> <span class="literal">void</span> attributeAdded(HttpSessionBindingListener e) {
        HttpSession session <span class="subst">=</span> se<span class="built_in">.</span>getSession();
        Object obj <span class="subst">=</span> session<span class="built_in">.</span>getAttribute(<span class="string">"user"</span>);
        <span class="keyword">if</span>(obj<span class="subst">==</span><span class="built_in">null</span>){
            <span class="comment">// 放的标记不是User</span>
            <span class="keyword">return</span>;
        }
        <span class="keyword">if</span>(<span class="subst">!</span>(obj instanceof User){
            <span class="keyword">return</span>;
        }
        ServletContext sc <span class="subst">=</span> session<span class="built_in">.</span>getServletContext();
         <span class="comment">//存放登陆用户名和对应HttpSession对象</span>
        <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, HttpSession<span class="subst">&gt;</span> <span class="built_in">map</span> <span class="subst">=</span> sc<span class="built_in">.</span>getAttribute(<span class="string">"map"</span>);
        <span class="keyword">if</span>(<span class="built_in">map</span><span class="subst">==</span><span class="built_in">null</span>){
             <span class="built_in">map</span> <span class="subst">=</span> Collections<span class="built_in">.</span>synchronizedMap(<span class="literal">new</span> HashMap<span class="subst">&lt;</span><span class="built_in">String</span>, HttpSession<span class="subst">&gt;</span>());<span class="comment">// 线程安全的Map</span>
             sc<span class="built_in">.</span>setAttribute(<span class="string">"map"</span>, <span class="built_in">map</span>);
        }
        <span class="built_in">map</span><span class="built_in">.</span>put((User)obj<span class="built_in">.</span>getUsername(), session);
    }
}
</pre></td></tr></table></figure>

<p>index.jsp, 显示当前用户登录的登陆名</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"applicationScope.map"</span> <span class="attribute">var</span>=<span class="value">"me"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">c:url</span> <span class="attribute">value</span>=<span class="value">"KickServlet"</span> <span class="attribute">name</span>=<span class="value">"url"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"${me.key}"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">param</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">c:url</span>&gt;</span>
        ${me.key} &nbsp; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"${url}"</span>&gt;</span>踢出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<p>KickServlet.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="literal">void</span> doGet(){
    <span class="built_in">String</span> username <span class="subst">=</span> request<span class="built_in">.</span>getParameter(<span class="string">"username"</span>);
    username <span class="subst">=</span> <span class="literal">new</span> <span class="built_in">String</span>(username<span class="built_in">.</span>getBytes(<span class="string">"ISO-8859-1"</span>, <span class="string">"utf-8"</span>))
    ServletContext sc <span class="subst">=</span> getServletContext();
    <span class="built_in">Map</span><span class="subst">&lt;</span><span class="built_in">String</span>, HttpSession<span class="subst">&gt;</span> <span class="subst">=</span> sc<span class="built_in">.</span>getParameter(<span class="string">"map"</span>);
    <span class="built_in">map</span><span class="built_in">.</span>get(username)<span class="built_in">.</span>invalidate();
    <span class="built_in">map</span><span class="built_in">.</span>remove(username);
    res<span class="built_in">.</span>sendRedirect(rq<span class="built_in">.</span>getContexPath());
}
</pre></td></tr></table></figure>

<h1 id="-">国际化</h1>
<p>程序提供适合来访者阅读习惯的文本, i18n</p>
<h2 id="-">固定文本的国际化</h2>
<p>固定文本写在一个资源包中, 一个资源包可以包括多个 <code>*.properties</code>的文件</p>
<h3 id="-">资源的写法</h3>
<p>文件基名<em>语言</em>国家.properties 语言 国家有一定的编码, ISO来指定(基名一样)</p>
<p>msg_zh_CN.properties 中国大陆</p>
<p>msg_en_US.properties 美利坚</p>
<p>msg_en_UK.properties 大不列颠</p>
<h3 id="-">编码案例</h3>
<p>msg_en_UK.properties
msg_zh_CN.properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>// 获取来访者使用的系统的区域位置
ResourceBundle<span class="preprocessor">.getBundle</span>(<span class="string">"cn.itcast.resources.msg"</span>)
rb<span class="preprocessor">.getString</span>(<span class="string">"hello"</span>)

// 读取美国的
Locale l = Locale<span class="preprocessor">.US</span><span class="comment">;</span>
ResourceBundle<span class="preprocessor">.getBundle</span>(<span class="string">"cn.itcast.resources.msg"</span>, l)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="vbscript">&lt;%
Locate l = req.<span class="built_in">getLocale</span>();
ResourceBundle rb = ResourceBundle.getBundle(<span class="string">""</span>, l)
%&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">""</span>&gt;</span>
    用户名: <span class="tag">&lt;<span class="title">input</span>/&gt;</span>
    <span class="vbscript">&lt;%= rb.getString(<span class="string">"username"</span>)%&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>

<span class="comment">&lt;!-- 等价于 --&gt;</span>
<span class="tag">&lt;<span class="title">fmt:setLocal</span> <span class="attribute">value</span>=<span class="value">"pageContext.request.locale"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">fmt:setLocal</span>&gt;</span>
<span class="tag">&lt;<span class="title">fmt:setBundle</span> <span class="attribute">basename</span>=<span class="value">"cn.itcast.resources.msg"</span> <span class="attribute">var</span>=<span class="value">"msg"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">fmt:setBundle</span>&gt;</span>

<span class="tag">&lt;<span class="title">fmt:message</span> <span class="attribute">key</span>=<span class="value">"username"</span> <span class="attribute">bundle</span>=<span class="value">"${msg}"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">fmt:message</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">时间和日期的格式化</h2>
<p>DateFormat: 用户所有界面的输入都是String, JavaBean: java.util.date</p>
<p><code>Date parse(String s)</code>: 解析字符串成为日期对象</p>
<p><code>String format(Date d)</code>: 把日期对象转换为字符串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="built_in">Date</span> d <span class="subst">=</span> <span class="literal">new</span> <span class="built_in">Date</span>();
DateFormat df <span class="subst">=</span> DateFormat<span class="built_in">.</span>getDateTimeInstance();
df<span class="built_in">.</span>format(d);
<span class="built_in">String</span> s <span class="subst">=</span> <span class="string">"2014-4-29 12:21:11"</span>
<span class="built_in">Date</span> d <span class="subst">=</span> df<span class="built_in">.</span>parse(s);

Locale l <span class="subst">=</span> Locale<span class="built_in">.</span>CHINA;
<span class="built_in">Date</span> d <span class="subst">=</span> <span class="literal">new</span> <span class="built_in">Date</span>();
DateFormat df <span class="subst">=</span> DateFormat<span class="built_in">.</span>getDateTimeInstance(DateFormate<span class="built_in">.</span><span class="literal">Full</span>, DateFormat<span class="built_in">.</span><span class="literal">Full</span>, l);
df<span class="built_in">.</span>format(d);
</pre></td></tr></table></figure>

<p>在JSP中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&lt;fmt:formateDate <span class="keyword">value</span>=<span class="string">"${now}"</span> <span class="class"><span class="keyword">type</span>=</span><span class="string">"both|date|time"</span>&gt;
&lt;/fmt:formateDate&gt;
</pre></td></tr></table></figure>

<h2 id="-">数字的格式化, 货币符号</h2>
<p>NumberFormat: 用户输入的String, JavaBean:Number</p>
<p><code>Number parse(String s)</code>: 解析</p>
<p><code>String (Number s)</code>: 格式化</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Locale l = Locale<span class="preprocessor">.CHINA</span>
int money = <span class="number">10000</span><span class="comment">;</span>
NumberFormat nf = NumberFormat<span class="preprocessor">.getCurrencyFomatter</span>()<span class="comment">;</span>
nf<span class="preprocessor">.format</span>(money)
</pre></td></tr></table></figure>

<h2 id="-">批量国际化</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// String pattern = "At 12:30 pm on jul 3,1998, a hurricance destroyed 99 house and caused $100000 of damage"</span>
<span class="built_in">String</span> pattern = <span class="string">"At {0, time, media} on {1, date, medium} a hurricance destroyed {2} house and caused {3, number, currency} of damage"</span>;

<span class="built_in">Date</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//数据库发生的日期</span>
<span class="built_in">Date</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 日期</span>

int num = <span class="number">99</span>;
int money = <span class="number">100000</span>;

MessageFormat mf = <span class="keyword">new</span> MessageFormat(pattern);
<span class="built_in">String</span> s = mf.format(<span class="keyword">new</span> <span class="built_in">Object</span>[]{time, date, num, money})
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day21-servlet过滤器]]></title>
    <link href="http://zhpooer.github.io/2014/04/28/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day21-servlet%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://zhpooer.github.io/2014/04/28/传智播客day21-servlet过滤器/</id>
    <published>2014-04-28T01:02:59.000Z</published>
    <updated>2014-04-28T09:06:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">过滤器概述</h1>
<p>Filter, 应用中的保安. 利用过滤器来实现对请求和响应的拦截.</p>
<h1 id="-">编写过滤器的步骤</h1>
<ol>
<li><p>编一个类, 实现 javax.servlet.Filter</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">Filter</span> {</span>
    <span class="comment">// 由容器调用, 每次响应和调用都会经过该方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(ServletRequest req, ServletResponse, FilterChain chain){
          <span class="comment">// 执行前</span>
          chain.doFilter(req, res); <span class="comment">// 放行,让下一个资源执行</span>
          <span class="comment">// 执行后</span>
    }
    <span class="comment">// 由容器调用, 完成过滤器的初始化</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(FilterConfig config){}
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>(){}
}
res.getWriter().write(<span class="string">"Hello"</span>);
</pre></td></tr></table></figure>
</li>
<li><p>配置web.xml,指定哪些资源需要拦截</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">filter</span>&gt;</span>
<span class="comment">&lt;!-- 定义一个过滤器, 并定制名称 --&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>FilterDemo1 <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>...<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
<span class="comment">&lt;!-- 多个过滤器的拦截的顺序, 由filter-mapping元素出现的顺序决定 --&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">过滤器的执行过程</h1>
<p><img src="/img/filter_process.png" alt="过滤器执行过程"></p>
<h2 id="-">生命周期</h2>
<ol>
<li><strong>应用在加载时</strong>会被初始化和初始化</li>
<li>针对用户的每次资源访问, 容器都会调用<code>doFilter</code>方法</li>
<li>应用被卸载或服务器停止时, 会执行<code>destroy</code></li>
</ol>
<h2 id="-">配置过滤器初始化参数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="title">init</span>(FilterConfig f){
    String <span class="keyword">value</span> = f.getInitParameter(<span class="string">"encoding"</span>);
    Enumeration en = f.getInitParameterNames();
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>&lt;<span class="built_in">filter</span>&gt;
&lt;init-<span class="built_in">param</span>&gt;
    &lt;<span class="built_in">param</span>-name&gt;&lt;/<span class="built_in">param</span>-name&gt;
    &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt;&lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;
&lt;/init-<span class="built_in">param</span>&gt;
&lt;/<span class="built_in">filter</span>&gt;
</pre></td></tr></table></figure>

<h1 id="-">过滤器的简单案例</h1>
<h2 id="-">统一字符编码的过滤器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// setCharactorFilter</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(ServletRequest req, ServletResponse, FilterChain chain){
    String encoding = <span class="string">"UTF-8"</span>;
    String <span class="keyword">value</span> = filterConfig.getInitParameter(<span class="string">"encoding"</span>);
    <span class="keyword">if</span>(<span class="keyword">value</span>!=<span class="keyword">null</span>){
        encoding = <span class="string">"utf-8"</span>;
    }
    req.setCharactorEncoding(encoding); <span class="comment">// 只针对POST请求, 对get请求不起作用</span>
    res.setContentType(<span class="string">"text/html;charset="</span> + encoding);
    chain.doFilter(req, res);
}
</pre></td></tr></table></figure>

<h2 id="-nocache-">动态资源缓存过滤器(NoCache)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(ServletRequest request, ServletResponse response, FilterChain chain){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http request"</span>);
    }
    res.setDateHeader(<span class="string">""</span>, -<span class="number">1</span>);
    res.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-Cache"</span>);
    res.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-Cache"</span>);
    chain.doFilter(req, res);
}
</pre></td></tr></table></figure>

<h2 id="-">静态资源缓存过滤器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>css <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="comment">&lt;!-- 单位为小时 --&gt;</span>
    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>1 <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span> 
<span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(ServletRequest request, ServletResponse response, FilterChain chain){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http reqest"</span>);
    }
    <span class="keyword">long</span> time = <span class="number">0</span>; <span class="comment">//缓存的时间的偏移量</span>

    String uri = res.getRequestURI(); <span class="comment">// /servlet/index.html</span>

    String extendName = uri.subString(uri.lastIndex(<span class="string">"."</span>) + <span class="number">1</span>);
    <span class="keyword">if</span>(html!=<span class="keyword">null</span> && <span class="string">"html"</span>.equals(extendName)){
        String <span class="keyword">value</span> = filterConfig.getInitParameter(<span class="string">"css"</span>);
        time = Long.parse(<span class="keyword">value</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);
    }
    res.setDateHeader(<span class="string">"Expires"</span>, System.currentTimeMillis()+time);
    chain.doFilter(req, res);
}
</pre></td></tr></table></figure>

<h2 id="-">自动登陆过滤器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="comment">// 用户账号和密码存到Cookie中, 保存形式是 'user_password'</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(ServletRequest request, ServletResponse response, FilterChain chain){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http reqest"</span>);
    }

    <span class="comment">// 判断用户是否登陆</span>
    HttpSession session = req.getSession();
    User user = (User)session.getAttribute(<span class="string">"user"</span>);
    <span class="keyword">if</span>(user==<span class="keyword">null</span>){
        Cookie[] cs = req.getCookies();
        <span class="comment">// 找到用户名和密码</span>
        <span class="keyword">for</span>(c &lt;- cs <span class="keyword">if</span> <span class="string">"loginInfo"</span>.equals(c.getName()){
            <span class="comment"><span class="xmlDocTag">///</span> 再次比对用户名和密码</span>
            String username = c.getValue().split(<span class="string">"\\_"</span>)[<span class="number">0</span>];
            String password = c.getValue().split(<span class="string">"\\_"</span>)[<span class="number">1</span>];
            <span class="keyword">if</span>(password==password){
                User u = <span class="keyword">new</span> User();
                u.setUsername(username);
                u.setPassword(password);
                req.getSession().setAttribute(<span class="string">"user"</span>, u);
            }
            <span class="keyword">break</span>;
        }
    }
    chain.doFilter(req, res);
}
</pre></td></tr></table></figure>

<h3 id="-">用户密码加密</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span>(String s){
    MessageDigest md = MessageDigest.getInstance(<span class="string">"md5"</span>);
    <span class="keyword">byte</span> b[] = md.digest(s.getBytes());
    Base64Encoder en = <span class="keyword">new</span> Base64Encoder();
    <span class="keyword">return</span> en.encode(b)
}
<span class="comment">//  cookie中不能存中文 , 可以用base64编码</span>
<span class="keyword">new</span> Base64Encoder().encode(s.getBytes());
</pre></td></tr></table></figure>

<h1 id="-">过滤器的高级配置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="comment">&lt;!-- 设置用户请求时, 什么时候执行过滤 --&gt;</span>
    <span class="comment">&lt;!-- 默认就是request --&gt;</span>
    <span class="tag">&lt;<span class="title">dispatcher</span>&gt;</span> REQUEST <span class="tag">&lt;/<span class="title">dispatcher</span>&gt;</span> <span class="comment">&lt;!-- 请求阶段 --&gt;</span>
    <span class="tag">&lt;<span class="title">dispatcher</span>&gt;</span> FORWARD <span class="tag">&lt;/<span class="title">dispatcher</span>&gt;</span> <span class="comment">&lt;!-- 转发阶段 --&gt;</span>
    <span class="tag">&lt;<span class="title">dispatcher</span>&gt;</span> INCLUDE <span class="tag">&lt;/<span class="title">dispatcher</span>&gt;</span> <span class="comment">&lt;!-- 动态包含 --&gt;</span>
    <span class="tag">&lt;<span class="title">dispatcher</span>&gt;</span> ERROR <span class="tag">&lt;/<span class="title">dispatcher</span>&gt;</span> <span class="comment">&lt;!-- 出异常时 --&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
</pre></td></tr></table></figure>

<p>注:</p>
<ul>
<li>page指令, errorPage=&quot;*.jsp&quot;, 属于转发方式</li>
<li>web.xml 配置的全局错误提示页面, 是的状态是 ERROR</li>
</ul>
<h1 id="-">过滤器的高级案例</h1>
<h2 id="-">全站中文乱码解决过滤器</h2>
<p>请求: Post Get参数乱码; 响应输出乱码解决过滤器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> doFilter(){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http reqest"</span>);
    }
    <span class="comment">// 看服务端有没有配置编码参数</span>
    String encoding = <span class="string">"utf-8"</span>;
    String value = filtercofnig.getInitParameter(<span class="string">"encoding"</span>);
    <span class="keyword">if</span>(value!=<span class="keyword">null</span>){
        encoding = value;
    }
    <span class="comment">// 解决post方式的乱码</span>
    req.setCharactorEncoding(encoding);
    res.setCharactorEncoding(encoding);
    res.setContentType(<span class="string">"text/html;charset="</span> + encoding);
    <span class="comment">// 解决get方式的乱码</span>
    MyHttpServletRequest mrequest = <span class="keyword">new</span> MyHttpServletRequest(request);
    chain.doFilter(mrequest, res);
}
<span class="class"><span class="keyword">class</span> <span class="title">MyHttpServletRequest</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">HttpServletRequestWrapper</span> {</span>
     <span class="keyword">public</span> MyHttpServletRequest(HttpServletRequest req){
         <span class="keyword">super</span>(req);
     }
     <span class="comment">// 只处理get请求编码</span>
     @Override <span class="keyword">public</span> String getParameter(String name) {
         String value = <span class="keyword">super</span>.getParameter(name);
         <span class="keyword">if</span>(value==<span class="keyword">null</span>){
             <span class="keyword">return</span> <span class="keyword">null</span>;
         }

         String method = <span class="keyword">super</span>.getMethod();
         <span class="keyword">if</span>(<span class="string">"get"</span>.equalsIgnoreCase(method)) {
             value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"iso-8859-1"</span>), <span class="keyword">super</span>.getCharactorEncoding());
         }
         <span class="keyword">return</span> value;
     }
}
</pre></td></tr></table></figure>

<h2 id="-">脏话过滤器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="comment">//必须把字符编码过滤器放在前面</span>
<span class="keyword">public</span> <span class="keyword">void</span> doFilter(){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http reqest"</span>);
    }
    DirtyWordsHttpServletRequest dwrequest = <span class="keyword">new</span> DirtyWordsHttpServletRequest(req);
    chain.doFilter(dwrequest, res);
}
<span class="class"><span class="keyword">class</span> <span class="title">DirtyWordsHttpServletRequest</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">HttpServletRequestWrapper</span>{</span>
    <span class="keyword">private</span> String dwords[] = {<span class="string">"xx"</span>, <span class="string">"xxx"</span>};
    <span class="keyword">public</span> String getParameter(String name){
        String value = <span class="keyword">super</span>.getParameter(name);
        <span class="keyword">if</span>(value==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;
        <span class="keyword">for</span>(String s : dwords){
            value = value.replace(s, <span class="string">"*"</span>)
        }
        <span class="keyword">return</span> value;
    }
}
</pre></td></tr></table></figure>

<h2 id="html-">HTML标记过滤器</h2>
<p><code>&lt;</code>换成<code>&amp;lt;</code>, 可以防止代码注入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">HtmlHttpServletRequest</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">HttpServletRequestWrapper</span>{</span>
    <span class="keyword">private</span> String dwords[] = {<span class="string">"xx"</span>, <span class="string">"xxx"</span>};
    <span class="keyword">public</span> String getParameter(String name){
        String value = <span class="keyword">super</span>.getParameter(name);
        <span class="keyword">if</span>(value==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;
        value = filter(value);
        <span class="keyword">return</span> value;
    }
}
</pre></td></tr></table></figure>

<h2 id="-gzip-">全站 GZIP 压缩过滤器</h2>
<p><img src="/img/gzip_filter.png" alt="gzip压缩原理"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span>(){
    HttpServletRequest req;
    HttpServletResponse res;
    <span class="keyword">try</span> {
        req = (HttpServletRequest) request;
        res = (HttpServletRequest) response;
    } <span class="keyword">catch</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"is not a http reqest"</span>);
    }
    GZIPHttpResponse ghp = <span class="keyword">new</span> GZIPHttpResponse(res);
    chain.doFilter(req, ghp);
    
    ByteArrayOutputStream bo = <span class="keyword">new</span> ByteArrayOutputStream();
    GZIPOutputStream gout = <span class="keyword">new</span> GZIPOutputStream();
    gout.write(ghp.getBytes());
    gout.close();
    Byte[] ba = bo.toByteArray();
    res.setHeader(<span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>);
    res.setContentLength(o.length); <span class="comment">// 不设置该值时, 浏览器访问Html静态资源会慢</span>
    res.getOutputStream().write(ba);


}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GZIPHttpResponse</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span>{</span>
    <span class="keyword">private</span> ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();
    <span class="keyword">private</span> PrintWriter pw = <span class="keyword">null</span>;
    <span class="comment">// 字符流</span>
    <span class="annotation">@Override</span> <span class="keyword">public</span> ServletOutPutStream <span class="title">getOutputStream</span>(){
        <span class="keyword">return</span> <span class="keyword">new</span> GZIPOutputStream(baos);
    }

    <span class="comment">// 字节流</span>
    <span class="annotation">@Override</span> <span class="keyword">public</span> PrintWriter <span class="title">getWriter</span>(){
        <span class="comment">//设置编码, 解决字符编码问题, 所以一定要设置在 字符编码过滤器中, 设置 res.setCharactorEncoding();</span>
        pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(baos, <span class="keyword">super</span>.getCharactorEncoding()));
        <span class="keyword">return</span> pw;
    }

    <span class="keyword">public</span> Byte[] <span class="title">getBytes</span>(){
        <span class="keyword">if</span>(pw!=<span class="keyword">null</span>) pw.flush();
        baos.flush();
        baos.getBytes();
    }
}

class GZIPServletOupStream extends ServletOutPutStream {
    <span class="keyword">private</span> ByteArrayOutputStream baos;
    <span class="keyword">public</span> <span class="title">GZIPServletOupStream</span>( ByteArrayOutputStream baos ){
        <span class="keyword">this</span>.baos = baos;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span>(<span class="keyword">int</span> b) {
        baos.write(b);
    }
}
</pre></td></tr></table></figure>

<p>显示数据用的静态资源需要压缩, 还有<code>JSP</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> GZIPFilter <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> *.jsp <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> GZIPFilter <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> *.css <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> GZIPFilter <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> *.js <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> GZIPFilter <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> *.html <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
<span class="comment">&lt;!-- .... --&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day20-ORM简介]]></title>
    <link href="http://zhpooer.github.io/2014/04/26/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day20-orm%E7%AE%80%E4%BB%8B/"/>
    <id>http://zhpooer.github.io/2014/04/26/传智播客day20-orm简介/</id>
    <published>2014-04-26T01:28:23.000Z</published>
    <updated>2014-05-05T02:20:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="orm-">ORM简介</h1>
<p>ORM(Object Relation Mapping):</p>
<ul>
<li>Object : JavaBean对象</li>
<li>Raltion: 关系型数据库</li>
<li>Mapping: 映射(存在在着对应关系)</li>
</ul>
<p>框架: Hibernate、MyBatis(iBatis)、JPA(java持久化框架, 规范)</p>
<p>简单的JDBC框架: 这些框架只是对JDBC操作的简单封装. 比如DBUtils\SpringJDBCTemplate</p>
<h1 id="dbutils-">DBUtils 框架的使用</h1>
<p>Dbutils 是Apache提供的JDBC简单框架</p>
<ul>
<li>QueryRunner</li>
<li><code>int[] batch(String sql, Object[][] params)</code>: 执行批处理</li>
<li>sql: 执行的语句</li>
<li>params: 二维数组,高纬表示执行的语句的条数, 低维表示每条语句的参数</li>
<li>返回每条语句影响到的记录行数</li>
<li><T> T query(String sql, ResultSetHandler<T> rsh)</li>
<li>适合执行sql查询, 把结果封装到JavaBean中</li>
<li><T> T query(String sql, ResultSetHandler<T> rsh, Object... params)</li>
<li>int update(String sql)</li>
<li>执行 insert update delete 语句</li>
<li>int update(String sql, Object... params)</li>
<li>int update(String sql, Object param)</li>
</ul>
<h2 id="bean-">Bean封装</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">20</span>),
    birthday <span class="keyword">date</span>
);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> User{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> Date birthday;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="keyword">private</span> QueryRunner qr = <span class="keyword">new</span> QueryRunner(datasource);
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(){
    qr.update(<span class="string">"insert into user values(?, ?, ?)"</span>, <span class="number">1</span>, <span class="string">"aaa"</span>, <span class="keyword">new</span> Date());
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span>(){
    qr.update(<span class="string">"update user set name=? where id=?"</span>, <span class="string">"aaa"</span>, <span class="keyword">new</span> Date(), <span class="number">1</span>);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDel</span>(){
    qr.update(<span class="string">"delete from user where id=?"</span>, <span class="number">1</span>);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryOne</span>(){
    User u = qr.query(<span class="string">"select * from user where id=1"</span>, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class), <span class="number">1</span>);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery1</span>(){
    User u = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> BeanHandler&lt;User&gt;(User.class));
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMulti</span>(){
    List&lt;User&gt; us = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> ListBeanHandler&lt;User&gt;(User.class));
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span>(){
    Object <span class="keyword">params</span>[][] = <span class="keyword">new</span> Object[<span class="number">10</span>][];
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">params</span>.length;i++){
        <span class="keyword">params</span>[i] = <span class="keyword">new</span> Object[]{i+<span class="number">1</span>, <span class="string">"aaa"</span> + ()i+<span class="number">1</span>), <span class="keyword">new</span> Date()}
    }
    qr.batch(<span class="string">"insert into user values(?,?,?)"</span>, <span class="keyword">params</span>);
}
</pre></td></tr></table></figure>

<h2 id="dbutils-">DBUtils 中的结果处理器详解</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre>
<span class="comment">// 把结果集的第一条记录封装到数组中, 数组中的元素就是每一列的值</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayHandler</span>(){
    Object objs[] = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> ArrayHandler());
}

<span class="comment">// 把结果集中的每条记录封装到一个List中, 元素是Object[],</span>
<span class="comment">// 适合查询结果由多条的记录</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayListHandler</span>(){
    List&lt;Object[]&gt; list = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> ArrayListHandler());
}

<span class="comment">//把查询结果中的某一列封装到List中</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testColumnListHandler</span>(){
    List&lt;Object&gt; list = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> ColumnListHandler(<span class="string">"name"</span>));
}

<span class="comment">// 把查询结果封装到一个Map中, Map中的key值是你指定的列值</span>
<span class="comment">// value 也是一个Map, map的key是字段名, value是字段值</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKeyedHandler</span>(){
    Map&lt;Object,Map&lt;String,Object&gt;&gt; bmap = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> KeyedHandler(<span class="string">"id"</span>));
}

<span class="comment">// 把结果集中的第一条记录封装到Map中, key是字段名, value是字段值</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapHandler</span>(){
    Map&lt;String, Object&gt; map = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> MapHandler());
}
<span class="comment">// 每个元的代表一条记录, 用Map 封装, key是字段名, value是字段值</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapListHandler</span>(){
    List&lt;Map&lt;String, Object&gt;&gt; list = qr.query(<span class="string">"select * from user"</span>, <span class="keyword">new</span> MapListHandler);
}

<span class="comment">// 单行, 单列</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScalarHandler</span>(){
    Object list = qr.query(<span class="string">"select count(*) from user"</span>, <span class="keyword">new</span> ScalarHandler(<span class="number">1</span>));
}
</pre></td></tr></table></figure>

<h1 id="threadlocal">ThreadLocal</h1>
<ol>
<li>ThreadLocal 提供了线程局部变量</li>
<li>分析原理</li>
</ol>
<p>ThreadLocal 内部有一个Map, Map的Key是当前线程对象, value是一个Objct对象. <em>模拟</em>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> ThreadLocal&lt;T&gt;{
    <span class="keyword">private</span> Map&lt;Runnable, T&gt; map = <span class="keyword">new</span> HashMap&lt;Runnable, T&gt;();
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(T t){
        map.put(Thread.currentThread(), t); <span class="comment">// 把传入的参数绑定到当前线程上</span>
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(){
        map.remove(Thread.currentThread());
    }
    <span class="keyword">public</span> T <span class="title">get</span>(){
        <span class="keyword">return</span> map.<span class="keyword">get</span>(Thread.currentThread()); <span class="comment">// 获取当前线程绑定的脆响</span>
    }
}
</pre></td></tr></table></figure>

<h1 id="-">真实案例中的事务控制</h1>
<ul>
<li>QueryRunner(DataSource conn) // 这个每条语句执行,都是不同的连接(Connection), 不能在同一个事务中执行语句</li>
<li>QueryRunner()  //因为需要所有语句执行要在同一个事务中执行, 在执行语句时, 要传入(Connection)</li>
</ul>
<blockquote>
<p>DAO层: 只负责数据库的访问, 只有增删改查</p>
<p>事务控制的要求: 一般是业务上的要求, 一个事务就是一个业务, <strong>事务控制</strong>不能在放在DAO</p>
</blockquote>
<h2 id="-">版本一</h2>
<h3 id="dao-">DAO层</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAccontByName</span>(acconntname){
    Account account = qr.query(<span class="string">"select * from account where name=?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountName);
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span>(Account account){
    qr.update(<span class="string">"udpate set "</span>, account.id, account.name)
}
</pre></td></tr></table></figure>

<h3 id="-">业务逻辑</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>Connection conn = dataSource<span class="preprocessor">.getConnection</span>()<span class="comment">; // 不好, 在业务层有Dao层 的代码</span>
conn<span class="preprocessor">.setAutoCommit</span>(false)<span class="comment">;</span>
dao<span class="preprocessor">.setConnection</span>(conn)<span class="comment">;</span>
Account sourceAccount = dao<span class="preprocessor">.findAccontByName</span>(sourceAccountName)<span class="comment">;</span>
Account targetAccount = dao<span class="preprocessor">.findAccontByName</span>(targetAccountName)<span class="comment">;</span>

sourceAccount<span class="preprocessor">.setMoney</span>(any)<span class="comment">;</span>
targetAccount<span class="preprocessor">.setMoney</span>(any)<span class="comment">;</span>

dao<span class="preprocessor">.update</span>(sourceAccount)<span class="comment">;</span>
dao<span class="preprocessor">.update</span>(targetAccount)<span class="comment">;</span>
conn<span class="preprocessor">.setAutoCommit</span>(true)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">版本二</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> TransactionManager{
    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; t1 = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Connection</span>(){
        Connecton conn = t1.<span class="keyword">get</span>(); <span class="comment">// 从当前线程上获取</span>
        <span class="keyword">if</span>(conn==<span class="keyword">null</span>){
            conn = dataSource.getConnection(); <span class="comment">// 没有就从池中取一个</span>
            t1.<span class="keyword">set</span>(conn);
        }
        <span class="keyword">return</span> conn;
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTransaction</span>(){
        Connection conn = getConnection();
        conn.setAutoCommit(<span class="keyword">false</span>);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span>(){
        Connection conn = getConnection();
        conn.commit();
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span>(){
        Connection conn = getConnection();
        conn.rollback();
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span>(){
        Connection conn = getConnection();
        conn.close();
        t1.remove();  <span class="comment">// 从当前线程解绑, 因为服务器使用了线程池技术</span>
    }
}
</pre></td></tr></table></figure>

<h3 id="-">业务逻辑</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>TransactionManager<span class="preprocessor">.startTransaction</span>()<span class="comment">;</span>
dao<span class="preprocessor">.setConnection</span>(conn)<span class="comment">;</span>
Account sourceAccount = dao<span class="preprocessor">.findAccontByName</span>(sourceAccountName)<span class="comment">;</span>
Account targetAccount = dao<span class="preprocessor">.findAccontByName</span>(targetAccountName)<span class="comment">;</span>

sourceAccount<span class="preprocessor">.setMoney</span>(any)<span class="comment">;</span>
targetAccount<span class="preprocessor">.setMoney</span>(any)<span class="comment">;</span>

dao<span class="preprocessor">.update</span>(sourceAccount)<span class="comment">;</span>
dao<span class="preprocessor">.update</span>(targetAccount)<span class="comment">;</span>
TransactionManager<span class="preprocessor">.commit</span>()<span class="comment">;</span>

TransactionManager<span class="preprocessor">.rollback</span>()<span class="comment">; // catch it</span>
TransactionManager<span class="preprocessor">.release</span>()<span class="comment">; // finally</span>
</pre></td></tr></table></figure>

<h3 id="dao-">DAO层</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAccontByName</span>(acconntname){
    Account account = qr.query(TransactionManager.getConnection(), <span class="string">"select * from account where name=?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountName);
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span>(Account account){
    qr.update(transactionmanager.getconnection(), <span class="string">"udpate set "</span>, account.id, account.name)
}
</pre></td></tr></table></figure>

<h2 id="-">版本三</h2>
<p>提取 service 中的关于 Transaction 的重复代码, 使用<strong>动态代理</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> Interface BusinessService{
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span>(){}
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> BeanFactory {
<span class="comment">// 返回BusinessService的实现类的代理对象</span>
<span class="comment">// 面向切面编程</span>
    <span class="keyword">public</span> <span class="keyword">static</span> BusinessService <span class="title">getBusinessService</span>(){
    BusinessService s = <span class="keyword">new</span> BusinessService();
    BusinessService proxy = Proxy.newProxyInstancee(
        getClassLoader(), s.getClass().getInterfaces(),
        <span class="keyword">new</span> InvocationHandler() {
            @Override <span class="keyword">public</span> Object <span class="title">invoke</span>() {
                TransactionManager.startTransaction();
                Object rtValue = method.invoke(s, args);
                    TransactionManager.commit();
                    TransactionManager.rollback(); <span class="comment">// try catch</span>
                    TransactionManager.release(); <span class="comment">// finally</span>
                    <span class="keyword">return</span> rtValue;
            }
        });
    }
}
</pre></td></tr></table></figure>

<h1 id="-">多表存取</h1>
<h2 id="-">一对多</h2>
<p>一个客户可以有许多订单</p>
<h3 id="-">模型类</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
)
<span class="keyword">create</span> <span class="keyword">table</span> orders(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    num <span class="keyword">varchar</span>(<span class="number">100</span>),
    money <span class="keyword">float</span>(<span class="number">8</span>,<span class="number">0</span>),
    customer_id <span class="keyword">int</span>,
    <span class="keyword">constraint</span> customer_id_ref <span class="keyword">foreign</span> <span class="keyword">key</span> (customer_id) referrence customer(id)
)</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Customer {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> List&lt;Orders&gt; orders = <span class="keyword">new</span> ArrayList&lt;Orders&gt;
}
<span class="keyword">public</span> <span class="keyword">class</span> Orders {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String num;
    <span class="keyword">private</span> <span class="keyword">float</span> money;
    <span class="keyword">private</span> Customer customer;
}
</pre></td></tr></table></figure>

<h3 id="dao">Dao</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> CustomerDaoImpl{
    <span class="keyword">private</span> QueryRunner rq;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span>(Customer c){
        rq.update(<span class="string">""</span>, c.getId(), c.getName());
        List&lt;Orders&gt; os = c.getOrders();
        <span class="keyword">if</span>(os!=<span class="keyword">null</span>&&os.size()&gt;<span class="number">0</span>){
            <span class="keyword">for</span>(Orders o:os){
                os.update(<span class="string">""</span>, o.getId...);
            }
        }
    }

<span class="comment">// 查询客户时,要不要查询客户拥有的订单? 看需求(Hibernate用的是延迟加载)</span>
    <span class="keyword">public</span> Customer <span class="title">findByCustomerId</span>(<span class="keyword">int</span> id){
        Customer c = rq.query(<span class="string">"select * from customer where id=?"</span>, <span class="keyword">new</span> BeanHandler&lt;Customer&gt;(), id);
        <span class="keyword">if</span>(c!=<span class="keyword">null</span>){
            <span class="comment">// 有查询结果, 查询该客户的订单</span>
            List&lt;Orders&gt; os = qr.query(<span class="string">"select * from orders where customer_id=?"</span>), <span class="keyword">new</span> BeanListHander&lt;Orders&gt;, c.getId());
            c.setOrders(os);
        }
        <span class="keyword">return</span> c;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> CustomerDaoTest {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(){
        Customer c = <span class="keyword">new</span> Customer();
        c.setId(<span class="number">1</span>);
        c.setName(<span class="string">""</span>);

        Orders o1 = <span class="keyword">new</span> Orders();
        o1.setId(<span class="number">1</span>);
        o1.setNum(<span class="string">"201401"</span>);
        o1.setMoney(<span class="number">1000</span>);
        c.getOrders().add(o1);

        Orders o2 = <span class="keyword">new</span> Orders();
        o2.setId(<span class="number">1</span>);
        o2.setNum(<span class="string">"201401"</span>);
        o2.setMoney(<span class="number">1000</span>);
        c.getOrders().add(o2);
        dao.addCustomer(c);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span>(){
        Customer c = dao.findByCustomerId(<span class="number">1</span>);
        List&lt;Orders&gt; os = c.getOrders();
    }
}
</pre></td></tr></table></figure>

<h2 id="-">多对多</h2>
<p>学生和老师的关系是多对多</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    salary <span class="keyword">float</span>(<span class="number">8</span>,<span class="number">0</span>)
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> student(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    grade <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher_student(
    t_id <span class="keyword">int</span>,
    s_id <span class="keyword">int</span>,
    <span class="keyword">primary</span> <span class="keyword">key</span>(t_id, s_id),
    <span class="keyword">constraint</span> t_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(t_id) referrences teacher(id),
    <span class="keyword">constraint</span> s_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(s_id) referrences student(id)
);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Teacher {
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> <span class="keyword">float</span> salary;
    <span class="keyword">private</span> List&lt;Student&gt; studnents = <span class="keyword">new</span> ArrayList();
}
<span class="keyword">public</span> <span class="keyword">class</span> Student{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String grade;
    <span class="keyword">private</span> List&lt;Teacher&gt; teachers = <span class="keyword">new</span> ArrayList();
}
</pre></td></tr></table></figure>

<h3 id="dao">Dao</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTeacher</span>(){
    <span class="comment">// 保存老师的基本信息</span>
    qr.update(<span class="string">"insert int teacher values(?,?,?)"</span>, t.getId(), t.getName());
    List&lt;Student&gt; sts = t.getStudnets();
    <span class="comment">// 查看学生的信息在不在, 不在才保存</span>
    <span class="keyword">if</span>(students!=<span class="keyword">null</span>&& students.size()&gt;<span class="number">0</span>){
        <span class="keyword">for</span>(Student s:students){
            Student dbs = qr.query(<span class="string">"select * from student where id=?"</span>, BeanHandler(), s.getId());
            <span class="keyword">if</span>(dbs==<span class="keyword">null</span>){
                qr.update(<span class="string">"insert into student values(?,?,?)"</span>);
            }
            qr.update(<span class="string">"insert into teacher_student values(?,?)"</span>, t.getId(), s.getId());
        }
    }
    <span class="comment">// 同时保存老师和学生的关联关系</span>
}
<span class="comment">// 要不要查询老师教过的学员? 看需求</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTeacherById</span>(<span class="keyword">int</span> id){
    Teacher t = qr.query(<span class="string">"select * from teacher where id=?"</span>, BeanHandler, teacher.getId);
    <span class="keyword">if</span>(t!=<span class="keyword">null</span>){
        <span class="comment">// String sql = "select * from student where id in(select s_id from teacher_student where t_id=?)"; // 子查询</span>
        <span class="comment">// String sql = "select s.* from teacher_student ts, student s where s.id=ts.s.id and ts.t_id=?"; // 隐式内连接</span>
        String sql = <span class="string">"select s.* from teacher_student inner join student s on s.id=ts.s_id where ts.t_id=?"</span>; <span class="comment">// 显式内连接</span>
        List&lt;Student&gt; ss = qr.query(sql, <span class="keyword">new</span> BeanListHander&lt;Student&gt;);
        t.setStudents(ss);
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>public void testAddTeacher(){
    Teacher t1 = new Teacher()<span class="comment">;</span>
    t1<span class="preprocessor">.setId</span>(<span class="number">1</span>)<span class="comment">;</span>
    t1<span class="preprocessor">.setName</span>(<span class="string">"qb"</span>)<span class="comment">;</span>
    t1<span class="preprocessor">.setSalary</span>(<span class="number">10</span>)<span class="comment">;</span>

    Teacher t2 = new Teacher()<span class="comment">;</span>
    t2<span class="preprocessor">.setId</span>(<span class="number">1</span>)<span class="comment">;</span>
    t2<span class="preprocessor">.setName</span>(<span class="string">"wzt"</span>)<span class="comment">;</span>
    t2<span class="preprocessor">.setSalary</span>(<span class="number">10</span>)<span class="comment">;</span>

    Student s1 = new Student()<span class="comment">;</span>
    s1<span class="preprocessor">.setId</span>(<span class="number">1</span>)<span class="comment">;</span>
    s1<span class="preprocessor">.setName</span>(<span class="string">"hcH"</span>)<span class="comment">;</span>
    s1<span class="preprocessor">.setGrade</span>(<span class="string">"A"</span>)<span class="comment">;</span>

    t1<span class="preprocessor">.getStudents</span>()<span class="preprocessor">.add</span>(s1)<span class="comment">;</span>
    t2<span class="preprocessor">.getStudents</span>()<span class="preprocessor">.add</span>(s1)<span class="comment">;</span>
}

public void testQuery(){
    Teacher t = dao<span class="preprocessor">.findTeacherById</span>(<span class="number">1</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h2 id="-">一对一</h2>
<p>有主键关联 和外键关联</p>
<p>身份证和公民是一对一</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> idcard (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    num <span class="keyword">varchar</span>(<span class="number">100</span>),
    <span class="keyword">constraint</span> i_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(id) <span class="keyword">references</span> person(id)
);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Person{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> IdCard idCard;
}

<span class="keyword">public</span> <span class="keyword">class</span> IdCard {
    <span class="keyword">private</span> ind id;
    <span class="keyword">private</span> String num;
    <span class="keyword">private</span> Person person;
}
</pre></td></tr></table></figure>

<h2 id="dao-">DAO层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPerson</span>(Person p){
    qr.update(<span class="string">"insert into person values(?,?)"</span>);
    IdCard idcard = p.getIdCard();
    <span class="keyword">if</span>(idcard!=<span class="keyword">null</span>){
        qr.update(<span class="string">"insert into idcard values(?,?)"</span>)
    }
}
<span class="comment">//要不要查对应的身份证, 看需求(建议查)</span>
<span class="keyword">public</span> Person <span class="title">findPersonById</span>(<span class="keyword">int</span> id) {
    Person p = qr.query(<span class="string">"select * from person where id=?"</span>, <span class="keyword">new</span> BeanHandler&lt;Person&gt;, id)
    <span class="keyword">if</span>(p!=<span class="keyword">null</span>){
        IdCard idCard = qr.query(<span class="string">"select * from idcard where id=?"</span>, BeanHandler&lt;IdCard),id)
        p.setIdCard(idcard);
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day19-事务和数据库连接池]]></title>
    <link href="http://zhpooer.github.io/2014/04/25/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day19-%E4%BA%8B%E5%8A%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://zhpooer.github.io/2014/04/25/传智播客day19-事务和数据库连接池/</id>
    <published>2014-04-25T03:17:21.000Z</published>
    <updated>2014-04-28T06:34:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-aicd-">事务特性 (AICD)</h1>
<ul>
<li>原子性：处于同一个事务中的多条语句，要么全都成功，要么全都不成成功。</li>
<li>一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态,在事务中的状态不会被保存. 比如转账：转账前a+b=2000，转账后a+b=2000</li>
<li>隔离性：多线程并发时，一个事务不能被其他事务所干扰。</li>
<li>持久性：数据应该被永久性的保存起来。（硬盘，而不是内存）</li>
</ul>
<h2 id="-">事务的隔离性专题</h2>
<p>如果不考虑事务的隔离性，会导致以下不正确的问题:</p>
<ul>
<li>脏读: 指一个事务读到了另外一个事务中未提交的数据</li>
<li>不可重复读: 指一个事务读到了另外一个事务update后（事务提交了）的数据</li>
<li>虚读: 指在一个事务中读到了另外一个事务insert(事务提交了)的数据</li>
</ul>
<p>数据库有四个隔离级别：</p>
<ul>
<li>READ UNCOMMITTED:脏读、不可重复读、虚读都有可能发生。</li>
<li>READ COMMITTED:防止脏读发生；不可重复读、虚读都有可能发生。</li>
<li>REPEATABLE READ:（MySQL默认级别）防止脏读、不可重复读；虚读有可能发生。</li>
<li>SERIALIZABLE:防止脏读、不可重复读、虚读的发生</li>
</ul>
<p>特点：从上到下，隔离级别越高，数据越安全，但是效率越低</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> @@tx_isolation;</span>		查看当前数据库的隔离级别, 必须在事务中进行操作
<span class="operator"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 四个级别之一;</span>更改当前事务的隔离级别
</pre></td></tr></table></figure>

<h2 id="jdbc-">JDBC 控制事务隔离机制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>Connection<span class="preprocessor">.TRANSACTION</span>_READ_UNCOMMITTED
Connection<span class="preprocessor">.TRANSACTION</span>_READ_COMMITTED
Connection<span class="preprocessor">.TRANSACTION</span>_REPEATABLE_READ
Connection<span class="preprocessor">.TRANSACTION</span>_SERIALIZABLE

Connection<span class="preprocessor">.setTransactionIsolation</span>(int Level) // 必须放在事务开启之前
</pre></td></tr></table></figure>

<h1 id="-">数据库连接池</h1>
<p>给数据库连接提供缓存, 提供访问效率</p>
<h2 id="-">版本一</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">// cn.itcast.pool.SimpleConnectionPoll</span>
<span class="keyword">public</span> <span class="keyword">static</span> SimpleConnectionPoll{
    <span class="keyword">private</span> List&lt;Connection&gt; pool = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();
    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">10</span>;
    <span class="keyword">public</span> <span class="title">SimpleConnectionPoll</span> () {
        <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to size) {
            Connection conn = JDBCUtil.getConnection();
            pool.add(conn)
        }
    }
}
<span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span>(){
    <span class="keyword">if</span>(pool.size()&gt;<span class="number">0</span>){
        Connection conn = pool.remove(<span class="number">0</span>);
        <span class="keyword">return</span> conn;
    } <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器"</span>);
    }
}
<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span>(Connection conn) {
    pool.add(conn);
}
</pre></td></tr></table></figure>

<h2 id="-">版本二</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">public</span> MyDataSource implements javax.sql.DataSource{
    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Connection&gt; pool = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();
    <span class="keyword">static</span> {
        <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to size) {
            Connection conn = JDBCUtil.getConnection();
            pool.add(conn)
        }
    }
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">synchronized</span>  Connection <span class="title">getConnection</span>() <span class="keyword">throws</span> SQLException{
        <span class="keyword">if</span>(pool.size()&gt;<span class="number">0</span>){
            Connection conn = pool.remove(<span class="number">0</span>);
            <span class="keyword">return</span> conn;
        } <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器"</span>);
        }
    }
}
</pre></td></tr></table></figure>

<p>DataSource 中没有提供 <code>release()</code>, 可以修改 <code>Conneciton</code> 的 <code>close()</code>方法,
让他不要关闭连接, 而是还回池中. </p>
<h2 id="-">方式三、四(装饰器, 适配器模式)</h2>
<h3 id="-">修改已知类的原有功能</h3>
<ul>
<li>继承: 子类可以覆盖父类的方法(现在不合适)</li>
<li><p>装饰器模式:</p>
<ul>
<li>编写一个类, 实现与被包装类相同的接口(具有相同的行为)</li>
<li>定义构造方法, 传入被包装类对象</li>
<li>对于要改写的方法, 书写你的代码即可</li>
<li>对于不要改写的方法, 调用原有类的方法<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Connection</span>{</span>
      <span class="keyword">private</span> Connection conn;
      <span class="keyword">private</span> List&lt;Connection&gt; pool;
      <span class="keyword">public</span> <span class="title">MyConnection</span>(Connection conn, List&lt;Connection&gt; pool){
          <span class="keyword">this</span>.conn = conn;
          <span class="keyword">this</span>.pool = pool;
      }
      <span class="annotation">@Override</span>
      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() <span class="keyword">throws</span> SQLException {
         pool.add(conn);
      }
  }
  <span class="comment">// DataSource.java</span>
  <span class="keyword">public</span> <span class="keyword">synchronized</span>  Connection <span class="title">getConnection</span>() <span class="keyword">throws</span> SQLException{
      <span class="keyword">if</span>(pool.size()&gt;<span class="number">0</span>){
          Connection conn = pool.remove(<span class="number">0</span>);
          <span class="keyword">return</span> <span class="keyword">new</span> MyConnection(conn, pool);
      } <span class="keyword">else</span> {
          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"服务器"</span>);
      }
  }
</pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>适配器模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionAdapter</span> <span class="keyword">implements</span> <span class="title">Connection</span> {</span>
    <span class="keyword">private</span> Conneciton conn;
    <span class="keyword">private</span> List&lt;Connection&gt; pool;
    <span class="keyword">public</span> <span class="title">ConnecitonAdapter</span>(Connection conn, List&lt;Connection&gt; poo){
        <span class="keyword">this</span>.conn = conn;
        <span class="keyword">this</span>.pool = pool;
    }
    Override ...<span class="comment">// 跟上一个方式的区别是, 没有重新实现close()方法</span>
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">extends</span> <span class="title">ConnecitonAdapter</span> {</span>
    <span class="keyword">private</span> Conneciton conn;
    <span class="keyword">private</span> List&lt;Connection&gt; pool;
    <span class="keyword">public</span> <span class="title">ConnecitonAdapter</span>(Connection conn, List&lt;Connection&gt; pool){
        <span class="keyword">super</span>(conn, pool)
        <span class="keyword">this</span>.conn = conn;
        <span class="keyword">this</span>.pool = pool;
    }
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() {
        pool.add(conn);
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>动态代理
<code>Proxy.newProxyInstancee(classloader, Class&lt;?&gt;[] interfaces, InvocationHandler)</code></p>
<blockquote>
<p>inerfaces: 代理类实现了那些接口, 和被代理对象一样即可,(双方具有相同的行为)<br>InvacationHandler: 具体怎么代理(策略设计模式)</p>
</blockquote>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="keyword">new</span> InvocationHandler(){
    <span class="comment">// 匿名内部类, 实现接口</span>
    <span class="comment">/*
    * Object proxy 代理对象本身的丢向
    * Method mehtod, 当前调用的是哪个方法
    * Object[] args, 当前调用用到的参数
    */</span>
    <span class="keyword">public</span> <span class="built_in">Object</span> invoke(<span class="built_in">Object</span> proxy, Method m, <span class="built_in">Object</span>[] args) {
        <span class="comment">// before method handler</span>
        <span class="comment">// invoke method</span>
        <span class="comment">// after method handler</span>
    }
}
</pre></td></tr></table></figure>

<h2 id="-">方式五 (动态代理)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="title">getConnection</span>(){
    <span class="keyword">if</span>(pool.size() &gt; <span class="number">0</span>) {
        Connection conn = pool.remove(<span class="number">0</span>);
        Connection proxyConn = (Conneciton) Proxy.newInstance(
            conn.getClass().getClassloader(),
            conn.getClass().getInterfaces(),
            <span class="keyword">new</span> InvocationHandler(){
                 <span class="keyword">public</span> Object <span class="title">invoke</span>(){
                     <span class="keyword">if</span>(<span class="string">"close"</span>.equals(method.getName())){
                         <span class="keyword">return</span> pool.add(conn)
                     } <span class="keyword">else</span>{
                         method.invoke(conn, args);
                     }
                 }
            }
        );
        <span class="keyword">return</span> proxyConn;
    }
}
</pre></td></tr></table></figure>

<h2 id="-">总结</h2>
<ul>
<li>日后尽量使用标准的数据源(一般都带有连接池, 为的就是提高效率)</li>
<li>当用户调用<code>Connection.close()</code>方法, 并不能关闭连接, 而是还回池中</li>
</ul>
<h1 id="-">开源数据源</h1>
<p><code>DataSource</code>, 数据源, 数据源中都包含了数据库连接池的实现</p>
<h2 id="dbcp">DBCP</h2>
<p>简介: APache组织实现. Database Connect Pool</p>
<p>如何使用:</p>
<ul>
<li>拷贝Jar包</li>
<li><p>配置 dbcpconfig.properties, 加入构建路径</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="constant">initialSize</span>=10
<span class="constant">maxActive</span>=50
<span class="constant">maxIdle</span>=20
<span class="constant">minIdle</span>=5
<span class="constant">maxWait</span>=6000 # 单位毫秒
<span class="constant">connectionProperties</span>=useUnicode=true;
<span class="comment"># 可以配置数据库数据隔离特性</span>
</pre></td></tr></table></figure>
</li>
<li><p>建立工具类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> DBCPUtil{
    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;
    <span class="keyword">static</span> {
        <span class="comment">// 读取配置文件</span>
        InputStream <span class="keyword">in</span> = DBCPUtil.class.getClassloader().getResourceAsStream(<span class="string">'properties'</span>);
        Properties props = <span class="keyword">new</span> Properties();
        props.load(<span class="keyword">in</span>);
        dataSource = BasicDataSourceFactory.createDataSource(props);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> Conneciton <span class="title">getConnection</span>(){
        <span class="keyword">return</span> dataSource.getConnection();
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getDataSource</span>(){
        <span class="keyword">return</span> dataSource;
    }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="c3p0">C3P0</h2>
<ul>
<li>拷贝Jar包</li>
<li><p>手工配置C3p0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>private static ComboPooledDataSource ds = new ComboPooledDataSource()<span class="comment">;</span>
ds<span class="preprocessor">.setDriverClass</span>(<span class="string">"com.mysql.jdbc.Driver"</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setJdbcUrl</span>(<span class="string">"jdbc:mysql://localhost:3306/database"</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setUser</span>(<span class="string">""</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setPassword</span>(<span class="string">""</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setMaxPoolSize</span>(<span class="number">40</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setMinPoolSize</span>(<span class="number">5</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setInitialPoolSize</span>(<span class="number">20</span>)<span class="comment">;</span>
ds<span class="preprocessor">.setMaxStatements</span>()<span class="comment">; // 批处理</span>
</pre></td></tr></table></figure>
</li>
<li><p>可以用xml配置<code>c3p0-config.xml</code>, 或<code>c3p0.properties</code>来配置</p>
</li>
</ul>
<h2 id="-tomcat-">获取Tomcat管理的数据源</h2>
<p>Tomcat在启动时,会按照用户的配置, 创建数据源, 并把数据源对象绑定到一个名字上(用的是JNDI).</p>
<p>JNDI: Java Naming and Directory Interface(JDK:javax.naming.*)</p>
<p>相当于window系统的注册表, 是一个Map结构. key是一个由路径和名称组成的字符串,
value就是一个绑定的对象</p>
<h3 id="-tomcat-dbcp-">利用Tomcat管理数据源(dbcp)</h3>
<ol>
<li>数据库连接驱动Jar包, 放到Tomcat的lib文件夹下</li>
<li><p>配置Context, 在应用目录里面的 META-INFO 建立 context.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">context</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span> <span class="attribute">name</span>=<span class="value">"jdbc/day19"</span> <span class="attribute">auth</span>=<span class="value">"Container"</span>
    <span class="attribute">type</span>=<span class="value">"javax.sql.DataSource"</span> <span class="attribute">username</span>=<span class="value">"root"</span>
    <span class="attribute">password</span>=<span class="value">"sorry"</span> <span class="attribute">driverClassName</span>=<span class="value">"com.mysql.jdbc.Driver"</span>
    <span class="attribute">uri</span>=<span class="value">"jdbc:mysql"</span> <span class="attribute">maxActive</span>=<span class="value">"8"</span> <span class="attribute">maxIdle</span>=<span class="value">"4"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
<span class="tag">&lt;/<span class="title">context</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>启动Tomcat, 数据源就已经建好了</p>
</li>
<li>在应用中获取数据源, 获取JNDI容器中的数据源<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Context initCtx = new InitialContext()<span class="comment">;</span>
Context envCtx = initCtx<span class="preprocessor">.lookup</span>(<span class="string">"java:comp/env"</span>)<span class="comment">;</span>
Datasource ds = envCtx<span class="preprocessor">.lookup</span>(<span class="string">"jdbc/dya19"</span>)<span class="comment">;</span>
Conneciton conn = ds<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">数据库元数据的获取</h1>
<p>元数据: 数据库, 表, 列等定义的信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>DatabaseMetaData dmd = conn.getMetaData();
<span class="comment">// 数据库综合信息获取</span>
dmd.getDatabaseProductName();   <span class="comment">// MySQL</span>
dmd.getDatabaseProductVersion();   <span class="comment">// 5.0.18</span>

<span class="comment">// 获取 preparedStateMent 中占位符的语句信息</span>
PreparedStateMent stmp = conn.prepareStateMent(<span class="string">"insert into user values(?,?,?)"</span>)
ParameterMetaData pmd = stmp.getParameterMetaData; <span class="comment">// 得到的是问号的个数</span>
pmd.getParameterCont();    <span class="comment">// 3</span>

<span class="comment">// 结果集元数据信息获取</span>
PreparedStateMent stmp = conn.prepareStateMent(<span class="string">"select * from user"</span>)
ResultSet rs = stmp.excuteQuery();
ResultSetMetaData rsmd = rs.getMetaData();
<span class="keyword">int</span> num = rsmd.getColumnCount();    <span class="comment">// 查询结果有多少列</span>
<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){
    String columnName = rsmd.getColumnName(i+<span class="number">1</span>);
    <span class="keyword">int</span> columnType =  rsmd.getColumnType(i+<span class="number">1</span>);  <span class="comment">// java.sql.Types</span>
}
</pre></td></tr></table></figure>

<h1 id="-">自定义框架</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> User{
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> <span class="keyword">int</span> String ;
    <span class="keyword">private</span> String gender;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> UserDaoImpl{
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span>(User user){
        db.update(<span class="string">"insert into user values(?,?,?))"</span>, <span class="keyword">new</span> Object{user.getId,...})
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span>(User user){
        db.update(<span class="string">"update into user set name=?, gender=? where id=?"</span>, <span class="keyword">new</span> Object{<span class="string">"abc"</span>, <span class="string">"0"</span>, user.getId()})
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUser</span>(User user){
        db.update(<span class="string">"delete from user where id=?"</span>, <span class="keyword">new</span> Object{user.getId()});
    }
    <span class="keyword">public</span> Object <span class="title">query</span>(){
        db.query(<span class="string">"select * from user where id=?"</span>, <span class="keyword">new</span> Object[]{<span class="number">1</span>},
        <span class="comment">// 可提取一个方法类</span>
            <span class="keyword">new</span> ResultSetHandler(){
                <span class="keyword">public</span> Object <span class="title">handle</span>(ResultSet rs){
                    <span class="keyword">if</span>(rs.next()){
                        ResultSetMetaData rsmd = rs.getMetaData();
                        <span class="keyword">int</span> columnCount = rsmd.getColumnCount();
                        User user = <span class="keyword">new</span> User();
                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;colmnCount;i++){
                            String fieldName = rsmd.getColumnName(i+<span class="number">1</span>);
                            String fieldValue = rs.getObject(i+<span class="number">1</span>);
                            Field field = User.class.getDeclaredField(fieldName);
                            field.setAccessible(<span class="keyword">true</span>);
                            field.<span class="keyword">set</span>(user, fieldValue);
                        }
                    } <span class="keyword">else</span> {
                        <span class="keyword">return</span> <span class="keyword">null</span>;
                    }
                }
            }
        );
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre><span class="comment">// 结果处理策略</span>
<span class="keyword">public</span> Interface ResultSetHandler {
    Object handler(ResultSet rs);
}
<span class="keyword">public</span> <span class="keyword">class</span> DBAssist{
    <span class="keyword">private</span> DataSource ds;
    <span class="keyword">public</span> <span class="title">DBAssist</span>(Datasource ds){
        <span class="keyword">this</span>.ds = ds;
    }
    <span class="comment">// 执行DML语句: insert update delete</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(String sql, Object[] <span class="keyword">params</span>){
        Conneciton conn = <span class="keyword">null</span>;
        PreparedStateMent stmt = <span class="keyword">null</span>;
        ResultSet rs = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = dataSource.getConnection();
            stmt = conn.prepareStateMent(sql);
            ParameterMetaData pmd = stmt.getParameterMetaData();
            <span class="keyword">int</span> paramCount = pmd.getParameterCount();
            <span class="keyword">if</span>(paramCount&gt;<span class="number">0</span>){
                <span class="keyword">if</span>(<span class="keyword">params</span>==<span class="keyword">null</span> || <span class="keyword">params</span>.length==<span class="number">0</span>){
                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数有误"</span>);
                }
                <span class="keyword">if</span>(paramCount!=<span class="keyword">params</span>.length){
                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数个数不匹配"</span>);
                }
                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;paramCount;i++){
                    stmt.setObject(i+<span class="number">1</span>, param[i])
                }
                stmt.excuteUpdate();
            }
        }<span class="keyword">catch</span>(e){
        }<span class="keyword">finally</span>{
            release(rs,stmt,conn);
        }
    }
    <span class="comment">//使用前提 javabean中的字段名和数据库中的列名必须一致</span>
    <span class="keyword">public</span> Object <span class="title">query</span>(String sql, Object[] param, ResultSetHandler h){
        Conneciton conn = <span class="keyword">null</span>;
        PreparedStateMent stmt = <span class="keyword">null</span>;
        ResultSet rs = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = dataSource.getConnection();
            stmt = conn.prepareStateMent(sql);
            ParameterMetaData pmd = stmt.getParameterMetaData();
            <span class="keyword">int</span> paramCount = pmd.getParameterCount();
            <span class="keyword">if</span>(paramCount&gt;<span class="number">0</span>){
                <span class="keyword">if</span>(<span class="keyword">params</span>==<span class="keyword">null</span> || <span class="keyword">params</span>.length==<span class="number">0</span>){
                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数有误"</span>);
                }
            }
            <span class="keyword">if</span>(paramCount!=<span class="keyword">params</span>.length){
                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数个数不匹配"</span>);
            }
            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;paramCount;i++){
                stmt.setObject(i+<span class="number">1</span>, param[i])
            }
            rs = stmt.excuteQuery();
            h.handler(rs);
        }<span class="keyword">catch</span>(e){
        }<span class="keyword">finally</span>{
            release(rs,stmt,conn);
        }
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试用数据库H2db]]></title>
    <link href="http://zhpooer.github.io/2014/04/24/%E6%B5%8B%E8%AF%95%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93h2db/"/>
    <id>http://zhpooer.github.io/2014/04/24/测试用数据库h2db/</id>
    <published>2014-04-24T12:59:45.000Z</published>
    <updated>2014-04-24T14:12:02.000Z</updated>
    <content type="html"><![CDATA[<p>在写上一个项目时, 在运行测试和真实运行项目时, 连接的是同一个Mysql数据库.
但是运行单元测试必须要有可重复性和隔离性, 测试时连接真实数据库,
造成了单元测试不能重复运行, 所以需要一个机制, 在运行测试时,
新建一个隔离的数据库, 等测试完, 把这个数据库清空或者废除. 详细需求如下:</p>
<ol>
<li>根据配置文件, 让系统选择加载数据库, 如在测试时连接一个数据库, 运行时连接另一个数据</li>
<li>如果是测试, 那么系统在加载数据库之后需要运行一些SQL脚本, 初始化数据库</li>
<li>运行完测试, 这个数据库要重置, 或者废除</li>
<li>数据库不能是Mysql的外部安装的数据库, 这样可以在没有Mysql的机子上重复测试</li>
</ol>
<p>so, 根据谷歌搜索, 找到了java内嵌数据库<code>Derby</code>, 它是用纯Java写的数据库,
只用加载一个Jar包, 就可以在Java程序中内嵌运行一个数据库. 运行代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Class<span class="preprocessor">.forName</span>(<span class="string">"org.apache.derby.jdbc.EmbeddedDriver"</span>)<span class="comment">;</span>
DriverManager<span class="preprocessor">.getConnection</span>(<span class="string">"jdbc:derby:sample;create=true"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>这样就连接了一个Sample数据库, 且Derby会在工作目录下新建一个文件夹,
存储Sample数据库的数据. 所以可以通过指定新建数据库文件夹在一个临时文件夹下, 来满足条件三.
如Linux可以把新建文件建在 <code>/tmp</code> 目录下, 代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>DriverManager.getConnection("jdbc:derby:/tmp/sample;<span class="operator"><span class="keyword">create</span>=<span class="keyword">true</span><span class="string">");</span></span>
</pre></td></tr></table></figure>

<p>因为每次运行测试不能连同一个数据库文件, 所以要用Java生成一个临时文件夹</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>DriverManager.getConnection(makeDerbyTempURL(<span class="string">"sample"</span>));

<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">makeDerbyTempURL</span>(String db) {
    Path p = makeTmpDir();
	<span class="keyword">return</span> <span class="string">"jdbc:derby:"</span> + p.toUri().getPath() + <span class="string">"/"</span> + db + <span class="string">";create=true"</span>;
}
<span class="keyword">private</span> <span class="keyword">static</span> Path <span class="title">makeTmpDir</span>() {
    Path path = <span class="keyword">new</span> File(<span class="string">"/tmp"</span>).toPath();
	Path p = <span class="keyword">null</span>;
	<span class="keyword">try</span> {
	    p = Files.createTempDirectory(path, <span class="string">"derby"</span>);
	} <span class="keyword">catch</span> (IOException e) {
	    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
	}
	<span class="keyword">return</span> p;
}
</pre></td></tr></table></figure>

<p>但是如何满足条件二呢? 我猜想Derby提供了在内嵌数据库模式下直接导入SQL脚本的API,
就一直通过谷歌搜索, 找这个解决方案, 可惜做了很多无用功.
后来发现, 其实可以换个思路, 通过JDBC, 来直接执行SQL语句, 但是如何执行脚本呢?
要我重新写一个程序, 加载脚本, 分析出SQL语句, 然后通过JDBC一条一条执行? no!
有其他人已经解决过这个问题, 并且有Jar包可以直接使用, 通过这个思路,
两三下就直接找到了<a href="http://www.cnblogs.com/zencorn/archive/2011/01/27/1946348.html" target="_blank">解决方案</a>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>public static void execSQL(String scriptPath, String driveClass,
        String url, String user, String passwd) {
	SQLExec sqlExec = new SQLExec()<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setDriver</span>(driveClass)<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setUrl</span>(url)<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setUserid</span>(user)<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setPassword</span>(passwd)<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setSrc</span>(new File(scriptPath))<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setOnerror</span>((SQLExec<span class="preprocessor">.OnError</span>) (EnumeratedAttribute<span class="preprocessor">.getInstance</span>(
	        SQLExec<span class="preprocessor">.OnError</span><span class="preprocessor">.class</span>, <span class="string">"abort"</span>)))<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setPrint</span>(false)<span class="comment">;</span>
	sqlExec<span class="preprocessor">.setProject</span>(new Project())<span class="comment">;</span>
	sqlExec<span class="preprocessor">.execute</span>()<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<p>所以说如何看待一个问题, 是解决一个问题的关键点.</p>
<p>至于需求一, 可以通过配置<code>properties</code>来解决, 感兴趣的童鞋可以
<a href="https://github.com/zhpooer/itcast-customer-demo/blob/master/src/java/io/zhpooer/util/ConnManager.java" target="_blank">猛击这里</a></p>
<p>到这里, 已经基本解决了问题, 不过又出现了一个问题, Derby 不支持语句 <code>create table if exists tablename()...</code>, 
而且每次运行测试时, 发现Derby创建数据库时, 总会造成硬盘忙的状态, 卡一小段时间.
那么是不是可以有一个数据库直接在内存里运行, 测试运行完之后, 数据库直接删除.</p>
<p>这个可以有, 那就是<code>H2db</code>, 它既支持内存数据库, 又支持内嵌数据.
不过经我测试, 在H2内存数据库模式下, 只要运行完 <code>connection.close()</code>, 数据库就会被重置(有谁指正一下如何可以避免这个问题).
这和我的项目需求不一致, 但是我发现他在内嵌模式下启动速度比Derby快. 所以直接换掉Derby.</p>
<p><a href="https://github.com/zhpooer/itcast-customer-demo/blob/master/src/java/io/zhpooer/util/ConnManager.java" target="_blank">具体代码猛击这里</a></p>
]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day18-大结果集和大数据处理]]></title>
    <link href="http://zhpooer.github.io/2014/04/23/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day18-%E5%A4%A7%E7%BB%93%E6%9E%9C%E9%9B%86%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/04/23/传智播客day18-大结果集和大数据处理/</id>
    <published>2014-04-23T01:26:45.000Z</published>
    <updated>2014-04-23T08:56:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">大结果集分页</h1>
<ol>
<li>分页靠SQL支持, 不同数据库的分页语句是不通过的</li>
<li>MySQL 分页语句 <code>limit M,N</code><br><em>M: 开始记录的数据, 第一页的第一条索引是0</em><br><em>N: 每次取出多少条</em></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">-- 取第一页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit <span class="number">0</span>, <span class="number">10</span>;</span>
<span class="comment">-- 取第二页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit <span class="number">10</span>, <span class="number">10</span>;</span>
<span class="comment">-- 取第n页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit (n-<span class="number">1</span>)*<span class="number">10</span>, <span class="number">10</span>;</span>

<span class="comment">-- 总共的页数(每次取10条)</span>
<span class="comment">-- = 总记录条数%N==0?总记录条数/N:((总记录条数/N)+1)</span>
</pre></td></tr></table></figure>

<h2 id="-">对客户信息进行分页</h2>
<h3 id="-page-">新建Page类, 封装分页信息</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">// 专门封装与分页有关的数据</span>
<span class="keyword">public</span> <span class="keyword">class</span> Page{
    <span class="keyword">private</span> <span class="keyword">int</span> pageSize; <span class="comment">// 每页显示的记录条数</span>
    <span class="keyword">private</span> List recorder; <span class="comment">// 每页显示的记录          DAO</span>
    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;  <span class="comment">// 当前页码              用户传</span>
    <span class="keyword">private</span> <span class="keyword">int</span> totalPage;  <span class="comment">// 总共页码            计算</span>
    <span class="keyword">private</span> <span class="keyword">int</span> startIndex; <span class="comment">// 每页开始记录的索引    计算</span>
    <span class="keyword">private</span> <span class="keyword">int</span> totalRecords; <span class="comment">// 总记录的条数        Dao</span>

    <span class="keyword">public</span> <span class="title">Page</span>(intPageNum, <span class="keyword">int</span> totalRecords){
        <span class="keyword">this</span>.pageNum = pageNum;
        <span class="keyword">this</span>.totalRecords = totalRecords;

        <span class="keyword">this</span>.totalPage = totalRecords%pageSize==<span class="number">0</span>?totalRecords/pageSize:totalRecords/pageSize+<span class="number">1</span>;
        startIndex = (pageNum-<span class="number">1</span>)*pageSize;
    }
}
</pre></td></tr></table></figure>

<h3 id="-dao">改造接口DAO</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> CustomerDao {
    @Deprecated
    List&lt;Customer&gt; findAll();
    <span class="keyword">int</span> getTotalRecordsNum();
    List&lt;Customer&gt; findPageCustomers(<span class="keyword">int</span> offset, <span class="keyword">int</span> size);
}
<span class="comment">// 还要修改实现, SQL语句用 select * form ** where ** limit offset, size</span>
</pre></td></tr></table></figure>

<h3 id="-">改造业务代码</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> BusinessService{
    @Deprecated
    List&lt;Customer&gt; findAll();
    Page findPage(String pageNum)
}
<span class="keyword">public</span> <span class="keyword">class</span> BusinessServiceImpl{
    <span class="keyword">public</span> Page <span class="title">findPage</span>(String num) {
        <span class="keyword">int</span> pageNum = <span class="number">1</span>;
        <span class="keyword">if</span>(num!=<span class="keyword">null</span>){
            pageNum = Integer.parseInt(num);
        }
        <span class="keyword">int</span> totalRecords = dao.getTotalRecordsNum();
        Page page = <span class="keyword">new</span> Page(pageNum, totalRecords);
        List&lt;Customer&gt; records = dao.findPageCustomers(page.statedIndex, page.pageSize);
        page.setRecords(records);
        <span class="keyword">return</span> page;
    }
}
</pre></td></tr></table></figure>

<h3 id="-servlet">改造Servlet</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>private void showAllCustomer(){
   String num = request<span class="preprocessor">.getParameter</span>(<span class="string">"num"</span>)<span class="comment">;</span>
   Page page = s<span class="preprocessor">.findPage</span>(num)<span class="comment">;</span>
   request<span class="preprocessor">.setAttribute</span>(<span class="string">"page"</span>, page)<span class="comment">;</span>
   request<span class="preprocessor">.getRequestDispather</span>(<span class="string">"/listCustomer.jsp"</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h3 id="-jsp-">改造JSP显示页面</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre>&lt;c:<span class="keyword">if</span> test=<span class="string">"<span class="variable">${!empty page}</span>"</span>&gt;
    &lt;c:<span class="keyword">for</span>Each items=<span class="string">"page.records"</span> var=<span class="string">"c"</span> varStatus=<span class="string">"vs"</span>&gt;
    &lt;/c:<span class="keyword">for</span>Each&gt;
&lt;/c:<span class="keyword">if</span>&gt;

第<span class="variable">${page.pageNum}</span>页&nbsp;&nbsp; 共<span class="variable">${page.totalPage}</span>页

&lt;a href=<span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num=<span class="variable">${pageNum-1&lt;1?1:pageNum-1}</span>"</span>&gt;
&lt;/a&gt;
&lt;a href=<span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num=<span class="variable">${pageNum+1&gt;totalPage?totalPage:pageNum+1}</span>"</span>&gt;
&lt;/a&gt;
// 跳页 方式一
&lt;select id=<span class="string">"num"</span> name=<span class="string">"num"</span> onchange=<span class="string">"jump(this)"</span>&gt;
    &lt;c:foreach begin=<span class="string">"1"</span> end=<span class="string">"<span class="variable">${}</span>"</span> var=<span class="string">"i"</span>&gt;
        &lt;option value=<span class="string">"<span class="variable">${n}</span>"</span>&gt;<span class="variable">${n}</span>&lt;/option&gt;
    &lt;/c:foreach&gt;
&lt;/select&gt;
function jump(select){
   window.location.href = <span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num="</span> + select.value
}
// 跳页 方式二
&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"3"</span> name=<span class="string">"num"</span> id=<span class="string">"num"</span> value=<span class="string">"<span class="variable">${page.Naum}</span>"</span> /&gt;&lt;a href=<span class="string">"javascript:jump()"</span>&gt;&lt;/a&gt;
function <span class="function"><span class="title">fump</span></span>(){
    var num = document.getElementsById(<span class="string">"num"</span>).value
    var regObj = /^[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$/
    <span class="keyword">if</span>(!regObj.test(num)) {
        alert(<span class="string">"请正确输入"</span>)
        <span class="keyword">return</span>;
    }
    <span class="keyword">if</span>(num&gt;<span class="variable">${page.totalPage}</span>){
        alert(<span class="string">"页码超出范围"</span>);
        <span class="keyword">return</span>;
    }
    window.location.href = <span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num="</span> + num
}
</pre></td></tr></table></figure>

<h4 id="-">提取代码</h4>
<p><strong>可以用静态包含, 提取公共jsp代码, 来复用代码</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>&lt;%@ include file=<span class="string">""</span>%&gt;
<span class="keyword">public</span> <span class="keyword">class</span> Page {
    <span class="keyword">private</span> String url = <span class="string">""</span>; <span class="comment">// plus</span>
}
<span class="keyword">public</span> <span class="keyword">class</span> Controller {
    page.setUrl(<span class="string">""</span>);
}
<span class="string">"${}/servlet/Controller?op=showAllCustomers&num="</span> + num <span class="comment">// change to </span>
<span class="string">"${}${page.url}&num="</span> + num
</pre></td></tr></table></figure>

<h1 id="jdbc-lob-">JDBC 大数据(LOB)的存取</h1>
<h2 id="-clob-text-">大文本 CLOB(text)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t1(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    content longtext
)</span>
</pre></td></tr></table></figure>

<h3 id="-">存</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Statement stmt = conn.PreparedStatement(<span class="string">"insert into t1(id, content) value(?,?)"</span>);
stmt.setInt(<span class="number">1</span>, <span class="number">1</span>);
<span class="comment">// 使用字符输入流的形式, 提高效率</span>
File f = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);
Reader reader = <span class="keyword">new</span> FileReader(f);
<span class="comment">// 如果不强转, 会报错 说明一个问题MySQL驱动实现不支持  setCharacterStream(int, reader, long)</span>
<span class="comment">// 不支持 long, 数据库本身就不支持那么大的数据(最大4G)</span>
stmt.setCharacterStream(<span class="number">2</span>, f, (<span class="keyword">int</span>)f.length);
</pre></td></tr></table></figure>

<h3 id="-">取</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>stmt = conn.PreparedStatement(<span class="string">"select * from t1 where id=1"</span>);
stmt.excuteQuery();
<span class="keyword">if</span>(rs.next()){
   Reader reader = re.getCharacterStream(<span class="string">"content"</span>);
   Writer writer = new FileWriter(<span class="string">""</span>);
   <span class="keyword">...</span>
}
</pre></td></tr></table></figure>

<h2 id="-blob">大二进制数据 BLOB</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t1(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    content longblob
)</span>
</pre></td></tr></table></figure>

<p>存, 取同 CBLOB, 核心方法:</p>
<ul>
<li><code>stmt.setBinaryStream(2, InputStream, length)</code></li>
<li><code>stmt.getBinaryStream(2)</code></li>
</ul>
<h1 id="-">批处理</h1>
<p>把sql语句缓存起来, 一起发给数据库, 减少数据库访问次数, 提高效率</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t3 (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
)</span>
</pre></td></tr></table></figure>

<ul>
<li><p>Statement</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Statement s1 = conn.createStatement();
String sql1 = "<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'aaa1'</span>)<span class="string">"
String sql2 = "</span><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">'aaa2'</span>)<span class="string">";
String sql3 = "</span><span class="keyword">delete</span> <span class="keyword">from</span> t3 <span class="keyword">where</span> id=<span class="number">1</span><span class="string">";
stmt.addBatch(sql1);
stmt.addBatch(sql2);
stmt.addBatch(sql3);
int ii[] = stmt.excuteBatch();  // 每条语句影响到的行数</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>PreparedStatement</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>PreparedStatement stmt = conn<span class="preprocessor">.prepareStatement</span>(<span class="string">"insert into t3 values(?,?)"</span>)<span class="comment">;</span>
for(int i=<span class="number">1</span><span class="comment">; i&lt;=1000; i++) {</span>
   stmt<span class="preprocessor">.setInt</span>(<span class="number">1</span>, i)<span class="comment">;</span>
   stmt<span class="preprocessor">.setString</span>(<span class="number">2</span>, <span class="string">"aaa"</span> + i)<span class="comment">;</span>
   stmt<span class="preprocessor">.addBatch</span>()<span class="comment">;</span>
   // 把准备好的参数加入到缓存中: 如果数据量太大, 内存可能溢出. 解决方案: 分批次执行
   if(i%<span class="number">100</span>) {
      stmt<span class="preprocessor">.excuteBatch</span>()<span class="comment">;</span>
      stmt<span class="preprocessor">.clearBatch</span>()<span class="comment">;</span>
   }
}
stmt<span class="preprocessor">.excuteBatch</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">调用存储过程</h1>
<h2 id="-">存储过程简介</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-- 修改语句结束符号 ; =&gt; $$
delimiter $$
-- 创建一个存储过程, 名字为 demoSp,
--- 括号里面是参数, 形式: <span class="keyword">in</span>|<span class="keyword">out</span>|inout(输入或输出) 参数名字 参数类型
<span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">demoSp</span><span class="params">(<span class="keyword">In</span> inputParam varchar(255)</span>, <span class="title">inout</span> <span class="title">inOutParam</span> <span class="title">varchar</span><span class="params">(255)</span>)
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">concat</span><span class="params">(<span class="string">'welcome to:'</span>, inputParam)</span> <span class="title">into</span> <span class="title">inOutParam</span>;</span>
<span class="keyword">end</span>

delimiter ;
</pre></td></tr></table></figure>

<h2 id="jdbc-">jdbc 调用存储过程</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Connection conn = JdbcUtil<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
// 获取执行存储过程的对象
CallableStatement stmt = conn<span class="preprocessor">.prepareCall</span>(<span class="string">"{call demoSp(?,?)}"</span>)<span class="comment">;;</span>
// 设置参数, 输入参数要给一个值, 输出参数注册SQL数据类型
// 输入参数要给一个值
stmt<span class="preprocessor">.setString</span>(<span class="number">1</span>, <span class="string">"hch"</span>)
stmt<span class="preprocessor">.registerOutParameter</span>(s, java<span class="preprocessor">.sql</span><span class="preprocessor">.Types</span><span class="preprocessor">.VARCHAR</span>)<span class="comment">;</span>

// 执行
stmt<span class="preprocessor">.excute</span>()<span class="comment">; // 这里不能使用结果集</span>
String result = stmt<span class="preprocessor">.getString</span>(<span class="number">2</span>)<span class="comment">; // 取位置为2的那个结果</span>
</pre></td></tr></table></figure>

<h1 id="-">事务入门 (数据安全)</h1>
<p>TPL: 事务(Transaction)处理语言</p>
<p>数据库有可能是自动提交事务的,(MySQL就是自动提交事务的),
每一条语句都是一个事务</p>
<ul>
<li><code>start Transaction</code>: 开启事务</li>
<li><code>rollback</code>: 回滚, 回到最开始的地方</li>
<li><code>commit</code>: 提交, 永久存储到硬盘上</li>
</ul>
<h2 id="jdbc-">JDBC 操作事务</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>try {
    Connection conn = JdbcUtil<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.setAutoCommit</span>(false)<span class="comment">;</span>
    PreparedStatement stmt = conn<span class="preprocessor">.prepareStatement</span>(<span class="string">""</span>)
    stmt<span class="preprocessor">.excuteUpdate</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.commit</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.setAutoCommit</span>(true)<span class="comment">; // 恢复现场</span>
} finally{
   conn<span class="preprocessor">.rollback</span>()<span class="comment">;</span>
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="jdbc" scheme="http://zhpooer.github.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day17-案例客户管理系统]]></title>
    <link href="http://zhpooer.github.io/2014/04/22/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day17-%E6%A1%88%E4%BE%8B%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhpooer.github.io/2014/04/22/传智播客day17-案例客户管理系统/</id>
    <published>2014-04-22T07:41:49.000Z</published>
    <updated>2014-04-23T02:43:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">客户信息管理系统</h1>
<p>用之前所学完成一个对单表的CRUD JavaWeb 项目</p>
<h2 id="-">项目需求</h2>
<p><img src="/img/day17_demo2.png" alt="项目需求"></p>
<h2 id="-jar-">搭建开发环境, 写配置文件, Jar包</h2>
<h2 id="-javabean">写 Javabean</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>package cn.itcast.domain
<span class="keyword">public</span> <span class="keyword">class</span> Customer {
    <span class="keyword">private</span> String id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String gender;  <span class="comment">// 数据库中 1男,0女</span>
    <span class="keyword">private</span> Date birthday;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String cellphone; 
    <span class="keyword">private</span> String hobby; <span class="comment">// 爱好: 吃饭,睡觉,学Java</span>
    <span class="keyword">private</span> String type; <span class="comment">// 客户类型, 普通客户 vip</span>
    <span class="keyword">private</span> String description;
}
</pre></td></tr></table></figure>

<h2 id="-">建数据库表</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer (
    id <span class="keyword">varchar</span>(<span class="number">100</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    gender <span class="keyword">varchar</span>(<span class="number">10</span>),
    birthday <span class="keyword">date</span>,
    cellphone <span class="keyword">varchar</span>(<span class="number">100</span>),
    email <span class="keyword">varchar</span>(<span class="number">100</span>),
    hobby <span class="keyword">varchar</span>(<span class="number">100</span>),
    type <span class="keyword">varchar</span>(<span class="number">100</span>),
    description <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
</pre></td></tr></table></figure>

<h2 id="-">业务接口</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.service
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessService</span> {</span>
    List&lt;Customer&gt; findAll();
    <span class="keyword">void</span> addCustomer(Customer c);
    <span class="keyword">void</span> delCustomer(String customerId);
    Customer findCustomerById(String customerId);
    <span class="comment">// 如果传入 id 为 null, 抛出此异常</span>
    <span class="keyword">void</span> updateCustomer(Customer c) <span class="keyword">throws</span> CustomerIdConnotBeEmpty;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.exception
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerIdConnotBeEmpty</span> <span class="keyword">extends</span> <span class="title">Exception</span>{</span> }
</pre></td></tr></table></figure>

<h3 id="-">业务实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.service.impl;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessServiceImpl</span> {</span>
    Customer dao = <span class="keyword">new</span> CustomerDaoImpl()
    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span>(){
        <span class="keyword">return</span> dao.findAll();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span>(Customer c){
        c.setId(UUID.randomUUID().toString());
        dao.save(c);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delCustomer</span>(String customerId){
         dao.delete(customerId);
    }
    <span class="keyword">public</span> Customer <span class="title">findCustomerById</span>(String customerId){
        dao.findById(customerId);
    }
    <span class="comment">// 如果传入 id 为 null, 抛出此异常</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span>(Customer c) <span class="keyword">throws</span> CustomerIdConnotBeEmpty{
         <span class="keyword">if</span>(c.getId()==<span class="keyword">null</span>) {
             <span class="keyword">throw</span> <span class="keyword">new</span> CustomerIdConnotBeEmpty(<span class="string">"参数有误"</span>);
         }
         dao.update(c);
    }
}
</pre></td></tr></table></figure>

<h2 id="dao-">Dao接口</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> CustomerDao {
    List&lt;Customer&gt; findAll();
    <span class="keyword">void</span> save(Customer c);
    <span class="keyword">void</span> findById(String customerId);
    <span class="keyword">void</span> delete(String customerId);
    <span class="keyword">void</span> update(Customer c);
}
</pre></td></tr></table></figure>

<h3 id="customerdaoimpl-">CustomerDaoImpl 实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="code"><pre><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span>(){
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    ResultSet rs = <span class="keyword">null</span>
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement();
        re = stmt.excuteQuery();
        List&lt;Customer&gt; cs = <span class="keyword">new</span> ArrayList&lt;Customer&gt;();
        <span class="keyword">while</span>(rs.next()){
            Customer c = <span class="keyword">new</span> Customer();
            c.setId(r.getString(<span class="string">"id"</span>));
            cs.add(c);
        }
        <span class="keyword">return</span> cs;
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(Customer c) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getId());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(String customerId) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getId());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span>(String customerId) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    ResultSet rs = <span class="keyword">null</span>
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        re = stmt.excuteQuery();
        <span class="keyword">while</span>(rs.next()){
            Customer c = <span class="keyword">new</span> Customer();
            c.setId(r.getString(<span class="string">"id"</span>));
            <span class="keyword">return</span> c;
        }
        <span class="keyword">return</span> <span class="keyword">null</span>;
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(Customer c) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getName());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
</pre></td></tr></table></figure>

<h3 id="-service-">测试Service实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessServiceImplTest</span> {</span>
    <span class="keyword">public</span> BusinessService s = <span class="keyword">new</span> BusinessServiceImpl();
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddCustomer</span>() {
        Customer c = <span class="keyword">new</span> Customer();
        c.setId(<span class="string">"aaa"</span>);
        c.setName(<span class="string">"xxx"</span>);
        c.setGender(<span class="string">"1"</span>);
        c.setBirthday(<span class="keyword">new</span> Date());
        c.setEmail(<span class="string">"zhpo@gmai.com"</span>);
        c.setHobby(<span class="string">"学习 吃饭"</span>);
        c.setType(<span class="string">"vip"</span>);
        c.setDescription(<span class="string">"xxx"</span>);
        s.addCustomer(c);
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span>() {
        List&lt;Customer&gt; cs = s.findAll();
        assertEquals(<span class="number">2</span>, cs.size());
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCustomerById</span>() {
       Customer c = s.findCustomerById(<span class="string">"****"</span>);
       assertNotNull(c);
    }
    <span class="annotation">@Test</span>(expected=CustomerIdConnotBeEmpty.class)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span>() {
        Customer c = <span class="keyword">new</span> Customer();
        c.updateCustomer();
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer1</span>() {
        Customer c = s.findCustomerById(<span class="string">"aaa"</span>);
        c.setName(<span class="string">"xxx"</span>);
        c.setGender(<span class="string">"0"</span>);
        s.updateCustomer(c);
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelCustomer</span>() {
        s.delCustomer(<span class="string">"xx"</span>);
    }
}
</pre></td></tr></table></figure>

<h2 id="-">表现层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
        req.setCharactorEncoding(<span class="string">"utf-8"</span>);
        res.setContentType(<span class="string">"text/html;charset=utf-8"</span>);
        String op = req.getParameter(<span class="string">"op"</span>);
        <span class="keyword">if</span>(<span class="string">"showAllCustomer"</span>.equals(op)) {
            showAllCustomers(req, res);
        }<span class="keyword">if</span>(<span class="string">"addCustomer"</span>.equals(op)) {
            addCustomer(req, res);
        }
        
    }
    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showAllCustomers</span>(){
         List&lt;Customer&gt; cs = s findAll();
         req.setAttribute(<span class="string">"cs"</span>, cs);
         req.setRequestDispather(<span class="string">"ListCustomers.jsp"</span>);
    }
 
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">jsp:forward</span> <span class="attribute">page</span>=<span class="value">"/servlet/Controller"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">jsp:param</span> <span class="attribute">value</span>=<span class="value">"showAllCustomer"</span> <span class="attribute">name</span>=<span class="value">"op"</span>&gt;</span> <span class="tag">&lt;/<span class="title">jsp:param</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">jsp:forward</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre>// ListCustomers.jsp
<span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="class">.odd</span><span class="rules">{
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#c3f3c3</span></span></span>;
    <span class="rule">}</span></span>
    <span class="class">.even</span><span class="rules">{
       <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f3c3f3</span></span></span>;
    <span class="rule">}</span></span>
    <span class="tag">body</span><span class="rules">{
       <span class="rule"><span class="attribute">text-align </span>:<span class="value"> center</span></span>;
       <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">12</span>px
    </span></span></span>}
    <span class="tag">table</span> <span class="rules">{
       <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">12</span>px
    </span></span></span>}
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"${pageContext.request.contextPath}/addCustomer.jsp"</span>&gt;</span>添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${empty cs}"</span>&gt;</span>
   没有客户信息
<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${!empty cs}"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span>&gt;</span>
       <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 选择 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span>出生日期 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 爱好 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 类型 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 描述 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 操作 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
       <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"${cs}"</span> <span class="attribute">var</span>=<span class="value">"c"</span> <span class="attribute">varStatus</span>=<span class="value">"vs"</span>&gt;</span>
           <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"${vs.index%2==0?'odd':'even'}"</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"ids"</span> <span class="attribute">value</span>=<span class="value">"${c.id}"</span>/&gt;</span>
              <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.name} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.gender} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.birthday} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.cellphone} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.email} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.hobby} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.type} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.description} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span> 修改<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span> 添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
              <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
           <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">添加客户</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">&lt;!-- addCustomer.jsp --&gt;</span>
<span class="comment">&lt;!-- post方式,用get方式提交都能提交, get方式就不行 --&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"${pageContext.request.contextPath}/servlet/Controller?op=addCustomer"</span> <span class="attribute">metho</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">boder</span>=<span class="value">"1"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"2"</span> <span class="attribute">checked</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 出生日期<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"birthday"</span> <span class="attribute">value</span>=<span class="value">"1990-1-1"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"cellphone"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"email"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span> 
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 爱好: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 类型<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"vip"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"normal"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"38"</span> <span class="attribute">name</span>=<span class="value">"description"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>        
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>Controller.java</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addCustomer</span>(){
        <span class="comment">// 类型封装到javabean中</span>
        CustomerFormBean bean = WebUtil.fillBean(request, CustomerFormBean.class)
        <span class="comment">// 验证用户信息</span>
        <span class="keyword">if</span>(!FormBean.validate()){
        <span class="comment">// 不正确, 数据要回显</span>
           request.setAttribute(<span class="string">"FormBean"</span>, FormBean);
           request.getRequestDispather(<span class="string">"/addCustomer.jsp"</span>).forward();
           <span class="keyword">return</span>;
        }
        <span class="comment">// 填充模型 FormBean =&gt; Javabean</span>
        ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter, Date.class);
        Customer c = <span class="keyword">new</span> Customer()
        <span class="keyword">try</span>{
           BeanUtils.copyProperties(c, bean);
        } <span class="keyword">catch</span>{
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
        }
        <span class="comment">// 单独处理 hobbies</span>
        String hobbies = request.getParameter(<span class="string">"hobbies"</span>);
        <span class="keyword">if</span>(hobbies!=<span class="keyword">null</span> && hobbies.length&gt;<span class="number">0</span>){
            StringBuffer sb = <span class="keyword">new</span> StringBuffer();
            <span class="keyword">if</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hobbies.length; i++){
               <span class="keyword">if</span>(i&gt;<span class="number">0</span>){
                   sb.append(<span class="string">","</span>);
               }
               sb.append(hobbies[i]);
            }
            c.setHobby(sb.toString());
        }
        s.addCustomer(c);
        <span class="comment">// out.wirte("注册成功");</span>
        res.sendRedirect(request.getContextPath()); <span class="comment">// 防止重复提交</span>
    }
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> CustomerFormBean {
    <span class="keyword">private</span> String id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String gender;
    <span class="keyword">private</span> String birthday;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String cellphone; 
    <span class="keyword">private</span> String[] hobbies; 
    <span class="keyword">private</span> String type; 
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Map&lt;String, String&gt; errors = <span class="keyword">new</span> HashMap&lt;String, String&gt;;
    <span class="keyword">public</span> boolean <span class="title">validate</span>() {}
}
</pre></td></tr></table></figure>

<h3 id="-">修改</h3>
<p><strong>Controller.java</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomerUI</span>(){
    String customerId = req.getParameter(<span class="string">"customerId"</span>);
    Customer c = s.findCustomerById(customerId);
    request.setAttribute(<span class="string">"c"</span>, c);
    req.getRequestDispather(<span class="string">"editCustomer.jsp"</span>).forward();
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span>(){
    <span class="comment">// 参考saveCustomer</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre>// editCustomer.jsp
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"${pageContext.request.contextPath}/servlet/Controller?op=editCustomer"</span> <span class="attribute">metho</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">value</span>=<span class="value">"{c.id}"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">boder</span>=<span class="value">"1"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"2"</span> <span class="attribute">checked</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 出生日期<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"birthday"</span> <span class="attribute">value</span>=<span class="value">"1990-1-1"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"cellphone"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"${c.email}"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span> 
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 爱好: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> ${<span class="attribute">fn:contains</span>(<span class="attribute">c.hobby</span>, '吃饭')?'<span class="attribute">checked</span>'<span class="attribute">:</span>''}  <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 类型<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"vip"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"normal"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"38"</span> <span class="attribute">name</span>=<span class="value">"description"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">删除</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">&lt;!-- list.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:delOne('${c.id}')"</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">delOne</span><span class="params">(customerId)</span>{</span>
        <span class="keyword">var</span> sure = window.confirm(<span class="string">"确定要删除吗"</span>)?
        <span class="keyword">if</span>(sure) {
            window.loacation.href=<span class="string">"${pageContext.request.contextPath}/servlet/Controller?op=delOneCustomerUI&custermerId="</span>+custmerId;
        }
    }
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delOneCustomerUI</span>(){
    String customerId = req.getParameter(<span class="string">"customerId"</span>);
    s.delCustomer(customerId);
    response.sendRedirect(request.getContextPath());
}
</pre></td></tr></table></figure>

<h3 id="-">删除多个</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>&lt;form atcion=<span class="string">"${}/servlet/Controller?op=delMuti"</span> method=<span class="string">"post"</span>&gt;
   ...
&lt;/form&gt;

<span class="function"><span class="keyword">function</span> <span class="title">delMulti</span><span class="params">()</span>{</span>
    <span class="comment">// 首先判断用户哟没有选择要删除的记录</span>
    <span class="keyword">var</span> selected = <span class="keyword">false</span>;
    <span class="keyword">var</span> idsArray = document.getElementsByName(<span class="string">"ids"</span>);
    <span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;idsArray.length; i++){
        <span class="keyword">if</span>(idsArray[i].checked) {
            selected = <span class="keyword">true</span>;
            <span class="keyword">break</span>;
        }
    }
        <span class="comment">// 选了, 二次提示, 确定要删除吗</span>
    <span class="keyword">if</span>(selected){
        <span class="keyword">var</span> sure = window.confirm(<span class="string">"确定吗"</span>);
        <span class="comment">// 二次提示: 确定,让表单提交即可</span>
        <span class="keyword">if</span>(sure) {
           document.forms[<span class="number">0</span>].submit()
        }
    } <span class="keyword">else</span> {
        <span class="comment">// 没选, 提示, 请选择要删除的记录</span>
        alert(<span class="string">"请选择"</span>)
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">private</span> void delMulti(){
    <span class="built_in">String</span> ids[] = <span class="built_in">request</span>.getParameterValues(<span class="string">"ids"</span>);
    <span class="keyword">if</span>(ids!=<span class="literal">null</span>&&ids.length&gt;<span class="number">0</span>){
        <span class="keyword">for</span>(<span class="built_in">String</span> id:ids) s.delCustomer(id);
    }
    <span class="built_in">response</span>.sendRedirect(<span class="built_in">request</span>.getContextPath());
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day17-jdbc]]></title>
    <link href="http://zhpooer.github.io/2014/04/22/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day17-jdbc/"/>
    <id>http://zhpooer.github.io/2014/04/22/传智播客day17-jdbc/</id>
    <published>2014-04-22T01:29:44.000Z</published>
    <updated>2014-04-22T07:40:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jdbc-">jdbc概述</h1>
<p>sun 公司为了简化和统一数据库的操作, 定义了JDBC规范</p>
<ol>
<li>Java Data Base Connective</li>
<li>组成包: java.sql.*, javax.sql.*, 都包含在JDK</li>
<li>还需要数据库的驱动, 这些驱动就相当于对JDBC规范的实现</li>
</ol>
<h1 id="jdbc-">jdbc 编码步骤</h1>
<p>准备数据:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> users(
   id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
   name <span class="keyword">varchar</span>(<span class="number">100</span>),
   password <span class="keyword">varchar</span>(<span class="number">40</span>),
   email <span class="keyword">varchar</span>(<span class="number">60</span>),
   birthday <span class="keyword">date</span>
);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'ab'</span>,<span class="string">'123'</span>,<span class="string">'ab@c.com'</span>,<span class="string">'1980-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'cd'</span>,<span class="string">'123'</span>,<span class="string">'cd@e.com'</span>,<span class="string">'1981-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'ef'</span>,<span class="string">'123'</span>,<span class="string">'ef@g.com'</span>,<span class="string">'1982-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'gh'</span>,<span class="string">'123'</span>,<span class="string">'gh@k.com'</span>,<span class="string">'1983-02-22'</span>);</span>
</pre></td></tr></table></figure>

<ol>
<li>注册驱动</li>
<li>获取与数据库的连接</li>
<li>得到代表数据库的语句</li>
<li>执行语句</li>
<li>如果执行的是查询语句, 就会有结果集, 处理</li>
<li>释放占用的资源</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>DriverManager<span class="preprocessor">.registerDriver</span>(new <span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>)<span class="comment">;</span>
Connection conn = DriverManager<span class="preprocessor">.getConnection</span>(<span class="string">"jdbc:mysql://localhost:3306/test"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>)<span class="comment">;</span>
Statement stmt = conn<span class="preprocessor">.createStatement</span>()<span class="comment">;</span>
// resultset 是一个游标, 该游标可以滚动, 默认指向第一行的前面
ResultSet rs = stmt<span class="preprocessor">.excuteQuery</span>(<span class="string">"select * from user"</span>)<span class="comment">;</span>
// hs<span class="preprocessor">.next</span>()<span class="comment">; 指向移动下一条游标, 并告知有没有记录</span>
while(rs<span class="preprocessor">.next</span>()) {
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"id"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"name"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"password"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"email"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"birthday"</span>))<span class="comment">;</span>
}
rs<span class="preprocessor">.close</span>()<span class="comment">;</span>
stmt<span class="preprocessor">.close</span>()<span class="comment">;</span>
conn<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="jdbc-">JDBC 主要接口或类</h1>
<h2 id="drivermanager">DriverManager</h2>
<p>作用:</p>
<ul>
<li><p>注册驱动</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>// 有缺陷, 会导致驱动注册两遍
DriverManager<span class="preprocessor">.registerDriver</span>(new <span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>)
// 替代方案: 避免了依赖具体的驱动类
Class<span class="preprocessor">.fornName</span>(<span class="string">"com.mysql.jdbc.Driver"</span>)
</pre></td></tr></table></figure>
</li>
<li><p>获取与数据库的连接</p>
<ol>
<li>方式一: 
<code>DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;root&quot;);</code>
sun公司和数据库厂商定义的协议, 具体参考数据库的文档</li>
<li><p>方式二</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>Properties info = new Properties()<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"user"</span>, <span class="string">"root"</span>)<span class="comment">; // key由什么定义,查数据库文档查</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"password"</span>, <span class="string">"root"</span>)<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"useUnicode"</span>, <span class="string">"true"</span>)<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"characterEncoding"</span>, <span class="string">"utf8"</span>)<span class="comment">;</span>
DriverManager<span class="preprocessor">.getConnection</span>(<span class="string">"jdbc:mysql://localhost:3306/test"</span>, info)
</pre></td></tr></table></figure>
</li>
<li><p>方式三: <code>DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?user=root&amp;password=root&amp;...&quot;)</code></p>
</li>
</ol>
</li>
</ul>
<h2 id="connection">Connection</h2>
<p>所有的与数据库的交互都是基于连接的基础之上的, 因此该对象相当重要</p>
<p><code>Statement stmt = conn.createStatement()</code> 创建向数据库发送sql的<code>Statement</code>对象</p>
<h2 id="statement">Statement</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>详细信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>ResultSet excuteQuery(String, sql)</td>
<td>只适合查询, 返回的是查询的结果集</td>
</tr>
<tr>
<td>int excuteUpdate(String sql)</td>
<td>适合(insert update delete), 或者没有返回结果集的DDL, 返回影响的记录数目</td>
</tr>
<tr>
<td>boolean excute(String sql)</td>
<td>适合所有语句, 返回<em>有没有结果集</em>,  <code>if(true) stmt.getResultSet()</code></td>
</tr>
</tbody>
</table>
<h2 id="resultset">ResultSet</h2>
<p>代表着查询语句的查询结果集, 有一个游标</p>
<h3 id="-">遍历结果集</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
<span class="function">while(rs.<span class="function">next()</span>)</span> {
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"id"</span>)</span>)</span>; 
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"name"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"password"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"email"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"birthday"</span>)</span>)</span>;
}
<span class="comment">// 方式二 可以通过列的索引获取数据, 第一列索引是1,与框架有关</span>
<span class="function">while(rs.<span class="function">next()</span>)</span> {
   <span class="function">println(rs.<span class="function">getObject(<span class="number">1</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">2</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">3</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">4</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">5</span>)</span>)</span>;
}
</pre></td></tr></table></figure>

<h3 id="-">常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean next()</td>
<td>向后移动游标, 返回该位置上有没有记录</td>
</tr>
<tr>
<td>boolean previous()</td>
<td>向前移动游标, 返回该位置上有没有记录</td>
</tr>
<tr>
<td>boolean absolute(int)</td>
<td>绝对定位(第一行 1), 返回该位置上有没有记录</td>
</tr>
<tr>
<td>void beforeFirst()</td>
<td>游标定位在第一行的前面</td>
</tr>
<tr>
<td>void afterLast()</td>
<td>游标定位在最后一行的后面</td>
</tr>
</tbody>
</table>
<h3 id="mysql-jdbc-">mysql&amp;jdbc 类型对应</h3>
<table>
<thead>
<tr>
<th>mysql类</th>
<th>Jdbc对应方法</th>
<th>返回类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bit(1)</td>
<td>getBoolean() getBytes()</td>
<td>Boolean byte[]</td>
</tr>
<tr>
<td>tinyint</td>
<td>getByte()</td>
<td>Byte</td>
</tr>
<tr>
<td>smallint</td>
<td>getShort()</td>
<td>Short</td>
</tr>
<tr>
<td>Int</td>
<td>getInt()</td>
<td>Int</td>
</tr>
<tr>
<td>bigint</td>
<td>getLong()</td>
<td>Long</td>
</tr>
<tr>
<td>char varchar</td>
<td>getString()</td>
<td>String</td>
</tr>
<tr>
<td>Text(cblob) Blob</td>
<td>getClob() getBlob()</td>
<td>Clob Blob</td>
</tr>
<tr>
<td>date</td>
<td>getDate()</td>
<td>java.sql.Date</td>
</tr>
<tr>
<td>time</td>
<td>getTime()</td>
<td>java.sql.Time</td>
</tr>
<tr>
<td>timestamp</td>
<td>getTimestamp()</td>
<td>java.sql.Timestamp</td>
</tr>
</tbody>
</table>
<h3 id="-javabean">封装数据到 Javabean</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> <span class="keyword">implements</span> <span class="title">Serializable</span> {</span>
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String birthday;
}
u.setId(rs.getInt(<span class="string">"id"</span>));
u.setName(rs.getString(<span class="string">"name"</span>));
u.setBirthday(rs.getDate(<span class="string">"birthday"</span>));
</pre></td></tr></table></figure>

<h2 id="-">释放占用的资源</h2>
<p>按照打开的顺序, 以相反的顺序进行释放</p>
<p>特别是 Connection 对象, 非常稀有的资源, 用完后必须马上释放,
<strong>必须尽量晚创建和尽量早释放</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Connection conn = <span class="keyword">null</span>;
Statement = <span class="keyword">null</span>;
ResultSet rs = <span class="keyword">null</span>;
<span class="keyword">try</span> {
} <span class="keyword">catch</span> (<span class="keyword">Exception</span> e){
} <span class="keyword">finally</span> {
   <span class="keyword">try</span>{<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)   { rs.close(); rs = <span class="keyword">null</span>;     }} <span class="keyword">catch</span> (e){}
   <span class="keyword">try</span>{<span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) { stmt.close(); stmt = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
   <span class="keyword">try</span>{<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) { conn.close(); conn = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
}
</pre></td></tr></table></figure>

<h2 id="-">模板</h2>
<p>dbcfg.properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="setting">driverClass=<span class="value">**</span></span>
<span class="setting">url=<span class="value">**</span></span>
<span class="setting">usr=<span class="value">**</span></span>
<span class="setting">password=<span class="value">**</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> JdbcUtil {
    <span class="keyword">private</span> <span class="keyword">static</span> String driveClass;
    <span class="keyword">private</span> <span class="keyword">static</span> String url;
    <span class="keyword">private</span> <span class="keyword">static</span> String user;
    <span class="keyword">private</span> <span class="keyword">static</span> String password
    <span class="keyword">static</span> {
      InputStream <span class="keyword">in</span> = getClasLoader.getResourceAsStream(<span class="string">"dbcfg.properties"</span>);
      Properties props = <span class="keyword">new</span> Properties();
      props.load(<span class="keyword">in</span>)
      String drClass = props.getProperty(<span class="string">"driveClass"</span>);
      String url = props.getProperty(<span class="string">"url"</span>);
      String user = props.getProperty(<span class="string">"usr"</span>);
      String password = props.getProperty(<span class="string">"password"</span>);
      Class.forName(drClass);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>() throws SQLException {
         <span class="keyword">return</span> DriverManager.getConnection(url,user,password);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span>(ResultSet rs, Statement stmt, Connection conn) {
        <span class="keyword">try</span>{<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)   { rs.close(); rs = <span class="keyword">null</span>;     }} <span class="keyword">catch</span> (e){}
        <span class="keyword">try</span>{<span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) { stmt.close(); stmt = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
        <span class="keyword">try</span>{<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) { conn.close(); conn = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
    }
}
</pre></td></tr></table></figure>

<h1 id="jdbc-crud">JDBC进行CRUD</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"insert into users(name, password, email, birthday) values(''...)"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
<span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"udpate users set password='123' where id = 4"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
<span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"delete from users where id = 4"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
</pre></td></tr></table></figure>

<h1 id="-jdbc-web-">利用JDBC修改web项目</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"dbcfg"</span>);
<span class="keyword">try</span>{
    Class.forName()
} <span class="keyword">catch</span> (e) {
    <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"读取数据库配置文件失败."</span>);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySQLImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(User user) {
        <span class="keyword">if</span>(findUserByUsername(user.getUsername) != <span class="keyword">null</span>){
           <span class="keyword">throw</span> <span class="keyword">new</span> UserExistException();
        }
        Connection conn = <span class="keyword">null</span>;
        Statement stmt = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = JdbcUtil.getConnection();
            stmt = conn.createStatement();
            stmt.excuteUpdate(<span class="string">""</span>);
        } <span class="keyword">catch</span> (Exception e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();
        } <span class="keyword">finally</span> {
            JdbcUtil.release(<span class="keyword">null</span>, stmt, conn)
        }
    }
    <span class="keyword">public</span> User <span class="title">findUserByUsername</span>(String username) {
        Connection conn = <span class="keyword">null</span>;
        Statement stmt = <span class="keyword">null</span>;
        ResultSet rs = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = JdbcUtil.getConnection();
            stmt = conn.createStatement();
            rs = stmt.excuteQuery(<span class="string">""</span>);
            <span class="keyword">if</span>(rs.next()) {
                Usesr user = <span class="keyword">new</span> User();
                user.setUsername(rs.getString(<span class="string">"username"</span>));
                <span class="keyword">return</span> user;
            }
            <span class="keyword">return</span> <span class="keyword">null</span>;
        } <span class="keyword">catch</span> (Exception e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();
        } <span class="keyword">finally</span> {
            JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
        }
    }
    <span class="keyword">public</span> User <span class="title">findUser</span>(String username, String password) {
        <span class="comment">// 同 findUserByName</span>
    }
    <span class="comment">// 注意单元测试</span>
}
</pre></td></tr></table></figure>

<h1 id="preparedstatement">PreparedStatement</h1>
<p>特点和作用</p>
<ul>
<li>支持SQL语句的预编译, 提高数据库的执行效率</li>
<li>防止SQL注入, 给数据库的已经不是字符串了</li>
<li>语句中的参数可以使用占位符(?)</li>
</ul>
<p><strong>能用 PreparedStatement, 都要用 PreparedStatement</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>stmt = conn<span class="preprocessor">.preparedStatement</span>(<span class="string">"insert into user (username,password,email,birthday) values(?,?,?,?)"</span>)<span class="comment">;</span>
stmt<span class="preprocessor">.setString</span>(<span class="number">1</span>, user<span class="preprocessor">.getUsername</span>())<span class="comment">; // 索引对应的语句中的?的位置, 第一个就是1</span>
stmt<span class="preprocessor">.setDate</span>(<span class="number">4</span>, new java<span class="preprocessor">.sql</span><span class="preprocessor">.Date</span>(user<span class="preprocessor">.getBirthday</span>()<span class="preprocessor">.getTime</span>()))<span class="comment">;</span>
stmt<span class="preprocessor">.excuteUpdate</span>()<span class="comment">; // or rs = stmt.excuteQuery();</span>
</pre></td></tr></table></figure>

<h1 id="-dao-">理解DAO解耦的好处</h1>
<p>高类聚, 低耦合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">// 工厂模式 和 单例 </span>
<span class="keyword">public</span> <span class="keyword">class</span> DaoFactory {
    <span class="keyword">private</span> <span class="keyword">static</span> DaoFactory instance;
    <span class="keyword">private</span> <span class="title">DaoFactory</span>(){}
    <span class="keyword">public</span> <span class="keyword">static</span> DaoFactory <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(instance==<span class="keyword">null</span>){
            synchronized(DaoFactory.getClass()){
                 <span class="keyword">if</span>(instance==<span class="keyword">null</span>)
                      instance = <span class="keyword">new</span> DaoFactory();
                  <span class="keyword">return</span> instance;
            }
        }
        <span class="keyword">return</span> instance;
    }
    <span class="keyword">public</span> UserDao <span class="title">getUserDao</span>(){
        <span class="keyword">return</span> Class.forName(<span class="string">""</span>).newInstance();
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="jdbc" scheme="http://zhpooer.github.io/tags/jdbc/"/>
    
      <category term="设计模式" scheme="http://zhpooer.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day16-sql入门]]></title>
    <link href="http://zhpooer.github.io/2014/04/20/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day16-sql%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/04/20/传智播客day16-sql入门/</id>
    <published>2014-04-20T01:45:40.000Z</published>
    <updated>2014-04-20T11:59:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sql-">SQL入门</h1>
<p>Structed Query Language 结构化查询语言</p>
<p>作用: 与数据库进行交互</p>
<p>SQL标准, 由ANSI进行管理和维护. 数据库厂商都支持该标准,
并进行了扩张. 扩张的部分, 一般称之为方言.</p>
<h2 id="-">常用数据库</h2>
<ol>
<li>Oracle</li>
<li>DB2</li>
<li>MySQL</li>
<li>SQL Server4</li>
</ol>
<h1 id="ddl-">DDL 数据定义语言</h1>
<h2 id="-">数据库操作</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">-- 创建数据库字符集采用mydb1, 字符集采用默认字符集</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb1;</span>    
<span class="operator"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> mydb1;</span>

<span class="comment">-- 显示当前所有数据库</span>
<span class="operator"><span class="keyword">show</span> databases;</span>

<span class="comment">-- 创建一个字符集为GBK的数据库</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb1 <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>
<span class="comment">-- 校对规则设置</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb2 <span class="keyword">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span>

<span class="comment">-- 删除数据库</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">database</span> mydb1;</span>

<span class="comment">-- 修改数据库</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">database</span> mydb2  <span class="keyword">character</span> <span class="keyword">set</span> utf8;</span>
</pre></td></tr></table></figure>

<h2 id="-">表操作</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="comment">-- 使用mydb1数据库</span>
use mydb1;
<span class="comment">-- 建表</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> employee(
  id <span class="keyword">int</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>),
  gender <span class="keyword">varchar</span>(<span class="number">10</span>),
  birthday <span class="keyword">date</span>,
  entry_date <span class="keyword">date</span>,
  job <span class="keyword">varchar</span>(<span class="number">200</span>),
  salary <span class="keyword">float</span>(<span class="number">8</span>,<span class="number">2</span>),
  resume text
);</span>
<span class="comment">-- 查看当前数据库中的所有表</span>
<span class="operator"><span class="keyword">show</span> tables;</span>
<span class="comment">-- 查看表的创建细节</span>
<span class="operator"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> employee;</span>

<span class="comment">-- 修改表</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">column</span> image blob;</span>
<span class="comment">-- 修改列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify job <span class="keyword">varchar</span>(<span class="number">60</span>);</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">column</span> image;</span>

<span class="comment">-- 修改表名</span>
<span class="operator">rename <span class="keyword">table</span> employee <span class="keyword">to</span> <span class="keyword">user</span>;</span> 

<span class="comment">-- 修改编码</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> change <span class="keyword">column</span> name username <span class="keyword">varchar</span>(<span class="number">100</span>);</span>
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数值类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BIT(1)</td>
<td>位类型, 默认值为1, 范围 1-64</td>
</tr>
<tr>
<td>tinyint[unsigned]</td>
<td>带符号的范围是-128到127</td>
</tr>
<tr>
<td>bool, boolean</td>
<td>使用0或1表示真假</td>
</tr>
<tr>
<td>smallint</td>
<td>2的16次方</td>
</tr>
<tr>
<td>int</td>
<td>2的32次方</td>
</tr>
<tr>
<td>bigint</td>
<td>2的64次方</td>
</tr>
<tr>
<td>float(M,D)</td>
<td>M指示显示长度, d指定小数weis</td>
</tr>
<tr>
<td>double(M,D)</td>
<td>表示比float精度更大</td>
</tr>
<tr>
<td>char(size)</td>
<td>固定长度字符串</td>
</tr>
<tr>
<td>varchar(size)</td>
<td>可变长度</td>
</tr>
<tr>
<td>blob lognblob</td>
<td>二进制数据</td>
</tr>
<tr>
<td>text(clob) longtext(longclob)</td>
<td>大文本</td>
</tr>
<tr>
<td>time datetime timestamp</td>
<td>日期类型</td>
</tr>
</tbody>
</table>
<h1 id="dml-">DML 数据操作语句</h1>
<p>作用: 操作的是表中的记录(数据)</p>
<p>关键字: <code>insert</code> <code>update</code> <code>delete</code></p>
<table>
<thead>
<tr>
<th>mysql特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串类型</td>
<td>使用单引号 &#39;abcd&#39;</td>
</tr>
<tr>
<td>日期类型</td>
<td>使用单引号  &#39;2101-02-11&#39;</td>
</tr>
<tr>
<td>特殊值</td>
<td>null</td>
</tr>
</tbody>
</table>
<h2 id="insert">insert</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id, username, gender) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'zhw'</span>, <span class="string">'male'</span>);</span>

<span class="comment">-- 如果客户端为 GBK 编码, 会报错, 因为服务器编码和客户端编码不一致</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id, username, gender) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'海贼王'</span>, <span class="string">'male'</span>);</span>
<span class="comment">-- 查询mysql的码表</span>
<span class="operator"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">'character%'</span>;</span>
<span class="comment">-- 告知服务器客户端使用的编码, 为临时方法</span>
<span class="operator"><span class="keyword">set</span> character_set_client=gbk
-- 告知服务端客户端查看结果集的编码为, 为临时方法
<span class="keyword">set</span> character_set_results=gbk;</span>
</pre></td></tr></table></figure>

<h2 id="update">update</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>
<span class="operator"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> salary=<span class="number">5000</span>, gender=<span class="string">'female'</span> <span class="keyword">where</span> username=<span class="string">'zhw'</span>;</span>

<span class="operator"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> salary=salary+<span class="number">1000</span></span>
</pre></td></tr></table></figure>

<h2 id="delete-truncate">delete和truncate</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'海贼王'</span>;</span>
<span class="comment">-- 完全清空一个表, 快速, 删除一张表, 重建一张, 属于DDL</span>
<span class="operator"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span>
</pre></td></tr></table></figure>

<h2 id="dql">DQL</h2>
<p>数据查询语言
<code>select [distinct] *|{column, column...} from table;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">-- 查询所有</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 投影查询</span>
<span class="operator"><span class="keyword">select</span> username, gender <span class="keyword">from</span> <span class="keyword">user</span>;</span>
<span class="comment">-- 过滤重复的数据</span>
<span class="operator"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 在结果中进行数据计算</span>
<span class="operator"><span class="keyword">select</span> name, salary+<span class="number">10</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 使用别名</span>
<span class="operator"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">'姓名'</span>, salary+<span class="number">10</span> 工资 <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 使用where语句过滤查询</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">"zhw"</span>;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary&gt;<span class="number">5000</span>;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> (salary+<span class="number">10</span>)&gt;<span class="number">4000</span>;</span>

<span class="comment">-- between</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary between <span class="number">4000</span> <span class="keyword">and</span> <span class="number">5000</span>;</span>
<span class="comment">-- in</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">5000</span>, <span class="number">6000</span>, <span class="number">7000</span>);</span>
<span class="comment">-- like</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'李%'</span>;</span>
<span class="comment">-- and</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age&gt;<span class="number">20</span> <span class="keyword">where</span> salary&gt;<span class="number">5000</span>;</span>

<span class="comment">-- 排序 默认升序</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span>  <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> salary ;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span>  <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span> <span class="comment">-- 降序</span>
</pre></td></tr></table></figure>

<h1 id="-">数据完整性</h1>
<p>数据完整性是为了保证插入到数据中的数据是正确的,
它防止了用户可能的输入错误</p>
<p>分为三类</p>
<ol>
<li>实体完整</li>
<li>域完整性</li>
<li>参照完整性</li>
</ol>
<h2 id="-">实体完整性</h2>
<p>规定表的一行在表中是唯一的实体. 实体完整性通过表的主键来实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">-- 声明id是主键,且自动增长</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t2(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
) <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t3(
    id <span class="keyword">int</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    <span class="keyword">primary</span> <span class="keyword">key</span>(id)
);</span>
</pre></td></tr></table></figure>

<p>主键分类:</p>
<ul>
<li>逻辑主键, 不代表实际意义, 只是区分不同记录, 比如ID</li>
<li>业务主键, 代表着具体的实际意义, 比如身份证, 用户名</li>
</ul>
<h2 id="-">域完整性</h2>
<p>数据库表的列必须符合某种特定的数据类型或约束</p>
<p>非空约束: not null</p>
<p>唯一约束: unique</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t4 (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
  name <span class="keyword">varchar</span>(<span class="number">12</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="keyword">null</span>,
  gender <span class="keyword">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>
)</span>
</pre></td></tr></table></figure>

<h2 id="-">参照完整性(多表)</h2>
<p>表间的关系:</p>
<ul>
<li>一对多</li>
<li>多对多</li>
<li>一对一</li>
</ul>
<h3 id="-">一对多</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> department(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> employee(
   id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
   name <span class="keyword">varchar</span>(<span class="number">100</span>),
   department_id <span class="keyword">int</span>,
   <span class="keyword">constraint</span> department_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(department_id) <span class="keyword">references</span> department(id)
);</span>

<span class="comment">-- 如果删除 department 中的行, 必须先删除employee的外键</span>
</pre></td></tr></table></figure>

<h3 id="-">多对多</h3>
<p>需要多建一个联合主键(用至少两个主键同时作为主键)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> student(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher_student (
    t_id <span class="keyword">int</span>,
    s_id <span class="keyword">int</span>,
    <span class="keyword">constraint</span> t_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(t_id) <span class="keyword">references</span> teacher(id),
    <span class="keyword">constraint</span> s_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(s_id) <span class="keyword">references</span> student(id),
    <span class="keyword">primary</span> <span class="keyword">key</span> (t_id, s_id)
)</span>
</pre></td></tr></table></figure>

<h3 id="-">一对一</h3>
<p>外键+唯一约束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>)
);</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> idcard(
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  person_id <span class="keyword">int</span> <span class="keyword">unique</span>,
  <span class="keyword">constraint</span> p_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(person_id) <span class="keyword">references</span> person(id),
)</span>
</pre></td></tr></table></figure>

<p>主键关联</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>)
);</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> idcard(
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  <span class="keyword">constraint</span> i_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(id) <span class="keyword">references</span> person(id),
)</span>
</pre></td></tr></table></figure>

<h2 id="-dql">多表DQL</h2>
<h3 id="-">连接查询</h3>
<p>基本语法: from 表1 连接类型 表2 [on 连接条件] [where 筛选条件]</p>
<p>约定: 表一为左表, 表二为右表</p>
<ul>
<li>交叉连接: cross join, 返回左表和右表的笛卡尔积</li>
<li>内连接: inner join, 返回满足连接条件的记录<ul>
<li>隐式内连接</li>
<li>显式内连接</li>
</ul>
</li>
<li>外连接: out join<ul>
<li>左外连接 left outer join = left join
  返回满足连接条件的记录, 同时返回左表中剩余的其他记录</li>
<li>右外连接 同上</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 笛卡尔积</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer, orders;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer <span class="keyword">cross</span> <span class="keyword">join</span> orders;</span>

<span class="comment">-- 内连接</span>
<span class="comment">-- 隐式</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c , orders o <span class="keyword">where</span> c.id=o.customer_id;</span>
<span class="comment">-- 显示</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.id=o.customer_id;</span>

<span class="comment">-- 左外连接</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">order</span> <span class="keyword">on</span> c.id=o.customer_id;</span>
<span class="comment">-- 右外连接</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">right</span> <span class="keyword">join</span> <span class="keyword">order</span> <span class="keyword">on</span> c.id=o.customer_id;</span>
</pre></td></tr></table></figure>

<h3 id="-">子查询</h3>
<p>子查询也叫嵌套查询, 是指在 select 子句中嵌套查询语句</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> customer_id=(<span class="keyword">select</span> * <span class="keyword">from</span> customer <span class="keyword">where</span> name=<span class="string">"aabbcc"</span>);</span>
</pre></td></tr></table></figure>

<h3 id="-">联合查询</h3>
<p>联合查询, union关键字</p>
<p>联合查询是合并两条查询语句的查询结果, 去掉其中的重复结果, 并集</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> price&gt;<span class="number">200</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> id=<span class="number">1</span>;</span>
</pre></td></tr></table></figure>

<h3 id="-">报表查询(使用数据库提供的函数库)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student <span class="keyword">where</span> math&gt;<span class="number">80</span>;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student wehre (chinese+math+english)&gt;<span class="number">250</span>;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(math) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">avg</span>(chinese) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">max</span>(chinese), <span class="aggregate">min</span>(math) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> product, <span class="aggregate">sum</span>(price) <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> product;</span>

<span class="operator"><span class="keyword">select</span> product, <span class="aggregate">sum</span>(price) <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> product <span class="keyword">having</span> <span class="aggregate">sum</span>(price) &gt; <span class="number">100</span>;</span>
</pre></td></tr></table></figure>

<h4 id="-">其他函数</h4>
<p><img src="/img/sql_func_date.png" alt="date函数">
<img src="/img/sql_func_math.png" alt="math函数">
<img src="/img/sql_func_str.png" alt="string函数"></p>
<h1 id="-">数据库的备份与恢复</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>mysqldump -h localhost -u root -p mydb2 &gt; mydb2<span class="preprocessor">.sql</span>

mysql -uroot -p mydb2 &lt; mydb2<span class="preprocessor">.sql</span>
<span class="preprocessor"># 或</span>
mysql&gt; use db2<span class="comment">;</span>
mysql&gt; source mydb2<span class="preprocessor">.sql</span><span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="mysql" scheme="http://zhpooer.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day15-登陆案例]]></title>
    <link href="http://zhpooer.github.io/2014/04/19/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day15-%E7%99%BB%E9%99%86%E6%A1%88%E4%BE%8B/"/>
    <id>http://zhpooer.github.io/2014/04/19/传智播客day15-登陆案例/</id>
    <published>2014-04-19T01:13:03.000Z</published>
    <updated>2014-04-19T08:54:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">用户注册和登陆案例</h1>
<ol>
<li><p>技术架构: 三层架构(表现层MVC)</p>
</li>
<li><p>要求: jap中不能出现一行java脚本或jiava表达式,出了指令&lt;%@ %&gt;</p>
</li>
<li>数据库: 临时使用xml, 解析使用Dom4j</li>
<li>必须知道要干什么</li>
<li><p>开发步骤</p>
<ol>
<li>建立工程, 搭建开发环境(dom4j, jaxen, commons-beanutils )</li>
<li>建立类所用的包    <ul>
<li>cn.itcast.domain: 放javaBean</li>
<li>弄出数据库. cn.itcast.dao: 放dao接口</li>
<li>cn.itcast.dao.impl: 放Dao接口的实现</li>
<li>cn.itcast.service: 业务接口</li>
<li>cn.itcast.service.impl: 业务接口实现</li>
<li>cn.itcast.comtroller: Servlet 控制器</li>
<li>/WEB-INF/pages: 放jsp, 用户无法访问(只能靠转发)</li>
<li>把握两点, 1.domain中的javabean; 2.业务接口</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">users</span>&gt;</span>
  <span class="tag">&lt;<span class="title">user</span> <span class="attribute">username</span>=<span class="value">"**"</span> <span class="attribute">password</span>=<span class="value">"**"</span> <span class="attribute">email</span>=<span class="value">"**"</span> <span class="attribute">birthday</span>=<span class="value">"2022-12-12"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">user</span>&gt;</span>
<span class="tag">&lt;/<span class="title">users</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java动态代理]]></title>
    <link href="http://zhpooer.github.io/2014/04/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/04/18/java动态代理/</id>
    <published>2014-04-18T12:14:52.000Z</published>
    <updated>2014-04-18T12:22:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-lang-reflect-proxy">java.lang.reflect.Proxy</h1>
<p>它提供了一组静态方法来为一组接口动态地生成代理类及其对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 方法 1: 该方法用于获取指定代理对象所关联的调用处理器</span>
<span class="keyword">static</span> InvocationHandler getInvocationHandler(<span class="keyword">Object</span> proxy) 

<span class="comment">// 方法 2：该方法用于获取关联于指定类装载器和一组接口的动态代理类的类对象</span>
<span class="keyword">static</span> <span class="keyword">Class</span> getProxyClass(ClassLoader loader, <span class="keyword">Class</span>[] interfaces) 

<span class="comment">// 方法 3：该方法用于判断指定类对象是否是一个动态代理类</span>
<span class="keyword">static</span> boolean isProxyClass(<span class="keyword">Class</span> cl) 

<span class="comment">// 方法 4：该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例</span>
<span class="keyword">static</span> <span class="keyword">Object</span> newProxyInstance(ClassLoader loader, <span class="keyword">Class</span>[] interfaces, InvocationHandler h)
</pre></td></tr></table></figure>

<h1 id="java-lang-reflect-invocationhandler">java.lang.reflect.InvocationHandler</h1>
<p>每次生成动态代理类对象时都需要指定一个实现了该接口的调用处理器对象（参见 Proxy 静态方法 4 的第三个参数）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// 该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象</span>
<span class="comment">// 第三个方法是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上发射执行</span>
Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>)</span>
</pre></td></tr></table></figure>

<h1 id="-">实例</h1>
<p>注意: 这是Scala实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Stub</span> {</span>
  <span class="keyword">def</span> doSome(): Unit;
}

<span class="class"><span class="keyword">class</span> <span class="title">StubImpl</span> <span class="keyword">extends</span> <span class="title">Stub</span> {</span>
  <span class="keyword">override</span> <span class="keyword">def</span> doSome() {
    println(<span class="string">"hello world"</span>);
  }
}
<span class="comment">// 定义处理对象的代理方法</span>
<span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span><span class="params">(proxied: Object)</span> <span class="keyword">extends</span> <span class="title">InvocationHandler</span> {</span>
  <span class="keyword">def</span> <span class="keyword">this</span>() = <span class="keyword">this</span>(<span class="keyword">null</span>)
  <span class="keyword">override</span> <span class="keyword">def</span> invoke(proxy: Object, method: Method, args: Array[Object]): AnyRef = {
    println(<span class="string">"before invoke"</span>)
    <span class="keyword">val</span> result = method.invoke(proxied)  <span class="comment">// 调用主体方法, 可以在调用方法上下插入处理</span>
    println(<span class="string">"after invoke"</span>)
    result
  }
}
<span class="comment">//主方法</span>
it should <span class="string">"通过反射实现实现动态代理"</span> in {
  <span class="keyword">val</span> proxy = Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), Array(classOf[Stub]), <span class="keyword">new</span> ProxyHandler(<span class="keyword">new</span> StubImpl))
  proxy <span class="keyword">match</span> {
    <span class="keyword">case</span> p: Stub =&gt; p.doSome();
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="动态代理" scheme="http://zhpooer.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux-grep手记]]></title>
    <link href="http://zhpooer.github.io/2014/04/18/linux-grep%E6%89%8B%E8%AE%B0/"/>
    <id>http://zhpooer.github.io/2014/04/18/linux-grep手记/</id>
    <published>2014-04-18T00:01:19.000Z</published>
    <updated>2014-04-18T00:55:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">常用方法</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>ls -l | <span class="keyword">grep</span> <span class="string">'^a'</span> <span class="comment"># 通过管道过滤ls -l输出的内容，只显示以a开头的行</span>

<span class="keyword">grep</span> <span class="string">'test'</span> d* <span class="comment"># 显示所有以d开头的文件中包含test的行</span>

<span class="keyword">grep</span> <span class="string">'test'</span> aa bb cc <span class="comment"># 显示在aa，bb，cc文件中匹配test的行</span>

<span class="keyword">grep</span> -i pattern files <span class="comment">#不区分大小写地搜索。默认情况区分大小写</span>

<span class="keyword">grep</span> -l pattern files <span class="comment"># 只列出匹配的文件名</span>

<span class="keyword">grep</span> -L pattern files <span class="comment"># 列出不匹配的文件名</span>

<span class="keyword">grep</span> -w pattern files <span class="comment"># 只匹配整个单词，而不是字符串的一部分(如匹配‘magic’，而不是‘magical’)</span>

<span class="keyword">grep</span> -C number pattern files <span class="comment"># 匹配的上下文分别显示[number]行</span>
<span class="keyword">grep</span> -A number pattern files <span class="comment"># 匹配的上下文显示后面的[number]行</span>
<span class="keyword">grep</span> -B number pattern files <span class="comment"># 匹配的上下文显示前面的[number]行</span>

<span class="keyword">grep</span> pattern1 \| pattern2 files <span class="comment"># 显示匹配 pattern1 或 pattern2 的行</span>

<span class="keyword">grep</span> pattern1 files | <span class="keyword">grep</span> pattern2 <span class="comment"># 显示既匹配 pattern1 又匹配 pattern2 的行</span>
</pre></td></tr></table></figure>

<h1 id="-grep">正则表达式与grep</h1>
<p>详细正则表达式介绍,<a href="/2014/04/15/java正则学习/">请点击我</a>.
不过在使用grep时,有些符号需要转义如 <code>{}&lt;&gt;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">grep</span> <span class="string">"a\{3, 5\}"</span>   <span class="comment"># a出现3到5次</span>
<span class="keyword">grep</span> <span class="string">"\&lt;"</span>          <span class="comment"># 查找左尖括号</span>
</pre></td></tr></table></figure>

<h1 id="-">常用的选项</h1>
<p>-?  同时显示匹配行上下的？行，如：grep -2 pattern filename同时显示匹配行的上下2行。</p>
<p>-b，--byte-offset  打印匹配行前面打印该行所在的块号码。</p>
<p>-c,--count   只打印匹配的行数，不显示匹配的内容。</p>
<p>-f File，--file=File   从文件中提取模板。空文件中包含0个模板，所以什么都不匹配。</p>
<p>-h，--no-filename   当搜索多个文件时，不显示匹配文件名前缀。</p>
<p>-i，--ignore-case   忽略大小写差别。</p>
<p>-q，--quiet   取消显示，只返回退出状态。0则表示找到了匹配的行。</p>
<p>-n，--line-number   在匹配的行前面打印行号。</p>
<p>-s，--silent  不显示关于不存在或者无法读取文件的错误信息。</p>
<p>-v，--revert-match  反检索，只显示不匹配的行。</p>
]]></content>
    
    
      <category term="grep" scheme="http://zhpooer.github.io/tags/grep/"/>
    
      <category term="linux" scheme="http://zhpooer.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day14-自定义标签]]></title>
    <link href="http://zhpooer.github.io/2014/04/17/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day14-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    <id>http://zhpooer.github.io/2014/04/17/传智播客day14-自定义标签/</id>
    <published>2014-04-17T01:04:00.000Z</published>
    <updated>2014-04-18T02:49:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">自定义标签</h1>
<p>作用: 替换JSP页面中的java脚本 <code>&lt;%%&gt;</code></p>
<p>且每次调用JSP都会生成新的标签对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="vbscript">&lt;%
<span class="built_in">Date</span> <span class="built_in">time</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();
out.write(<span class="built_in">time</span>.toLocaleString());
%&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">开发步骤</h2>
<ol>
<li><p>编写一个类 <code>javax.sevlet.jsp.tagext.SimpleTag</code>,
覆盖掉 <code>doTag()</code> 方法   <strong>ShowTimeSimpleTag.java</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowTimeSimpleTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span>{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span>() <span class="keyword">throws</span> JspException, IOExcetpion {
       Date time = <span class="keyword">new</span> Date();
       PageContext pc = (PageContext) getJSPContext();
       pc.getOut().write(time.toLocaleString());
   }
}
</pre></td></tr></table></figure>
</li>
<li><p><strong>itcast.tld</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">taglib</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">tlib-version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">short-name</span>&gt;</span>myfn<span class="tag">&lt;/<span class="title">short-name</span>&gt;</span>
    <span class="comment">&lt;!-- 定位符 --&gt;</span>
    <span class="tag">&lt;<span class="title">uri</span>&gt;</span>http://www.itcast.cn/jsp/myfunction <span class="tag">&lt;/<span class="title">uri</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tag</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>showTime<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tag-class</span>&gt;</span>cn.itcast.ShowTimeSimpleTag <span class="tag">&lt;/<span class="title">tag-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> empty <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
<span class="tag">&lt;/<span class="title">taglib</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>通过Taglib指令导入外部标签库, 以及使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://"</span> prefix=<span class="string">"itcast"</span> %&gt;</span>
<span class="tag">&lt;<span class="title">itcast:showTime</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">实现简单功能</h2>
<ol>
<li><p>控制页面中某部分内容不显示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:hidden</span>&gt;</span>隐藏的内容<span class="tag">&lt;/<span class="title">itcast:hidden</span>&gt;</span>
public doTag(){
   // 不让标签主体内容显示, 就设么都不写
   // 要让主体内容显示, 就这么写
   JspFragment jf = getJSPBody();
   jf.invoke(out);  //  与 jf.invoke(null) 相同
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>控制结束标签后的JSP内容不执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:hidden</span>/&gt;</span>隐藏的内容
public doTag(){
    throw new SkipPageException(); // 忽略结束标签后的内容
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>控制主题内容重复执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:repeat</span> <span class="attribute">count</span>=<span class="value">"10"</span>&gt;</span>重复的内容<span class="tag">&lt;/<span class="title">itcast:repeat</span>&gt;</span>
public void setCount(int count); // 注入, 自动转换,仅限基本类型
public doTag(){
    for(1 to count){
        getJSPBody().invoke(null);
    }
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">attribute</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>count<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">required</span>&gt;</span>true<span class="tag">&lt;/<span class="title">required</span>&gt;</span>
        <span class="comment">&lt;!-- 是否支持表达式 count="${3+3}"--&gt;</span>
        <span class="tag">&lt;<span class="title">rtexprvalue</span>&gt;</span> true <span class="tag">&lt;/<span class="title">rtexprvalue</span>&gt;</span>
        <span class="comment">&lt;!-- rt:RunTime expr:Expression value --&gt;</span>
    <span class="tag">&lt;/<span class="title">attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>获取标签主题内容, 改变后再输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:upcase</span>&gt;</span>lower<span class="tag">&lt;<span class="title">itcast:upcase</span>&gt;</span>
public doTag(){
    JspFragment jf = getJSPBody();
    // 带有缓冲的数据字符输出流
    StringWriter sw = new StringWriter();
    jf.invoke(sw);
    String content = sw.getBuffer().toString();
    PageContext pc = (PageContext) getJSPContext();
    pc.getOut().write(content);
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> scriptless <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">执行原理</h2>
<p>SimpleTag 接口中的执行原理:</p>
<ul>
<li><code>void doTag()</code>: 有服务器调用. 在JSP</li>
<li><code>JspTag getParent()</code>: 由程序员调用, 获取该标签的父标签对象, 没有返回null</li>
<li><code>void setJspBody(JspFragment jspBody)</code>: 服务器, 传入标签的内容</li>
<li><code>void setJspContext(JspContext pc)</code>: 服务器, 传入当前页面的的 pageContext</li>
<li><code>void setParent(JspFragment jf)</code>: 由服务器调用, 设置该标签的父标签对象, 没有返回null</li>
</ul>
<h2 id="tld-">tld 文件中的一些配置</h2>
<p>body-content的取值内容</p>
<ul>
<li>JSP: 不考虑, (给传统标签处理用到)</li>
<li>empty: 传统和简单标签都可以使用</li>
<li>scriptless: 给简单标签用的, 开始标签和结束标签内不能写 <code>&lt;%%&gt;</code>,
但是可以有<code>${1+2}</code></li>
<li>tagdependent: 给简单标签用的, 告诉标签类, 主体只是普通文本</li>
</ul>
<h2 id="-">开发属于自己的标签库</h2>
<h3 id="-if-">实现if功能的标签</h3>
<p>如果test为true 就输出主题内容, 如果是false就不输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:if</span> <span class="attribute">test</span>=<span class="value">"true"</span>&gt;</span>你好<span class="tag">&lt;<span class="title">itcast:if</span>&gt;</span>
public setTest(boolean test){}
public doTag(){
    JspFragment jf = getJSPBody();
    if(test) jf.invoke(null);

}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> scriptless <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">attribute</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">required</span>&gt;</span>true<span class="tag">&lt;/<span class="title">required</span>&gt;</span>
        <span class="tag">&lt;<span class="title">rtexprvalue</span>&gt;</span> true <span class="tag">&lt;/<span class="title">rtexprvalue</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-if-else-">实现if else功能的标签库</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>&lt;itcast:choose&gt;
    &lt;itcast:when test=<span class="string">"true"</span>&gt; <span class="keyword">this</span> is <span class="keyword">if</span> &lt;/itcast:when&gt;
    &lt;itcast:otherwise&gt; <span class="keyword">this</span> is <span class="keyword">else</span> &lt;/itcast:otherwise&gt;
&lt;/itcast:choose&gt;

<span class="comment">// chooseTag</span>
<span class="annotation">@BeanProperty</span> <span class="keyword">var</span> flag:Boolean;

<span class="comment">// whenTag</span>
<span class="annotation">@BeanPropertyvar</span> test:Boolean;
<span class="keyword">def</span> doTag(){
    <span class="keyword">if</span>(test){
        getJSPBody().invoke(<span class="keyword">null</span>);
        (ChooseTag)getParent().setFlag(<span class="keyword">true</span>);
    }
}
<span class="comment">// otherwise</span>
<span class="keyword">def</span> doTag(){
    <span class="keyword">if</span>((ChooseTag)getParent().isFlag()){
        getJSPBody().invoke(<span class="keyword">null</span>);
    }
}
</pre></td></tr></table></figure>

<h3 id="-for-">实现 for 功能的标签</h3>
<p>简单版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>&lt;itcast:forEach items=<span class="string">"${list}"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;
    ${s}&lt;br/&gt;
&lt;/itcast:forEach&gt;

<span class="annotation">@BeanProperty</span> List items;
<span class="annotation">@BeanProperty</span> String <span class="keyword">var</span>;
<span class="keyword">def</span> doTag(){
    <span class="keyword">val</span> pc = (PageContext)getJSPContext();
    <span class="keyword">if</span>(items!=<span class="keyword">null</span>){
        <span class="keyword">for</span>(Object obj:items){
            pc.setAttribute(<span class="keyword">var</span>, obj);
            getJSPBody.invoke(<span class="keyword">null</span>);
        }
    }
}
</pre></td></tr></table></figure>

<p>复杂版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>&lt;!--<span class="keyword">or</span> items=&lt;%= <span class="keyword">list</span> %&gt; --&gt;
&lt;itcast:<span class="keyword">forEach</span> items=<span class="string">"${list}"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt; 
    ${s}&lt;br/&gt;
&lt;/itcast:<span class="keyword">forEach</span>&gt;

@BeanProperty Object items;
@BeanProperty String <span class="keyword">var</span>;
val collection:Collection = <span class="keyword">new</span> ArrayList();
def setItems(Object items) {
    <span class="keyword">if</span>(items <span class="keyword">instanceof</span> <span class="keyword">List</span>){
        collection = (<span class="keyword">List</span>)items;
    } <span class="keyword">else</span> <span class="keyword">if</span>(items <span class="keyword">instanceof</span> Map){
        collectoin = ((Map)items).entrySet();
    } <span class="keyword">else</span> <span class="keyword">if</span>(items.getClass().isArray()) {
        int len = <span class="keyword">Array</span>.getLength(items);
        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++){
            collection.add(java.reflect.<span class="keyword">Array</span>.get(items, i));
        }
    } <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不支持的类型"</span>);
    }
}
def doTag(){
    val pc = (PageContext)getJSPContext();
    <span class="keyword">for</span>(Object obj:collection){
        pc.setAttribute(<span class="keyword">var</span>, obj);
        getJSPBody.invoke(<span class="keyword">null</span>);
    }

}
</pre></td></tr></table></figure>

<h4 id="-">数组的反射</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="built_in">int</span> ii[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};
<span class="built_in">String</span> strs[] = {<span class="string">"a"</span>, <span class="string">"b"</span>};
<span class="keyword">Class</span> clazz1 = ii.getClass();
<span class="keyword">Class</span> clazz2 = strs.getClass();
clazz1.<span class="built_in">isArray</span>();

<span class="built_in">int</span> <span class="built_in">len</span> = <span class="built_in">Array</span>.getLength(items);
<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">len</span>;i++){
    collection.add(java.reflect.<span class="built_in">Array</span>.<span class="keyword">get</span>(items, i));
}
</pre></td></tr></table></figure>

<h3 id="-html-">实现html转义标签</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>&lt;% pageContext<span class="preprocessor">.setAttribute</span>(<span class="string">"s"</span>, <span class="string">"&lt;hr/&gt;"</span>) %&gt;
&lt;itcast:htmlFilter&gt;
    ${s}
&lt;/itcast:htmlFilter&gt;
def doTag(){
    StringWriter sw = new StringWriter()<span class="comment">;</span>
    getJSPBody()<span class="preprocessor">.invoke</span>(sw)<span class="comment">;</span>
    String content = sw<span class="preprocessor">.getBuffer</span>()<span class="preprocessor">.toString</span>()<span class="comment">;</span>
    content = filter(content)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h1 id="jstl-">JSTL中的核心标签</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span>
<span class="comment">&lt;!-- 输出, 可转义 --&gt;</span>
<span class="tag">&lt;<span class="title">c:out</span> <span class="attribute">value</span>=<span class="value">"${p}"</span> <span class="attribute">default</span>=<span class="value">"没有值"</span> <span class="attribute">escapeXml</span>=<span class="value">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:out</span>&gt;</span>

<span class="comment">&lt;!-- 设置值 --&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">value</span>=<span class="value">"上海"</span> <span class="attribute">var</span>=<span class="value">"s"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span><span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="comment">&lt;!-- 设置JavaBean的属性 --&gt;</span>
<span class="tag">&lt;<span class="title">jsp:useBean</span> <span class="attribute">id</span>=<span class="value">"person"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.domain.Person"</span>&gt;</span><span class="tag">&lt;/<span class="title">jsp:useBean</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">target</span>=<span class="value">"${person}"</span> <span class="attribute">value</span>=<span class="value">"xxx"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="comment">&lt;!-- 设置Map的key和value的值 --&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">property</span>=<span class="value">"b"</span> <span class="attribute">value</span>=<span class="value">"bbb"</span> <span class="attribute">target</span>=<span class="value">"${map}"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>

<span class="comment">&lt;!-- 从指定域范围中删除数据, 不指定scope会全删除 --&gt;</span>
<span class="tag">&lt;<span class="title">c:remove</span> <span class="attribute">var</span>=<span class="value">"s1"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:remove</span>&gt;</span>

<span class="comment">&lt;!-- 相当于java的catch --&gt;</span>
<span class="tag">&lt;<span class="title">c:catch</span> <span class="attribute">var</span>=<span class="value">"e"</span>&gt;</span> <span class="vbscript">&lt;%=<span class="number">1</span>/<span class="number">0</span>%&gt;</span> <span class="tag">&lt;/<span class="title">c:catch</span>&gt;</span> ${e.message}

<span class="comment">&lt;!-- foreach --&gt;</span>
<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">begin</span>=<span class="value">"1"</span> <span class="attribute">end</span>=<span class="value">"10"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s} <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="comment">&lt;!-- strs = abcdefg --&gt;</span>
<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">${strs}</span> <span class="attribute">begin</span>=<span class="value">"1"</span> <span class="attribute">end</span>=<span class="value">"10"</span> <span class="attribute">step</span>=<span class="value">"2"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s} <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span> <span class="attribute">width</span>=<span class="value">"438"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 城市 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>成绩 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="comment">&lt;!-- vs指向一个对象, 该对象记录着当前遍历 的元素的一些信息 --&gt;</span>
    <span class="comment">&lt;!-- int getIndex(): 当前遍历的元素的索引号,从零开始 --&gt;</span>
    <span class="comment">&lt;!-- int getCount(); 当前遍历元素的位数, 从一开始 --&gt;</span>
    <span class="comment">&lt;!-- boolean isLast(); --&gt;</span>
    <span class="comment">&lt;!-- boolean isFirst(); --&gt;</span>
    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"${ps}"</span> <span class="attribute">var</span>=<span class="value">"p"</span> <span class="attribute">varStatus</span>=<span class="value">"vs"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.name}  <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.gender} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.city} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.grade} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

<span class="comment">&lt;!-- 遍历字符串 20140417--&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"s3"</span> <span class="attribute">value</span>=<span class="value">"2014-04-17"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:forToken</span> <span class="attribute">items</span>=<span class="value">"${s3}"</span> <span class="attribute">delims</span>=<span class="value">"=-"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s}<span class="tag">&lt;/<span class="title">c:forToken</span>&gt;</span>

<span class="comment">&lt;!-- 可以包含任何页面,包括任何界面 --&gt;</span>
<span class="tag">&lt;<span class="title">c:import</span> <span class="attribute">url</span>=<span class="value">"/3.jsp"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:import</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:import</span> <span class="attribute">url</span>=<span class="value">"http://www.baidu.com"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:import</span>&gt;</span>

<span class="comment">&lt;!-- 转发 --&gt;</span>
<span class="tag">&lt;<span class="title">c:redirect</span> <span class="attribute">url</span>=<span class="value">"**.jsp"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">c:redirect</span>&gt;</span>

<span class="comment">&lt;!-- 对中文参数进行url编码, 能对其进行URL重写 --&gt;</span>
<span class="comment">&lt;!-- pageContext.setAttribute("url", request.getContextPath()+"/3.jsp?") --&gt;</span>
<span class="tag">&lt;<span class="title">c:url</span> <span class="attribute">value</span>=<span class="value">"3.jsp"</span> <span class="attribute">var</span>=<span class="value">"url"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">c:param</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"我擦"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:param</span>&gt;</span> 
<span class="tag">&lt;/<span class="title">c:url</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="自定义标签" scheme="http://zhpooer.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala和Dom4j的xml操作]]></title>
    <link href="http://zhpooer.github.io/2014/04/17/scala%E5%92%8Cdom4j%E7%9A%84xml%E6%93%8D%E4%BD%9C/"/>
    <id>http://zhpooer.github.io/2014/04/17/scala和dom4j的xml操作/</id>
    <published>2014-04-16T23:29:49.000Z</published>
    <updated>2014-04-17T13:53:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dom4j-xpath-">dom4j的xpath接口</h1>
<p><a href="/2014/04/06/传智播客day06-xml解析">dom4j具体操作, 猛击</a></p>
<ul>
<li><p><code>document.selectNodes(&quot;&quot;)</code> 查找多个匹配的节点</p>
</li>
<li><p><code>document.selectSingleNode(&quot;&quot;)</code> 查找只有一个匹配的节点, 如果没有返回null</p>
</li>
<li><p><code>node.valueOf(&quot;@name&quot;);</code> 获取节点中name属性的值</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>xpath</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>//BBB</code></td>
<td>选择所有的BBB</td>
</tr>
<tr>
<td><code>//DDD/BBB</code></td>
<td>选择所有DDD下面的BBB</td>
</tr>
<tr>
<td><code>/AAA/CCC/DDD/*</code></td>
<td>选择/AAA/CCC/DDD 下面所有的标签</td>
</tr>
<tr>
<td><code>/*/*/*/DDD</code></td>
<td>选择第四个层次的DDD</td>
</tr>
<tr>
<td><code>//* 所有的标签</code></td>
</tr>
<tr>
<td><code>/AAA/BBB[1]</code></td>
<td>选择第1个节点</td>
</tr>
<tr>
<td><code>/AAA/BBB[last()]</code></td>
</tr>
<tr>
<td><code>//@id</code></td>
<td>选择所有的id属性</td>
</tr>
<tr>
<td><code>//BBB[@name]</code></td>
<td>选择所有有name属性的BBB节点</td>
</tr>
<tr>
<td><code>//BBB[@*]</code></td>
<td>选择所有有属性的BBB节点</td>
</tr>
<tr>
<td><code>//BBB[not(@*)]</code></td>
<td>选择所有没有属性的BBB节点</td>
</tr>
<tr>
<td><code>//[@id=&#39;b1&#39;]</code></td>
<td>选择所有属性id=bi的属性</td>
</tr>
<tr>
<td><code>//*[count(BBB)=2]</code></td>
<td>选择有两个BBB子节点的节点</td>
</tr>
<tr>
<td><code>//*[count(*)=2]</code></td>
<td>选择由两个子节点的节点</td>
</tr>
<tr>
<td><code>//*[contains(name(), &quot;AAA&quot;)]</code></td>
<td></td>
</tr>
<tr>
<td><code>//*[string-length(name(),3)]</code></td>
<td></td>
</tr>
<tr>
<td><code>/AAA/EEE  //DDD/CCC</code></td>
<td>集合起来</td>
</tr>
</tbody>
</table>
<h2 id="-xml">读入xml</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>SAXReader reader = <span class="keyword">new</span> RAXReader();
Document <span class="built_in">document</span> = reader.read(<span class="string">"*.xml"</span>);
</pre></td></tr></table></figure>

<h2 id="dom4j-">dom4j 输出</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>org<span class="preprocessor">.dom</span>4j<span class="preprocessor">.io</span><span class="preprocessor">.OutputFormat</span> format = OutputFormat<span class="preprocessor">.createCompactFormat</span>()<span class="comment">;</span>
format<span class="preprocessor">.setEncoding</span>(<span class="string">"UTF-8"</span>)<span class="comment">;</span>
XMLWriter writer = new XMLWriter(new FileOutputStream(), format)<span class="comment">;</span>
writer<span class="preprocessor">.write</span>(document)<span class="comment">;</span>
writer<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="xpath-">xpath实际案例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">books</span>&gt;</span>
    <span class="tag">&lt;<span class="title">book</span>&gt;</span>
        <span class="tag">&lt;<span class="title">author</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">author</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
<span class="tag">&lt;/<span class="title">books</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Node node = document<span class="preprocessor">.selectSingleNode</span>(<span class="string">"//book[2]/author"</span>)<span class="comment">; // 会选中其中一个</span>
node<span class="preprocessor">.getText</span>()<span class="comment">;</span>

Node node = document<span class="preprocessor">.selectSingleNode</span>(<span class="string">"//book[2]"</span>)<span class="comment">;</span>
node<span class="preprocessor">.valueOf</span>(<span class="string">"@id"</span>)<span class="comment">;  // 获取属性ID</span>
</pre></td></tr></table></figure>

<h1 id="scala-xml-">scala xml 操作</h1>
<h2 id="-xml">加载和导出xml</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>val bookstore =
      <span class="tag">&lt;<span class="title">bookstore</span>&gt;</span>
        <span class="tag">&lt;<span class="title">book</span>&gt;</span>
          <span class="tag">&lt;<span class="title">title</span> <span class="attribute">lang</span>=<span class="value">"eng"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
          <span class="tag">&lt;<span class="title">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="title">price</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
        <span class="tag">&lt;<span class="title">book</span>&gt;</span>
          <span class="tag">&lt;<span class="title">title</span> <span class="attribute">lang</span>=<span class="value">"eng"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
          <span class="tag">&lt;<span class="title">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="title">price</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">bookstore</span>&gt;</span>
XML.save("bookstore1.xml", bookstore, "utf-8", true, null) // 第三个参数明是否要写xml头
// 加载
XML.loadFile("bookstore.xml")
</pre></td></tr></table></figure>

<h2 id="-">查询</h2>
<p>由于<code>scala.xml.Node</code> 继承于 Seq[Node], 所以可以用 scala 的 <code>Seq</code> 中的方法来操作xml,</p>
<p><a href="http://www.codecommit.com/blog/scala/working-with-scalas-xml-support" target="_blank">详细继承图,及案例</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">val</span> bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
<span class="keyword">val</span> price =
  bookstore <span class="keyword">match</span> {
    <span class="keyword">case</span> &lt;bookstore&gt;{ books @ _* }&lt;/bookstore&gt; =&gt;
      books.collectFirst {
        <span class="keyword">case</span> book @ &lt;book&gt;{ _* }&lt;/book&gt; <span class="keyword">if</span> (book \ <span class="string">"title"</span>).text == <span class="string">"Learning XML"</span> =&gt;
          (book \ <span class="string">"price"</span>).text
        }
    }
</pre></td></tr></table></figure>

<h2 id="crud">CRUD</h2>
<p>注: 还有另一种更新方法, 感觉不是很直观, 有兴趣的可以<a href="http://stackoverflow.com/questions/970675/scala-modifying-nested-elements-in-xml" target="_blank">猛击我</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>  <span class="keyword">it</span> should <span class="string">"append xml"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val book =
      &lt;book&gt;
        &lt;title lang=<span class="string">"zh"</span>&gt;Learn Scala&lt;/title&gt;
        &lt;price&gt;<span class="number">40.11</span>&lt;/price&gt;
      &lt;/book&gt;
    bookstore \ <span class="string">"book"</span> ++ book
  }

  <span class="keyword">it</span> should <span class="string">"remove child"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val afterDel = bookstore.child.<span class="built_in">filter</span>(node =&gt; (node \ <span class="string">"price"</span>).<span class="keyword">text</span> == <span class="string">"29.99"</span>)
  }

  <span class="keyword">it</span> should <span class="string">"update xml"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val updated =
      (bookstore \ <span class="string">"book"</span>) map {
        _ match {
          <span class="keyword">case</span> book @ &lt;book&gt; { _* }&lt;/book&gt; <span class="keyword">if</span> (book \ <span class="string">"title"</span>).<span class="keyword">text</span> == <span class="string">"Learning XML"</span> =&gt;
            &lt;book&gt;&lt;title&gt;{ (book \ <span class="string">"title"</span>).<span class="keyword">text</span> }&lt;/title&gt;&lt;price&gt;<span class="number">3</span>&lt;/price&gt;&lt;/book&gt;
          <span class="keyword">case</span> x =&gt; x
        }
      }
  }
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="xpath" scheme="http://zhpooer.github.io/tags/xpath/"/>
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
      <category term="dom4j" scheme="http://zhpooer.github.io/tags/dom4j/"/>
    
  </entry>
  
</feed>
