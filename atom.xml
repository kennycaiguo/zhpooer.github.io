<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[Hello World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-04-15T14:01:12.574Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[传智播客day12-jsp]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day12-jsp/"/>
    <id>http://zhpooer.github.io/2014/04/15/传智播客day12-jsp/</id>
    <published>2014-04-15T06:40:33.000Z</published>
    <updated>2014-04-15T08:58:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jsp">JSP</h1>
<p>全称Java Server Pages, 是一种用于开发动态web资源的技术</p>
<p>JSP=html中写java代码</p>
<p>Servlet: 只能写java代码, 写html不是很方便</p>
<h1 id="jsp-">JSP 的执行原理</h1>
<p>jsp 翻译成 .Java 再 编译成 .class, 然后Tomcat加载</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// JSP中可以取到的变量</span>
PageContext pageContext = <span class="keyword">null</span>;
HttpSession session = <span class="keyword">null</span>;
ServletContext application = <span class="keyword">null</span>;
ServletConfig config = <span class="keyword">null</span>;
JspWriter <span class="keyword">out</span> = <span class="keyword">null</span>;
Object page = <span class="keyword">this</span>;
JspWriter _jspx_out = <span class="keyword">null</span>;
PageContext _jspx_page_context = <span class="keyword">null</span>;
</pre></td></tr></table></figure>

<h1 id="jsp-">JSP语法</h1>
<h2 id="-">模板元素</h2>
<p>JSP中的HTML元素, 定义了JSP的外观和框架</p>
<h2 id="-">脚本表达式</h2>
<p>输出变量的值到页面上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&lt;%=new Date()<span class="preprocessor">.toLocaleString</span>()%&gt;
//translate to <span class="keyword">out</span><span class="preprocessor">.println</span>( new Date()<span class="preprocessor">.toLocaleString</span>() )<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">脚本片段</h2>
<p>书写Java逻辑, 原封不动的java代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;<span class="comment">%</span>
   语句一;
   语句二;
<span class="comment">%&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="vbscript">&lt;%
    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++){
    %&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="vbscript">&lt;%=i%&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="vbscript">&lt;%=<span class="string">"aaa"</span> + i%&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="vbscript">&lt;%
    }
    %&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">声明</h2>
<p>定义类成员(静态变量, 静态方法, 实例变量, 实例方法)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>&lt;%!
   <span class="comment">// 实例变量</span>
   int i = <span class="number">100</span>;
   <span class="keyword">public</span> void <span class="function"><span class="keyword">method</span><span class="params">()</span><span class="comment">{
       println("hello world");
   }</span>
%&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">注释</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;<span class="string">%--</span>
   out.write(<span class="string">"helloworld"</span>)
--%&gt;
</pre></td></tr></table></figure>

<p><code>&lt;%-- --%&gt;</code>: 被注释的代码, 根本不会被翻译到Servlet中</p>
<p><code>&lt;!--  --&gt;</code>: 浏览器注释, 代码还是会被执行</p>
<h2 id="-">指令</h2>
<ul>
<li>作用 给服务器用, 指示服务器应该如何对待JSP页面</li>
<li>基本语法: <code>&lt;%@指令名称 指令属性=值 指令属性1=值1%&gt;</code></li>
</ul>
<h3 id="page">page</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;%<span class="annotation">@page</span>
  language=<span class="string">"java"</span>
  <span class="keyword">import</span>=<span class="string">"java.util.Data, java.util.Random"</span>
%&gt;
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>默认值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>language</td>
<td>java</td>
<td>设置编写也语言</td>
</tr>
<tr>
<td>import</td>
<td></td>
<td>导入包, 用逗号分隔</td>
</tr>
<tr>
<td>session</td>
<td>true</td>
<td>是否生成 HttpSession 对象</td>
</tr>
<tr>
<td>buffer</td>
<td>8kb</td>
<td>字符输出流的缓存, none</td>
</tr>
<tr>
<td>autoFlush</td>
<td>true</td>
<td>自动刷新缓存</td>
</tr>
<tr>
<td>isThreadPage</td>
<td>false</td>
<td>是否线程安全</td>
</tr>
<tr>
<td>errorPage</td>
<td></td>
<td>页面出错时, 转到的页面, 如果以<code>/</code>开头,为绝对路径</td>
</tr>
<tr>
<td>isErrorPage</td>
<td>false</td>
<td>是否产生Exception对象, 错误后可以调用 exceptioin.getStackTrace()</td>
</tr>
<tr>
<td>contentType</td>
<td></td>
<td>改字符流编码,通知客户端显示字符集</td>
</tr>
<tr>
<td>pageEncoding</td>
<td>iso8859-1</td>
<td>指示服务器读取JSP时所用的编码, 同时有 contentType 的功能</td>
</tr>
<tr>
<td>isELIgnored</td>
<td>false</td>
<td>是否忽略EL表达式</td>
</tr>
</tbody>
</table>
<h3 id="taglib">taglib</h3>
<p>引入外部的标签用的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">""</span> prefix=<span class="string">"c"</span>%&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="include">include</h3>
<p>页面包含</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 首选, 效率高, 静态包含, 两个 jsp 翻译成一个 jsp --&gt;</span>
<span class="vbscript">&lt;%@ include
    file=<span class="string">"/**.jsp"</span>
%&gt;</span>
<span class="comment">&lt;!-- 动态包含, 两个 jsp, 合并显示--&gt;</span>
<span class="tag">&lt;<span class="title">jsp:include</span> <span class="attribute">page</span>=<span class="value">"/**.jsp"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h2 id="jsp-">JSP 常用内置标签(动作元素)</h2>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>jsp:include</td>
<td>动态包含</td>
<td>page:指向被包含页面</td>
</tr>
<tr>
<td>jsp:forward</td>
<td>转发</td>
<td>page: 指向转发路径</td>
</tr>
<tr>
<td>jsp:param</td>
<td>传递请求参数</td>
<td>name:键 value:值</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 源页面</span>
&lt;jsp:forward page=<span class="string">""</span>&gt;
    &lt;jsp:param <span class="keyword">value</span>=<span class="string">'key'</span> name=<span class="string">'username'</span>/&gt;
&lt;/jsp:forward&gt;

<span class="comment">// 目的页面</span>
request.getParameter(<span class="string">"username"</span>)
</pre></td></tr></table></figure>

<h1 id="error-">Error 的全局配置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">&lt;!-- error 全局配置 --&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="comment">&lt;!-- 异常类型匹配--&gt;</span>
    <span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>java.lang.Exception <span class="tag">&lt;/<span class="title">exception-type</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span> /error.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="comment">&lt;!-- 响应码匹配 --&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span> /error.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="jsp" scheme="http://zhpooer.github.io/tags/jsp/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day12-session]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day12-session/"/>
    <id>http://zhpooer.github.io/2014/04/15/传智播客day12-session/</id>
    <published>2014-04-15T01:03:15.000Z</published>
    <updated>2014-04-15T06:40:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="session">Session</h1>
<p>默认情况下, 一个浏览器独占一个session对象</p>
<ul>
<li>HttpSession也是一个域对象</li>
<li>session对象由服务器创建</li>
<li>每一个session都有一个唯一的ID, 存到Cookie</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>void setAttribute(<span class="built_in">String</span> <span class="keyword">key</span>, <span class="built_in">Object</span> value);
<span class="built_in">Object</span> getAttribute(<span class="built_in">String</span> <span class="keyword">key</span>);
void removeAttribute(<span class="built_in">String</span> <span class="keyword">key</span>);
<span class="built_in">String</span> getId();
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 放数据</span>
HttpSession session = req.getSession();
session.setAttribute(<span class="string">"p"</span>, <span class="string">"ppp"</span>);
<span class="comment">// 取数据</span>
(<span class="built_in">String</span>) session.getAttribute(<span class="string">"p"</span>);

session.getAttribute(<span class="literal">true</span>); <span class="comment">// 如果没有session, 就创建</span>
session.getAttribute(<span class="literal">false</span>); <span class="comment">// 没有sessioin, 不创建, 返回null</span>
</pre></td></tr></table></figure>

<h1 id="session-">session访问延时</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Cookie c = new Cookie(<span class="string">"JSESSIONID"</span>, session<span class="preprocessor">.getId</span>())<span class="comment">;</span>
c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">;</span>
c<span class="preprocessor">.setMaxAge</span>()<span class="comment">;</span>
res<span class="preprocessor">.addCookie</span>(c)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="-">案例</h1>
<h2 id="-">简单的购物车</h2>
<p><em>ShowAllBooksServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>// 显示所有商品, 提供购买链接
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;h1&gt;本站有以下好书&lt;/h1&gt;"</span>)<span class="comment">;</span>
Map&lt;String, Book&gt; books = BookDB<span class="preprocessor">.findAllBooks</span>()<span class="comment">;</span>
for(Map<span class="preprocessor">.Entry</span>&lt;String, Book&gt; me:bookes<span class="preprocessor">.entrySet</span>()) {
   <span class="keyword">out</span><span class="preprocessor">.write</span>(me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getName</span>() + <span class="string">"&lt;a href='/BuyServlet?bookId="</span> + me<span class="preprocessor">.getKey</span>() + <span class="string">"'&gt;购买&lt;/a&gt;&lt;br/&gt;"</span> )<span class="comment">;</span>
}
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowCartServlet'&gt;查看购物车&lt;/a&gt;"</span>)
</pre></td></tr></table></figure>

<p><em>BuyServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>
String bookId  = req<span class="preprocessor">.getParameter</span>(<span class="string">"bookId"</span>)<span class="comment">;</span>
Book book = BookDb<span class="preprocessor">.findBookById</span>(bookId)<span class="comment">;</span>
HttpSession sessioin = request<span class="preprocessor">.getSession</span>()<span class="comment">;</span>
// 生成购物车
List&lt;Book&gt; cart = (List&lt;Book&gt;) session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
if(cart = null) {
    cart = new ArrayList&lt;Book&gt;()<span class="comment">;</span>
    session<span class="preprocessor">.setAttribute</span>(<span class="string">"cart"</span>, cart)<span class="comment">;</span>
}
//
cart<span class="preprocessor">.add</span>(book)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(book<span class="preprocessor">.getName</span> + <span class="string">"商品已经放入购物车"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowAllBooksServlet'&gt;继续购物&lt;/a&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>ShowCartServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
HttpSession session = req<span class="preprocessor">.getSession</span>(false)<span class="comment">; // 只是查询</span>
if(session == null){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"赶紧购物"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}

List&lt;Book&gt; books = (List&lt;Book&gt;)session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
if(books=null || books<span class="preprocessor">.size</span>()==<span class="number">0</span>){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您还没有购物"</span>)<span class="comment">;</span>
} else {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您购买了如下购物出&lt;br/&gt;"</span>)<span class="comment">;</span>
    for(Book book:books){
        <span class="keyword">out</span><span class="preprocessor">.write</span>(book<span class="preprocessor">.getName</span> + <span class="string">"&lt;br/&gt;"</span>)<span class="comment">;</span>
    }
}

<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowAllBooksServlet'&gt;继续购物&lt;/a&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ClearCartServlet'&gt;清空&lt;/a&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>ClearCartServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

List&lt;Book&gt; books = (List&lt;Book&gt;)session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
// 方式一: 干掉session对象
session<span class="preprocessor">.invalidate</span>()<span class="comment">; // 让服务器端的HttpSession立即消失, 不推荐</span>

// 方式二；值干掉购物车
session<span class="preprocessor">.removeAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>,<span class="string">"2;URL=/ShowAllBooksServlet"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"清空成功, 2秒后转到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">用户登陆</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="keyword">public</span> class User{
    <span class="keyword">private</span> <span class="built_in">String</span> username;
    <span class="keyword">private</span> <span class="built_in">String</span> password;
    <span class="keyword">private</span> <span class="built_in">String</span> nickname;
}
<span class="keyword">public</span> class UserDB{
    <span class="keyword">private</span> static <span class="built_in">List</span><span class="subst">&lt;</span>User<span class="subst">&gt;</span> users <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span>User<span class="subst">&gt;</span>;
    static {
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u1"</span>, <span class="string">"123"</span>, <span class="string">"u11"</span>));
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u2"</span>, <span class="string">"123"</span>, <span class="string">"u22"</span>));
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u3"</span>, <span class="string">"123"</span>, <span class="string">"u33"</span>));
    }
    <span class="keyword">public</span> User find(<span class="built_in">String</span> username, <span class="built_in">String</span> password){
         for(User u:users){
              <span class="keyword">if</span>(u<span class="built_in">.</span>getName()<span class="built_in">.</span><span class="keyword">equals</span>(username)
                  <span class="subst">&&</span> u<span class="built_in">.</span>getPassword()<span class="built_in">.</span><span class="keyword">equals</span>(password))
              <span class="keyword">return</span> u;
         }
         <span class="keyword">return</span> <span class="built_in">null</span>;
    }
}
<span class="subst">&lt;</span>body<span class="subst">&gt;</span>
    <span class="subst">&lt;</span>form action<span class="subst">=</span><span class="string">"LoginServlet"</span> metho<span class="subst">=</span><span class="string">"post"</span><span class="subst">&gt;</span>
        用户名: <span class="subst">&lt;</span>input name<span class="subst">=</span><span class="string">"username"</span><span class="subst">/</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>br<span class="subst">/</span><span class="subst">&gt;</span>
        密码: <span class="subst">&lt;</span>input name<span class="subst">=</span><span class="string">"password"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">'password'</span><span class="string">'/&gt; &lt;br/&gt;
        &lt;input type=submit'</span><span class="subst">/</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>br<span class="subst">/</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/form<span class="subst">&gt;</span>
<span class="subst">&lt;</span>/body<span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<p><em>IndexServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

HttpSession  session = req<span class="preprocessor">.getSession</span>()<span class="comment">;</span>
User user = (User) session<span class="preprocessor">.getAttribute</span>(<span class="string">"user"</span>)<span class="comment">;</span>
if(user==null) {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt; href='Login.html'&gt;登陆&lt;/a&gt;"</span>)
} else {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"欢迎你"</span> + user<span class="preprocessor">.getNickName</span>())<span class="comment">;</span>
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='LogoutServlet'&gt;登出&lt;/a&gt;"</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<p><em>LoginServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

User user = new User()<span class="comment">;</span>
BeanUtils<span class="preprocessor">.populate</span>(user, req<span class="preprocessor">.getParameterMap</span>())<span class="comment">;</span>

User dbUser = UserDB<span class="preprocessor">.find</span>(user<span class="preprocessor">.getUsername</span>(), user<span class="preprocessor">.getPassword</span>())<span class="comment">;</span>
if(dbUser==null){
    res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL=Login.html"</span>)<span class="comment">;</span>
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"两秒后转到登陆页面"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}
req<span class="preprocessor">.getSession</span>()<span class="preprocessor">.setAttribute</span>(<span class="string">"user"</span>, dbUser)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL=/"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"登陆成功, 两秒后到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>LogoutServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

session<span class="preprocessor">.removeAttribute</span>(<span class="string">"user"</span>)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>,<span class="string">"2;URL=/"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"清空成功, 2秒后转到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">防止表单的重复提交</h2>
<p>解决方案一: 客户端解决, 利用javascript</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btn"</span> <span class="attribute">byte</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"toSubmit()"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">toSubmit</span><span class="params">()</span>{</span>
        document.forms[<span class="number">0</span>].submit();
        document.getElementById(<span class="string">"btn"</span>).disabled = <span class="literal">true</span>;
    }

</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>解决方案二: 令牌机制</p>
<p>服务器一生成一个唯一的ID, 向HttpSession中放一个,向表单隐藏域中放一个.</p>
<p>服务器二从中拿到ID,比对, 如果一样删掉HttpSession中的一个,
如果不一样认为是重复提交.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>// 方式一
String token = System<span class="preprocessor">.nanoTime</span>() + <span class="string">""</span><span class="comment">; // 纳秒</span>
// 方式二
String token = UUID<span class="preprocessor">.randomUUID</span>()<span class="preprocessor">.toString</span>()<span class="comment">;</span>
// 方式三,数据指纹
System<span class="preprocessor">.nanoTime</span>() + new Random()<span class="preprocessor">.nextLong</span>()
// sha | md5
java<span class="preprocessor">.security</span><span class="preprocessor">.MessageDigest</span> md = MessageDigest<span class="preprocessor">.getInstance</span>(<span class="string">"md5"</span>)<span class="comment">;</span>
byte b[] = md<span class="preprocessor">.digest</span>(s<span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
// b 不一定由对应的字符, 用Base64编码: <span class="number">3</span>字节----&gt;&gt; 四字节
sun<span class="preprocessor">.misc</span><span class="preprocessor">.BASE</span>64Encoder base = new BASE64Encoder()<span class="comment">;</span>
String token = base<span class="preprocessor">.encode</span>(b)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-cookie">客户端禁用Cookie</h2>
<p>解决方案一: 提示: 为了更好的浏览网站, 请不要禁用你的cookie</p>
<p>解决方案二: URL重写</p>
<blockquote>
<p><a href="http://localhost/Servlet;JSESSIONID=11" target="_blank">http://localhost/Servlet;JSESSIONID=11</a></p>
<p>HttpServletResponse.encodeUrl(String url); // 重写</p>
<p>但是要对所有URL重写</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>req.getSession(); <span class="comment">// 一定要先运行, 生成一个session</span>
<span class="comment">// 如果客户端没有禁用, 就不需要重写了.</span>
res.encodeURL(url); <span class="comment">// http://localhost/Servlet;JSESSIONID=11</span>
</pre></td></tr></table></figure>

<h1 id="session-">session 生命周期</h1>
<h2 id="session-">session的销毁</h2>
<ol>
<li>调用 session.invalidate(), 立刻销毁</li>
<li>超时, 默认是30分钟; 在 web.xml 下配置</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">session-config</span>&gt;</span>
    <span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span>
    <span class="comment">&lt;!-- 单位是分钟 --&gt;</span>
<span class="tag">&lt;/<span class="title">session-config</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="session-">session的持久化状态</h2>
<p>是由服务器管理, 称为钝化或搁置, 出现情况:</p>
<ul>
<li>HttpSession 长时间没有了</li>
<li>内存用的太多</li>
<li>服务器重启</li>
</ul>
<p>放在HttpSession中的数据所属的类, 必须实现 java.io.Serializable 接口</p>
]]></content>
    
    
      <category term="HttpSession" scheme="http://zhpooer.github.io/tags/HttpSession/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java正则学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/java%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/15/java正则学习/</id>
    <published>2014-04-15T00:11:20.000Z</published>
    <updated>2014-04-15T12:21:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">正则表达式</h1>
<p>用于操作字符串的数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>// 定义一个功能对QQ号进行校验
// 长度 5-15, 只能是数字, 0不能开头
boolean match = "938393".match("[<span class="link_label">1-9</span>][<span class="link_reference">0-9</span>]{4,14}");
</pre></td></tr></table></figure>

<h2 id="-">常见规则</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre>Character classes
[abc] 	a, b, <span class="keyword">or</span> c (simple <span class="type">class</span>)
[^abc] 	Any <span class="property">character</span> except a, b, <span class="keyword">or</span> c (negation)
[a-zA-Z] 	a <span class="keyword">through</span> z <span class="keyword">or</span> A <span class="keyword">through</span> Z, inclusive (range)
[a-d[m-p]] 	a <span class="keyword">through</span> d, <span class="keyword">or</span> m <span class="keyword">through</span> p: [a-dm-p] (union)
[a-z&&[def]] 	d, e, <span class="keyword">or</span> f (intersection)
[a-z&&[^bc]] 	a <span class="keyword">through</span> z, except <span class="keyword">for</span> b <span class="keyword">and</span> c: [ad-z] (subtraction)
[a-z&&[^m-p]] 	a <span class="keyword">through</span> z, <span class="keyword">and</span> <span class="keyword">not</span> m <span class="keyword">through</span> p: [a-lq-z](subtraction)
 
Predefined <span class="property">character</span> classes
. 	Any <span class="property">character</span> (may <span class="keyword">or</span> may <span class="keyword">not</span> match line terminators)
\d 	A digit: [<span class="number">0</span>-<span class="number">9</span>]
\D 	A non-digit: [^<span class="number">0</span>-<span class="number">9</span>]
\s 	A whitespace <span class="property">character</span>: [ \t\n\x0B\f\r]
\S 	A non-whitespace <span class="property">character</span>: [^\s]
\w 	A <span class="property">word</span> <span class="property">character</span>: [a-zA-Z_0-<span class="number">9</span>]
\W 	A non-<span class="property">word</span> <span class="property">character</span>: [^\w]

Boundary matchers
^ 	The <span class="keyword">beginning</span> <span class="keyword">of</span> a line
$ 	The <span class="keyword">end</span> <span class="keyword">of</span> a line
\b 	A <span class="property">word</span> boundary
\B 	A non-<span class="property">word</span> boundary

Greedy quantifiers 贪懒
X? 	X, once <span class="keyword">or</span> <span class="keyword">not</span> <span class="keyword">at</span> all
X* 	X, zero <span class="keyword">or</span> more <span class="keyword">times</span>
X+ 	X, one <span class="keyword">or</span> more <span class="keyword">times</span>
X{n} 	X, exactly n <span class="keyword">times</span>
X{n,} 	X, <span class="keyword">at</span> least n <span class="keyword">times</span>
X{n,m} 	X, <span class="keyword">at</span> least n <span class="keyword">but</span> <span class="keyword">not</span> more than m <span class="keyword">times</span>
 
Reluctant quantifiers
X?? 	X, once <span class="keyword">or</span> <span class="keyword">not</span> <span class="keyword">at</span> all
X*? 	X, zero <span class="keyword">or</span> more <span class="keyword">times</span>
X+? 	X, one <span class="keyword">or</span> more <span class="keyword">times</span>
X{n}? 	X, exactly n <span class="keyword">times</span>
X{n,}? 	X, <span class="keyword">at</span> least n <span class="keyword">times</span>
X{n,m}? 	X, <span class="keyword">at</span> least n <span class="keyword">but</span> <span class="keyword">not</span> more than m <span class="keyword">times</span>
</pre></td></tr></table></figure>

<h2 id="-">匹配</h2>
<p><code>&quot;String&quot;.matches(regex)</code></p>
<h2 id="-">切割</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>String[] sep = <span class="keyword">str</span>.split(<span class="string">"\\s"</span>);
<span class="keyword">str</span> = <span class="string">"zhangaaaaaaaaboccccccshen"</span>
String[] sep = <span class="keyword">str</span>.split(<span class="string">"(.)\\1+"</span>); <span class="comment">// 组 &gt; zhang bo shen</span>
</pre></td></tr></table></figure>

<h2 id="-">组</h2>
<p><code>((A)(B(C)))</code> 从左括号开始,第一个括号就是第一组, 第二个括号就是第二组</p>
<h2 id="-">替换</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">str</span> = <span class="string">"zhangaaaaaaaaboccccccshen"</span>
<span class="comment">// 叠词替换成一个</span>
<span class="keyword">str</span>.replaceAll(<span class="string">"(.)\\1+"</span>, <span class="string">"$1"</span>);   <span class="comment">// zhangabocshen</span>

<span class="keyword">str</span> = <span class="string">"15800001111"</span>;
<span class="keyword">str</span>.replaceAll(<span class="string">"(\\d{3})\\d{4}(\\d{3})"</span>, <span class="string">"$1****$2"</span>);
</pre></td></tr></table></figure>

<h2 id="-">获取</h2>
<p>java.util.regex.Pattern: 正则表达式的对象形式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 将正则封装成对象</span>
Pattern p = Pattern.compile(<span class="string">"a*b"</span>);
<span class="comment">// 通过正则对象的获取匹配器对象</span>
Matcher m = p.matcher(<span class="string">"aaaab"</span>);
<span class="comment">// 使用Matcher对象对字符串进行操作</span>
<span class="keyword">boolean</span> b = m.matches();
<span class="keyword">while</span>(m.find()){
    m.<span class="keyword">group</span>();  <span class="comment">// 获取匹配的子序列</span>
    m.start();  <span class="comment">// index of start</span>
    m.end();
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="正则表达式" scheme="http://zhpooer.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java反射学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/14/java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/14/java反射学习/</id>
    <published>2014-04-14T13:33:07.000Z</published>
    <updated>2014-04-14T13:52:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">反射</h1>
<p>动态获取类中的信息, 就是java反射. 可以理解为对类的解剖.</p>
<p>对任意一个对象, 都能够调用他的任意一个方法和属性</p>
<h2 id="-class">获取Class</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 获取Class</span>
<span class="comment">// 方式一</span>
Person p = <span class="keyword">new</span> Person();
Class clazz = p.getClass();
<span class="comment">// 方式二</span>
Class clazz = Person.<span class="keyword">class</span>;
<span class="comment">// 方式三</span>
Class clazz = Class.forName(<span class="string">"xx.xx.Person"</span>);
</pre></td></tr></table></figure>

<h2 id="-java-lang-constructor">构造函数 java.lang.Constructor</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">Object</span> obj = clazz.newInstance();

<span class="comment">//构造函数要传参数</span>
<span class="function"><span class="keyword">Constructor</span> <span class="title">cons</span> = <span class="title">clazz</span>.<span class="title">getConstructors</span><span class="params">()</span>;</span>
clazz.getConstructor(<span class="keyword">String</span>.<span class="keyword">class</span>, <span class="keyword">String</span>.clazz);
cons.newInstance()
</pre></td></tr></table></figure>

<h2 id="-java-lang-field">获取字段 java.lang.Field</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Field f = clazz.getField(<span class="string">"age"</span>); <span class="comment">// 获取公共的字段</span>
Field f = clazz.getDeclaredField(<span class="string">"age"</span>); <span class="comment">// 获取所有的字段</span>
f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 私有的变为可访问</span>
f.<span class="keyword">get</span>(obj);
</pre></td></tr></table></figure>

<h2 id="-java-lang-method">获取方法 java.lang.Method</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="function"><span class="keyword">Method</span>[] <span class="title">ms</span> = <span class="title">clazz</span>.<span class="title">getMethods</span><span class="params">()</span>;</span> <span class="comment">// 获取都是公有的方法</span>
<span class="function"><span class="keyword">Method</span> <span class="title">m</span> = <span class="title">clazz</span>.<span class="title">getDeclaredMethod</span><span class="params">("show", null)</span>;</span> <span class="comment">// 获取所有的方法</span>
m.invoke(obj, null);
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="反射" scheme="http://zhpooer.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java网络编程学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/14/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/14/java网络编程学习/</id>
    <published>2014-04-14T09:00:05.000Z</published>
    <updated>2014-04-14T13:30:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-net-inetaddress">java.net.InetAddress</h1>
<p><code>Inet6Address</code> ipv6协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>InetAddress ip = InetAddress<span class="preprocessor">.getLocalHost</span>()<span class="comment">;</span>
InetAddress ip = InetAddress<span class="preprocessor">.getByName</span>()<span class="comment">;</span>
InetAddress[] ip = InetAddress<span class="preprocessor">.getAllByName</span>()<span class="comment">; // 所有的地址</span>

ip<span class="preprocessor">.getHostAddress</span>()<span class="comment">; // 192.168.1.11</span>
ip<span class="preprocessor">.getHostName</span>()<span class="comment">; // www.google.com</span>
</pre></td></tr></table></figure>

<h1 id="socket">Socket</h1>
<ul>
<li>Socket 就是为网络服务提供的一种机制.</li>
<li>通信两端都有Socket</li>
<li>网络通信其实就是Socket间的通信</li>
<li>数据在两个Socket间通过IO传输</li>
</ul>
<h2 id="java-net-datagramsocket">java.net.DatagramSocket</h2>
<p>DatagramPacket: 用于发送或者接受的数据包</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();
<span class="built_in">String</span> s = <span class="string">"xxxxxxxxxxx"</span>;
byte[] buf = str.getBytes();
<span class="comment">// 发送, 可以用192.1.1.255发广播</span>
DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length,InetAddress.getByName(<span class="string">"192.168.1.100"</span>), <span class="number">10000</span>);
ds.send(dp);
ds.close();

<span class="comment">// 接收</span>
DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>); <span class="comment">// 要明确接受端口</span>
DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length);
ds.receive(dp); <span class="comment">// 阻塞式的</span>
<span class="built_in">String</span> ip = dp.getAddress.getHostAddress();
int port = dp.getPort();
<span class="keyword">new</span> <span class="built_in">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength());
</pre></td></tr></table></figure>

<h2 id="socket-serversocket">Socket 和 ServerSocket</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>// 客户端
Socket s = new Socket(<span class="string">"192.168.1.100"</span>, <span class="number">10000</span>)<span class="comment">;</span>

OutputStream <span class="keyword">out</span> = s<span class="preprocessor">.getOutputStream</span>()<span class="comment">; // s.getInputStream();</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"xxxx"</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
s<span class="preprocessor">.shutdownOutput</span>()<span class="comment">; // 告诉服务端, 这边数据发送完毕,让服务端停止读取</span>
s<span class="preprocessor">.close</span>()<span class="comment">;</span>

// 服务端
ServerSocket ss = new ServerSocket(<span class="number">100000</span>)<span class="comment">;</span>
Socket s == ss<span class="preprocessor">.accept</span>()<span class="comment">; // 获取客户端对象, 阻塞</span>

s<span class="preprocessor">.getInputStream</span>()<span class="comment">;</span>
<span class="keyword">in</span><span class="preprocessor">.read</span>(buf)<span class="comment">;</span>
new String(buf, <span class="number">0</span>, len)<span class="comment">;</span>

s<span class="preprocessor">.close</span>()<span class="comment">;</span>
ss<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="-">多线程服务端</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">while</span>(<span class="literal">true</span>){
    Socket s <span class="subst">=</span> ss<span class="built_in">.</span>accept();
    <span class="keyword">Thread</span> <span class="keyword">thread</span> <span class="subst">=</span> <span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Handler(s));
    <span class="keyword">thread</span><span class="built_in">.</span>start();
}
</pre></td></tr></table></figure>

<h1 id="url-urlconnection">URL&amp;URLConnection</h1>
<p>URL: 同一资源定位符, http协议</p>
<p>URI: 统一资源标识, mailto等 包括URL</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="built_in">String</span> str_url = <span class="string">"http://www.google.com/index.html?name.lisi"</span>;
URL url = <span class="keyword">new</span> URL(str_url);
url.getProtocol(); <span class="comment">// http</span>
url.getHost();  <span class="comment">// 192.168.1.100</span>
url.getFile();  <span class="comment">// /index.html?name.lisi</span>
url.getPath(); <span class="comment">//  /index.html</span>
url.getQuery(); <span class="comment">// name.lisi</span>

url.openStream(); <span class="comment">// url.openConnection().openStream();</span>

URLConnection uc = url.openConnection();
uc.getHeaderField(<span class="string">"Content-Type"</span>); <span class="comment">//text/html</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="网络编程" scheme="http://zhpooer.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IO技术学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/13/io%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/13/io技术学习/</id>
    <published>2014-04-13T10:47:16.000Z</published>
    <updated>2014-04-15T09:58:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="io-">IO初识</h1>
<p>流按数据类型分类:</p>
<ol>
<li>字符流, 字节流读取文字自己数据后,
不直接操作而是先查指定的编码表, 获取指定的文字.
就是 字节流+编码表</li>
<li>字节流</li>
</ol>
<p>流按操作方式分类:</p>
<ol>
<li>输入流, 将外设中的数据读取到内存中</li>
<li>输出流, 将内存中的数据写到外设中</li>
</ol>
<h1 id="-">字符流</h1>
<p>字符流的两个顶层父类</p>
<ol>
<li>Reader</li>
<li>Writer</li>
</ol>
<p>如果操作文集数据, 优先考虑字符流
要将数据从内存写到硬盘上, 要使用字符流中的输出流.<code>Writer</code></p>
<h2 id="filewriter">FileWriter</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// 文件会自动创建或覆盖</span>
FileWriter fw = <span class="built_in">new</span> FileWriter(<span class="string">"demo.txt"</span>);
<span class="comment">// 数据写到内存临时缓冲区</span>
fw.write(<span class="string">"abce"</span>);
fw.flush(); <span class="comment">//进行刷新, 将数据直接写到硬盘上</span>
fw.<span class="built_in">close</span>();  <span class="comment">// 关闭会自动 flush</span>

<span class="comment">// 如果构造函数加入true, 可以实现文件的续写</span>
FileWriter fw = <span class="built_in">new</span> FileWriter(<span class="string">"demo.txt"</span>, <span class="constant">true</span>);
</pre></td></tr></table></figure>

<h2 id="io-">IO 异常处理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>FileWriter fw = <span class="keyword">null</span>;
<span class="keyword">try</span>{
}<span class="keyword">catch</span>(IOExcetpion e){
} <span class="keyword">finally</span> {
   <span class="keyword">if</span>(fw!=<span class="keyword">null</span>){ <span class="comment">/*  重要   */</span>
       <span class="keyword">try</span>{
           fw.close()
       }<span class="keyword">catch</span>(IOExcetpion){}
   }
}
</pre></td></tr></table></figure>

<h2 id="-">读取一个文件把字符串输入到控制台</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"demo.txt"</span>);
<span class="keyword">int</span> ch = <span class="number">0</span>;
<span class="keyword">while</span>((ch=fr.read())!=-<span class="number">1</span>){
   print(ch);
}
System.<span class="keyword">out</span>.prinln(ch1);
<span class="comment">// 方式二</span>
<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];
<span class="keyword">int</span> num  = <span class="number">0</span>;
<span class="keyword">while</span>((num = fr.read(buf))!=-<span class="number">1</span>){
    println(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));
}
</pre></td></tr></table></figure>

<h2 id="-">文件复制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 1. 对一个已有文本</span>
FileReader src = <span class="built_in">new</span> FileReader(<span class="string">"file1"</span>);
<span class="comment">// 2. 创建一个目的, 用于存储到数据</span>
FileReader dist = <span class="built_in">new</span> FileWriter(<span class="string">"file2"</span>);
<span class="comment">// 3. 读写操作</span>
char[] buf = <span class="built_in">new</span> char<span class="number">[1024</span><span class="number">*4</span>];
<span class="typename">int</span> <span class="built_in">len</span> =<span class="number"> 0</span>;
while((<span class="built_in">len</span>=src.read(buf)) !=<span class="number"> -1</span>) {
    dist.write(buf,<span class="number"> 0</span>, <span class="built_in">len</span>);
}
<span class="comment">// 4. 关闭流资源</span>
src.<span class="built_in">close</span>();
dist.<span class="built_in">close</span>();
</pre></td></tr></table></figure>

<h2 id="-">字符流的缓冲区</h2>
<p>缓冲区提高读写效率</p>
<p>缓冲区要结合流来读取</p>
<h3 id="bufferedreader">BufferedReader</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="constant">FileWriter</span> fw = new <span class="constant">FileWriter</span>(<span class="string">"buf.txt"</span>);

<span class="constant">BufferedWriter</span> bufw = new <span class="constant">BufferedWriter</span>(fw); <span class="regexp">//</span> <span class="keyword">or</span> new <span class="constant">BufferedWriter</span>(fw, <span class="number">1024</span>);

bufw.write(<span class="string">"abcde"</span>);
bufw.newLine(); <span class="regexp">//</span> 新行
bufw.close();
<span class="regexp">//</span> fw.write(<span class="string">""</span>);<span class="regexp">//</span> 流已经被关了会抛错
</pre></td></tr></table></figure>

<h3 id="bufferedwriter">BufferedWriter</h3>
<p><code>read()</code>是从缓冲区取出字符数据. 做一覆盖了父类的read方法</p>
<p><code>readLine()</code>使用了读取缓冲区的read方法,将读取到的字符进行缓冲并判断换行标记,
将标记前的缓冲数据进行读取</p>
<h2 id="-">装饰设计模式</h2>
<p>对一组对象的功能进行增强时, 就可以使用该模式进行问题的解决.</p>
<p>装饰比继承灵活</p>
<p>特点: 装饰类和被装饰类都必须是所属同一接口或父类</p>
<h2 id="linenumberreader">LineNumberReader</h2>
<p>是 BufferedReader 的子类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>LineNumberReader lnr = new LineNumberReader(new FileReader())<span class="comment">;</span>

lnr<span class="preprocessor">.setLineNumber</span>(<span class="number">100</span>)<span class="comment">;</span>
while((line=lnr<span class="preprocessor">.readLine</span>())!=null){
    lnr<span class="preprocessor">.getLineNumber</span>() + <span class="string">":"</span>  + lnr<span class="preprocessor">.readLine</span>()<span class="comment">;</span>
}
lnr<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="-">字节流</h1>
<p>字符流的顶层父类</p>
<ol>
<li>InputStream</li>
<li>OutputStream</li>
</ol>
<p>字节流处理是字节数组, 字符流处理的是字符流</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>FileOutputStream fos = new FileOutputStream()<span class="comment">;</span>

fos<span class="preprocessor">.write</span>(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>

fos<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>fis.available(); <span class="comment">// 返回文件大小</span>
FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">""</span>);
<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()]; <span class="comment">// 小文件可以, 大文件慎用</span>
fis.read(buf);
<span class="keyword">new</span> String(buf);
</pre></td></tr></table></figure>

<h2 id="-">读取一个键盘录入的数据, 并打印在控制台上</h2>
<p><code>System.in</code> 关了之后, 就不能再用了, <em>千万别</em> <code>close()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">// 简单方法</span>
InputStream <span class="keyword">in</span> = System.<span class="keyword">in</span>;
<span class="keyword">int</span> ch = <span class="keyword">in</span>.read(); <span class="comment">// 会阻塞</span>
println(ch);

<span class="comment">// 方法一</span>
StringBuilder sb = <span class="keyword">new</span> StringBuilder();
<span class="keyword">while</span>((ch=<span class="keyword">in</span>.read())!=-<span class="number">1</span>){
    <span class="keyword">if</span>(ch==<span class="string">'\r'</span>){ <span class="keyword">continue</span>;}
    <span class="keyword">if</span>(ch==<span class="string">'\n'</span>){
        String temp = sb.toString();
        <span class="keyword">if</span>(<span class="string">"over"</span>.equals(temp)) <span class="keyword">break</span>;
        sb.<span class="keyword">delete</span>(<span class="number">0</span>, sb.length());
    } <span class="keyword">else</span>
        sb.append(ch);
}

<span class="comment">// 方法二</span>
InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.<span class="keyword">in</span>);
BufferedReader bufr = <span class="keyword">new</span> BufferedReader(isr);
bufr.readLine();
</pre></td></tr></table></figure>

<h2 id="-">转换流</h2>
<p><code>InputStreamReader</code>, 将字节转换成字符的桥梁, 可以设置字符集</p>
<blockquote>
<p><code>new InputStreamReader(in, charset)</code></p>
</blockquote>
<p><code>OutputStreamWriter</code>, 是字符流通向字节流的桥梁, 可指示编码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Writer osw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.<span class="keyword">out</span>));
osw.<span class="keyword">write</span>();
osw.newLine();
osw.flush(); <span class="comment">// 如果要输出, 就要刷新缓冲</span>
</pre></td></tr></table></figure>

<p><code>FileWriter</code> 继承于 <code>OutputStreamWriter</code></p>
<h1 id="-">流的操作规律</h1>
<ol>
<li><p>明确源和目的</p>
<p> 源: InputStream Reader<br> 目的: OutputStream Writer</p>
</li>
<li><p>明确数据是否纯文本</p>
<ol>
<li>源是纯文本: reader</li>
<li>源不是纯文本: InputStream</li>
<li>目的是纯文本: Writer</li>
<li>目的不是纯文本: OutputStream</li>
</ol>
</li>
<li><p>明确具体的设备</p>
<p> 源设备, 目的设备</p>
<ol>
<li>硬盘: File</li>
<li>键盘: System.in, System.out</li>
<li>内存: 数组</li>
<li>网络: Socket流</li>
</ol>
</li>
<li><p>是否需要其他额外功能</p>
<p> 如果需要高效缓冲区, 就加上Buffer</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">new</span> FileWriter(<span class="string">"file"</span>); <span class="comment">// 以系统默认的编码写入文件</span>
<span class="comment">// 如果指定码表, 那么就不可以使用FileWriter,</span>
<span class="comment">// 他内部使用默认本地码表, 使用如下</span>
<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(), <span class="string">"UTF-8"</span>);
<span class="comment">// 同理, FileReader 亦然</span>
<span class="keyword">new</span> InputStreamReader(<span class="string">"file"</span>, <span class="string">"utf-8"</span>);
</pre></td></tr></table></figure>

<h1 id="java-io-file-">java.io.File类</h1>
<p>对文件或<em>文件夹</em>的属性进行操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre>File<span class="preprocessor">.separator</span><span class="comment">; 文件分隔符</span>
File<span class="preprocessor">.pathSeparator</span><span class="comment">; 路径夹分隔符</span>

//获取属性
File f = new File(<span class="string">"a.txt"</span>)<span class="comment">;</span>
File f = new File(dir, filename)<span class="comment">;</span>
f<span class="preprocessor">.getName</span>()<span class="comment">;</span>
f<span class="preprocessor">.getAbsolutePath</span>()<span class="comment">;</span>
File pathFile = f<span class="preprocessor">.getAbsoluteFile</span>()<span class="comment">;  </span>
f<span class="preprocessor">.getPath</span>()<span class="comment">;</span>
long len = f<span class="preprocessor">.length</span>()<span class="comment">;</span>
long time = file<span class="preprocessor">.lastModified</span>()<span class="comment">;</span>

// 文件的创建和删除
f<span class="preprocessor">.canWrite</span>()<span class="comment">;</span>
f<span class="preprocessor">.createNewFile</span>()<span class="comment">;  // 如果文件存在就不创建</span>
f<span class="preprocessor">.createTempFile</span>()<span class="comment">;</span>

f<span class="preprocessor">.delete</span>()<span class="comment">; </span>
file<span class="preprocessor">.deleteOnExist</span>()<span class="comment">;</span>

// 文件夹
f<span class="preprocessor">.mkdir</span>()<span class="comment">; // 创建单级目录</span>
f<span class="preprocessor">.mkdirs</span>()<span class="comment">; // 创建多级目录</span>

// 判断
f<span class="preprocessor">.exists</span>()<span class="comment">;</span>
f<span class="preprocessor">.isFile</span>()<span class="comment">;  // 要先判断文件是否存在</span>
f<span class="preprocessor">.isDirectory</span>()<span class="comment">; // 要先判断文件是否存在</span>

// 重命名
File f2 = new File(<span class="string">"2"</span>)<span class="comment">;</span>
f<span class="preprocessor">.renameTo</span>(f2)<span class="comment">;</span>

// 列出可用的系统根
File<span class="preprocessor">.listRoots</span>()<span class="comment">; //如 c盘 d盘 e盘</span>
File dRoot = new File(<span class="string">"d:\\"</span>)<span class="comment">;</span>
dRoot<span class="preprocessor">.getFreeeSpace</span>()<span class="comment">;</span>
dRoot<span class="preprocessor">.getTotalSpace</span>()<span class="comment">;</span>
dRoot<span class="preprocessor">.getUsableSpace</span>()<span class="comment">;</span>

// 获取当前目录下文件或文件夹的名称
String[] names = f<span class="preprocessor">.list</span>()<span class="comment">; // f必须是目录, 需要判断是否为空, 访问系统级目录也会空指针</span>
File[] files = f<span class="preprocessor">.listFiles</span>()<span class="comment">;</span>

f<span class="preprocessor">.list</span>(FilenameFilter)<span class="comment">; // 过滤器</span>
</pre></td></tr></table></figure>

<h1 id="java-util-properties-">java.util.Properties 集合</h1>
<p>Properties 是一个 HashTable, 特点</p>
<ol>
<li>键值都是字符串</li>
<li>集合中的数据可以保存在流中, 从流中获取</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Properties p <span class="subst">=</span> <span class="literal">new</span> Properties();  <span class="comment">// 注意: 只采用88591-字符编码</span>
p<span class="built_in">.</span>load(<span class="literal">new</span> FileInputStream());
p<span class="built_in">.</span>setProperty(<span class="string">"1"</span>, <span class="string">"2"</span>);
p<span class="built_in">.</span>stringPropertyNames();

<span class="comment">// 输出到流</span>
p<span class="built_in">.</span><span class="built_in">list</span>(PrintStream out);
<span class="comment">// 存储</span>
p<span class="built_in">.</span>store(OutputStream s, <span class="built_in">String</span> comments)
p<span class="built_in">.</span>store(Writer s, <span class="built_in">String</span> comments)
</pre></td></tr></table></figure>

<h1 id="-io-">其他IO流</h1>
<h2 id="printstream-printwriter">PrintStream 和 PrintWriter</h2>
<p>PrintStream 从来不抛出异常, 可以知己恩操纵文件</p>
<p>可以打印多种数据类型, 并保持数据的表示形式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"filename"</span>);
ps.print(<span class="number">97</span>);  <span class="comment">// 先将97变成字符串</span>

<span class="keyword">new</span> PrintWriter(Writer w);
<span class="keyword">new</span> PrintWriter(OuputStream w, <span class="literal">true</span>); <span class="comment">// 默认是带缓冲的, 可以设置自动刷新</span>
<span class="keyword">new</span> PrintWriter(File w);
<span class="keyword">new</span> PrintWriter(<span class="built_in">String</span> path);
</pre></td></tr></table></figure>

<h2 id="-sequenceinputstream">序列流 SequenceInputStream</h2>
<p>对多个流进行合并, 串联读取</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Vector<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> v = new Vector<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span>();
Enumeration<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> en = e.elements();
// 或
Enumeration<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> en = Collections.enumerations(list)
new SequenceInputStream(en);
</pre></td></tr></table></figure>

<h2 id="objectinputstream-objectoutputstream">ObjectInputStream 与 ObjectOutputStream</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(FileOutputStream);
oos.writeObject(Serializable obj);  <span class="comment">// obj 必须实现接口 java.io.Serializable</span>

ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream();
(<span class="built_in">Object</span>) ois.readObject();
</pre></td></tr></table></figure>

<h3 id="serializable">Serializable</h3>
<p>使用 <code>serialVersionUID</code> 验证序列化对象的类版本信息</p>
<h3 id="transient">transient</h3>
<p>被标记了 transient 的字段, 不会被序列化</p>
<h2 id="randomaccessfile">RandomAccessFile</h2>
<p>支持随机访问文件的读取和写入</p>
<ol>
<li>既能读,又能写</li>
<li>内部维护了以 byte 数组, 通过指针操作数组中的元素</li>
<li>可以通过 <code>getFilePoint()</code> 和 <code>seek()</code> 操作指针</li>
<li>它封装了 输入流 和 输出流</li>
<li>源和目的只能是 文件</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>RandomAccessFile f = new RandomAccessFile(<span class="string">""</span>, <span class="string">"rw"</span>)<span class="comment">;</span>
f<span class="preprocessor">.write</span>(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
f<span class="preprocessor">.seek</span>(<span class="number">1</span>*<span class="number">8</span>)<span class="comment">;</span>
f<span class="preprocessor">.readInt</span>(<span class="string">""</span>)<span class="comment">;</span>

f<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="pipedstream">PipedStream</h2>
<p>管道流, 输入和输出可以直接进行连接, <em>要结合线程使用</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>PipedInputStream pis = new PipedInputStream();
PipedOutputStream <span class="keyword">pos</span> = new PipedOutputStream();
pis.<span class="keyword">connect</span>(<span class="keyword">pos</span>);
</pre></td></tr></table></figure>

<h2 id="-">其他输入输出流</h2>
<ol>
<li>DataOutputStream 和 DataInputStream</li>
</ol>
<ol>
<li><p>ByteArrayInputStream 和 ByteArrayOutputStream</p>
<p> 源和目的都是内存, 关闭他没有效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>    ByteArrayOutputStream bos = new ByteArrayOutputStream()<span class="comment">;</span>
    ByteArrayInputStream bis = new ByteArrayInputStream(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
    bis<span class="preprocessor">.read</span>()<span class="comment">;</span>
    bos<span class="preprocessor">.write</span>()<span class="comment">;</span>
    bos<span class="preprocessor">.toByteArray</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>
</li>
<li><p>CharArrayReader 和 CharArrayWriter</p>
</li>
<li>StringReader 与 StringWriter</li>
</ol>
<h1 id="-">编码解码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>String <span class="keyword">str</span> = <span class="string">"你好"</span>;
<span class="keyword">str</span>.getBytes();
<span class="keyword">byte</span>[] buf = <span class="keyword">str</span>.getBytes(<span class="string">"GBK"</span>);

<span class="keyword">new</span> String(buf, <span class="string">"GBK"</span>)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="IO" scheme="http://zhpooer.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day11-cookie]]></title>
    <link href="http://zhpooer.github.io/2014/04/13/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day11-cookie/"/>
    <id>http://zhpooer.github.io/2014/04/13/传智播客day11-cookie/</id>
    <published>2014-04-13T01:23:18.000Z</published>
    <updated>2014-04-15T02:15:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">会话概述</h1>
<p>在一次会话中, 浏览器可以发出多次请求和收到多次服务器响应</p>
<p>服务器为客户保存操作产生的数据, 比如购物网站的购物车</p>
<p>解决方案: Cookie(客户端技术), Session(服务端技术)</p>
<blockquote>
<p>服务器发送 Set-Cookie: name=any
客户端访问 cookie: name=any</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">Session s </span>=<span class="string"> request.getSession();</span>
</pre></td></tr></table></figure>

<h2 id="cookie-">Cookie技术</h2>
<p><img src="/img/cookie-info.png" alt="cookiez组成"></p>
<h3 id="cookie-">Cookie 中的属性</h3>
<p>name: 名称</p>
<p><em>value: 取值(不能是中文)</em></p>
<p><em>path: 可选, 路径, 默认值写Cookie那个程序的访问路径, 不包括文件名</em></p>
<p><em>maxAge: 可选. 最大存活时间, 默认是一次会话, 存在于浏览器进程内存中, 单位是秒</em></p>
<p>domain: 域名 可选,默认值是写Cookie的网站</p>
<p>comment: 备注 可选</p>
<p>version: 版本 可选</p>
<h3 id="-cookie">向客户端输出一个Cookie</h3>
<blockquote>
<p><code>HttpServletResponse.addCookie(Cookie c)</code></p>
</blockquote>
<p>客户端浏览器针对一个网站, 最多能存20个Cookie. 总共能存300个.
每个Cookie的大小不能超过4KB.(资源稀少)</p>
<h3 id="-cookie">服务端如何获取Cookie</h3>
<blockquote>
<p><code>HttpServletRequest.getCookies()</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);
PrintWriter <span class="keyword">out</span> = res.getWriter();
<span class="keyword">out</span>.write(<span class="string">"您最后来访的时间是: &lt;br/&gt;"</span>);
Cookie[] cookies = req.getCookies(); <span class="comment">// null</span>
<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; cookies!=<span class="keyword">null</span>&&i&lt;cookies.length;i++){<span class="comment">// 一定要判断是否为空</span>
     Cookie c = cookies[i];
     <span class="keyword">if</span>(<span class="string">"lastAccessTime"</span>.equals(c.getName())){
         String <span class="keyword">value</span> = c.getValue();
         <span class="keyword">long</span> time = Long.parseLong(<span class="keyword">value</span>);
         Date d = <span class="keyword">new</span> Date(time);
         DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);
         String stime = df.format(d);
         <span class="keyword">out</span>.write(stime);
         <span class="keyword">break</span>;
     }
}

Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"lastAccessTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);
c.setMaxAge( <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span> ); <span class="comment">//单位是秒</span>
res.addCookie(c);
</pre></td></tr></table></figure>

<h3 id="-cookie-">把指定的cookie删掉</h3>
<p>修改Cookie的生命周期,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"lastAccessTime"</span>, <span class="string">""</span>);
c.setMaxAge(<span class="number">0</span>);
response.addCookie(c);  <span class="comment">//覆盖掉原有的Cookie</span>
</pre></td></tr></table></figure>

<h3 id="-cookie">如何确定一个Cookie</h3>
<p>域名+路径+Cookie的名称</p>
<p>带不带cookie给服务器, 浏览器说了算. 根据你当前访问的路径来判断.
如果当前访问路径.startWith(已存Cookie路径) 为true, 就带给成立</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">; // 所有应用下的都能访问到该Cookie</span>
</pre></td></tr></table></figure>

<h4 id="-">案例一: 录入用户信息</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>// 产生一个登陆页面
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

String username = <span class="string">""</span><span class="comment">;</span>
String checked = <span class="string">""</span>

Cookie cs[] = req<span class="preprocessor">.getCookies</span>()<span class="comment">;</span>
for(int i=<span class="number">0</span><span class="comment">; cs !=null && i &lt; cs.length; i++) {</span>
   Cookie c = cs[i]<span class="comment">;</span>
   if(<span class="string">"loginInfo"</span><span class="preprocessor">.equals</span>(c<span class="preprocessor">.getName</span>())){
       username = c<span class="preprocessor">.getValue</span>()<span class="comment">;</span>
       checked = <span class="string">"checked"</span>
       <span class="keyword">break</span><span class="comment">;</span>
   }
}
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;form action='/HelloServlet2' method='post'&gt;&lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"username: &lt;input type='text' name='username' value='"</span> +username +  <span class="string">"'/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"password: &lt;input type='password' name='password' value=''/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"remenber: &lt;input type='checkbox' name='remember' checked='"</span> + checked + <span class="string">"' /&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;input type=submit' name='password' value=''/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;/form&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>// 负责完成登陆验证, 同时以Cookie的形式把用户名记住, 前提不能是中文
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
// 获取用户名和密码
String username = request<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
String password = request<span class="preprocessor">.getParameter</span>(<span class="string">"password"</span>)<span class="comment">;</span>
// 获取用户是否选择了记住用户名
String remember = request<span class="preprocessor">.getParameter</span>(<span class="string">"remember"</span>)<span class="comment">; // 没有选着就是null</span>

// 判断用户名和密码是否正确: 用户名翻转之后就是密码.比如用户名abc, 那么密码是cba
if(!username<span class="preprocessor">.equals</span>(new StringBuffer(password)<span class="preprocessor">.reverse</span>()<span class="preprocessor">.toString</span>())){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"错误的用户名或密码, 2秒后转向登陆页面"</span>)<span class="comment">;</span>
    res<span class="preprocessor">.retHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL="</span> + req<span class="preprocessor">.getContextPath</span>() + <span class="string">"/HelloServlet"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}
Cookie c = new Cookie(<span class="string">"loginInfo"</span>, username)
c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">;</span>
if(remember!=null){
// 如果用户选择记住用户名, 写cookie
    c<span class="preprocessor">.setMaxAge</span>(Integer<span class="preprocessor">.MAX</span>_VALUE)<span class="comment">;</span>
} else {
// 如果没有用户选择记住用户名, 删除cookie
    c<span class="preprocessor">.setMaxAge</span>(<span class="number">0</span>)<span class="comment">;</span>
}
cookie<span class="preprocessor">.addCookie</span>(c)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h4 id="-">案例二: 购书</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Book{
   <span class="keyword">private</span> String id;
   <span class="keyword">private</span> String name;
   <span class="keyword">private</span> <span class="keyword">int</span> price;
   <span class="keyword">private</span> String author;
   <span class="keyword">private</span> String description;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> BookDB{
   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Book&gt; books = <span class="keyword">new</span> HasMap&lt;String, Book&gt;();
   <span class="keyword">static</span> {
        books.put(<span class="string">"1"</span>, <span class="keyword">new</span> Book(<span class="string">"1"</span>, <span class="string">"葵花宝典"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
        books.put(<span class="string">"2"</span>, <span class="keyword">new</span> Book(<span class="string">"2"</span>, <span class="string">"葵花宝典1"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
        books.put(<span class="string">"3"</span>, <span class="keyword">new</span> Book(<span class="string">"3"</span>, <span class="string">"葵花宝典2"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
   }
   <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Book&gt; <span class="title">findAllBooks</span>(){
       <span class="keyword">return</span> books;
   }

   <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">findBookById</span>(String id) {
       books.<span class="keyword">get</span>(id);
   }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>//<span class="number">1</span> 显示所有商品
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.print</span>(<span class="string">"&lt;h1&gt;本站有以下好书&lt;/h1&gt;"</span>)<span class="comment">;</span>
Map&lt;String, Book&gt; books = BookDB<span class="preprocessor">.findAllBooks</span>()<span class="comment">;</span>
for (Map<span class="preprocessor">.Entry</span>&lt;String, Book&gt; me: books<span class="preprocessor">.entrySet</span>()){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getName</span>() + <span class="string">"&lt;a target='_blank' href='"</span> + req<span class="preprocessor">.getContextPath</span> + <span class="string">"/HelloServlet2?bookId="</span> + me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getId</span>() + <span class="string">"' &gt;查看&lt;/a&gt;&lt;/br&gt;"</span>)<span class="comment">;</span>
}
//<span class="number">2</span> 显示用户最近的浏览记录

<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您最近的浏览历史是&lt;br/&gt;"</span>)<span class="comment">;</span>
Cookie cs[] = req<span class="preprocessor">.getCookies</span>()<span class="comment">;</span>
for(int i=<span class="number">0</span><span class="comment">;cs!=null&&i&lt;cs.length;i++){</span>
     Cookie c = cs[i]<span class="comment">;</span>
     if(<span class="string">"bookHistory"</span><span class="preprocessor">.equals</span>(c<span class="preprocessor">.getName</span>())){
          String value = c<span class="preprocessor">.getValue</span>()<span class="comment">;</span>
          String ids[] = value<span class="preprocessor">.split</span>(<span class="string">"\\-"</span>)<span class="comment">;</span>
          for(String id:ids) {
              <span class="keyword">out</span><span class="preprocessor">.write</span>(BookDB<span class="preprocessor">.findBookById</span>(id)<span class="preprocessor">.getName</span>()+<span class="string">"&lt;br/&gt;"</span>)
          }
          <span class="keyword">break</span><span class="comment">;</span>
     }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre>res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);
PrintWriter out = res.getWriter();
<span class="comment">// 显示商品的详细信息, 写Cookie</span>
out.write(<span class="string">"详细呢容: &lt;br/&gt;"</span>);
String bookId = req.getParameter(<span class="string">"bookId"</span>);
Book book = BookDB.findBookById(bookId);
out.println(book.toString());

<span class="comment">// 写cookie: 记住浏览历史记录</span>

String bookids = makeIds(req, bookId);
Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"bookHistory"</span>, bookids);
c.setMaxAge(Integer.MAX_VALUE);
c.setPath(req.getContextPath());
res.addCookie(c);

<span class="comment">// 组织写到cookie中的书记的id, 多个id之间分割.最多三个</span>
<span class="comment">/*

一个cookie都没有      当前书:1            1
由cookie,但没有bookhistory  1       1
bookHistory=1               2           2-1
2-1                         2           1-2
*/</span>
<span class="keyword">private</span> String makeIds(HttpServletRequest res, String bookId){
    Cookie cs[] = res.getCookies();
    <span class="keyword">if</span>(cs==<span class="keyword">null</span>) <span class="keyword">return</span> bookId;
    Cookie bookHistoryCookie = <span class="keyword">null</span>;
    <span class="keyword">for</span>(Cookie c:cs) {
         <span class="keyword">if</span>(<span class="string">"bookHistory"</span>.equals(c.getName())){
             bookHistoryCookie = c;
             <span class="keyword">break</span>;
         }
    }
    <span class="keyword">if</span>(bookHistoryCookie == <span class="keyword">null</span>) <span class="keyword">return</span> bookId;
    String value = bookHistoryCookie.getValue();
    String ids[] = value.split(<span class="string">"\\-"</span>);
    LinkedList&lt;String&gt; <span class="keyword">list</span> = <span class="keyword">new</span> LinkedList&lt;String&gt;(Arrays.asList(ids));
    <span class="keyword">if</span>(<span class="keyword">list</span>.size()&lt;<span class="number">3</span>){
        <span class="keyword">if</span>(<span class="keyword">list</span>.contains(bookId))<span class="keyword">list</span>.remove(bookId);
        <span class="keyword">list</span>.addFirst(bookId);
    } <span class="keyword">else</span> {
        <span class="keyword">if</span>(<span class="keyword">list</span>.contains(bookId)){
            <span class="keyword">list</span>.remove(bookId);
        } <span class="keyword">else</span> {
            <span class="keyword">list</span>.removeLast();
        }
        <span class="keyword">list</span>.addFirst(bookId);                
    }
    StringBuffer sb = <span class="keyword">new</span> StringBuffer();
    <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt; <span class="keyword">list</span>.size();i++){
        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) ab.append(<span class="string">"-"</span>);
        sb.append(<span class="keyword">list</span>.get(i));
    }
    <span class="keyword">return</span> sb.toString();
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="cookie" scheme="http://zhpooer.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java对象工具API]]></title>
    <link href="http://zhpooer.github.io/2014/04/12/java%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%85%B7api/"/>
    <id>http://zhpooer.github.io/2014/04/12/java对象工具api/</id>
    <published>2014-04-12T11:38:05.000Z</published>
    <updated>2014-04-12T14:47:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="system">System</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>System.<span class="keyword">long</span> currentTimeMillis();  <span class="comment">// 当前毫秒值</span>
System.exit();                <span class="comment">// 退出</span>
System.getProperties(); 
System.getProperty(<span class="string">"line.separator"</span>);
System.setProperty(key, <span class="keyword">value</span> ); <span class="comment">//给系统设置一些属性信息, 其他程序可以使用</span>
</pre></td></tr></table></figure>

<h1 id="java-lang-runtime">java.lang.Runtime</h1>
<p>每个Java应用都有一个Runtime类实例, 与其运行的环境相连接</p>
<blockquote>
<p>查API文档, 没有构造方法提要, 就是私有构造方法</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Runtime r = Runtime.getRunTime();
<span class="keyword">try</span> {
    Process p = r.exec(<span class="string">"*.exe"</span>);
} <span class="keyword">catch</span>( IOException e ){} <span class="comment">// 调用本地程序</span>
p.destroy();
</pre></td></tr></table></figure>

<h1 id="java-lang-math">java.lang.Math</h1>
<p>提供了数学方法, 是静态的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">ceil</span>();    <span class="comment">// 取上值</span>
<span class="built_in">floor</span>();   <span class="comment">// 取下值</span>
<span class="built_in">round</span>();   <span class="comment">// 四舍五入</span>
<span class="built_in">max</span>();
<span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">2</span>);     <span class="comment">// 三的二次方</span>
Math.<span class="built_in">random</span>() <span class="comment">// 0 到 1 的伪随机值</span>
Random r = new Random();
r.nextInt();
</pre></td></tr></table></figure>

<h1 id="java-util-date">java.util.Date</h1>
<blockquote>
<p>Date月份是由 0 到 11 表示</p>
</blockquote>
<ol>
<li><p>毫秒值 -&gt; 日期, 通过 <code>new Date(long time)</code> 完成  </p>
<p> 还可以通过 <code>setTime()</code> 设置.</p>
</li>
<li>日期对象 -&gt; 毫秒值 <code>getTime()</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">Date</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//当前日期和时间</span>

boolean after(<span class="built_in">Date</span> when);
boolean before(<span class="built_in">Date</span> when);
</pre></td></tr></table></figure>

</li>
</ol>
<p>从JDK1.1开始使用Calendar类实现日期和时间字段之间的转换,
使用DateFormat类来格式化和解析日期字符串.</p>
<h2 id="java-text-dateformat">java.text.DateFormat</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>// 日期 默认风格的日期
String myString = DateFormat<span class="preprocessor">.getDateInstance</span>()<span class="preprocessor">.format</span>(myDate)

// 日期 + 时间 默认风格的日期和时间
String myString = DateFormat<span class="preprocessor">.getDateTimeInstance</span>()<span class="preprocessor">.format</span>(myDate)

DateFormat<span class="preprocessor">.getDateInstance</span>(DateFormate<span class="preprocessor">.LONG</span>)<span class="comment">;</span>
DateFormat<span class="preprocessor">.getDateInstance</span>(DateFormate<span class="preprocessor">.MEDIUM</span>)<span class="comment">;</span>
DateFormat<span class="preprocessor">.getDateTimeInstance</span>(DateFormate<span class="preprocessor">.LONG</span>, DateFormate<span class="preprocessor">.LONG</span>)

// 自定义风格
new SimpleDateFormat(<span class="string">"yyyyMMdd"</span>)
</pre></td></tr></table></figure>

<h2 id="-">将日期格式的字符串 转成 日期对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">String</span> str_date = <span class="string">"2012-4-19"</span>;
DateFormat format = DateFormat.getDateInstance(DateFormat.<span class="built_in">LONG</span>);
<span class="built_in">Date</span> <span class="built_in">date</span> = format.parse(str_date);
</pre></td></tr></table></figure>

<h2 id="-">两个日期之间相隔多少天</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>long separatTime = **
<span class="built_in">Int</span> <span class="built_in">day</span> = separatTime/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>;
</pre></td></tr></table></figure>

<h1 id="java-util-calendar">java.util.Calendar</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Calendar c = Calendar<span class="preprocessor">.getInstance</span>()<span class="comment">;</span>

c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.YEAR</span>)<span class="comment">;</span>
c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.MONTH</span>)<span class="comment">;</span>
c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.DAY</span>_OF_MONTH)<span class="comment">;</span>

c<span class="preprocessor">.set</span>(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">19</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.YEAR</span>, <span class="number">2</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.MONTH</span>, <span class="number">2</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.DAY</span>_OF_MONTH, <span class="number">2</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[专题-内省]]></title>
    <link href="http://zhpooer.github.io/2014/04/12/%E4%B8%93%E9%A2%98-%E5%86%85%E7%9C%81/"/>
    <id>http://zhpooer.github.io/2014/04/12/专题-内省/</id>
    <published>2014-04-12T06:29:13.000Z</published>
    <updated>2014-04-12T07:03:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">内省</h1>
<ol>
<li><p>JavaBean和属性的概念</p>
<p> javaBean的特点</p>
<ol>
<li>必须由默认的构造方法</li>
<li>字段都是私有的</li>
<li>提供针对字段的 getter 或 setter 方法(属性)<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span>
   <span class="keyword">private</span> String name; <span class="comment">// 叫字段</span>
   <span class="keyword">public</span> String <span class="title">getName</span>(){}  <span class="comment">// 读属性</span>
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(String name){}  <span class="comment">//写属性</span>

   <span class="keyword">private</span> <span class="keyword">boolean</span> married;
   <span class="comment">//类似于  public boolean getMarried(){}</span>
   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMarried</span>(){}
   <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">setMarried</span>(){}
}
</pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>内省就通过getter和setter设置 JavaBean 的属性</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIt</span>() <span class="keyword">throws</span> Exception {
    Class&lt;?&gt; clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>);
    Person bean = (Person) clazz.newInstance();
    PropertyDescriptor pd1 = <span class="keyword">new</span> PropertyDescriptor(<span class="string">"name"</span>, clazz);
    Method m1 = pd1.getWriteMethod(); <span class="comment">// 获取name的写方法</span>
    m1.invoke(bean, <span class="string">"呵呵"</span>);

    Method m2 = pd1.getReadMethod();
    String name = (String)m2.invoke(bean, <span class="keyword">null</span>);
    
    System.out.println(name);
}

<span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span>() <span class="keyword">throws</span> Exception {
        Class&lt;?&gt; clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>);
    BeanInfo binfo = Introspector.getBeanInfo(clazz);
    PropertyDescriptor pds[] = binfo.getPropertyDescriptors();
    <span class="keyword">for</span>(PropertyDescriptor p : pds){
    	System.out.println(p.getName());
    }
}

<span class="javadoc">/**
ouput: 
呵呵
age
class
name
**/</span>
</pre></td></tr></table></figure>

<p>借助 org.apache.commons.beanutils.BeanUtils;</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Person p = (Person) clazz<span class="preprocessor">.newInstance</span>()<span class="comment">;</span>
BeanUtils<span class="preprocessor">.setProperty</span>(p, <span class="string">"name"</span>, <span class="string">"钟欣桐"</span>)<span class="comment">;</span>
BeanUtils<span class="preprocessor">.getProperty</span>(p, <span class="string">"name"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="内省" scheme="http://zhpooer.github.io/tags/%E5%86%85%E7%9C%81/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day10-reqeust&response]]></title>
    <link href="http://zhpooer.github.io/2014/04/12/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day10-reqeust&response/"/>
    <id>http://zhpooer.github.io/2014/04/12/传智播客day10-reqeust&response/</id>
    <published>2014-04-12T01:26:31.000Z</published>
    <updated>2014-04-15T00:58:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="httpservletresponse">HttpServletResponse</h1>
<ul>
<li>给客户处发出信息</li>
<li>由容器创建</li>
<li>response.getOutputStream 和 response.getWriter 如果没有手动关 系统会自动关</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="function">setStatus(int stauts)</span>; <span class="comment">// 输出响应码</span>
<span class="function">addHeader()</span>;
<span class="function">setHeader()</span>; <span class="comment">// 输出响应消息头</span>
</pre></td></tr></table></figure>

<h2 id="-">输出响应正文: 中文</h2>
<p>Response的字节流和字符流不能在一个Servlet中同时使用</p>
<h3 id="-">字节流输出</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>String data = <span class="string">"上海创智播客"</span><span class="comment">;</span>
ServletOutputStream <span class="keyword">out</span> = res<span class="preprocessor">.getOutputStream</span>()<span class="comment">;</span>
byte b[] = data<span class="preprocessor">.getBytes</span>()<span class="comment">; // 本地默认, Win:GBK, Linux:UTF-8</span>
// byte b[] = data<span class="preprocessor">.getBytes</span>(<span class="string">"utf-8"</span>)<span class="comment">;</span>
// 方式一
res<span class="preprocessor">.setHeader</span>(<span class="string">"Content-Type"</span>, <span class="string">"text/html;chaset=UTF-8"</span>)<span class="comment">;</span>

// 方式二
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;meta http-equiv='Content-Type' content='text/html;charset=UTF-8'&gt;"</span>)<span class="comment">; // meta 没有闭符号</span>

// 方式三
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>

<span class="keyword">out</span><span class="preprocessor">.write</span>(b)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="-">字符流输出</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>String s = <span class="string">"中文"</span>;
<span class="comment">// 方式一: 推荐</span>
res.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">// 通知程序</span>
res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>); <span class="comment">// 通知客户端</span>

<span class="comment">// 方式二: 只用这一句, 两个作用, 通知程序和客户端 </span>
res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);

PrintWriter <span class="keyword">out</span> = res.getWriter();
<span class="keyword">out</span>.write(s); <span class="comment">//默认编码是 iso-8859-1</span>
</pre></td></tr></table></figure>

<h2 id="-">中文文件的下载</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>String path = getServletContext()<span class="preprocessor">.getRealPath</span>(<span class="string">"/WEB-INF/classes/中文.jpg"</span>)<span class="comment">;</span>
String filename = path<span class="preprocessor">.substring</span>(path<span class="preprocessor">.lastIndexOf</span>(<span class="string">"//"</span>) + <span class="number">1</span>)<span class="comment">;</span>
// 重点!!!
res<span class="preprocessor">.setHeader</span>(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment:filename="</span> + URLEncoder<span class="preprocessor">.encode</span>(filename, <span class="string">"UTF-8"</span>)+<span class="string">".jpg"</span>)<span class="comment">;</span>
OutputStream <span class="keyword">out</span> = res<span class="preprocessor">.getOutputStream</span>()<span class="comment">;</span>
InputStream <span class="keyword">in</span> = new FileInputStream(path)<span class="comment">;</span>
byte b[] = new byte[<span class="number">1024</span>]<span class="comment">;</span>
int len = -<span class="number">1</span><span class="comment">;</span>
while((len=<span class="keyword">in</span><span class="preprocessor">.read</span>(b))!=-<span class="number">1</span>){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(b, <span class="number">0</span>, len)<span class="comment">;</span>
}
<span class="keyword">in</span><span class="preprocessor">.close</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">画验证码图片</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>int width = <span class="number">120</span><span class="comment">;</span>
int height = <span class="number">25</span><span class="comment">;</span>
BufferedImage img = new BufferedImage(width, height, BufferedImage<span class="preprocessor">.TYPE</span>_INT_RGB)<span class="comment">;</span>
// 画边框和背景
Graphics g = img<span class="preprocessor">.getGraphics</span>()<span class="comment">;</span>
g<span class="preprocessor">.setColor</span>(Color<span class="preprocessor">.BLUE</span>)<span class="comment">;</span>
g<span class="preprocessor">.drawRect</span>(<span class="number">0</span>, <span class="number">0</span>, width, height)<span class="comment">;</span>
g<span class="preprocessor">.setColor</span>(Color<span class="preprocessor">.YELLOW</span>)<span class="comment">;</span>
g<span class="preprocessor">.fillRect</span>(<span class="number">1</span>, <span class="number">1</span>, width-<span class="number">2</span>, height-<span class="number">2</span>)<span class="comment">;</span>

// 画干扰线
g<span class="preprocessor">.setColor</span>(Color<span class="preprocessor">.GRAY</span>)<span class="comment">;</span>
Random r = new Random()<span class="comment">;</span>
for( int i=<span class="number">0</span><span class="comment">;i&lt; 15; i++)</span>
	g<span class="preprocessor">.drawLine</span>(r<span class="preprocessor">.nextInt</span>(width), r<span class="preprocessor">.nextInt</span>(height), r<span class="preprocessor">.nextInt</span>(width), r<span class="preprocessor">.nextInt</span>(height))<span class="comment">;</span>
    
// 画验证码
g<span class="preprocessor">.setColor</span>(Color<span class="preprocessor">.RED</span>)<span class="comment">;</span>
g<span class="preprocessor">.setFont</span>(new Font( <span class="string">"宋体"</span>, Font<span class="preprocessor">.BOLD</span>|Font<span class="preprocessor">.ITALIC</span> , <span class="number">18</span>))<span class="comment">;</span>
int <span class="built_in">x</span> = <span class="number">18</span><span class="comment">;</span>
for (int i=<span class="number">0</span><span class="comment">; i&lt;4; i++){</span>
	g<span class="preprocessor">.drawString</span>(r<span class="preprocessor">.nextInt</span>(<span class="number">10</span>) + <span class="string">""</span>, <span class="built_in">x</span>, <span class="number">20</span>)<span class="comment">;</span>
	<span class="built_in">x</span> += <span class="number">22</span><span class="comment">;</span>
}

ImageIO<span class="preprocessor">.write</span>(img, <span class="string">"jpg"</span>, res<span class="preprocessor">.getOutputStream</span>())<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">// 让图片重新刷新</span>
<span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
   <span class="keyword">var</span> imgObj = document.getElementById(<span class="string">"img"</span>);
   imgObj.src = <span class="string">"/ResponseDemo?"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
}
</pre></td></tr></table></figure>

<h2 id="-">定时刷新</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>res.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">2</span>); <span class="comment">// 两秒刷新一次</span>
res.setHeader(<span class="string">"Refresh"</span>, <span class="string">"2;URL=/url"</span>); <span class="comment">// 两秒刷新到其他网页</span>
</pre></td></tr></table></figure>

<h2 id="-">控制资源的缓存时间</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
// 过期的时间 + 单位是毫秒
res<span class="preprocessor">.setDateHeader</span>(<span class="string">"Expires"</span>, System<span class="preprocessor">.currentTimeMillis</span>() + <span class="number">1</span>*<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>)<span class="comment">;//</span>
res<span class="preprocessor">.getWriter</span>()<span class="preprocessor">.write</span>(<span class="string">"我爱北京天安门"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="httpservletrequest">HttpServletRequest</h1>
<ul>
<li>获取客户端带给服务器的信息</li>
<li>由容器创建<h2 id="-">常用方法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>req<span class="preprocessor">.getRequestURL</span>()<span class="comment">;   // 协议+主机+资源地址</span>
req<span class="preprocessor">.getRequestURI</span>()<span class="comment">;   // 资源地址</span>
req<span class="preprocessor">.getQueryString</span>()<span class="comment">;    </span>
req<span class="preprocessor">.getRemoteAddr</span>()<span class="comment">;  // 来访者的IP</span>
req<span class="preprocessor">.getRemotePort</span>()<span class="comment">;  //来访者使用的端口</span>
req<span class="preprocessor">.getMethod</span>()<span class="comment">;     //请求方式</span>
req<span class="preprocessor">.getProtocol</span>()<span class="comment">;  //客户端使用的http协议版本</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">获取请求消息头</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

// 获取单一的消息头
<span class="keyword">out</span><span class="preprocessor">.println</span>( req<span class="preprocessor">.getHeader</span>(<span class="string">"Accept-Encoding"</span>) )<span class="comment">;</span>
// 获取重名的消息头值
Enumeration&lt;String&gt; em = req<span class="preprocessor">.getHeaders</span>(<span class="string">"Accept-Encoding"</span>)<span class="comment">;</span>
while(em<span class="preprocessor">.hasMoreElements</span>()){
	<span class="keyword">out</span><span class="preprocessor">.println</span>(em<span class="preprocessor">.nextElement</span>())<span class="comment">;</span>
}
// 获取请求消息头的内容
Enumeration&lt;String&gt; en = req<span class="preprocessor">.getHeaderNames</span>()<span class="comment">;</span>
while(en<span class="preprocessor">.hasMoreElements</span>()){
	<span class="keyword">out</span><span class="preprocessor">.println</span>( req<span class="preprocessor">.getHeader</span>(en<span class="preprocessor">.nextElement</span>()) )<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h2 id="-">获取客户端提交过来的请求参数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="comment">/* 根据之指定的名称获取请求参数 */</span>
<span class="comment">/*
* 没有对应的表单字段返回的是null
* 根据表单的输入域的name获取用户输入值
* 用户输入的都是字符串类型
*/</span>
req.getParameter(<span class="string">"username"</span>);

<span class="comment">/* 获取重名的请求 */</span>
<span class="built_in">String</span> ps[] = req.getParameterValues(<span class="string">""</span>);

<span class="comment">/* 获取表单中的所有请求参数 */</span>

<span class="comment">// 方法一:</span>
Enumeration&lt;<span class="built_in">String</span>&gt; names= req.getParameterNames();
<span class="keyword">while</span>(names.hasMoreElements()) {
    req.getParameterValues(names.nextElement());
}

<span class="comment">// 利用内省把数据封装到JavaBean, 前提是JavaBean中的属性名和表单中的字段名一样</span>
<span class="comment">// 方法二</span>
Person p = <span class="keyword">new</span> Person();
Enumeration&lt;<span class="built_in">String</span>&gt; names= req.getParameterNames();
<span class="keyword">while</span>(names.hasMoreElements()){
    <span class="built_in">String</span> paramName = names.nextElement();
	<span class="built_in">String</span>[] values = req.getParameterValues(paramName);
	<span class="comment">// 或用BeanUtils.setProperty(p, paramName, values);</span>
	PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(paramName, Person.class);
	Method m = pd.getWriteMethod();
	<span class="keyword">if</span>(values!=<span class="literal">null</span> && values.length() == <span class="number">1</span>){
	    m.invoke(pd, values);
	}<span class="keyword">else</span> {
	    <span class="comment">//m.invoke(pd, (Object)values); 或</span>
	    m.invoke(pd, <span class="keyword">new</span> <span class="built_in">Object</span>[] (values));
	}
}
<span class="comment">// 方法三</span>
Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; map = req.getParameterMap();
<span class="keyword">for</span>(Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; me: map.entrySet()){
    BeanUtils.setProperty(p, me.getKey(),me.getValue());
}

<span class="comment">// 方法四</span>
BeanUtils.populate(p, req.getParameterMap());
</pre></td></tr></table></figure>

<h3 id="-">各种表单输入域的获取</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/HelloServlet"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">value</span>=<span class="value">"436"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>姓名: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>密码 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span>/&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>性别 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"1"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>已婚 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"married"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>爱好 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobby"</span> <span class="attribute">value</span>=<span class="value">"eat"</span>/&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobby"</span> <span class="attribute">value</span>=<span class="value">"sleep"</span>/&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobby"</span> <span class="attribute">value</span>=<span class="value">"java"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span> 省份 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"province"</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"SH"</span>&gt;</span>上海 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"BJ"</span>&gt;</span>北京 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
                    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span> 简介 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"23"</span> <span class="attribute">name</span>=<span class="value">"description"</span>&gt;</span> <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span> <span class="attribute">colspan</span>=<span class="value">"2"</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>/&gt;</span>
                    <span class="comment">&lt;!-- &lt;input type="button" value="注册" onclick="regist()"/&gt; --&gt;</span>
                    <span class="comment">&lt;!-- &lt;input type="image" src="images/btn.png"/&gt; --&gt;</span>
                    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"reset"</span>/&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
        <span class="function"><span class="keyword">function</span> <span class="title">regist</span><span class="params">()</span>{</span>
            <span class="keyword">var</span> nameInput = document.getElementById(<span class="string">"name"</span>);
            <span class="keyword">if</span>(nameInput.value==<span class="string">""</span>){
                alert(<span class="string">"请输入正确名称"</span>);
                <span class="keyword">return</span> <span class="literal">false</span>;
            }
            document.forms[<span class="number">0</span>].submit();
        }
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Student {
   <span class="keyword">private</span> <span class="keyword">int</span> id;
   <span class="keyword">private</span> String name;
   <span class="keyword">private</span> String password;
   <span class="keyword">private</span> String gender;  <span class="comment">// 单选和多选如果没选传回服务器是null</span>
   <span class="keyword">private</span> boolean married;
   <span class="keyword">private</span> String[] hobby;
   <span class="keyword">private</span> String province;
   <span class="keyword">private</span> String descriptioin;
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(res, req){
    Student s = <span class="keyword">new</span> Student();
    BeanUtils.populate(s, request.getParameterMap());
}
</pre></td></tr></table></figure>

<p>input type=text 这样的输入域, 用户没有输入值, 服务器得到的是空字符串</p>
<p>type=radio/checkbox 用户没有输入值, 服务器得到的是null</p>
<h3 id="-">中文请求的转码</h3>
<p>浏览器以当前编码发送中文字符串到服务器,服务器默认会以 ISO8859-1 编码来解码</p>
<p>如果客户端按照get方式发送请求, 我们只能手工进行指定字符集编码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// 服务器以 IOS 解码, 所以重新取二进制编码</span>
<span class="built_in">String</span> str = req.getParameter(<span class="string">"username"</span>).getBytes(<span class="string">"ISO8859-1"</span>);
<span class="comment">// 再重新编码</span>
<span class="built_in">String</span> uname = <span class="keyword">new</span> <span class="built_in">String</span>(str, <span class="string">"utf-8"</span>);
</pre></td></tr></table></figure>

<p>如果客户端按照post方式发送请求, 设置请求对象的字符集</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>// 设置查询码表
req<span class="preprocessor">.setCharacterEncoding</span>(<span class="string">"utf-8"</span>)<span class="comment">;</span>
req<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="request-">request域对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">// Servlet1</span>
request.setAttribute(<span class="string">"p"</span>, <span class="string">"pp"</span>);

<span class="comment">// Servlet2, Servlet 必须进行请求转发</span>
request.getAttribute(<span class="string">"p"</span>);
</pre></td></tr></table></figure>

<h3 id="-">请求重定向</h3>
<ol>
<li>地址栏会变</li>
<li>发两次请求</li>
<li>跨服务器</li>
<li>会发 302, Location</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>// 方式一
res<span class="preprocessor">.setStatus</span>(<span class="number">302</span>)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Location"</span>, <span class="string">"www.sina.com"</span>)<span class="comment">;</span>
// 方式二
res<span class="preprocessor">.sendRedirect</span>(<span class="string">"www.sina.com"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="-">转发</h3>
<ol>
<li>服务器的行为</li>
<li>发一次请求</li>
<li>地址栏不变<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>req<span class="preprocessor">.setCharacterEncoding</span>(<span class="string">"utf-8"</span>)<span class="comment">;</span>
String userName = req<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
req<span class="preprocessor">.setAttribute</span>(<span class="string">""</span>, <span class="string">""</span>)<span class="comment">; // 传递参数</span>
// 获取RequestDispatcher, 用于实现请求转发
// 将数据进行向下传递
// 方式一: 转发的路径必须以斜线开头, <span class="string">"/"</span>
getServletContext()<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"/servleturl"</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">; // 内部转发</span>

// 方式二:  转发的路径可以以斜线开头, 可以不以斜线开头, 表示相对路径
req<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">""</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">请求包含</h2>
<p>RequestDispatcher: 请求分发器</p>
<ol>
<li>实现转发, 源 -&gt; 目标</li>
<li>实现包含, 目标 -&gt; 源<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">/* 运行结果: "我喜欢你"*/</span>
// Servlet1
response<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"我喜欢"</span>)
RequestDispatcher rd = request<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"Servlet2"</span>)<span class="comment">;</span>
rd<span class="preprocessor">.include</span>(req<span class="preprocessor">.res</span>)<span class="comment">;</span>

// Servlet2
response<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"你"</span>)
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-url-">各种URL地址的写法</h2>
<ul>
<li>相对路径 </li>
<li><p>绝对路径(开发中推荐), 拥抱变化, <code>/</code></p>
<p>  给服务器用的地址 斜线就代表当前应用. 给浏览器用的地址, 必须加上应用名称</p>
</li>
</ul>
<p>重定向: responst.sendRedirect()</p>
<p>转发: request.getRequestDispatcher()</p>
<p>超连接: <code>&lt;a ref=&quot;&quot;/&gt;</code></p>
<p>表单: <code>&lt;form action=&quot;&quot;/&gt;</code></p>
]]></content>
    
    
      <category term="servlet" scheme="http://zhpooer.github.io/tags/servlet/"/>
    
      <category term="ServletRequest" scheme="http://zhpooer.github.io/tags/ServletRequest/"/>
    
      <category term="ServletResponse" scheme="http://zhpooer.github.io/tags/ServletResponse/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java泛型]]></title>
    <link href="http://zhpooer.github.io/2014/04/11/java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://zhpooer.github.io/2014/04/11/java泛型/</id>
    <published>2014-04-11T12:28:59.000Z</published>
    <updated>2014-04-11T13:14:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">泛型入门</h1>
<p>Jdk1.5 出现安全机制.</p>
<p>好处:</p>
<ol>
<li>将运行时期的问题 ClasscastException 到了编译时期</li>
<li>避免了强制类型转换的麻烦</li>
</ol>
<p>什么时候用&lt;&gt;, 当操作的引用数据类型不确定的时候.就使用&lt;&gt;.
他表示一个用于接受具体引用数据类型的参数范围.</p>
<p>泛型即使是给编译器使用的技术, 用于编译时期, 确保了编译的安全.
运行时, 会将泛型去掉, 生成的class是不带泛型的, 称为泛型的擦除.</p>
<p>泛型的补偿: 运行时, 通过获取元素的类型进行转换动作,
不用进行强制转换.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">/** 泛型定义在类上 **/</span>
<span class="class"><span class="keyword">class</span> <span class="title">Tool</span>&lt;<span class="title">e1</span>, <span class="title">e2</span>&gt; {</span>
   <span class="comment">/** 泛型定义在方法上 **/</span>
   <span class="keyword">public</span> &lt;W&gt; <span class="keyword">void</span> show(W <span class="keyword">str</span>) {}

   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> method(T t) {}
}

<span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;{</span>
}

<span class="comment">/**泛型接口**/</span>
<span class="class"><span class="keyword">interface</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt;{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> show(T t)
}

<span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span>&lt;<span class="title">T</span>&gt; <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; {</span>}
</pre></td></tr></table></figure>

<h1 id="-">泛型的通配符号</h1>
<p>泛型的通配符: ?,代表未知类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;?&gt; al){}
</pre></td></tr></table></figure>

<h1 id="-">泛型的限定</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="javadoc">/**这里只能传Person类的对象**/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;Person&gt; al){}

<span class="javadoc">/**这里只可以传可以传Person类的子类对象  上限 **/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;? extends Person&gt; al){}

<span class="javadoc">/**这里只可以传可以传Person类的父类对象 下限 **/</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span>(Collection&lt;? <span class="keyword">super</span> Person&gt; al){}

class MyCollection&lt;E&gt;{
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span>(MyCollection&lt;? extends E&gt; e){}
}
<span class="javadoc">/** 当对集合中的元素进行取出操作时, 可以用下限 **/</span>
TreeSet(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="泛型" scheme="http://zhpooer.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java集合框架]]></title>
    <link href="http://zhpooer.github.io/2014/04/11/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://zhpooer.github.io/2014/04/11/java集合框架/</id>
    <published>2014-04-11T08:38:52.000Z</published>
    <updated>2014-04-11T14:16:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">集合初识</h1>
<p>集合类的由来:</p>
<blockquote>
<p>对象用于封装特有的数据, 对象多了需要存储, 如果对象不确定.
存储就使用集合容器进行</p>
</blockquote>
<p>集合特点:</p>
<ol>
<li>用于存储对象的容器</li>
<li>集合长度是可变的</li>
<li>集合不可存储基本数据类型</li>
</ol>
<p>集合体系的共同父类 <code>java.util.Collection</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>boolean <span class="function">add(E e)</span>;
boolean <span class="function">contains(Object o)</span>;
void <span class="function">clear()</span>
boolean <span class="function">containsAll(Collection&lt;?&gt; c)</span>;
boolean <span class="function">remove(Object o)</span>;
boolean <span class="function">removeAll(Collection&lt;?&gt; c)</span>;
int <span class="function">size()</span>;
Iterator&lt;E&gt; <span class="function">iterator()</span>; <span class="comment">// 迭代器</span>
boolean <span class="function">retainAll(Collection coll)</span>; <span class="comment">// 取交集</span>
<span class="tag">Object</span><span class="attr_selector">[]</span> <span class="function">toArray()</span>; <span class="comment">// 集合转数组</span>
</pre></td></tr></table></figure>

<h2 id="iterator">Iterator</h2>
<p>Iterator 对象必须依赖于具体容器, 因为每一个容器的数据结构都不同.
所以该迭代器对象在容器中进行内部实现的.
<strong>Iterator用法</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">for</span>(iterator <span class="keyword">it</span> = coll.iterator(); <span class="keyword">it</span>.hasNext();){
    <span class="keyword">it</span>.next();
}
</pre></td></tr></table></figure>

<h2 id="collection-">Collection 的继承结构图</h2>
<p><img src="/img/collections_hierachy.png" alt="Collection 的继承结构图"></p>
<h1 id="list-set">List 和 Set</h1>
<p>List 和 Set 都从 Collection 继承</p>
<p>List: 有序,元素有索引, 元素可以重复</p>
<p>Set: 元素不能重复, 无序</p>
<h2 id="java-util-list">java.util.List</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>void add(<span class="keyword">index</span>, element);
void add(<span class="keyword">index</span>, collection);

<span class="keyword">Object</span> remove(<span class="keyword">index</span>);
<span class="keyword">Object</span> <span class="keyword">set</span>(<span class="keyword">index</span>, element);

<span class="keyword">Object</span> get(<span class="keyword">index</span>);
int indexOf(<span class="keyword">object</span>);
int lastIndexOf(<span class="keyword">object</span>);
List subList(from, <span class="keyword">to</span>);
</pre></td></tr></table></figure>

<p>Iterator 接口在迭代过程中不能执行添加操作,
可以使用Iterator的子接口ListIterator进行操作.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ListIterator it = list<span class="preprocessor">.listIterator</span>()<span class="comment">;</span>
it<span class="preprocessor">.add</span>(<span class="string">"xx"</span>)<span class="comment">;</span>
it<span class="preprocessor">.previous</span>()<span class="comment">;</span>
it<span class="preprocessor">.hasPrevious</span>()<span class="comment">;//允许逆向便利</span>
</pre></td></tr></table></figure>

<h3 id="vector">Vector</h3>
<p>内部是是数组数据结构, 是线程安全的, 长度可变, 增删查询都慢</p>
<h3 id="arraylist">ArrayList</h3>
<p>内部是是数组数据结构, 是线程不同步的, 长度可变, 查询速度快</p>
<h3 id="linkedlist">LinkedList</h3>
<p>内部是链表, 是不同步的, 增删元素的速度快</p>
<h2 id="set">Set</h2>
<p>Set接口中的方法和 Collection 接口的方法一致</p>
<h3 id="hashset">HashSet</h3>
<p>内部数据结构是哈希表, 是不同步的</p>
<p>使用元素的hashCode方法来确定位置, 如果位置相同,
在通过元素的equals来确定是否相同.
所以在使用一个新类时要重写类的方法 <code>hashCode()</code> 和 <code>equals()</code></p>
<h4 id="linkedhashset">LinkedHashSet</h4>
<p>有序的HashSet</p>
<h3 id="treeset">TreeSet</h3>
<p>可以对Set集合中的元素进行排序(从小到大), 是不同步的.
存储在里面的元素必须实现 <code>java.lang.Comparable</code> 接口,
他根本不看哈希码, 他判断元素的唯一性, 是看比较结果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">import</span> java.util.Comparator;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span> {</span>
   <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span>(Object obj1, Object obj2){
       <span class="keyword">return</span> <span class="number">0</span>;
   }
}

ThreeSet ts = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> ComparatorByName());
</pre></td></tr></table></figure>

<h1 id="map">Map</h1>
<p>Map: 一次添加一对元素. Collection 一次添加一个元素.
Map集合中存储的是键值对, <strong>必须保证键的唯一性</strong>.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>void <span class="function">clear()</span>;

V <span class="function">put(K key, V value)</span>; <span class="comment">//返回前一个和key关联的值, 如果没为null</span>
V <span class="function">remove(K key)</span>; <span class="comment">// 删除键值对, 返回值</span>

boolean <span class="function">containsKey(key)</span>;
boolean <span class="function">containsValue(value)</span>;
boolean <span class="function">isEmpty()</span>;

value <span class="function">get(key)</span>; <span class="comment">// 如果没有则返回null</span>
int <span class="function">size()</span>;

Set <span class="function">keySet()</span>;
Set&lt;<span class="tag">Map</span><span class="class">.Entry</span>&gt; <span class="function">entrySet()</span>;
Collection&lt;V&gt; <span class="function">values()</span>;
</pre></td></tr></table></figure>

<h2 id="hashtable">Hashtable</h2>
<p>内部结构是哈希表, 是同步的, 不支持空键和空值.</p>
<blockquote>
<p>Properties: 用来存储键值对型的配置文件信息, 可以和IO技术结合</p>
</blockquote>
<h2 id="hashmap">HashMap</h2>
<p>内部结构是哈希表, 不是同步的. 允许空值和空键.</p>
<h2 id="treemap">TreeMap</h2>
<p>内部是二叉树, 不是同步的. 可以对Map中的键进行排序. </p>
<h2 id="linkedhashmap">LinkedHashMap</h2>
<p>有序的存储Map中的键</p>
<h1 id="-">集合框架工具</h1>
<h2 id="collections">Collections</h2>
<p>是集合框架的工具类, 里面的方法都是静态的.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>Collections<span class="built_in">.</span>sort(<span class="built_in">list</span>, comparator); <span class="comment">//对list集合进行指定顺序的排序</span>
Collections<span class="built_in">.</span>sort(<span class="built_in">list</span>); <span class="comment">//对list集合进行指定顺序的排序</span>
Collections<span class="built_in">.</span>swap(<span class="built_in">list</span>); <span class="comment">//对list位置进行交换</span>

Collections<span class="built_in">.</span>binarySearch(<span class="built_in">list</span>, comparator); <span class="comment">// 二分法查找, 必须先排序</span>
Collections<span class="built_in">.</span><span class="keyword">max</span>(<span class="built_in">set</span>);
Collections<span class="built_in">.</span><span class="keyword">min</span>(<span class="built_in">set</span>);

Collections<span class="built_in">.</span>reverseOrder(); <span class="comment">// 对排序进行逆转</span>
<span class="literal">new</span> TreeSet<span class="subst">&lt;</span>Sring<span class="subst">&gt;</span>(Collections<span class="built_in">.</span>reverseOrder());

Collections<span class="built_in">.</span>replaceAll(<span class="built_in">list</span>, old, <span class="literal">new</span>);
Collections<span class="built_in">.</span>reverse(<span class="built_in">list</span>);
Collections<span class="built_in">.</span>fill(<span class="built_in">list</span>, obj); <span class="comment">// 替换成所有同一个元素</span>

Collections<span class="built_in">.</span>shuffle(<span class="built_in">list</span>, obj); <span class="comment">// 乱序排序</span>

Collections<span class="built_in">.</span><span class="built_in">list</span>(enumeration); <span class="comment">// 转成Arraylist</span>

Collections<span class="built_in">.</span>synchronizedCollection(Collection<span class="subst">|</span><span class="built_in">Set</span><span class="subst">|</span><span class="built_in">Map</span>); <span class="comment">//返回一个同步的集合</span>
</pre></td></tr></table></figure>

<h2 id="arrays">Arrays</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>binarySearch();
copyOf();
copyOfRange();
fill();
equals(); <span class="comment">// 比较两个数组</span>
sort();
deepEquals();
toString(array);
<span class="javadoc">/** 如果数组中的元素是对象, 那么转成集合时, 直接将数组中的元素作为集合中的元素进行集合存储
** 如果数组中的元素是基本类型, 那么会将该数组作为集合中的元素进行存储
**/</span>
asList(array); <span class="comment">// 将一个数组转换成固定长度的List</span>
<span class="keyword">int</span> [] a = {<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>}
List&lt;<span class="keyword">int</span>[]&gt; x = Arrays.asList(a)
</pre></td></tr></table></figure>

<p>集合变数组</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 集合变成数组, 不能进行增删</span>
<span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>()
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"1"</span>)
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"2"</span>)
<span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"3"</span>)

<span class="built_in">String</span><span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup"> arr = list.toArray(new String</span><span class="preprocessor">[</span><span class="number">4</span><span class="preprocessor">]</span><span class="markup">) // </span><span class="preprocessor">[</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="built_in">null</span><span class="preprocessor">]</span><span class="markup"></span>
</pre></td></tr></table></figure>

<h1 id="-">静态导入</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>import static java<span class="preprocessor">.util</span><span class="preprocessor">.Collections</span>.*<span class="comment">; // 导入类中的静态成员</span>

impport static java<span class="preprocessor">.lang</span><span class="preprocessor">.System</span>.*<span class="comment">;</span>

<span class="keyword">out</span><span class="preprocessor">.println</span>(<span class="string">"hello world"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="集合" scheme="http://zhpooer.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java基本数据类型学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/11/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/11/java基本数据类型学习/</id>
    <published>2014-04-11T08:09:58.000Z</published>
    <updated>2014-04-11T08:36:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">基本数据类型对象包装类</h1>
<p>为了方便操作基本数据类型, 将其封装成了对象,
在对象中定义了属性和行为丰富了数据的操作.
用于描述该对象的类就称为基本数据包装类型.</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Char</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<h2 id="-">用法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">Integer</span><span class="built_in">.</span>parseInt(<span class="string">"123"</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>parseInt(<span class="string">"121"</span>, <span class="number">2</span>); <span class="comment">// 以2进制读取</span>
Boolean<span class="built_in">.</span>parseBoolean(<span class="string">"true"</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>MAX_VALUE;
<span class="built_in">Integer</span><span class="built_in">.</span>toBinaryString(<span class="subst">-</span><span class="number">6</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>toOctalString(<span class="subst">-</span><span class="number">6</span>);
<span class="built_in">Integer</span><span class="built_in">.</span>toString(<span class="number">60</span>, <span class="number">2</span>); <span class="comment">// 转换成2进制</span>
<span class="literal">new</span> <span class="built_in">Integer</span>(<span class="number">2</span>)<span class="built_in">.</span>intValue(); <span class="comment">// 转换成基本数据类型</span>
</pre></td></tr></table></figure>

<h2 id="-">自动装箱</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="built_in">Integer</span> x <span class="subst">=</span> <span class="number">129</span>;
<span class="built_in">Integer</span> y <span class="subst">=</span> <span class="number">129</span>;
println(x<span class="subst">==</span>y); <span class="comment">// false</span>
println(x<span class="built_in">.</span><span class="keyword">equals</span>(y)); <span class="comment">//true</span>

<span class="comment">// jdk1.5以后, 自动装箱如果是一个字节, 那么数据不会创建一个新的空间</span>
<span class="built_in">Integer</span> x <span class="subst">=</span> <span class="number">127</span>; 
<span class="built_in">Integer</span> y <span class="subst">=</span> <span class="number">127</span>;
println(x<span class="subst">==</span>y); <span class="comment">// true</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="基本数据类型" scheme="http://zhpooer.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[string类学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/11/string%E7%B1%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/11/string类学习/</id>
    <published>2014-04-11T06:34:24.000Z</published>
    <updated>2014-04-11T08:09:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">字符串初识</h1>
<ol>
<li><p>字符串是一个特殊的对象</p>
</li>
<li><p>字符串一旦初始化, 就不可以被改变</p>
<p> 字符串初始化在字符串常量池</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">String</span> s <span class="subst">=</span> <span class="string">"abc"</span>; <span class="comment">// 在常量池当中</span>
<span class="built_in">String</span> s1 <span class="subst">=</span> <span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>); <span class="comment">// 在堆内存中生成</span>
println(s<span class="subst">==</span>s1); <span class="comment">// false</span>
println(s<span class="built_in">.</span><span class="keyword">equals</span>(s1)); <span class="comment">// true</span>
</pre></td></tr></table></figure>
</li>
<li><p>字符串的构造</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>byte[] arr = {<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>};
<span class="keyword">new</span> <span class="built_in">String</span>(arr); <span class="comment">// ABCD</span>
<span class="keyword">new</span> <span class="built_in">String</span>({<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>});<span class="comment">// abcd</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">字符串方法</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre><span class="javadoc">/** 获取字符的长度 **/</span>
<span class="keyword">int</span> length(); 

<span class="javadoc">/** 根据位置获取字符 **/</span>
<span class="keyword">char</span> charAt(<span class="keyword">int</span> pos)

<span class="javadoc">/** 字符第一次出现位置
* 没有找到返回-1
**/</span>
<span class="keyword">int</span> indexOf(<span class="keyword">int</span> ch);
<span class="keyword">int</span> indexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex);
<span class="keyword">int</span> indexOf(String str, <span class="keyword">int</span> fromIndex);

<span class="keyword">int</span> lastIndexOf(<span class="keyword">int</span> ch);
<span class="keyword">int</span> lastIndexOf(<span class="keyword">int</span> ch, <span class="keyword">int</span> from Index);

<span class="comment">/* 获取部分子串 */</span>
String substring(<span class="keyword">int</span> beginIndex);
String substring(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex);

<span class="comment">/* 变成字符数组 */</span>
<span class="keyword">char</span>[] toCharArray();

<span class="comment">/* 变成Byte */</span>
<span class="keyword">byte</span>[] getBytes();

<span class="comment">/* 变大小写 */</span>
String toUpperCase();
String toLowerCase();

<span class="comment">/* 替换 */</span>
String replace(<span class="keyword">char</span> old, <span class="keyword">char</span> <span class="keyword">new</span>);
String replace(CharSequence old, CharSequence <span class="keyword">new</span>);

<span class="comment">/* 去掉前后空白字符 */</span>
String trim();

<span class="comment">/* 将字符串进行连接 */</span>
String concat(String str);

<span class="comment">/* valueOf */</span>
String.valueOf(<span class="number">4</span>); <span class="comment">// toString</span>

<span class="comment">/* 字符串比较 */</span>
<span class="keyword">boolean</span> equalsIgnoreCase(String str);
<span class="keyword">boolean</span> equals(Object obj);

<span class="comment">/* 是否包含 */</span>
<span class="keyword">boolean</span> contains();

<span class="comment">/* 是否指定开头和结尾 */</span>
<span class="keyword">boolean</span> endsWith(String s);
<span class="keyword">boolean</span> startsWith(String s);
</pre></td></tr></table></figure>

<h2 id="-">字符串切割</h2>
<blockquote>
<p>String [] split(String regex);</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">String</span> s = <span class="string">"a,b,c"</span>;
s.<span class="built_in">split</span>(<span class="string">","</span>)
</pre></td></tr></table></figure>

<h2 id="intern-">intern方法</h2>
<p>对字符串操作, 当返回常量池中的字符串, 如果常量池中没有, 就插入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">String</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>).intern();
<span class="comment">/* equals */</span>
<span class="built_in">String</span> = <span class="string">"abc"</span>;
</pre></td></tr></table></figure>

<h1 id="stringbuffer">StringBuffer</h1>
<p>StringBuffer 是字符串缓冲,用于存储数据的容器</p>
<ol>
<li>长度是可变的</li>
<li>可以存储不同类型的容器</li>
<li>最终转换成字符串</li>
<li>可对字符串进行修改, 可添加 <code>append(data)</code>,
可插入 <code>insert(pos, data)</code>, 删除 <code>delete(pos, pos)</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">//初始化一个长度为40的空间</span>
StringBuffer sb = <span class="built_in">new</span> StringBuffer(<span class="string">"40"</span>); 
sb.<span class="built_in">append</span><span class="number">(4</span>).<span class="built_in">append</span>(<span class="constant">false</span>).<span class="built_in">append</span>(<span class="string">"haha"</span>);
sb.insert<span class="number">(1</span>, <span class="string">"hehe"</span>);


StringBuffer sb = <span class="built_in">new</span> StringBuffer(<span class="string">"abc"</span>);
sb.insert<span class="number">(1</span>, <span class="string">"hehe"</span>); <span class="comment">// ahehebc</span>

sb.<span class="built_in">delete</span><span class="number">(1</span>,<span class="number"> 4</span>); <span class="comment">// abc</span>
sb.deleteCharAt<span class="number">(0</span>); <span class="comment">//bc</span>

<span class="comment">// 清空</span>
sb.<span class="built_in">delete</span><span class="number">(0</span>, sb.length());

<span class="comment">// 查找, 类似String</span>
<span class="comment">// 修改</span>
sb.replace<span class="number">(1</span><span class="number">,3</span>,<span class="string">"123"</span>);
sb.setCharAt<span class="number">(0</span>, <span class="string">'c'</span>);

sb.setLength<span class="number">(0</span>); <span class="comment">// 可清空缓冲区</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="stringbuilder">StringBuilder</h2>
<p>StringBuilder 和 StringBuffer 功能和用法一模一样,
StringBuffer 线程安全, StringBuilder 线程不安全,
单线程推荐使用 StringBuilder</p>
]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="String" scheme="http://zhpooer.github.io/tags/String/"/>
    
      <category term="StringBuffer" scheme="http://zhpooer.github.io/tags/StringBuffer/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/10/java%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/10/java线程学习/</id>
    <published>2014-04-10T12:14:27.000Z</published>
    <updated>2014-04-11T06:34:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-java-">运行java程序两个线程</h1>
<ol>
<li><p>执行main函数的线程
 该线程的任务代码都定义在main函数中</p>
</li>
<li><p>负责垃圾回收的线程, 调用 <code>System.gc()</code></p>
</li>
</ol>
<h1 id="-">多线程的创建方法</h1>
<ol>
<li><p>继承Thread</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> run(){
       <span class="comment">// Do some thing</span>
       <span class="comment">/* 获取线程的名称 Thread-编号
       * 在创建的同时已经给予编号
       */</span>
       getName();
       Thread.currentThread().getName(); <span class="comment">//当前运行线程的名称</span>
    }
}
Thread t = <span class="keyword">new</span> MyThread();
t.start(); <span class="comment">//开启线程</span>
</pre></td></tr></table></figure>
</li>
<li><p>实现runable接口</p>
<p> 好处: 1. 将线程任务从线程的子类中分离出来, 进行单独封装  </p>
<ol>
<li>避免单继承的局限性<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span>{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> run(){}
}
Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Demo());
t.start();
t.start(); <span class="comment">// 多次启动会报异常</span>
</pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h1 id="-">线程的生命周期</h1>
<ol>
<li>被创建 <code>new()</code></li>
<li>运行 <code>start()</code></li>
<li>消亡 <code>stop()</code> 或 等任务结束</li>
<li><p>冻结 <code>sleep()</code> 或 <code>wait()</code></p>
<p> <code>wait()</code>不占有锁, 使用<code>notify()</code>唤醒;
 <code>sleep()</code>占有锁, 自己唤醒.</p>
</li>
</ol>
<h1 id="-">线程安全</h1>
<p>产生的原因:</p>
<ol>
<li>多个线程在操作共享的数据</li>
<li>操作共享数据的线程代码有多条</li>
</ol>
<p>当一个线程在执行操作共享数据的多条代码的过程中,
其他线程参与了运算, 就会产生线程安全问题.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){<span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;}
</pre></td></tr></table></figure>

<h2 id="-">解决思路</h2>
<p>必须在当前代码执行完以后, 其他线程才能参与运算</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">synchronized</span> (<span class="keyword">this</span>) {
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<p>弊端: 降低了效率</p>
<p>前提: 多个线程在同步中必须使用同一个锁</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">private</span> obj = <span class="keyword">new</span> Object();
<span class="keyword">synchronized</span>(obj){
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<h3 id="-">同步函数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">if</span>(num&gt;<span class="number">0</span>) num++;
}
</pre></td></tr></table></figure>

<p>同步函数和和没有指定this对象同步锁, 锁定的是同一个对象this</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){} <span class="comment">// 锁定的对象是this.getClass()</span>
</pre></td></tr></table></figure>

<h2 id="-">单例下的多线程安全</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>class Single{
    <span class="keyword">private</span> <span class="keyword">static</span> Single s = <span class="keyword">null</span>;
    <span class="keyword">private</span> <span class="title">Single</span>(){}
    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(s==<span class="keyword">null</span>) s = <span class="keyword">new</span> Single();    <span class="comment">// 线程安全</span>
        <span class="keyword">return</span> s;
    }
    <span class="comment">// 解决方方法一: 写成同步函数</span>
    <span class="comment">// 解决方法二:</span>
    <span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(s==<span class="keyword">null</span>){  <span class="comment">// 解决效率问题</span>
            <span class="keyword">synchronized</span>(Single.class){  <span class="comment">// 解决线程安全问题</span>
                <span class="keyword">if</span>(s==<span class="keyword">null</span>) s = <span class="keyword">new</span> Single()
            }
        }
        <span class="keyword">return</span> s;
    }
}
</pre></td></tr></table></figure>

<h2 id="-">死锁</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">synchronized</span>(obj){
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">synchronized</span>(obj){
       <span class="keyword">synchronized</span>(<span class="keyword">this</span>){}
    }
}
</pre></td></tr></table></figure>

<h1 id="-">多线程通信</h1>
<p>多个线程在处理同一资源, 但是任务却不同.</p>
<h2 id="-">等待唤醒机制</h2>
<ol>
<li><code>wait()</code>: 让线程处于冻结状态, 被wait的线程会存储在线程池中.</li>
<li><code>notify()</code>: <em>唤醒线程池中的一个线程.</em></li>
<li><code>notifyAll()</code>: 唤醒线程池中的所有线程.</li>
</ol>
<p>这些方法必须定义在同步中,<br>因为这些方法是用于操作线程状态的方法.<br>必须要明确到底操作的是哪个锁上的线程. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">//Thread1:</span>
<span class="keyword">synchronized</span>(r){
    <span class="keyword">while</span>(flag) r.wait(); <span class="comment">//不能是if, 会出现数据错误</span>
    doSome();
    flag = <span class="keyword">true</span>;
    r.notifyAll();  <span class="comment">// 如果是用notify, 可能会阻塞</span>
}

<span class="comment">//Thread2:</span>
<span class="keyword">synchronized</span>(r){
    <span class="keyword">while</span>(!flag) r.wait();
    doSome();
    flag = <span class="keyword">false</span>;
    r.notifyAll(); 
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">//都必须捕捉</span>
try{
    <span class="function">wait()</span>;
    <span class="function">sleep()</span>;
}<span class="function">catch(InterruptedException e)</span> {}
</pre></td></tr></table></figure>

<h1 id="java-util-concurrency-locks-">java.util.concurrency.locks.*</h1>
<p>jdk1.5以后将同步和锁封装成了对象</p>
<p>Lock 替代了 synchronized 方法和语句, 可以加上多组监视器.</p>
<p>Condition 替代了 <code>notify()</code> 和 <code>wait()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// Lock是接口</span>
Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 互斥锁</span>

<span class="keyword">lock</span>.<span class="keyword">lock</span>();
<span class="keyword">try</span>{
  doSome();
} <span class="keyword">finally</span>{
    <span class="keyword">lock</span>.unlock();
}

Condition cond = <span class="keyword">lock</span>.newCondition();
cond.<span class="keyword">await</span>();
cond.singnal();
cond.singnalAll();
</pre></td></tr></table></figure>

<p>From API Referrence: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre>class BoundedBuffer {
   final Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();
   final Condition notFull  = <span class="keyword">lock</span>.newCondition(); 
   final Condition notEmpty = <span class="keyword">lock</span>.newCondition(); 

   final Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];
   <span class="keyword">int</span> putptr, takeptr, count;

   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span>(Object x) throws InterruptedException {
     <span class="keyword">lock</span>.<span class="keyword">lock</span>();
     <span class="keyword">try</span> {
       <span class="keyword">while</span> (count == items.length)
         notFull.<span class="keyword">await</span>();
       items[putptr] = x;
       <span class="keyword">if</span> (++putptr == items.length) putptr = <span class="number">0</span>;
       ++count;
       notEmpty.signal();
     } <span class="keyword">finally</span> {
       <span class="keyword">lock</span>.unlock();
     }
   }

   <span class="keyword">public</span> Object <span class="title">take</span>() throws InterruptedException {
     <span class="keyword">lock</span>.<span class="keyword">lock</span>();
     <span class="keyword">try</span> {
       <span class="keyword">while</span> (count == <span class="number">0</span>)
         notEmpty.<span class="keyword">await</span>();
       Object x = items[takeptr];
       <span class="keyword">if</span> (++takeptr == items.length) takeptr = <span class="number">0</span>;
       --count;
       notFull.signal();
       <span class="keyword">return</span> x;
     } <span class="keyword">finally</span> {
       <span class="keyword">lock</span>.unlock();
     }
   }
 }
</pre></td></tr></table></figure>

<h1 id="wait-sleep-">wait 和 sleep 的区别</h1>
<ol>
<li><p>wait可以指定时间也可以不指定, sleep必须指定时间</p>
</li>
<li><p>在同步中时, 对cpu的执行权和锁的处理不同.</p>
<p> wait: 释放执行权,释放锁
 sleep: 释放执行权, 不释放锁</p>
</li>
</ol>
<h1 id="-">停止线程的方法</h1>
<ol>
<li>调用 <code>stop()</code> <code>susppend()</code>方法, 已经过时, 由安全问题</li>
<li><p>等 <code>run()</code> 方法结束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// 控制, 但是线程处于冻结状态, 无法读取标志</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
    <span class="keyword">while</span>(flag){ doSome(); }
}
</pre></td></tr></table></figure>
</li>
<li><p>调用 <code>interrupt()</code>,让线程从冻结状态中强制恢复过来,<code>sleep()</code> 和 <code>wait()</code> 会抛出异常</p>
</li>
</ol>
<h1 id="-">守护线程</h1>
<p><code>thread.setDeamon(true)</code> 必须在启动线程钱调用, 当正在运行的
的线程都是守护线程时, java虚拟机退出.</p>
<h1 id="join">join</h1>
<p><code>thread.join()</code> 主线程等待<code>thread</code>线程终止, 再执行.</p>
<h1 id="-">线程其他设置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="javadoc">/**设置线程优先级**/</span>
thread.setPriority(THREAD.MAX_PRIORITY); <span class="comment">// 最大为10</span>

<span class="javadoc">/**设置线程组**/</span>
<span class="keyword">new</span> Thread(TreadGroup tg)
tg.interrupt();

<span class="comment">/* yield */</span>
thread.<span class="keyword">yield</span>(); <span class="comment">//暂时释放执行权</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="线程" scheme="http://zhpooer.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[testdisk 磁盘恢复总结]]></title>
    <link href="http://zhpooer.github.io/2014/04/10/testdisk-%E7%A3%81%E7%9B%98%E6%81%A2%E5%A4%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://zhpooer.github.io/2014/04/10/testdisk-磁盘恢复总结/</id>
    <published>2014-04-10T10:17:11.000Z</published>
    <updated>2014-04-10T10:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>上次手贱把移动硬盘里的磁盘全部格式化, 分区没了, 我X, 我所有的资料啊... 这该如何是好?不过根据经验磁盘里面的数据没有
被重写, So, 上天有好生之德, 赐予了我 TestDisk 来拯救于我水火之中. 膜拜写这个软件的前辈, 以及再次感叹Linux的工具集
的丰富.</p>
<p>下面是这个软件的介绍</p>
<blockquote>
<p>TestDisk可以解决一些因为分区的原因而造成数据无法访问的问题。该工具可以帮助你恢复丢失的分区，
让磁盘重新变得可以启动，整理分区表，恢复主引导记录，恢复引导扇区以及文件系统表，
可以从NTFS、FAT、exFAT和ext2类型的文件系统中恢复被删除的文件，
还能从已经删除了的NTFS、FAT、exFAT和ext2/3/4文件系统中拷贝文件。</p>
</blockquote>
<p>testdisk是一个Linux命令行工具, 我主要是用这个来恢复我丢失的分区, 但是因为分区表被重写,
所以需要花比较长的时间来扫描硬盘, 来找到原来的分区信息, 所以大家需要耐心ho.ho.
总之,他是一个比较很实用 简单的Linux工具.</p>
<p>至于要恢复被删除掉的文件, 就需要Testdist的孪生兄弟 PhotoRec 来帮忙了.</p>
<blockquote>
<p>如果你主要是想恢复视频、文档和归档类文件，你应该试试PhotoRec。
PhotoRec的优点在于它完全忽略了文件系统，只去搜寻底层的数据。
这表示如果设备损坏或者被重新格式化了PhotoRec仍然能工作。</p>
</blockquote>
<p>这个工具我没有用过, 不过他和testdisk都出自于同一个人之手,
估计也是灰常实用和简单的工具. 再次膜拜他!</p>
<p>最后, 打个广告, ~.~, 有哪个妹子需要我恢复数据的, <strong>朝我开枪吧.</strong></p>
]]></content>
    
    
      <category term="testdisk" scheme="http://zhpooer.github.io/tags/testdisk/"/>
    
      <category term="磁盘恢复" scheme="http://zhpooer.github.io/tags/%E7%A3%81%E7%9B%98%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day09-servlet]]></title>
    <link href="http://zhpooer.github.io/2014/04/10/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day09-servlet%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/04/10/传智播客day09-servlet入门/</id>
    <published>2014-04-10T00:33:53.000Z</published>
    <updated>2014-04-12T05:55:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="servlet">Servlet</h1>
<p>servlet是运行在服务器中的动态资源, 能接收用户的请求,发出响应.</p>
<h2 id="-servlet-">创建 Servlet 步骤</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast;
<span class="keyword">import</span> javax.servlet.*;
<span class="keyword">import</span> java.io.*;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> {</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span>(ServletRequest req, ServletRespons res)
                        <span class="keyword">throws</span> IOExcetpion, ServletException {
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">set</span> classpath=%classpath;c:\*.jar ; 在windows上
<span class="keyword">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:*.jar ; 在linux上
javac <span class="operator">-d</span> . HelloServlet.java
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="subst">&lt;</span>web<span class="attribute">-app</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>servlet<span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-name</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-name</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-class</span><span class="subst">&gt;</span><span class="literal">cn</span><span class="built_in">.</span>itcast<span class="built_in">.</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-class</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/servlet<span class="subst">&gt;</span>
    <span class="subst">&lt;</span>servlet<span class="attribute">-mapping</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>servlet<span class="attribute">-name</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/servlet<span class="attribute">-name</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>url<span class="attribute">-pattern</span><span class="subst">&gt;</span>HelloServlet<span class="subst">&lt;</span>/url<span class="attribute">-pattern</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/servlet<span class="attribute">-mapping</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>welcome<span class="attribute">-file</span><span class="attribute">-list</span><span class="subst">&gt;</span>
        <span class="subst">&lt;</span>welcome<span class="attribute">-file</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>/welcome<span class="attribute">-file</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/welcome<span class="attribute">-file</span><span class="attribute">-list</span><span class="subst">&gt;</span>
<span class="subst">&lt;</span>/web<span class="attribute">-app</span><span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet的生命周期</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> {</span>
   <span class="comment">//只实例化一次</span>
    <span class="keyword">public</span> <span class="title">HelloServlet</span>(){
         System.out.println(<span class="string">"调用了一次"</span>);
    }

    <span class="comment">//用户第一次访问</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(ServletConfig conf) <span class="keyword">throws</span> ServletException {
         System.out.println(<span class="string">"只调用了一次"</span>);
    }
    
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>(){
         System.out.println(<span class="string">"只调用了一次"</span>);
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span>(ServletRequest req, ServletRespons res)
                        <span class="keyword">throws</span> IOExcetpion, ServletException {
         System.out.println(<span class="string">"每次访问都调用"</span>);
    }
}
</pre></td></tr></table></figure>

<h2 id="-servlet-">编写servlet方法</h2>
<ol>
<li>编写类直接实现javax.servlet.Servlet接口</li>
<li>编写类直接继承javax.servlet.GernericServlet 接口</li>
<li><p>编写类直接继承javax.servlet.http.HttpServlet 接口</p>
<p> 原因: 服务端编程都是基于HTTP协议的</p>
<p> javax.servlet.*, javax.servlet.http.*, 一个具体包是实现了http协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">/*
* 建议不要重写service方法
* service(HttpServletRequest req, HttpServletResponse resp)
*/</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(HttpServletRequest res, HttpServletResponse req){}
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span>(HttpServletRequest res, HttpServletResponse req){}
     <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPut</span>(HttpServletRequest res, HttpServletResponse req){}
}
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="servlet-">servlet 的一些细节</h2>
<ol>
<li><p>一个servlet可以被映射到多个地址</p>
</li>
<li><p>servlet的映射可以使用通配符*
 方式一: 以*开头,以某些扩展名结尾 <code>*.do</code></p>
<p> 方式二: 以/开头, 以*结尾 <code>/test/*</code></p>
<p> 方式三: 匹配所有地址 <code>/*</code></p>
<p> 缺省: <code>/</code></p>
</li>
<li><p>如果用户的访问路径,在web.xml中由多个匹配情况下,按照以下原则优先级</p>
<ol>
<li>绝对匹配</li>
<li>以斜线开头的</li>
<li>以*开头的匹配路径</li>
</ol>
</li>
<li><p>用户的所有访问都经过servlet</p>
<p> 在tomcat/conf/web.xml下的配置中有一个 <code>/</code>,设置默认访问servlet</p>
</li>
</ol>
<h3 id="-">配置应用启动时就初始化的顺序</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet线程安全</h2>
<p>servlet在内存中只有一份和生命周期有关的</p>
<p>在servlet里面尽量不要使用实例变量, 使用局部变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">// 解决方法一, 不靠谱</span>
<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">goGet</span>()
</pre></td></tr></table></figure>

<h2 id="servlet-">servlet 核心继承图</h2>
<p><img src="/img/servlet_api.png" alt="sevlet核心继承图"></p>
<h2 id="servletconfig-">ServletConfig 详解</h2>
<p>ServletConfig 是由服务器产生的</p>
<h3 id="-servletconfig">获取 ServletConfig</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
     <span class="annotation">@Override</span>
     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(HttpServletRequest res, HttpServletResponse req){
         <span class="keyword">this</span>.getServletConfig();
     }
}
</pre></td></tr></table></figure>

<h3 id="-servletconfig">配置 ServletConfig</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">servlet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span> <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>name <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span> <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span> <span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">servlet</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>ServletConfig cfg = getServletConfig();
<span class="built_in">String</span> value = cfg.getInitParameter(<span class="string">"name"</span>); <span class="comment">//没有,返回Null</span>

Enumeration e = cfg.getInitParameterNames();
<span class="keyword">while</span>(e.hasMoreElements()) {
    <span class="built_in">String</span> paramName = (<span class="built_in">String</span>) e.nextElement();
}
</pre></td></tr></table></figure>

<h2 id="servletcontext">ServletContext</h2>
<ol>
<li><p>Servlet代表整个JavaWeb应用, 每个应用都会有一个唯一的 ServletContext
实例.</p>
</li>
<li><p>生命周期: 在应用被服务器加载时由容器完成创建, 和应用一同存在</p>
</li>
<li>获取Context的实例<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ServletConfig cfg = getServletConfig()<span class="comment">;</span>
ServletContext sc = cfg<span class="preprocessor">.getServletContext</span>()
// <span class="keyword">or</span> 
ServletContext sc = getServletContext()
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="servletcontext-">ServletContext应用</h3>
<p>多个Servlet可以通过ServletContext通讯,进行数据共享</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>&lt;web-app&gt;
    &lt;context-<span class="built_in">param</span>&gt;
        &lt;<span class="built_in">param</span>-name&gt; &lt;/<span class="built_in">param</span>-name&gt;
        &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt; &lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;
    &lt;/context-<span class="built_in">param</span>&gt;
    &lt;context-<span class="built_in">param</span>&gt;
        &lt;<span class="built_in">param</span>-name&gt; &lt;/<span class="built_in">param</span>-name&gt;
        &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt; &lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;
    &lt;/context-<span class="built_in">param</span>&gt;
&lt;/web-app&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>ServletContext sc = getServletContext()<span class="comment">;</span>
// 共享变量
sc<span class="preprocessor">.setAttribute</span>(<span class="string">"p"</span>, <span class="string">"p1"</span>)<span class="comment">;</span>
Object obj = sc<span class="preprocessor">.getAttribute</span>(<span class="string">"p"</span>)<span class="comment">;</span>

sc<span class="preprocessor">.removeAttribute</span>(<span class="string">"p"</span>)<span class="comment">;</span>
Enumeration em = sc<span class="preprocessor">.getAttributeNames</span>()<span class="comment">;</span>

//获取context-param
sc<span class="preprocessor">.getInitParameter</span>(<span class="string">"p"</span>)<span class="comment">;</span>
Enumeration em = sc<span class="preprocessor">.getInitParameterNames</span>()<span class="comment">;</span>

//servlet转发,只是服务器上的转发,客户端不知道
RequestDispatcher rd = sc<span class="preprocessor">.getRequestDispatcher</span>(<span class="string">"/servlet/ServletDemo"</span>)<span class="comment">;</span>
rd<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>域对象的概念: 域表示存活范围, 表示的是应用范围, 与生命周期有关</p>
<h4 id="servletcontext-">ServletContext 实现下载</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">//得到文件的输入流(利用ServletContext获取文件的真实存在路径)</span>
String realPath = getServletContext().getRealPath(<span class="string">"/.jpg"</span>); <span class="comment">// 必须一斜线开头</span>
InputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(realPath);
<span class="comment">//告知客户端以下载的方式打开</span>
res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment:filename=1.jpg"</span>);
<span class="comment">//利用response的字节流输出内</span>
<span class="keyword">out</span> = response.getOutputStream();
<span class="keyword">int</span> len = -<span class="number">1</span>;
<span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];
<span class="keyword">while</span>((len=<span class="keyword">in</span>.read(b))!=-<span class="number">1</span>){
    <span class="keyword">out</span>.write(b, <span class="number">0</span>, len);
}
<span class="comment">//关流</span>
<span class="keyword">in</span>.close();
<span class="keyword">out</span>.close();
</pre></td></tr></table></figure>

<h4 id="-servlet-">读取Servlet下的配置文件</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">//读取各种配置文件和方式</span>
String path = getServletContext.getRealPath(<span class="string">"/cfg.properties"</span>);
<span class="comment">// String path = getServletContext.getRealPath("/WEB-INF/classes/");</span>
InputStream inStream = <span class="keyword">new</span> FileInputStream(path);
Properties props = <span class="keyword">new</span> Properties();
props.load()

<span class="javadoc">/** 用Resourcebundle**/</span>
ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"cfg"</span>); <span class="comment">// 专门读取类路径下的文件.properties</span>
ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"cn.itcast.sc.cfg"</span>);

<span class="javadoc">/** 利用ClassLoader, 不适合加载太大的文件 **/</span>
ClassLoader cl = MyServlet.<span class="keyword">class</span>.getClassLoader();

cl.getResourceAsStream(<span class="string">"cn/itcast/sc/cfg.properties"</span>);
<span class="comment">// or URL path = cl.getResource("cn/itcast/sc/cfg.properties"); URL编码出现问题</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="servlet" scheme="http://zhpooer.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day08-web开发&tomcat]]></title>
    <link href="http://zhpooer.github.io/2014/04/09/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day08-web%E5%BC%80%E5%8F%91&tomcat/"/>
    <id>http://zhpooer.github.io/2014/04/09/传智播客day08-web开发&tomcat/</id>
    <published>2014-04-09T00:55:30.000Z</published>
    <updated>2014-04-12T05:56:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tips">Tips</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//带缓冲的输出流</span>
GZIPOutputStream gout = <span class="keyword">new</span> GZIPOutputStream(baos);
gout.<span class="keyword">write</span>(b);
baos.toByteArray();
</pre></td></tr></table></figure>

<h1 id="web-">web开发</h1>
<p>web资源: 静态web资源, 动态web资源</p>
<p>静态资源:  </p>
<ol>
<li>*.html</li>
<li>*.css</li>
<li>*.js</li>
<li>图片</li>
</ol>
<p>动态资源:  </p>
<ol>
<li>servlet</li>
<li>*.jsp</li>
</ol>
<h2 id="-">常见服务器</h2>
<p>WebLogic: Oracle公司产品, 支持JavaEE规范, 收费</p>
<p>WebShpereAS (Application Server): IBM, 支持JavaEE规范</p>
<p>JbossAS: redhat公司产品, 支持JavaEE规范</p>
<p>Tomcat: 轻量级, <em>只实现了 Servlet/JSP 规范</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>ServerSocket <span class="built_in">server</span> = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);
Socket client = <span class="built_in">server</span>.accept();
OutputStream out = client.getOutputStream();
InputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(<span class="string">""</span>);

<span class="built_in">int</span> <span class="built_in">len</span> = -<span class="number">1</span>;
byte b[] = <span class="keyword">new</span> byte[<span class="number">1024</span>];
<span class="keyword">while</span>((<span class="built_in">len</span> = <span class="keyword">in</span>.read(b)) != -<span class="number">1</span>) {
    out.write(b, <span class="number">0</span>, <span class="built_in">len</span>);
}
out.close();
<span class="built_in">server</span>.close();
<span class="keyword">in</span>.close();
</pre></td></tr></table></figure>

<h2 id="javaee-">JavaEE 规范</h2>
<p>是很多技术的总称, 有很多接口或抽象类组成, 如:<br>Servlet/JSP, JDBC, JNDI, JTA, JPA, JMS ...</p>
<p>我们按照规范的要求来开发web应用, 然后部署到服务器上运行</p>
<h1 id="tomcat-">Tomcat服务器</h1>
<table>
<thead>
<tr>
<th>Tomcat</th>
<th>servlet</th>
<th>j2ee版本</th>
<th>jdk版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>8.0</td>
<td>3.2</td>
<td>*</td>
<td>1.7</td>
</tr>
<tr>
<td>7.0</td>
<td>3.0</td>
<td>6.0</td>
<td>1.6</td>
</tr>
<tr>
<td>6.0</td>
<td>2.5</td>
<td>5.0</td>
<td>1.5</td>
</tr>
</tbody>
</table>
<p>启动成功后,访问 <a href="http://localhost:8080" target="_blank">http://localhost:8080</a></p>
<p>修改端口: server.xml</p>
<p>webapps目录存放开发的app应用</p>
<h2 id="web-">web应用的目录结构</h2>
<p><em>WEB-INF</em>: 放在web应用的根目录, 用户无法直接访问</p>
<p>classes: 在WEB-INFO下, 放class字节码文件</p>
<p>lib: 在WEB-INFO下, 放应用需要的jar包</p>
<p>web.xml: 在WEB-INFO下, 应用的配置文件</p>
<h3 id="-">存放类的地方</h3>
<ol>
<li>本应用的classes目录</li>
<li>本应用的lib中的jar包</li>
<li>Tomcat的lib目录</li>
</ol>
<p>按照123依次搜索</p>
<h3 id="-">发布</h3>
<ol>
<li>直接把应用目录放到 webapps 下</li>
<li>打包成war包, 放到webapps下 <code>jar -cvf</code></li>
</ol>
<h2 id="tomcat-">tomcat的组成结构</h2>
<h3 id="server-xml">server.xml</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Server</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Service</span>&gt;</span>
        <span class="tag">&lt;<span class="title">Connector</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">Connector</span>&gt;</span>
        <span class="tag">&lt;<span class="title">Engine</span>&gt;</span>
            <span class="tag">&lt;<span class="title">Host</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">Engine</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Service</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Server</span>&gt;</span>
</pre></td></tr></table></figure>

<p>用户的访问都是通过Tomcat连接器连接过来的,</p>
<p>tomcat应用管理这很多主机(Host)</p>
<p>每个主机管理着很多应用(Context)</p>
<h3 id="-context-">配置虚拟目录(Context)</h3>
<p>把任意目录配成Tomcat管理的应用</p>
<p>方式一: 弊端，需要重启</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Host</span>&gt;</span>
    <span class="comment">&lt;!-- path: 用户访问的应用目录了, 一般以/ 开头 --&gt;</span>
    <span class="comment">&lt;!-- doBase: 应用的真是存放目录 --&gt;</span>
    <span class="comment">&lt;!-- localhost/shit/1.html --&gt;</span>
    <span class="tag">&lt;<span class="title">Context</span> <span class="attribute">path</span>=<span class="value">"/shit"</span> <span class="attribute">docBase</span>=<span class="value">"E://"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
</pre></td></tr></table></figure>

<p>方式二: 推荐，优点不用重启</p>
<ol>
<li><p>新建SH.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"fullpath"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>放在 Tomcat_home/conf/localhost/SH.xml</p>
</li>
<li>访问 <a href="http://localhost/SH/*.html" target="_blank">http://localhost/SH/*.html</a></li>
</ol>
<p><strong> 实际开发中直接把文件拷贝到webapp目录 </strong></p>
<h3 id="-">配置虚拟主机主机</h3>
<p>虚拟主机：不同域名下的访问目录</p>
<ul>
<li>在Engine添加以下内容<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Host</span> <span class="attribute">name</span>=<span class="value">"www.google.com"</span> <span class="attribute">appBase</span>=<span class="value">"dir"</span>
      <span class="attribute">unpackWARS</span>=<span class="value">"true"</span> <span class="attribute">autoDeploy</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Context</span>&gt;</span> <span class="tag">&lt;/<span class="title">Context</span>&gt;</span>
<span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="-">配置默认应用, 默认主页, 默认端口</h3>
<p><code>http://localhost:8080/home/index.html</code> =&gt; <code>http://localhost</code></p>
<ol>
<li><p>修改端口</p>
<p> server.xml 8080 -&gt; 80</p>
</li>
<li><p>修改默认应用</p>
<ol>
<li><p>修改应用名称为ROOT</p>
</li>
<li><p>touch tomcat/conf/Catalina/localhost/ROOT.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0"?&gt;</span>
<span class="tag">&lt;<span class="title">Context</span> <span class="attribute">docBase</span>=<span class="value">"Myapp"</span>/&gt;</span>
</pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>修改应用默认主页
修改应用下的web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;welcome-<span class="type">file</span>-<span class="type">list</span>&gt;
    &lt;welcome-<span class="type">file</span>&gt;<span class="number">1.</span>html&lt;/welcome-<span class="type">file</span>&gt;
&lt;/welcome-<span class="type">file</span>-<span class="type">list</span>&gt;
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="http-">http协议</h1>
<ol>
<li>作用: 描述客户端和服务端的数据的传递的协议</li>
<li>全称: 超文本传输协议.</li>
<li><p>版本: 1.0, 1.1</p>
<p> 1.0: 连接 请求 响应 关闭, 无状态</p>
<p> 1.1: 连接 (请求 响应)*n 关闭</p>
</li>
</ol>
<h2 id="html-">html协议的组成</h2>
<h3 id="-">请求部分</h3>
<ul>
<li><p>请求消息行,位于请求部分第一行, 必须小于1KB, 如 <code>GET /  HTTP/1.1</code></p>
<p>  默认的请求方式是GET,常用的为GET POST HEAD OPTIONS</p>
<p>  URL: 协议+ip:端口+资源地址</p>
<p>  URI: 资源地址</p>
</li>
<li><p>请求消息头, 从第二行开始至第一个空行结束</p>
<p>  作用: 向服务器端传递一些附加信息</p>
<p>  形式: Header-Name: headervalue1, headerValue2</p>
<p>  Accept: 告知服务器, 浏览器能接受的MIME类型, 在<code>conf/web.xml</code>里面查看</p>
<p>  Accept-Charset: 告知服务器, 客户端能接受的字符集</p>
<p>  Accept-Encoding: 告知服务器, 客户端能接受的压缩编码</p>
<p>  Accept-Language: 告知服务器, 客户端能支持的语言</p>
<p>  Referer: 告知服务器, 当前页面是由哪一个页面转过来的.
  若用户是直接访问,就没有.</p>
<p>  Content-Type: 告知服务器,客户端提交的正文的MIME类型.默认是
  application/x-formdata-urlencode. 可以通过表单的form的enctype属性指定.
  可选值multipart/form-data(文件上传)</p>
<p>  If-Modified-Since: 告知服务器, 本地所缓存的资源的最后的修改时间</p>
<p>  User-Agent: 浏览器类型</p>
<p>  Content-Length: 请求正文的长度</p>
<p>  Connection: 需要持久连接</p>
<p>  Cookie: 向服务器发送cookie数据</p>
<p>  Date: 发送请求的时间</p>
</li>
<li><p>请求体, 从第一个空行到结束</p>
</li>
</ul>
<h3 id="-">响应部分</h3>
<ul>
<li><p>响应码, 如 <code>HTTP/1.1 200 OK</code></p>
<p>  状态码,说明了本次请求的结果状态</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>2xx</td>
<td>成功接受请求</td>
</tr>
<tr>
<td>200</td>
<td>成功</td>
</tr>
<tr>
<td>304</td>
<td>未修改</td>
</tr>
<tr>
<td>302</td>
<td>307: 临时重定向</td>
</tr>
<tr>
<td>404</td>
<td>访问的资源不存在</td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
</tr>
</tbody>
</table>
<ul>
<li><p>响应消息头,从第二行开始至第一个空行结束</p>
<p>  Location: 返回一个地址, 和302一起使用,实现请求重定向</p>
<p>  Server: 显示服务器类型</p>
<p>  Content-Encoding: 告知客户端,服务端的压缩格式</p>
<p>  Content-Length: 告知客户端,响应正文的内容长度</p>
<p>  Content-Type: 告知客户端,响应正文的MIME类型
  <code>Content-Type: text/html;charset=utf-8</code></p>
<p>  Last-Modified: 文件的最后修改时间, 节省带宽</p>
<p>  Refresh: 浏览器定时刷新时间</p>
<p>  Content-Disposition: 告知客户端, 以下载方式打开
  <code>Content-Disposition:attachment:filename=1.jpg</code></p>
<p>  Expire: -1<br>  Cache-Control:no-cache  (1.1)<br>  Progma:no-cache (1.0)  </p>
</li>
<li><p>响应正文, 从第一个空行到结束  </p>
</li>
</ul>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="web开发" scheme="http://zhpooer.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="tomcat" scheme="http://zhpooer.github.io/tags/tomcat/"/>
    
      <category term="http协议" scheme="http://zhpooer.github.io/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php基本语法]]></title>
    <link href="http://zhpooer.github.io/2014/04/07/php%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/04/07/php语法/</id>
    <published>2014-04-07T11:51:06.000Z</published>
    <updated>2014-04-10T05:51:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="php-">php语法</h1>
<h2 id="php-">php标签</h2>
<p>php是嵌入式语言，意味着代码的混编，为了区别，所以有四种标签</p>
<ul>
<li><p>两种标准标签</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>  `content` <span class="preprocessor">?&gt;</span></span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">“php"</span>&gt;</span><span class="javascript">
echo <span class="string">'php'</span>;
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>兼容标记<br>短标记,修改php配置,<code>open_short_tags=on</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?</span> <span class="keyword">echo</span> <span class="string">'h'</span>; <span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>asp标签风格, 修改配置 <code>aps_tags=on</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;% <span class="built_in">echo</span> <span class="string">'h'</span>;  %&gt;
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="html-php-">html模式和php模式</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span><span class="php"><span class="preprocessor">&lt;?</span> <span class="preprocessor">?&gt;</span></span><span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">语句结束符</h2>
<p>语句结束符是<code>;</code></p>
<blockquote>
<p><code>echo &quot;Yes&quot;;</code></p>
</blockquote>
<h2 id="-">注释</h2>
<ul>
<li>单行: <code>//</code> 或 <code>#</code></li>
<li>多行: <code>/**  **/</code></li>
</ul>
<h2 id="-zend">解释器zend</h2>
<blockquote>
<p>php是编译型语言和解释型语言</p>
</blockquote>
<p>流程: 读入源代码 -&gt; 词法分析 -&gt; 语法分析 -&gt; 生成opcode -&gt; 由zendEngine执行</p>
<h2 id="-">变量</h2>
<p><code>$</code> 不是变量的一部分,只是语法,使用变量用<code>$</code>来引用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$name</span> = <span class="string">'itcast'</span>;
<span class="keyword">echo</span> <span class="variable">$name</span>;
functioni name(){
}
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>

<h3 id="-">变量名</h3>
<p>定义语法, 由字母 下划线 数字 组成</p>
<blockquote>
<p>$student_name = &#39;&#39;</p>
</blockquote>
<h3 id="-">变量的操作</h3>
<ul>
<li>增加 <code>$name = &#39;itcast&#39;;</code></li>
<li>删除 <code>unset($name)</code></li>
</ul>
<h3 id="-">变量的赋值</h3>
<h4 id="-">值传递</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="variable">$var_name</span> = <span class="string">"value"</span>;
<span class="variable">$new_var_name</span> = <span class="variable">$var_name</span>;
<span class="variable">$var_name</span> = <span class="string">"change"</span>;
<span class="keyword">echo</span> <span class="variable">$new_var_name</span>;  <span class="comment">// value</span>
</pre></td></tr></table></figure>

<h4 id="-">引用传递</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="variable">$var_name</span> = <span class="string">"value"</span>;
<span class="variable">$new_var_name</span> = &<span class="variable">$var_name</span>;
<span class="variable">$new_var_name</span> = <span class="string">"change"</span>
<span class="keyword">echo</span> <span class="variable">$var_name</span>; <span class="comment">// change</span>
</pre></td></tr></table></figure>

<h3 id="-">可变变量</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="variable">$name</span> = <span class="string">"hello"</span>;
<span class="variable">$hello</span> = <span class="string">"itcast-php"</span>;
<span class="keyword">echo</span> <span class="variable">$$name</span> <span class="comment">//itcast-php</span>

<span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span> {</span>}
<span class="variable">$f_name</span> = <span class="string">'f1'</span>;
<span class="variable">$f_name</span>();
</pre></td></tr></table></figure>

<h2 id="-">常量</h2>
<figure class="highlight php:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">define</span></span>(<span class="string">'pai'</span>, <span class="number">3.1415926</span>);
echo pai;

<span class="class"><span class="keyword">define</span></span>(<span class="string">"-_-"</span>, <span class="string">"haha"</span>);
<span class="comment">// echo -_-, 非法</span>
echo constant(<span class="string">"-_-"</span>);
</pre></td></tr></table></figure>

<blockquote>
<p>Define(&#39;变量名&#39;,&#39;值&#39;,&#39;是否区分大小写&#39;) //0 区分, 1 不区分</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">defined</span>(<span class="string">"pai"</span>); <span class="regexp">//</span>常量是否被定义
</pre></td></tr></table></figure>

<h3 id="-">常量相关函数</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>get_defined_constants(); <span class="comment">//获取所有定义的常量</span>
<span class="comment">//预定义常量</span>
<span class="keyword">echo</span> PHP_OS;
<span class="keyword">echo</span> PHP_VERSION;
<span class="comment">//魔术常量</span>
<span class="keyword">echo</span> <span class="keyword">__FILE__</span>;  <span class="comment">//文件在的路径</span>
<span class="keyword">echo</span> <span class="keyword">__LINE__</span>;  <span class="comment">//当前行数</span>
<span class="keyword">echo</span> <span class="keyword">__DIR__</span>;  <span class="comment">//目录绝对地址</span>
</pre></td></tr></table></figure>

<h3 id="const-">const 定义</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">const</span> SOME = <span class="string">"some"</span>;
<span class="keyword">echo</span> SOME;
</pre></td></tr></table></figure>

<h3 id="-">数据类型</h3>
<p>php是弱类型语言,指变量没有类型之分,一个变量可以存储任意格式的数据,而数据是有类型之分的.</p>
<blockquote>
<p><code>var_dump()</code> 输出数据的值和类型</p>
</blockquote>
<ol>
<li><p>整型, int, integer<br>存储需求: 4byte, 32bit<br><code>PHP_INT_MAX</code> int最大值<br>如果再增加,会变为其他数据类型,<code>PHP_INT_MAX+1; //float()</code><br><code>echo time();</code> 获取时间戳
进制间转换, 16-hex, 10-Dec, 8-oct, 2-bin,
<code>hexdec(); deccbin(); decoct();</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$int1</span> = <span class="number">10</span>;
<span class="variable">$int2</span> = <span class="number">010</span>; <span class="regexp">//</span>进制
<span class="variable">$int3</span> = <span class="number">0x16</span>; <span class="regexp">//</span><span class="number">16</span>进制
</pre></td></tr></table></figure>
</li>
<li><p>浮点<br>php能存储精度为14位的有效数字, 理论最大值是1.8E308<br>不能相信浮点数的比较</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$f1</span> = <span class="number">1.23</span>*<span class="number">10</span>^<span class="number">10</span>;
<span class="variable">$f2</span> = <span class="number">1.23E10</span>;
<span class="variable">$f3</span> = <span class="number">1234E-10</span>;
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>布尔  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="char">$b</span>1 = <span class="keyword">true</span><span class="localvars">|flase|</span><span class="class">TRUR</span>|<span class="class">FALSE</span>;
</pre></td></tr></table></figure>
</li>
<li><p>字符串<br>定义方法: 单引号,双引号,heredoc,nowdoc(定界符)<br>单引号: 所有内容都当字符看待<br>双引号: 可以解析一切特殊的<br><code>chr(65)</code> 转成字符<br>heredoc: 定义复杂字符<br>nowdoc: 不可以解析变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$s1</span> = <span class="string">"itcast"</span>;
var_dump(<span class="variable">$s1</span>); <span class="comment">// String(6) "itcast"</span>

<span class="variable">$s2</span> = <span class="string">"hello, $s1"</span>;
<span class="variable">$s2</span> = <span class="string">"hello, ${s1}"</span>;
<span class="variable">$s3</span> = <span class="string">"\122"</span>; <span class="comment">// ascii</span>

<span class="comment">/* heredoc */</span>
<span class="variable">$s4</span> = <span class="string">&lt;&lt;&lt;END
$变量名
content0
END;</span>

<span class="comment">/* nowdoc */</span>
<span class="variable">$s4</span> = <span class="string">&lt;&lt;&lt;'END'
content
content0
END;</span>
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>数组<br>数据的组合, 数据的集合<br>一个元素也称为一个键值对, 键只能是整形和字符串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="php"><span class="preprocessor">&lt;?php</span>
<span class="variable">$a1</span> = <span class="keyword">array</span>(<span class="string">'key'</span> =&gt; <span class="string">'value'</span>, <span class="string">'key0'</span> =&gt; <span class="string">'value0'</span>);
<span class="keyword">echo</span> <span class="variable">$a1</span>[<span class="string">"key"</span>];

<span class="variable">$a2</span>[<span class="string">'new'</span>] = <span class="string">'new value'</span>;

<span class="variable">$a3</span> = <span class="keyword">array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);
<span class="keyword">echo</span> <span class="variable">$a3</span>[<span class="number">0</span>]; <span class="comment">// 'a'</span>
<span class="preprocessor">?&gt;</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>对象<br>一个对象可以保存多个值, 每个数据称之为属性.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="variable">$o1</span> = <span class="keyword">new</span> Stdclass();

<span class="variable">$o1</span>-&gt;name = <span class="string">"name"</span>;
<span class="variable">$o1</span>-&gt;age = <span class="number">22</span>;
<span class="variable">$o2</span>-&gt;gender=<span class="string">'male'</span>;

<span class="class"><span class="keyword">class</span> <span class="title">Stu</span>{</span>
    <span class="keyword">public</span> <span class="variable">$name</span>;
    <span class="keyword">public</span> <span class="variable">$age</span>;
    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addAge</span><span class="params">()</span>{</span>
        <span class="variable">$this</span>-&gt;age++;
    }
}
<span class="variable">$o2</span> = <span class="keyword">new</span> Stu;
<span class="variable">$o2</span>-&gt;addAge();
</pre></td></tr></table></figure>
</li>
<li><p>NULL<br>表示什么数据都没有<br>常见的输出Null, 只有一个值, 不区分大小写.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">echo</span> <span class="variable">$not_defined</span>;

<span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span>{</span>};
<span class="keyword">echo</span> f1();
</pre></td></tr></table></figure>
</li>
<li><p>资源<br>外部资源, 不能手动创建, 只能通过php内置函数得到.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>$link = mysql_connect(<span class="string">'127.0.0.1'</span><span class="keyword">...</span>);
var_dump($link);    // resource
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">类型转换</h2>
<ul>
<li><p>期望类型和得到类型不一致</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$cond</span> = <span class="number">1243</span>;
<span class="keyword">if</span>(<span class="variable">$cond</span>) {  <span class="regexp">//</span>转换为<span class="constant">True</span>
}
</pre></td></tr></table></figure>
</li>
<li><p>参与运算的不一致</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="variable">$s1</span> = <span class="string">"12abc"</span>;
<span class="variable">$i1</span> = <span class="number">23</span>;
<span class="keyword">echo</span> <span class="variable">$s1</span> + <span class="variable">$i1</span>; <span class="comment">// 12abc23</span>

<span class="variable">$cond1</span> = <span class="string">"abc"</span>; <span class="comment">// =&gt; 0</span>
<span class="variable">$cond2</span> = <span class="number">0</span>; 
<span class="keyword">echo</span> <span class="variable">$cond1</span> == <span class="variable">$cond2</span>; <span class="comment">//true</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p>转换的方式:</p>
<ol>
<li>php自己完成, 称之为自动类型转换<br>按照默认的行为完成</li>
<li><p>用户强制完成, 称之为强制类型转换  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>(<span class="keyword">bool</span>)<span class="string">'abc'</span>;
</pre></td></tr></table></figure>
</li>
<li><p>不同类型转换</p>
</li>
<li>布尔类型转换<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>&lt;?php
<span class="comment">// 只有空数组,0,null 转为false</span>
(<span class="keyword">bool</span>) <span class="string">'abce'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'0'</span>; <span class="comment">//false</span>
(<span class="keyword">bool</span>) <span class="string">'0.0'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'00'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) <span class="string">'null'</span>; <span class="comment">//true</span>
(<span class="keyword">bool</span>) array(); <span class="comment">//false</span>
(<span class="keyword">bool</span>) <span class="number">0.0</span> ; <span class="comment">//false</span>
(<span class="keyword">bool</span>) array(<span class="keyword">false</span>) ; <span class="comment">//true</span>
(<span class="keyword">bool</span>) array(<span class="keyword">null</span>) ; <span class="comment">//false</span>
?&gt;
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="-">类型和变量中常用的函数</h3>
<p><code>var_dump()</code> <code>unset()</code> <code>isset()</code> <code>empty()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="variable">$a</span> = array(<span class="string">'a'</span> =&gt; <span class="number">10</span>, <span class="number">20</span>);
var_dump(<span class="variable">$a</span>[<span class="number">0</span>]); <span class="regexp">//</span> <span class="number">20</span>
unset(<span class="variable">$a</span>[<span class="number">0</span>]);
var_dump(<span class="variable">$a</span>);

<span class="variable">$c</span> = <span class="constant">NULL</span>;
isset(<span class="variable">$c</span>); <span class="regexp">//</span> <span class="keyword">false</span>

empty(<span class="number">0</span>); <span class="regexp">//</span> null array() <span class="number">0</span>.<span class="number">0</span> <span class="string">''</span> <span class="string">'0'</span> ==&gt; <span class="keyword">true</span> (bool)反义词

is_array();
is_int(<span class="string">'10'</span>); <span class="regexp">//</span> <span class="keyword">true</span>
is_numeric(<span class="string">'10'</span>); <span class="regexp">//</span> <span class="keyword">true</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="php" scheme="http://zhpooer.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day07-junit&jdk5新特性]]></title>
    <link href="http://zhpooer.github.io/2014/04/07/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day07-junit&jdk5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://zhpooer.github.io/2014/04/07/传智播客day07-junit&jdk5新特性/</id>
    <published>2014-04-07T01:01:39.000Z</published>
    <updated>2014-04-12T05:50:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tips">Tips</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// propoties 的快捷方法</span>
ResourceBundle res = ResourceBundle.getBundle(<span class="string">"db"</span>); <span class="comment">//文件名为 db.prop</span>
res.getString(<span class="string">"user"</span>)
</pre></td></tr></table></figure>

<p>.properties 不支持中文。使用jdk工具字符串转码工具</p>
<blockquote>
<p>native2ascii</p>
</blockquote>
<h1 id="junit-">junit 使用</h1>
<ol>
<li>线程独立</li>
<li>测试方法<br>1.public<br>2.没有返回<br>3.方法不能有参数  </li>
<li>独立测试体，调用指定对象</li>
</ol>
<blockquote>
<p>类一般为Test结尾，如果类名没有以Test结尾，类继承TestCase类</p>
</blockquote>
<h1 id="-">泛型</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>val entrys = maps<span class="preprocessor">.entrySet</span>()<span class="comment">;</span>
entrys<span class="preprocessor">.iterator</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// T 不能是基本数据类型</span>
<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">print</span>(T [] arr){
    
}
</pre></td></tr></table></figure>

<h1 id="-">可变参数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span>(<span class="keyword">int</span>... <span class="keyword">params</span>) {

}
</pre></td></tr></table></figure>

<h1 id="for-">for循环</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> Arrays<span class="built_in">.</span>asList(arr);
for (<span class="built_in">String</span> str : <span class="built_in">list</span>) println(str); <span class="comment">// 实现的对象要实现 iterable 接口</span>
</pre></td></tr></table></figure>

<h1 id="-">枚举</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">enum</span> <span class="title">Role</span> {
    boss, manager, emp; <span class="comment">//私有构造类</span>
}
Role.values() <span class="comment">//返回对象数组</span>
</pre></td></tr></table></figure>

<h2 id="-">枚举的扩展</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">enum</span> Week {
   Mon(<span class="string">"星期一"</span>){<span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span>(){}}, Tue(<span class="string">"星期二"</span>);
   <span class="keyword">private</span> String week;

   <span class="keyword">private</span> <span class="title">Week</span>(String week) {
       <span class="keyword">this</span>.week = week;
   }
   <span class="comment">// getWeek(); setWeek();</span>
   
   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getName</span>();
}

Week.Mon.name();
Week.Mon.ordinal(); <span class="comment">//脚标，0</span>
</pre></td></tr></table></figure>

<h1 id="-">反射</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>Class clazz = Class<span class="preprocessor">.forName</span>(<span class="string">""</span>)<span class="comment">;</span>
Class clazz = ref<span class="preprocessor">.getClass</span>()<span class="comment">;</span>

// 字段
Object instance = clazz<span class="preprocessor">.newInstance</span>()<span class="comment">;</span>
Field field = clazz<span class="preprocessor">.getDeclaredField</span>(<span class="string">"field"</span>)<span class="comment">; // or getField() 获取public的字段</span>
field<span class="preprocessor">.setAccessible</span>(true)<span class="comment">; // private 变为 public</span>
field<span class="preprocessor">.set</span>(instance, <span class="string">"list"</span>)<span class="comment">;</span>

// 获取方法
Method m = clazz<span class="preprocessor">.getDeclaredMethod</span>(<span class="string">"print"</span>, String<span class="preprocessor">.class</span>)<span class="comment">; //方法的名字和方法的参数</span>
// <span class="keyword">or</span>  clazz<span class="preprocessor">.getDeclaredMethod</span>(<span class="string">"print"</span>, null)<span class="comment">;</span>
m<span class="preprocessor">.setAccessible</span>(true)<span class="comment">; // private to public</span>
m<span class="preprocessor">.invoke</span>(instance, <span class="string">"parameters"</span>)<span class="comment">;</span>

Constructor con = clazz<span class="preprocessor">.getConstructor</span>(String<span class="preprocessor">.class</span>, String<span class="preprocessor">.class</span>)<span class="comment">;</span>
con<span class="preprocessor">.newInstance</span>(<span class="string">""</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>用scala实现的调用的java反射</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="keyword">package</span> io.zhpooer.test

<span class="keyword">import</span> org.scalatest.FlatSpec
<span class="keyword">import</span> org.scalatest.matchers.ShouldMatchers
<span class="keyword">import</span> scala.beans.BeanProperty

<span class="class"><span class="keyword">class</span> <span class="title">Person</span> {</span>
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> name: String = _
  <span class="annotation">@BeanProperty</span> <span class="keyword">var</span> age: Int = _
  <span class="keyword">override</span> <span class="keyword">def</span> toString = name + <span class="string">", "</span> + age 
}

<span class="class"><span class="keyword">class</span> <span class="title">ReflectSpec</span> <span class="keyword">extends</span> <span class="title">FlatSpec</span> <span class="keyword">with</span> <span class="title">ShouldMatchers</span> {</span>
  it should <span class="string">"通过Java反射机制得到类的包名和类名"</span> in {
    <span class="keyword">val</span> p = <span class="keyword">new</span> Person;
    println(<span class="string">"包名字: "</span> + p.getClass().getPackage().getName())
    println(<span class="string">"类名: "</span> + p.getClass().getSimpleName())
    println(<span class="string">"完整类名: "</span> + p.getClass().getName())
  }

  it should <span class="string">"通过Java反射机制，用 Class 创建类对"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)

    clazz.newInstance() <span class="keyword">match</span> {
      <span class="keyword">case</span> p: Person =&gt;
        p.setAge(<span class="number">12</span>)
        p.setName(<span class="string">"lest"</span>)
        println(p)
    }
  }
  
  it should <span class="string">"通过Java反射机制，用 Field 设置属性"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)
    <span class="keyword">val</span> p = <span class="keyword">new</span> Person;
    p.setAge(<span class="number">12</span>);
    p.setName(<span class="string">"test"</span>)
    
    <span class="keyword">val</span> field = clazz.getDeclaredField(<span class="string">"name"</span>) 
    field.setAccessible(<span class="keyword">true</span>)
    field.set(p, <span class="string">"change"</span>)
    println(field.get(p) +  <span class="string">" "</span> + p)
  }
  
  it should <span class="string">"通过Java反射机制得到类的一些成员信息 方法等"</span> in {
    <span class="keyword">val</span> clazz = Class.forName(<span class="string">"io.zhpooer.test.Person"</span>)

    <span class="keyword">for</span> ( field &lt;- clazz.getDeclaredFields()) {
      println(field.getModifiers() + <span class="string">" "</span> + field.getName())
    }
    
    <span class="keyword">for</span> ( method &lt;- clazz.getDeclaredMethods()) {
      println(method.getModifiers() + <span class="string">" "</span> + method.getReturnType() + <span class="string">" "</span> + method.getName())
    }
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
  </entry>
  
</feed>
