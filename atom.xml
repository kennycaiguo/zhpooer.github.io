<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[Hello World]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-04-23T14:58:37.862Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[传智播客day18-大结果集和大数据处理]]></title>
    <link href="http://zhpooer.github.io/2014/04/23/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day18-%E5%A4%A7%E7%BB%93%E6%9E%9C%E9%9B%86%E5%92%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/04/23/传智播客day18-大结果集和大数据处理/</id>
    <published>2014-04-23T01:26:45.000Z</published>
    <updated>2014-04-23T08:56:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">大结果集分页</h1>
<ol>
<li>分页靠SQL支持, 不同数据库的分页语句是不通过的</li>
<li>MySQL 分页语句 <code>limit M,N</code><br><em>M: 开始记录的数据, 第一页的第一条索引是0</em><br><em>N: 每次取出多少条</em></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">-- 取第一页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit <span class="number">0</span>, <span class="number">10</span>;</span>
<span class="comment">-- 取第二页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit <span class="number">10</span>, <span class="number">10</span>;</span>
<span class="comment">-- 取第n页, 每次取10条</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer limit (n-<span class="number">1</span>)*<span class="number">10</span>, <span class="number">10</span>;</span>

<span class="comment">-- 总共的页数(每次取10条)</span>
<span class="comment">-- = 总记录条数%N==0?总记录条数/N:((总记录条数/N)+1)</span>
</pre></td></tr></table></figure>

<h2 id="-">对客户信息进行分页</h2>
<h3 id="-page-">新建Page类, 封装分页信息</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">// 专门封装与分页有关的数据</span>
<span class="keyword">public</span> <span class="keyword">class</span> Page{
    <span class="keyword">private</span> <span class="keyword">int</span> pageSize; <span class="comment">// 每页显示的记录条数</span>
    <span class="keyword">private</span> List recorder; <span class="comment">// 每页显示的记录          DAO</span>
    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;  <span class="comment">// 当前页码              用户传</span>
    <span class="keyword">private</span> <span class="keyword">int</span> totalPage;  <span class="comment">// 总共页码            计算</span>
    <span class="keyword">private</span> <span class="keyword">int</span> startIndex; <span class="comment">// 每页开始记录的索引    计算</span>
    <span class="keyword">private</span> <span class="keyword">int</span> totalRecords; <span class="comment">// 总记录的条数        Dao</span>

    <span class="keyword">public</span> <span class="title">Page</span>(intPageNum, <span class="keyword">int</span> totalRecords){
        <span class="keyword">this</span>.pageNum = pageNum;
        <span class="keyword">this</span>.totalRecords = totalRecords;

        <span class="keyword">this</span>.totalPage = totalRecords%pageSize==<span class="number">0</span>?totalRecords/pageSize:totalRecords/pageSize+<span class="number">1</span>;
        startIndex = (pageNum-<span class="number">1</span>)*pageSize;
    }
}
</pre></td></tr></table></figure>

<h3 id="-dao">改造接口DAO</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> CustomerDao {
    @Deprecated
    List&lt;Customer&gt; findAll();
    <span class="keyword">int</span> getTotalRecordsNum();
    List&lt;Customer&gt; findPageCustomers(<span class="keyword">int</span> offset, <span class="keyword">int</span> size);
}
<span class="comment">// 还要修改实现, SQL语句用 select * form ** where ** limit offset, size</span>
</pre></td></tr></table></figure>

<h3 id="-">改造业务代码</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> BusinessService{
    @Deprecated
    List&lt;Customer&gt; findAll();
    Page findPage(String pageNum)
}
<span class="keyword">public</span> <span class="keyword">class</span> BusinessServiceImpl{
    <span class="keyword">public</span> Page <span class="title">findPage</span>(String num) {
        <span class="keyword">int</span> pageNum = <span class="number">1</span>;
        <span class="keyword">if</span>(num!=<span class="keyword">null</span>){
            pageNum = Integer.parseInt(num);
        }
        <span class="keyword">int</span> totalRecords = dao.getTotalRecordsNum();
        Page page = <span class="keyword">new</span> Page(pageNum, totalRecords);
        List&lt;Customer&gt; records = dao.findPageCustomers(page.statedIndex, page.pageSize);
        page.setRecords(records);
        <span class="keyword">return</span> page;
    }
}
</pre></td></tr></table></figure>

<h3 id="-servlet">改造Servlet</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>private void showAllCustomer(){
   String num = request<span class="preprocessor">.getParameter</span>(<span class="string">"num"</span>)<span class="comment">;</span>
   Page page = s<span class="preprocessor">.findPage</span>(num)<span class="comment">;</span>
   request<span class="preprocessor">.setAttribute</span>(<span class="string">"page"</span>, page)<span class="comment">;</span>
   request<span class="preprocessor">.getRequestDispather</span>(<span class="string">"/listCustomer.jsp"</span>)<span class="preprocessor">.forward</span>(req, res)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h3 id="-jsp-">改造JSP显示页面</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre>&lt;c:<span class="keyword">if</span> test=<span class="string">"<span class="variable">${!empty page}</span>"</span>&gt;
    &lt;c:<span class="keyword">for</span>Each items=<span class="string">"page.records"</span> var=<span class="string">"c"</span> varStatus=<span class="string">"vs"</span>&gt;
    &lt;/c:<span class="keyword">for</span>Each&gt;
&lt;/c:<span class="keyword">if</span>&gt;

第<span class="variable">${page.pageNum}</span>页&nbsp;&nbsp; 共<span class="variable">${page.totalPage}</span>页

&lt;a href=<span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num=<span class="variable">${pageNum-1&lt;1?1:pageNum-1}</span>"</span>&gt;
&lt;/a&gt;
&lt;a href=<span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num=<span class="variable">${pageNum+1&gt;totalPage?totalPage:pageNum+1}</span>"</span>&gt;
&lt;/a&gt;
// 跳页 方式一
&lt;select id=<span class="string">"num"</span> name=<span class="string">"num"</span> onchange=<span class="string">"jump(this)"</span>&gt;
    &lt;c:foreach begin=<span class="string">"1"</span> end=<span class="string">"<span class="variable">${}</span>"</span> var=<span class="string">"i"</span>&gt;
        &lt;option value=<span class="string">"<span class="variable">${n}</span>"</span>&gt;<span class="variable">${n}</span>&lt;/option&gt;
    &lt;/c:foreach&gt;
&lt;/select&gt;
function jump(select){
   window.location.href = <span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num="</span> + select.value
}
// 跳页 方式二
&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> size=<span class="string">"3"</span> name=<span class="string">"num"</span> id=<span class="string">"num"</span> value=<span class="string">"<span class="variable">${page.Naum}</span>"</span> /&gt;&lt;a href=<span class="string">"javascript:jump()"</span>&gt;&lt;/a&gt;
function <span class="function"><span class="title">fump</span></span>(){
    var num = document.getElementsById(<span class="string">"num"</span>).value
    var regObj = /^[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$/
    <span class="keyword">if</span>(!regObj.test(num)) {
        alert(<span class="string">"请正确输入"</span>)
        <span class="keyword">return</span>;
    }
    <span class="keyword">if</span>(num&gt;<span class="variable">${page.totalPage}</span>){
        alert(<span class="string">"页码超出范围"</span>);
        <span class="keyword">return</span>;
    }
    window.location.href = <span class="string">"<span class="variable">${}</span>/servlet/Controller?op=showAllCustomers&num="</span> + num
}
</pre></td></tr></table></figure>

<h4 id="-">提取代码</h4>
<p><strong>可以用静态包含, 提取公共jsp代码, 来复用代码</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>&lt;%@ include file=<span class="string">""</span>%&gt;
<span class="keyword">public</span> <span class="keyword">class</span> Page {
    <span class="keyword">private</span> String url = <span class="string">""</span>; <span class="comment">// plus</span>
}
<span class="keyword">public</span> <span class="keyword">class</span> Controller {
    page.setUrl(<span class="string">""</span>);
}
<span class="string">"${}/servlet/Controller?op=showAllCustomers&num="</span> + num <span class="comment">// change to </span>
<span class="string">"${}${page.url}&num="</span> + num
</pre></td></tr></table></figure>

<h1 id="jdbc-lob-">JDBC 大数据(LOB)的存取</h1>
<h2 id="-clob-text-">大文本 CLOB(text)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t1(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    content longtext
)</span>
</pre></td></tr></table></figure>

<h3 id="-">存</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Statement stmt = conn.PreparedStatement(<span class="string">"insert into t1(id, content) value(?,?)"</span>);
stmt.setInt(<span class="number">1</span>, <span class="number">1</span>);
<span class="comment">// 使用字符输入流的形式, 提高效率</span>
File f = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);
Reader reader = <span class="keyword">new</span> FileReader(f);
<span class="comment">// 如果不强转, 会报错 说明一个问题MySQL驱动实现不支持  setCharacterStream(int, reader, long)</span>
<span class="comment">// 不支持 long, 数据库本身就不支持那么大的数据(最大4G)</span>
stmt.setCharacterStream(<span class="number">2</span>, f, (<span class="keyword">int</span>)f.length);
</pre></td></tr></table></figure>

<h3 id="-">取</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>stmt = conn.PreparedStatement(<span class="string">"select * from t1 where id=1"</span>);
stmt.excuteQuery();
<span class="keyword">if</span>(rs.next()){
   Reader reader = re.getCharacterStream(<span class="string">"content"</span>);
   Writer writer = new FileWriter(<span class="string">""</span>);
   <span class="keyword">...</span>
}
</pre></td></tr></table></figure>

<h2 id="-blob">大二进制数据 BLOB</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t1(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    content longblob
)</span>
</pre></td></tr></table></figure>

<p>存, 取同 CBLOB, 核心方法:</p>
<ul>
<li><code>stmt.setBinaryStream(2, InputStream, length)</code></li>
<li><code>stmt.getBinaryStream(2)</code></li>
</ul>
<h1 id="-">批处理</h1>
<p>把sql语句缓存起来, 一起发给数据库, 减少数据库访问次数, 提高效率</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t3 (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
)</span>
</pre></td></tr></table></figure>

<ul>
<li><p>Statement</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>Statement s1 = conn.createStatement();
String sql1 = "<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'aaa1'</span>)<span class="string">"
String sql2 = "</span><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">'aaa2'</span>)<span class="string">";
String sql3 = "</span><span class="keyword">delete</span> <span class="keyword">from</span> t3 <span class="keyword">where</span> id=<span class="number">1</span><span class="string">";
stmt.addBatch(sql1);
stmt.addBatch(sql2);
stmt.addBatch(sql3);
int ii[] = stmt.excuteBatch();  // 每条语句影响到的行数</span></span>
</pre></td></tr></table></figure>
</li>
<li><p>PreparedStatement</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>PreparedStatement stmt = conn<span class="preprocessor">.prepareStatement</span>(<span class="string">"insert into t3 values(?,?)"</span>)<span class="comment">;</span>
for(int i=<span class="number">1</span><span class="comment">; i&lt;=1000; i++) {</span>
   stmt<span class="preprocessor">.setInt</span>(<span class="number">1</span>, i)<span class="comment">;</span>
   stmt<span class="preprocessor">.setString</span>(<span class="number">2</span>, <span class="string">"aaa"</span> + i)<span class="comment">;</span>
   stmt<span class="preprocessor">.addBatch</span>()<span class="comment">;</span>
   // 把准备好的参数加入到缓存中: 如果数据量太大, 内存可能溢出. 解决方案: 分批次执行
   if(i%<span class="number">100</span>) {
      stmt<span class="preprocessor">.excuteBatch</span>()<span class="comment">;</span>
      stmt<span class="preprocessor">.clearBatch</span>()<span class="comment">;</span>
   }
}
stmt<span class="preprocessor">.excuteBatch</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">调用存储过程</h1>
<h2 id="-">存储过程简介</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-- 修改语句结束符号 ; =&gt; $$
delimiter $$
-- 创建一个存储过程, 名字为 demoSp,
--- 括号里面是参数, 形式: <span class="keyword">in</span>|<span class="keyword">out</span>|inout(输入或输出) 参数名字 参数类型
<span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">demoSp</span><span class="params">(<span class="keyword">In</span> inputParam varchar(255)</span>, <span class="title">inout</span> <span class="title">inOutParam</span> <span class="title">varchar</span><span class="params">(255)</span>)
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">concat</span><span class="params">(<span class="string">'welcome to:'</span>, inputParam)</span> <span class="title">into</span> <span class="title">inOutParam</span>;</span>
<span class="keyword">end</span>

delimiter ;
</pre></td></tr></table></figure>

<h2 id="jdbc-">jdbc 调用存储过程</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>Connection conn = JdbcUtil<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
// 获取执行存储过程的对象
CallableStatement stmt = conn<span class="preprocessor">.prepareCall</span>(<span class="string">"{call demoSp(?,?)}"</span>)<span class="comment">;;</span>
// 设置参数, 输入参数要给一个值, 输出参数注册SQL数据类型
// 输入参数要给一个值
stmt<span class="preprocessor">.setString</span>(<span class="number">1</span>, <span class="string">"hch"</span>)
stmt<span class="preprocessor">.registerOutParameter</span>(s, java<span class="preprocessor">.sql</span><span class="preprocessor">.Types</span><span class="preprocessor">.VARCHAR</span>)<span class="comment">;</span>

// 执行
stmt<span class="preprocessor">.excute</span>()<span class="comment">; // 这里不能使用结果集</span>
String result = stmt<span class="preprocessor">.getString</span>(<span class="number">2</span>)<span class="comment">; // 取位置为2的那个结果</span>
</pre></td></tr></table></figure>

<h1 id="-">事务入门 (数据安全)</h1>
<p>TPL: 事务(Transaction)处理语言</p>
<p>数据库有可能是自动提交事务的,(MySQL就是自动提交事务的),
每一条语句都是一个事务</p>
<ul>
<li><code>start Transaction</code>: 开启事务</li>
<li><code>rollback</code>: 回滚, 回到最开始的地方</li>
<li><code>commit</code>: 提交, 永久存储到硬盘上</li>
</ul>
<h2 id="jdbc-">JDBC 操作事务</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>try {
    Connection conn = JdbcUtil<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.setAutoCommit</span>(false)<span class="comment">;</span>
    PreparedStatement stmt = conn<span class="preprocessor">.prepareStatement</span>(<span class="string">""</span>)
    stmt<span class="preprocessor">.excuteUpdate</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.commit</span>()<span class="comment">;</span>
    conn<span class="preprocessor">.setAutoCommit</span>(true)<span class="comment">; // 恢复现场</span>
} finally{
   conn<span class="preprocessor">.rollback</span>()<span class="comment">;</span>
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="jdbc" scheme="http://zhpooer.github.io/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day17-案例客户管理系统]]></title>
    <link href="http://zhpooer.github.io/2014/04/22/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day17-%E6%A1%88%E4%BE%8B%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhpooer.github.io/2014/04/22/传智播客day17-案例客户管理系统/</id>
    <published>2014-04-22T07:41:49.000Z</published>
    <updated>2014-04-23T02:43:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">客户信息管理系统</h1>
<p>用之前所学完成一个对单表的CRUD JavaWeb 项目</p>
<h2 id="-">项目需求</h2>
<p><img src="/img/day17_demo2.png" alt="项目需求"></p>
<h2 id="-jar-">搭建开发环境, 写配置文件, Jar包</h2>
<h2 id="-javabean">写 Javabean</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>package cn.itcast.domain
<span class="keyword">public</span> <span class="keyword">class</span> Customer {
    <span class="keyword">private</span> String id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String gender;  <span class="comment">// 数据库中 1男,0女</span>
    <span class="keyword">private</span> Date birthday;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String cellphone; 
    <span class="keyword">private</span> String hobby; <span class="comment">// 爱好: 吃饭,睡觉,学Java</span>
    <span class="keyword">private</span> String type; <span class="comment">// 客户类型, 普通客户 vip</span>
    <span class="keyword">private</span> String description;
}
</pre></td></tr></table></figure>

<h2 id="-">建数据库表</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> customer (
    id <span class="keyword">varchar</span>(<span class="number">100</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    gender <span class="keyword">varchar</span>(<span class="number">10</span>),
    birthday <span class="keyword">date</span>,
    cellphone <span class="keyword">varchar</span>(<span class="number">100</span>),
    email <span class="keyword">varchar</span>(<span class="number">100</span>),
    hobby <span class="keyword">varchar</span>(<span class="number">100</span>),
    type <span class="keyword">varchar</span>(<span class="number">100</span>),
    description <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
</pre></td></tr></table></figure>

<h2 id="-">业务接口</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.service
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessService</span> {</span>
    List&lt;Customer&gt; findAll();
    <span class="keyword">void</span> addCustomer(Customer c);
    <span class="keyword">void</span> delCustomer(String customerId);
    Customer findCustomerById(String customerId);
    <span class="comment">// 如果传入 id 为 null, 抛出此异常</span>
    <span class="keyword">void</span> updateCustomer(Customer c) <span class="keyword">throws</span> CustomerIdConnotBeEmpty;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.exception
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerIdConnotBeEmpty</span> <span class="keyword">extends</span> <span class="title">Exception</span>{</span> }
</pre></td></tr></table></figure>

<h3 id="-">业务实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">package</span> cn.itcast.service.impl;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessServiceImpl</span> {</span>
    Customer dao = <span class="keyword">new</span> CustomerDaoImpl()
    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span>(){
        <span class="keyword">return</span> dao.findAll();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span>(Customer c){
        c.setId(UUID.randomUUID().toString());
        dao.save(c);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delCustomer</span>(String customerId){
         dao.delete(customerId);
    }
    <span class="keyword">public</span> Customer <span class="title">findCustomerById</span>(String customerId){
        dao.findById(customerId);
    }
    <span class="comment">// 如果传入 id 为 null, 抛出此异常</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span>(Customer c) <span class="keyword">throws</span> CustomerIdConnotBeEmpty{
         <span class="keyword">if</span>(c.getId()==<span class="keyword">null</span>) {
             <span class="keyword">throw</span> <span class="keyword">new</span> CustomerIdConnotBeEmpty(<span class="string">"参数有误"</span>);
         }
         dao.update(c);
    }
}
</pre></td></tr></table></figure>

<h2 id="dao-">Dao接口</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">interface</span> CustomerDao {
    List&lt;Customer&gt; findAll();
    <span class="keyword">void</span> save(Customer c);
    <span class="keyword">void</span> findById(String customerId);
    <span class="keyword">void</span> delete(String customerId);
    <span class="keyword">void</span> update(Customer c);
}
</pre></td></tr></table></figure>

<h3 id="customerdaoimpl-">CustomerDaoImpl 实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="code"><pre><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span>(){
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    ResultSet rs = <span class="keyword">null</span>
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement();
        re = stmt.excuteQuery();
        List&lt;Customer&gt; cs = <span class="keyword">new</span> ArrayList&lt;Customer&gt;();
        <span class="keyword">while</span>(rs.next()){
            Customer c = <span class="keyword">new</span> Customer();
            c.setId(r.getString(<span class="string">"id"</span>));
            cs.add(c);
        }
        <span class="keyword">return</span> cs;
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(Customer c) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getId());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(String customerId) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getId());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span>(String customerId) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    ResultSet rs = <span class="keyword">null</span>
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        re = stmt.excuteQuery();
        <span class="keyword">while</span>(rs.next()){
            Customer c = <span class="keyword">new</span> Customer();
            c.setId(r.getString(<span class="string">"id"</span>));
            <span class="keyword">return</span> c;
        }
        <span class="keyword">return</span> <span class="keyword">null</span>;
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(Customer c) {
    Connection conn = <span class="keyword">null</span>;
    PreparedStatement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.PreparedStatement(<span class="string">""</span>);
        stmt.setString(<span class="number">1</span>, c.getName());
        re = stmt.excuteUpdate();
    } <span class="keyword">catch</span> (e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
    } <span class="keyword">finally</span> {
        JdbcUtil.release(rs, stmt, conn);
    }
}
</pre></td></tr></table></figure>

<h3 id="-service-">测试Service实现</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessServiceImplTest</span> {</span>
    <span class="keyword">public</span> BusinessService s = <span class="keyword">new</span> BusinessServiceImpl();
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddCustomer</span>() {
        Customer c = <span class="keyword">new</span> Customer();
        c.setId(<span class="string">"aaa"</span>);
        c.setName(<span class="string">"xxx"</span>);
        c.setGender(<span class="string">"1"</span>);
        c.setBirthday(<span class="keyword">new</span> Date());
        c.setEmail(<span class="string">"zhpo@gmai.com"</span>);
        c.setHobby(<span class="string">"学习 吃饭"</span>);
        c.setType(<span class="string">"vip"</span>);
        c.setDescription(<span class="string">"xxx"</span>);
        s.addCustomer(c);
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span>() {
        List&lt;Customer&gt; cs = s.findAll();
        assertEquals(<span class="number">2</span>, cs.size());
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCustomerById</span>() {
       Customer c = s.findCustomerById(<span class="string">"****"</span>);
       assertNotNull(c);
    }
    <span class="annotation">@Test</span>(expected=CustomerIdConnotBeEmpty.class)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span>() {
        Customer c = <span class="keyword">new</span> Customer();
        c.updateCustomer();
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer1</span>() {
        Customer c = s.findCustomerById(<span class="string">"aaa"</span>);
        c.setName(<span class="string">"xxx"</span>);
        c.setGender(<span class="string">"0"</span>);
        s.updateCustomer(c);
    }
    <span class="annotation">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelCustomer</span>() {
        s.delCustomer(<span class="string">"xx"</span>);
    }
}
</pre></td></tr></table></figure>

<h2 id="-">表现层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(){
        req.setCharactorEncoding(<span class="string">"utf-8"</span>);
        res.setContentType(<span class="string">"text/html;charset=utf-8"</span>);
        String op = req.getParameter(<span class="string">"op"</span>);
        <span class="keyword">if</span>(<span class="string">"showAllCustomer"</span>.equals(op)) {
            showAllCustomers(req, res);
        }<span class="keyword">if</span>(<span class="string">"addCustomer"</span>.equals(op)) {
            addCustomer(req, res);
        }
        
    }
    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showAllCustomers</span>(){
         List&lt;Customer&gt; cs = s findAll();
         req.setAttribute(<span class="string">"cs"</span>, cs);
         req.setRequestDispather(<span class="string">"ListCustomers.jsp"</span>);
    }
 
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">jsp:forward</span> <span class="attribute">page</span>=<span class="value">"/servlet/Controller"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">jsp:param</span> <span class="attribute">value</span>=<span class="value">"showAllCustomer"</span> <span class="attribute">name</span>=<span class="value">"op"</span>&gt;</span> <span class="tag">&lt;/<span class="title">jsp:param</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">jsp:forward</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre>// ListCustomers.jsp
<span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="class">.odd</span><span class="rules">{
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#c3f3c3</span></span></span>;
    <span class="rule">}</span></span>
    <span class="class">.even</span><span class="rules">{
       <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f3c3f3</span></span></span>;
    <span class="rule">}</span></span>
    <span class="tag">body</span><span class="rules">{
       <span class="rule"><span class="attribute">text-align </span>:<span class="value"> center</span></span>;
       <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">12</span>px
    </span></span></span>}
    <span class="tag">table</span> <span class="rules">{
       <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">12</span>px
    </span></span></span>}
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"${pageContext.request.contextPath}/addCustomer.jsp"</span>&gt;</span>添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${empty cs}"</span>&gt;</span>
   没有客户信息
<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">"${!empty cs}"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span>&gt;</span>
       <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 选择 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span>出生日期 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 爱好 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 类型 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 描述 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
           <span class="tag">&lt;<span class="title">th</span>&gt;</span> 操作 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
       <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"${cs}"</span> <span class="attribute">var</span>=<span class="value">"c"</span> <span class="attribute">varStatus</span>=<span class="value">"vs"</span>&gt;</span>
           <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"${vs.index%2==0?'odd':'even'}"</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"ids"</span> <span class="attribute">value</span>=<span class="value">"${c.id}"</span>/&gt;</span>
              <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.name} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.gender} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.birthday} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.cellphone} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.email} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.hobby} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.type} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${c.description} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
              <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span> 修改<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
                  <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span> 添加<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
              <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
           <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">添加客户</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">&lt;!-- addCustomer.jsp --&gt;</span>
<span class="comment">&lt;!-- post方式,用get方式提交都能提交, get方式就不行 --&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"${pageContext.request.contextPath}/servlet/Controller?op=addCustomer"</span> <span class="attribute">metho</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">boder</span>=<span class="value">"1"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"2"</span> <span class="attribute">checked</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 出生日期<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"birthday"</span> <span class="attribute">value</span>=<span class="value">"1990-1-1"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"cellphone"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"email"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span> 
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 爱好: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 类型<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"vip"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"normal"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"38"</span> <span class="attribute">name</span>=<span class="value">"description"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>        
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>Controller.java</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addCustomer</span>(){
        <span class="comment">// 类型封装到javabean中</span>
        CustomerFormBean bean = WebUtil.fillBean(request, CustomerFormBean.class)
        <span class="comment">// 验证用户信息</span>
        <span class="keyword">if</span>(!FormBean.validate()){
        <span class="comment">// 不正确, 数据要回显</span>
           request.setAttribute(<span class="string">"FormBean"</span>, FormBean);
           request.getRequestDispather(<span class="string">"/addCustomer.jsp"</span>).forward();
           <span class="keyword">return</span>;
        }
        <span class="comment">// 填充模型 FormBean =&gt; Javabean</span>
        ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter, Date.class);
        Customer c = <span class="keyword">new</span> Customer()
        <span class="keyword">try</span>{
           BeanUtils.copyProperties(c, bean);
        } <span class="keyword">catch</span>{
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);
        }
        <span class="comment">// 单独处理 hobbies</span>
        String hobbies = request.getParameter(<span class="string">"hobbies"</span>);
        <span class="keyword">if</span>(hobbies!=<span class="keyword">null</span> && hobbies.length&gt;<span class="number">0</span>){
            StringBuffer sb = <span class="keyword">new</span> StringBuffer();
            <span class="keyword">if</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hobbies.length; i++){
               <span class="keyword">if</span>(i&gt;<span class="number">0</span>){
                   sb.append(<span class="string">","</span>);
               }
               sb.append(hobbies[i]);
            }
            c.setHobby(sb.toString());
        }
        s.addCustomer(c);
        <span class="comment">// out.wirte("注册成功");</span>
        res.sendRedirect(request.getContextPath()); <span class="comment">// 防止重复提交</span>
    }
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> CustomerFormBean {
    <span class="keyword">private</span> String id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String gender;
    <span class="keyword">private</span> String birthday;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String cellphone; 
    <span class="keyword">private</span> String[] hobbies; 
    <span class="keyword">private</span> String type; 
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Map&lt;String, String&gt; errors = <span class="keyword">new</span> HashMap&lt;String, String&gt;;
    <span class="keyword">public</span> boolean <span class="title">validate</span>() {}
}
</pre></td></tr></table></figure>

<h3 id="-">修改</h3>
<p><strong>Controller.java</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomerUI</span>(){
    String customerId = req.getParameter(<span class="string">"customerId"</span>);
    Customer c = s.findCustomerById(customerId);
    request.setAttribute(<span class="string">"c"</span>, c);
    req.getRequestDispather(<span class="string">"editCustomer.jsp"</span>).forward();
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editCustomer</span>(){
    <span class="comment">// 参考saveCustomer</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre>// editCustomer.jsp
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"${pageContext.request.contextPath}/servlet/Controller?op=editCustomer"</span> <span class="attribute">metho</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">value</span>=<span class="value">"{c.id}"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">boder</span>=<span class="value">"1"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"2"</span> <span class="attribute">checked</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 出生日期<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"birthday"</span> <span class="attribute">value</span>=<span class="value">"1990-1-1"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 电话 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"cellphone"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 邮箱 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"${c.email}"</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>/&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span> 
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 爱好: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> ${<span class="attribute">fn:contains</span>(<span class="attribute">c.hobby</span>, '吃饭')?'<span class="attribute">checked</span>'<span class="attribute">:</span>''}  <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
               <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"hobbies"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 类型<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"vip"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"type"</span> <span class="attribute">value</span>=<span class="value">"normal"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"38"</span> <span class="attribute">name</span>=<span class="value">"description"</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">删除</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">&lt;!-- list.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:delOne('${c.id}')"</span>&gt;</span>删除<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">delOne</span><span class="params">(customerId)</span>{</span>
        <span class="keyword">var</span> sure = window.confirm(<span class="string">"确定要删除吗"</span>)?
        <span class="keyword">if</span>(sure) {
            window.loacation.href=<span class="string">"${pageContext.request.contextPath}/servlet/Controller?op=delOneCustomerUI&custermerId="</span>+custmerId;
        }
    }
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delOneCustomerUI</span>(){
    String customerId = req.getParameter(<span class="string">"customerId"</span>);
    s.delCustomer(customerId);
    response.sendRedirect(request.getContextPath());
}
</pre></td></tr></table></figure>

<h3 id="-">删除多个</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>&lt;form atcion=<span class="string">"${}/servlet/Controller?op=delMuti"</span> method=<span class="string">"post"</span>&gt;
   ...
&lt;/form&gt;

<span class="function"><span class="keyword">function</span> <span class="title">delMulti</span><span class="params">()</span>{</span>
    <span class="comment">// 首先判断用户哟没有选择要删除的记录</span>
    <span class="keyword">var</span> selected = <span class="keyword">false</span>;
    <span class="keyword">var</span> idsArray = document.getElementsByName(<span class="string">"ids"</span>);
    <span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;idsArray.length; i++){
        <span class="keyword">if</span>(idsArray[i].checked) {
            selected = <span class="keyword">true</span>;
            <span class="keyword">break</span>;
        }
    }
        <span class="comment">// 选了, 二次提示, 确定要删除吗</span>
    <span class="keyword">if</span>(selected){
        <span class="keyword">var</span> sure = window.confirm(<span class="string">"确定吗"</span>);
        <span class="comment">// 二次提示: 确定,让表单提交即可</span>
        <span class="keyword">if</span>(sure) {
           document.forms[<span class="number">0</span>].submit()
        }
    } <span class="keyword">else</span> {
        <span class="comment">// 没选, 提示, 请选择要删除的记录</span>
        alert(<span class="string">"请选择"</span>)
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">private</span> void delMulti(){
    <span class="built_in">String</span> ids[] = <span class="built_in">request</span>.getParameterValues(<span class="string">"ids"</span>);
    <span class="keyword">if</span>(ids!=<span class="literal">null</span>&&ids.length&gt;<span class="number">0</span>){
        <span class="keyword">for</span>(<span class="built_in">String</span> id:ids) s.delCustomer(id);
    }
    <span class="built_in">response</span>.sendRedirect(<span class="built_in">request</span>.getContextPath());
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day17-jdbc]]></title>
    <link href="http://zhpooer.github.io/2014/04/22/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day17-jdbc/"/>
    <id>http://zhpooer.github.io/2014/04/22/传智播客day17-jdbc/</id>
    <published>2014-04-22T01:29:44.000Z</published>
    <updated>2014-04-22T07:40:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jdbc-">jdbc概述</h1>
<p>sun 公司为了简化和统一数据库的操作, 定义了JDBC规范</p>
<ol>
<li>Java Data Base Connective</li>
<li>组成包: java.sql.*, javax.sql.*, 都包含在JDK</li>
<li>还需要数据库的驱动, 这些驱动就相当于对JDBC规范的实现</li>
</ol>
<h1 id="jdbc-">jdbc 编码步骤</h1>
<p>准备数据:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> users(
   id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
   name <span class="keyword">varchar</span>(<span class="number">100</span>),
   password <span class="keyword">varchar</span>(<span class="number">40</span>),
   email <span class="keyword">varchar</span>(<span class="number">60</span>),
   birthday <span class="keyword">date</span>
);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'ab'</span>,<span class="string">'123'</span>,<span class="string">'ab@c.com'</span>,<span class="string">'1980-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'cd'</span>,<span class="string">'123'</span>,<span class="string">'cd@e.com'</span>,<span class="string">'1981-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'ef'</span>,<span class="string">'123'</span>,<span class="string">'ef@g.com'</span>,<span class="string">'1982-02-22'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> users(name,password,email,birthday) <span class="keyword">values</span>(<span class="string">'gh'</span>,<span class="string">'123'</span>,<span class="string">'gh@k.com'</span>,<span class="string">'1983-02-22'</span>);</span>
</pre></td></tr></table></figure>

<ol>
<li>注册驱动</li>
<li>获取与数据库的连接</li>
<li>得到代表数据库的语句</li>
<li>执行语句</li>
<li>如果执行的是查询语句, 就会有结果集, 处理</li>
<li>释放占用的资源</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>DriverManager<span class="preprocessor">.registerDriver</span>(new <span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>)<span class="comment">;</span>
Connection conn = DriverManager<span class="preprocessor">.getConnection</span>(<span class="string">"jdbc:mysql://localhost:3306/test"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>)<span class="comment">;</span>
Statement stmt = conn<span class="preprocessor">.createStatement</span>()<span class="comment">;</span>
// resultset 是一个游标, 该游标可以滚动, 默认指向第一行的前面
ResultSet rs = stmt<span class="preprocessor">.excuteQuery</span>(<span class="string">"select * from user"</span>)<span class="comment">;</span>
// hs<span class="preprocessor">.next</span>()<span class="comment">; 指向移动下一条游标, 并告知有没有记录</span>
while(rs<span class="preprocessor">.next</span>()) {
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"id"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"name"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"password"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"email"</span>))<span class="comment">;</span>
   println(rs<span class="preprocessor">.getObject</span>(<span class="string">"birthday"</span>))<span class="comment">;</span>
}
rs<span class="preprocessor">.close</span>()<span class="comment">;</span>
stmt<span class="preprocessor">.close</span>()<span class="comment">;</span>
conn<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="jdbc-">JDBC 主要接口或类</h1>
<h2 id="drivermanager">DriverManager</h2>
<p>作用:</p>
<ul>
<li><p>注册驱动</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>// 有缺陷, 会导致驱动注册两遍
DriverManager<span class="preprocessor">.registerDriver</span>(new <span class="keyword">com</span><span class="preprocessor">.mysql</span><span class="preprocessor">.jdbc</span><span class="preprocessor">.Driver</span>)
// 替代方案: 避免了依赖具体的驱动类
Class<span class="preprocessor">.fornName</span>(<span class="string">"com.mysql.jdbc.Driver"</span>)
</pre></td></tr></table></figure>
</li>
<li><p>获取与数据库的连接</p>
<ol>
<li>方式一: 
<code>DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;root&quot;);</code>
sun公司和数据库厂商定义的协议, 具体参考数据库的文档</li>
<li><p>方式二</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>Properties info = new Properties()<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"user"</span>, <span class="string">"root"</span>)<span class="comment">; // key由什么定义,查数据库文档查</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"password"</span>, <span class="string">"root"</span>)<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"useUnicode"</span>, <span class="string">"true"</span>)<span class="comment">;</span>
info<span class="preprocessor">.setProperty</span>(<span class="string">"characterEncoding"</span>, <span class="string">"utf8"</span>)<span class="comment">;</span>
DriverManager<span class="preprocessor">.getConnection</span>(<span class="string">"jdbc:mysql://localhost:3306/test"</span>, info)
</pre></td></tr></table></figure>
</li>
<li><p>方式三: <code>DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?user=root&amp;password=root&amp;...&quot;)</code></p>
</li>
</ol>
</li>
</ul>
<h2 id="connection">Connection</h2>
<p>所有的与数据库的交互都是基于连接的基础之上的, 因此该对象相当重要</p>
<p><code>Statement stmt = conn.createStatement()</code> 创建向数据库发送sql的<code>Statement</code>对象</p>
<h2 id="statement">Statement</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>详细信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>ResultSet excuteQuery(String, sql)</td>
<td>只适合查询, 返回的是查询的结果集</td>
</tr>
<tr>
<td>int excuteUpdate(String sql)</td>
<td>适合(insert update delete), 或者没有返回结果集的DDL, 返回影响的记录数目</td>
</tr>
<tr>
<td>boolean excute(String sql)</td>
<td>适合所有语句, 返回<em>有没有结果集</em>,  <code>if(true) stmt.getResultSet()</code></td>
</tr>
</tbody>
</table>
<h2 id="resultset">ResultSet</h2>
<p>代表着查询语句的查询结果集, 有一个游标</p>
<h3 id="-">遍历结果集</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
<span class="function">while(rs.<span class="function">next()</span>)</span> {
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"id"</span>)</span>)</span>; 
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"name"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"password"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"email"</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="string">"birthday"</span>)</span>)</span>;
}
<span class="comment">// 方式二 可以通过列的索引获取数据, 第一列索引是1,与框架有关</span>
<span class="function">while(rs.<span class="function">next()</span>)</span> {
   <span class="function">println(rs.<span class="function">getObject(<span class="number">1</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">2</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">3</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">4</span>)</span>)</span>;
   <span class="function">println(rs.<span class="function">getObject(<span class="number">5</span>)</span>)</span>;
}
</pre></td></tr></table></figure>

<h3 id="-">常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean next()</td>
<td>向后移动游标, 返回该位置上有没有记录</td>
</tr>
<tr>
<td>boolean previous()</td>
<td>向前移动游标, 返回该位置上有没有记录</td>
</tr>
<tr>
<td>boolean absolute(int)</td>
<td>绝对定位(第一行 1), 返回该位置上有没有记录</td>
</tr>
<tr>
<td>void beforeFirst()</td>
<td>游标定位在第一行的前面</td>
</tr>
<tr>
<td>void afterLast()</td>
<td>游标定位在最后一行的后面</td>
</tr>
</tbody>
</table>
<h3 id="mysql-jdbc-">mysql&amp;jdbc 类型对应</h3>
<table>
<thead>
<tr>
<th>mysql类</th>
<th>Jdbc对应方法</th>
<th>返回类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bit(1)</td>
<td>getBoolean() getBytes()</td>
<td>Boolean byte[]</td>
</tr>
<tr>
<td>tinyint</td>
<td>getByte()</td>
<td>Byte</td>
</tr>
<tr>
<td>smallint</td>
<td>getShort()</td>
<td>Short</td>
</tr>
<tr>
<td>Int</td>
<td>getInt()</td>
<td>Int</td>
</tr>
<tr>
<td>bigint</td>
<td>getLong()</td>
<td>Long</td>
</tr>
<tr>
<td>char varchar</td>
<td>getString()</td>
<td>String</td>
</tr>
<tr>
<td>Text(cblob) Blob</td>
<td>getClob() getBlob()</td>
<td>Clob Blob</td>
</tr>
<tr>
<td>date</td>
<td>getDate()</td>
<td>java.sql.Date</td>
</tr>
<tr>
<td>time</td>
<td>getTime()</td>
<td>java.sql.Time</td>
</tr>
<tr>
<td>timestamp</td>
<td>getTimestamp()</td>
<td>java.sql.Timestamp</td>
</tr>
</tbody>
</table>
<h3 id="-javabean">封装数据到 Javabean</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> <span class="keyword">implements</span> <span class="title">Serializable</span> {</span>
    <span class="keyword">private</span> <span class="keyword">int</span> id;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> String birthday;
}
u.setId(rs.getInt(<span class="string">"id"</span>));
u.setName(rs.getString(<span class="string">"name"</span>));
u.setBirthday(rs.getDate(<span class="string">"birthday"</span>));
</pre></td></tr></table></figure>

<h2 id="-">释放占用的资源</h2>
<p>按照打开的顺序, 以相反的顺序进行释放</p>
<p>特别是 Connection 对象, 非常稀有的资源, 用完后必须马上释放,
<strong>必须尽量晚创建和尽量早释放</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Connection conn = <span class="keyword">null</span>;
Statement = <span class="keyword">null</span>;
ResultSet rs = <span class="keyword">null</span>;
<span class="keyword">try</span> {
} <span class="keyword">catch</span> (<span class="keyword">Exception</span> e){
} <span class="keyword">finally</span> {
   <span class="keyword">try</span>{<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)   { rs.close(); rs = <span class="keyword">null</span>;     }} <span class="keyword">catch</span> (e){}
   <span class="keyword">try</span>{<span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) { stmt.close(); stmt = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
   <span class="keyword">try</span>{<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) { conn.close(); conn = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
}
</pre></td></tr></table></figure>

<h2 id="-">模板</h2>
<p>dbcfg.properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="setting">driverClass=<span class="value">**</span></span>
<span class="setting">url=<span class="value">**</span></span>
<span class="setting">usr=<span class="value">**</span></span>
<span class="setting">password=<span class="value">**</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> JdbcUtil {
    <span class="keyword">private</span> <span class="keyword">static</span> String driveClass;
    <span class="keyword">private</span> <span class="keyword">static</span> String url;
    <span class="keyword">private</span> <span class="keyword">static</span> String user;
    <span class="keyword">private</span> <span class="keyword">static</span> String password
    <span class="keyword">static</span> {
      InputStream <span class="keyword">in</span> = getClasLoader.getResourceAsStream(<span class="string">"dbcfg.properties"</span>);
      Properties props = <span class="keyword">new</span> Properties();
      props.load(<span class="keyword">in</span>)
      String drClass = props.getProperty(<span class="string">"driveClass"</span>);
      String url = props.getProperty(<span class="string">"url"</span>);
      String user = props.getProperty(<span class="string">"usr"</span>);
      String password = props.getProperty(<span class="string">"password"</span>);
      Class.forName(drClass);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>() throws SQLException {
         <span class="keyword">return</span> DriverManager.getConnection(url,user,password);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span>(ResultSet rs, Statement stmt, Connection conn) {
        <span class="keyword">try</span>{<span class="keyword">if</span>(rs!=<span class="keyword">null</span>)   { rs.close(); rs = <span class="keyword">null</span>;     }} <span class="keyword">catch</span> (e){}
        <span class="keyword">try</span>{<span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) { stmt.close(); stmt = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
        <span class="keyword">try</span>{<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) { conn.close(); conn = <span class="keyword">null</span>; }} <span class="keyword">catch</span> (e){}
    }
}
</pre></td></tr></table></figure>

<h1 id="jdbc-crud">JDBC进行CRUD</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"insert into users(name, password, email, birthday) values(''...)"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
<span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"udpate users set password='123' where id = 4"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
<span class="annotation">@Test</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span>(){
    Connection conn = <span class="keyword">null</span>;
    Statement stmt = <span class="keyword">null</span>;
    <span class="keyword">try</span>{
        conn = JdbcUtil.getConnection();
        stmt = conn.createStatement();
        String query = <span class="string">"delete from users where id = 4"</span>;
        stmt.excuteUpdate(query);
    }<span class="keyword">catch</span>(e) {
        JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
    }
}
</pre></td></tr></table></figure>

<h1 id="-jdbc-web-">利用JDBC修改web项目</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"dbcfg"</span>);
<span class="keyword">try</span>{
    Class.forName()
} <span class="keyword">catch</span> (e) {
    <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"读取数据库配置文件失败."</span>);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySQLImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(User user) {
        <span class="keyword">if</span>(findUserByUsername(user.getUsername) != <span class="keyword">null</span>){
           <span class="keyword">throw</span> <span class="keyword">new</span> UserExistException();
        }
        Connection conn = <span class="keyword">null</span>;
        Statement stmt = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = JdbcUtil.getConnection();
            stmt = conn.createStatement();
            stmt.excuteUpdate(<span class="string">""</span>);
        } <span class="keyword">catch</span> (Exception e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();
        } <span class="keyword">finally</span> {
            JdbcUtil.release(<span class="keyword">null</span>, stmt, conn)
        }
    }
    <span class="keyword">public</span> User <span class="title">findUserByUsername</span>(String username) {
        Connection conn = <span class="keyword">null</span>;
        Statement stmt = <span class="keyword">null</span>;
        ResultSet rs = <span class="keyword">null</span>;
        <span class="keyword">try</span>{
            conn = JdbcUtil.getConnection();
            stmt = conn.createStatement();
            rs = stmt.excuteQuery(<span class="string">""</span>);
            <span class="keyword">if</span>(rs.next()) {
                Usesr user = <span class="keyword">new</span> User();
                user.setUsername(rs.getString(<span class="string">"username"</span>));
                <span class="keyword">return</span> user;
            }
            <span class="keyword">return</span> <span class="keyword">null</span>;
        } <span class="keyword">catch</span> (Exception e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();
        } <span class="keyword">finally</span> {
            JdbcUtil.release(<span class="keyword">null</span>, stmt, conn);
        }
    }
    <span class="keyword">public</span> User <span class="title">findUser</span>(String username, String password) {
        <span class="comment">// 同 findUserByName</span>
    }
    <span class="comment">// 注意单元测试</span>
}
</pre></td></tr></table></figure>

<h1 id="preparedstatement">PreparedStatement</h1>
<p>特点和作用</p>
<ul>
<li>支持SQL语句的预编译, 提高数据库的执行效率</li>
<li>防止SQL注入, 给数据库的已经不是字符串了</li>
<li>语句中的参数可以使用占位符(?)</li>
</ul>
<p><strong>能用 PreparedStatement, 都要用 PreparedStatement</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>stmt = conn<span class="preprocessor">.preparedStatement</span>(<span class="string">"insert into user (username,password,email,birthday) values(?,?,?,?)"</span>)<span class="comment">;</span>
stmt<span class="preprocessor">.setString</span>(<span class="number">1</span>, user<span class="preprocessor">.getUsername</span>())<span class="comment">; // 索引对应的语句中的?的位置, 第一个就是1</span>
stmt<span class="preprocessor">.setDate</span>(<span class="number">4</span>, new java<span class="preprocessor">.sql</span><span class="preprocessor">.Date</span>(user<span class="preprocessor">.getBirthday</span>()<span class="preprocessor">.getTime</span>()))<span class="comment">;</span>
stmt<span class="preprocessor">.excuteUpdate</span>()<span class="comment">; // or rs = stmt.excuteQuery();</span>
</pre></td></tr></table></figure>

<h1 id="-dao-">理解DAO解耦的好处</h1>
<p>高类聚, 低耦合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">// 工厂模式 和 单例 </span>
<span class="keyword">public</span> <span class="keyword">class</span> DaoFactory {
    <span class="keyword">private</span> <span class="keyword">static</span> DaoFactory instance;
    <span class="keyword">private</span> <span class="title">DaoFactory</span>(){}
    <span class="keyword">public</span> <span class="keyword">static</span> DaoFactory <span class="title">getInstance</span>(){
        <span class="keyword">if</span>(instance==<span class="keyword">null</span>){
            synchronized(DaoFactory.getClass()){
                 <span class="keyword">if</span>(instance==<span class="keyword">null</span>)
                      instance = <span class="keyword">new</span> DaoFactory();
                  <span class="keyword">return</span> instance;
            }
        }
        <span class="keyword">return</span> instance;
    }
    <span class="keyword">public</span> UserDao <span class="title">getUserDao</span>(){
        <span class="keyword">return</span> Class.forName(<span class="string">""</span>).newInstance();
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="jdbc" scheme="http://zhpooer.github.io/tags/jdbc/"/>
    
      <category term="设计模式" scheme="http://zhpooer.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day16-sql入门]]></title>
    <link href="http://zhpooer.github.io/2014/04/20/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day16-sql%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/04/20/传智播客day16-sql入门/</id>
    <published>2014-04-20T01:45:40.000Z</published>
    <updated>2014-04-20T11:59:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="sql-">SQL入门</h1>
<p>Structed Query Language 结构化查询语言</p>
<p>作用: 与数据库进行交互</p>
<p>SQL标准, 由ANSI进行管理和维护. 数据库厂商都支持该标准,
并进行了扩张. 扩张的部分, 一般称之为方言.</p>
<h2 id="-">常用数据库</h2>
<ol>
<li>Oracle</li>
<li>DB2</li>
<li>MySQL</li>
<li>SQL Server4</li>
</ol>
<h1 id="ddl-">DDL 数据定义语言</h1>
<h2 id="-">数据库操作</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">-- 创建数据库字符集采用mydb1, 字符集采用默认字符集</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb1;</span>    
<span class="operator"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> mydb1;</span>

<span class="comment">-- 显示当前所有数据库</span>
<span class="operator"><span class="keyword">show</span> databases;</span>

<span class="comment">-- 创建一个字符集为GBK的数据库</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb1 <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>
<span class="comment">-- 校对规则设置</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> mydb2 <span class="keyword">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span>

<span class="comment">-- 删除数据库</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">database</span> mydb1;</span>

<span class="comment">-- 修改数据库</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">database</span> mydb2  <span class="keyword">character</span> <span class="keyword">set</span> utf8;</span>
</pre></td></tr></table></figure>

<h2 id="-">表操作</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="comment">-- 使用mydb1数据库</span>
use mydb1;
<span class="comment">-- 建表</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> employee(
  id <span class="keyword">int</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>),
  gender <span class="keyword">varchar</span>(<span class="number">10</span>),
  birthday <span class="keyword">date</span>,
  entry_date <span class="keyword">date</span>,
  job <span class="keyword">varchar</span>(<span class="number">200</span>),
  salary <span class="keyword">float</span>(<span class="number">8</span>,<span class="number">2</span>),
  resume text
);</span>
<span class="comment">-- 查看当前数据库中的所有表</span>
<span class="operator"><span class="keyword">show</span> tables;</span>
<span class="comment">-- 查看表的创建细节</span>
<span class="operator"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> employee;</span>

<span class="comment">-- 修改表</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">column</span> image blob;</span>
<span class="comment">-- 修改列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify job <span class="keyword">varchar</span>(<span class="number">60</span>);</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">column</span> image;</span>

<span class="comment">-- 修改表名</span>
<span class="operator">rename <span class="keyword">table</span> employee <span class="keyword">to</span> <span class="keyword">user</span>;</span> 

<span class="comment">-- 修改编码</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> change <span class="keyword">column</span> name username <span class="keyword">varchar</span>(<span class="number">100</span>);</span>
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数值类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BIT(1)</td>
<td>位类型, 默认值为1, 范围 1-64</td>
</tr>
<tr>
<td>tinyint[unsigned]</td>
<td>带符号的范围是-128到127</td>
</tr>
<tr>
<td>bool, boolean</td>
<td>使用0或1表示真假</td>
</tr>
<tr>
<td>smallint</td>
<td>2的16次方</td>
</tr>
<tr>
<td>int</td>
<td>2的32次方</td>
</tr>
<tr>
<td>bigint</td>
<td>2的64次方</td>
</tr>
<tr>
<td>float(M,D)</td>
<td>M指示显示长度, d指定小数weis</td>
</tr>
<tr>
<td>double(M,D)</td>
<td>表示比float精度更大</td>
</tr>
<tr>
<td>char(size)</td>
<td>固定长度字符串</td>
</tr>
<tr>
<td>varchar(size)</td>
<td>可变长度</td>
</tr>
<tr>
<td>blob lognblob</td>
<td>二进制数据</td>
</tr>
<tr>
<td>text(clob) longtext(longclob)</td>
<td>大文本</td>
</tr>
<tr>
<td>time datetime timestamp</td>
<td>日期类型</td>
</tr>
</tbody>
</table>
<h1 id="dml-">DML 数据操作语句</h1>
<p>作用: 操作的是表中的记录(数据)</p>
<p>关键字: <code>insert</code> <code>update</code> <code>delete</code></p>
<table>
<thead>
<tr>
<th>mysql特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串类型</td>
<td>使用单引号 &#39;abcd&#39;</td>
</tr>
<tr>
<td>日期类型</td>
<td>使用单引号  &#39;2101-02-11&#39;</td>
</tr>
<tr>
<td>特殊值</td>
<td>null</td>
</tr>
</tbody>
</table>
<h2 id="insert">insert</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id, username, gender) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'zhw'</span>, <span class="string">'male'</span>);</span>

<span class="comment">-- 如果客户端为 GBK 编码, 会报错, 因为服务器编码和客户端编码不一致</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id, username, gender) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'海贼王'</span>, <span class="string">'male'</span>);</span>
<span class="comment">-- 查询mysql的码表</span>
<span class="operator"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">'character%'</span>;</span>
<span class="comment">-- 告知服务器客户端使用的编码, 为临时方法</span>
<span class="operator"><span class="keyword">set</span> character_set_client=gbk
-- 告知服务端客户端查看结果集的编码为, 为临时方法
<span class="keyword">set</span> character_set_results=gbk;</span>
</pre></td></tr></table></figure>

<h2 id="update">update</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>
<span class="operator"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> salary=<span class="number">5000</span>, gender=<span class="string">'female'</span> <span class="keyword">where</span> username=<span class="string">'zhw'</span>;</span>

<span class="operator"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> salary=salary+<span class="number">1000</span></span>
</pre></td></tr></table></figure>

<h2 id="delete-truncate">delete和truncate</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'海贼王'</span>;</span>
<span class="comment">-- 完全清空一个表, 快速, 删除一张表, 重建一张, 属于DDL</span>
<span class="operator"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span>
</pre></td></tr></table></figure>

<h2 id="dql">DQL</h2>
<p>数据查询语言
<code>select [distinct] *|{column, column...} from table;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">-- 查询所有</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 投影查询</span>
<span class="operator"><span class="keyword">select</span> username, gender <span class="keyword">from</span> <span class="keyword">user</span>;</span>
<span class="comment">-- 过滤重复的数据</span>
<span class="operator"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 在结果中进行数据计算</span>
<span class="operator"><span class="keyword">select</span> name, salary+<span class="number">10</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 使用别名</span>
<span class="operator"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">'姓名'</span>, salary+<span class="number">10</span> 工资 <span class="keyword">from</span> <span class="keyword">user</span>;</span>

<span class="comment">-- 使用where语句过滤查询</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">"zhw"</span>;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary&gt;<span class="number">5000</span>;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> (salary+<span class="number">10</span>)&gt;<span class="number">4000</span>;</span>

<span class="comment">-- between</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary between <span class="number">4000</span> <span class="keyword">and</span> <span class="number">5000</span>;</span>
<span class="comment">-- in</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">5000</span>, <span class="number">6000</span>, <span class="number">7000</span>);</span>
<span class="comment">-- like</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'李%'</span>;</span>
<span class="comment">-- and</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age&gt;<span class="number">20</span> <span class="keyword">where</span> salary&gt;<span class="number">5000</span>;</span>

<span class="comment">-- 排序 默认升序</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span>  <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> salary ;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span>  <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span> <span class="comment">-- 降序</span>
</pre></td></tr></table></figure>

<h1 id="-">数据完整性</h1>
<p>数据完整性是为了保证插入到数据中的数据是正确的,
它防止了用户可能的输入错误</p>
<p>分为三类</p>
<ol>
<li>实体完整</li>
<li>域完整性</li>
<li>参照完整性</li>
</ol>
<h2 id="-">实体完整性</h2>
<p>规定表的一行在表中是唯一的实体. 实体完整性通过表的主键来实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">-- 声明id是主键,且自动增长</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t2(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
) <span class="keyword">character</span> <span class="keyword">set</span> gbk;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t3(
    id <span class="keyword">int</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>),
    <span class="keyword">primary</span> <span class="keyword">key</span>(id)
);</span>
</pre></td></tr></table></figure>

<p>主键分类:</p>
<ul>
<li>逻辑主键, 不代表实际意义, 只是区分不同记录, 比如ID</li>
<li>业务主键, 代表着具体的实际意义, 比如身份证, 用户名</li>
</ul>
<h2 id="-">域完整性</h2>
<p>数据库表的列必须符合某种特定的数据类型或约束</p>
<p>非空约束: not null</p>
<p>唯一约束: unique</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> t4 (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,
  name <span class="keyword">varchar</span>(<span class="number">12</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="keyword">null</span>,
  gender <span class="keyword">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>
)</span>
</pre></td></tr></table></figure>

<h2 id="-">参照完整性(多表)</h2>
<p>表间的关系:</p>
<ul>
<li>一对多</li>
<li>多对多</li>
<li>一对一</li>
</ul>
<h3 id="-">一对多</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> department(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
    name <span class="keyword">varchar</span>(<span class="number">100</span>)
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> employee(
   id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
   name <span class="keyword">varchar</span>(<span class="number">100</span>),
   department_id <span class="keyword">int</span>,
   <span class="keyword">constraint</span> department_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(department_id) <span class="keyword">references</span> department(id)
);</span>

<span class="comment">-- 如果删除 department 中的行, 必须先删除employee的外键</span>
</pre></td></tr></table></figure>

<h3 id="-">多对多</h3>
<p>需要多建一个联合主键(用至少两个主键同时作为主键)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher (
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> student(
    id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>
);</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> teacher_student (
    t_id <span class="keyword">int</span>,
    s_id <span class="keyword">int</span>,
    <span class="keyword">constraint</span> t_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(t_id) <span class="keyword">references</span> teacher(id),
    <span class="keyword">constraint</span> s_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(s_id) <span class="keyword">references</span> student(id),
    <span class="keyword">primary</span> <span class="keyword">key</span> (t_id, s_id)
)</span>
</pre></td></tr></table></figure>

<h3 id="-">一对一</h3>
<p>外键+唯一约束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>)
);</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> idcard(
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  person_id <span class="keyword">int</span> <span class="keyword">unique</span>,
  <span class="keyword">constraint</span> p_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(person_id) <span class="keyword">references</span> person(id),
)</span>
</pre></td></tr></table></figure>

<p>主键关联</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> person (
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  name <span class="keyword">varchar</span>(<span class="number">200</span>)
);</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> idcard(
  id <span class="keyword">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>,
  <span class="keyword">constraint</span> i_id_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(id) <span class="keyword">references</span> person(id),
)</span>
</pre></td></tr></table></figure>

<h2 id="-dql">多表DQL</h2>
<h3 id="-">连接查询</h3>
<p>基本语法: from 表1 连接类型 表2 [on 连接条件] [where 筛选条件]</p>
<p>约定: 表一为左表, 表二为右表</p>
<ul>
<li>交叉连接: cross join, 返回左表和右表的笛卡尔积</li>
<li>内连接: inner join, 返回满足连接条件的记录<ul>
<li>隐式内连接</li>
<li>显式内连接</li>
</ul>
</li>
<li>外连接: out join<ul>
<li>左外连接 left outer join = left join
  返回满足连接条件的记录, 同时返回左表中剩余的其他记录</li>
<li>右外连接 同上</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 笛卡尔积</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer, orders;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer <span class="keyword">cross</span> <span class="keyword">join</span> orders;</span>

<span class="comment">-- 内连接</span>
<span class="comment">-- 隐式</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c , orders o <span class="keyword">where</span> c.id=o.customer_id;</span>
<span class="comment">-- 显示</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> c.id=o.customer_id;</span>

<span class="comment">-- 左外连接</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">order</span> <span class="keyword">on</span> c.id=o.customer_id;</span>
<span class="comment">-- 右外连接</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> customer c <span class="keyword">right</span> <span class="keyword">join</span> <span class="keyword">order</span> <span class="keyword">on</span> c.id=o.customer_id;</span>
</pre></td></tr></table></figure>

<h3 id="-">子查询</h3>
<p>子查询也叫嵌套查询, 是指在 select 子句中嵌套查询语句</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> customer_id=(<span class="keyword">select</span> * <span class="keyword">from</span> customer <span class="keyword">where</span> name=<span class="string">"aabbcc"</span>);</span>
</pre></td></tr></table></figure>

<h3 id="-">联合查询</h3>
<p>联合查询, union关键字</p>
<p>联合查询是合并两条查询语句的查询结果, 去掉其中的重复结果, 并集</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> price&gt;<span class="number">200</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> id=<span class="number">1</span>;</span>
</pre></td></tr></table></figure>

<h3 id="-">报表查询(使用数据库提供的函数库)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student <span class="keyword">where</span> math&gt;<span class="number">80</span>;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> student wehre (chinese+math+english)&gt;<span class="number">250</span>;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(math) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">avg</span>(chinese) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">max</span>(chinese), <span class="aggregate">min</span>(math) <span class="keyword">from</span> student;</span>

<span class="operator"><span class="keyword">select</span> product, <span class="aggregate">sum</span>(price) <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> product;</span>

<span class="operator"><span class="keyword">select</span> product, <span class="aggregate">sum</span>(price) <span class="keyword">from</span> orders <span class="keyword">group</span> <span class="keyword">by</span> product <span class="keyword">having</span> <span class="aggregate">sum</span>(price) &gt; <span class="number">100</span>;</span>
</pre></td></tr></table></figure>

<h4 id="-">其他函数</h4>
<p><img src="/img/sql_func_date.png" alt="date函数">
<img src="/img/sql_func_math.png" alt="math函数">
<img src="/img/sql_func_str.png" alt="string函数"></p>
<h1 id="-">数据库的备份与恢复</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>mysqldump -h localhost -u root -p mydb2 &gt; mydb2<span class="preprocessor">.sql</span>

mysql -uroot -p mydb2 &lt; mydb2<span class="preprocessor">.sql</span>
<span class="preprocessor"># 或</span>
mysql&gt; use db2<span class="comment">;</span>
mysql&gt; source mydb2<span class="preprocessor">.sql</span><span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="mysql" scheme="http://zhpooer.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day15-登陆案例]]></title>
    <link href="http://zhpooer.github.io/2014/04/19/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day15-%E7%99%BB%E9%99%86%E6%A1%88%E4%BE%8B/"/>
    <id>http://zhpooer.github.io/2014/04/19/传智播客day15-登陆案例/</id>
    <published>2014-04-19T01:13:03.000Z</published>
    <updated>2014-04-19T08:54:05.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">用户注册和登陆案例</h1>
<ol>
<li><p>技术架构: 三层架构(表现层MVC)</p>
</li>
<li><p>要求: jap中不能出现一行java脚本或jiava表达式,出了指令&lt;%@ %&gt;</p>
</li>
<li>数据库: 临时使用xml, 解析使用Dom4j</li>
<li>必须知道要干什么</li>
<li><p>开发步骤</p>
<ol>
<li>建立工程, 搭建开发环境(dom4j, jaxen, commons-beanutils )</li>
<li>建立类所用的包    <ul>
<li>cn.itcast.domain: 放javaBean</li>
<li>弄出数据库. cn.itcast.dao: 放dao接口</li>
<li>cn.itcast.dao.impl: 放Dao接口的实现</li>
<li>cn.itcast.service: 业务接口</li>
<li>cn.itcast.service.impl: 业务接口实现</li>
<li>cn.itcast.comtroller: Servlet 控制器</li>
<li>/WEB-INF/pages: 放jsp, 用户无法访问(只能靠转发)</li>
<li>把握两点, 1.domain中的javabean; 2.业务接口</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">users</span>&gt;</span>
  <span class="tag">&lt;<span class="title">user</span> <span class="attribute">username</span>=<span class="value">"**"</span> <span class="attribute">password</span>=<span class="value">"**"</span> <span class="attribute">email</span>=<span class="value">"**"</span> <span class="attribute">birthday</span>=<span class="value">"2022-12-12"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">user</span>&gt;</span>
<span class="tag">&lt;/<span class="title">users</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java动态代理]]></title>
    <link href="http://zhpooer.github.io/2014/04/18/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/04/18/java动态代理/</id>
    <published>2014-04-18T12:14:52.000Z</published>
    <updated>2014-04-18T12:22:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-lang-reflect-proxy">java.lang.reflect.Proxy</h1>
<p>它提供了一组静态方法来为一组接口动态地生成代理类及其对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 方法 1: 该方法用于获取指定代理对象所关联的调用处理器</span>
<span class="keyword">static</span> InvocationHandler getInvocationHandler(<span class="keyword">Object</span> proxy) 

<span class="comment">// 方法 2：该方法用于获取关联于指定类装载器和一组接口的动态代理类的类对象</span>
<span class="keyword">static</span> <span class="keyword">Class</span> getProxyClass(ClassLoader loader, <span class="keyword">Class</span>[] interfaces) 

<span class="comment">// 方法 3：该方法用于判断指定类对象是否是一个动态代理类</span>
<span class="keyword">static</span> boolean isProxyClass(<span class="keyword">Class</span> cl) 

<span class="comment">// 方法 4：该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例</span>
<span class="keyword">static</span> <span class="keyword">Object</span> newProxyInstance(ClassLoader loader, <span class="keyword">Class</span>[] interfaces, InvocationHandler h)
</pre></td></tr></table></figure>

<h1 id="java-lang-reflect-invocationhandler">java.lang.reflect.InvocationHandler</h1>
<p>每次生成动态代理类对象时都需要指定一个实现了该接口的调用处理器对象（参见 Proxy 静态方法 4 的第三个参数）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// 该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象</span>
<span class="comment">// 第三个方法是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上发射执行</span>
Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>)</span>
</pre></td></tr></table></figure>

<h1 id="-">实例</h1>
<p>注意: 这是Scala实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="class"><span class="keyword">trait</span> <span class="title">Stub</span> {</span>
  <span class="keyword">def</span> doSome(): Unit;
}

<span class="class"><span class="keyword">class</span> <span class="title">StubImpl</span> <span class="keyword">extends</span> <span class="title">Stub</span> {</span>
  <span class="keyword">override</span> <span class="keyword">def</span> doSome() {
    println(<span class="string">"hello world"</span>);
  }
}
<span class="comment">// 定义处理对象的代理方法</span>
<span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span><span class="params">(proxied: Object)</span> <span class="keyword">extends</span> <span class="title">InvocationHandler</span> {</span>
  <span class="keyword">def</span> <span class="keyword">this</span>() = <span class="keyword">this</span>(<span class="keyword">null</span>)
  <span class="keyword">override</span> <span class="keyword">def</span> invoke(proxy: Object, method: Method, args: Array[Object]): AnyRef = {
    println(<span class="string">"before invoke"</span>)
    <span class="keyword">val</span> result = method.invoke(proxied)  <span class="comment">// 调用主体方法, 可以在调用方法上下插入处理</span>
    println(<span class="string">"after invoke"</span>)
    result
  }
}
<span class="comment">//主方法</span>
it should <span class="string">"通过反射实现实现动态代理"</span> in {
  <span class="keyword">val</span> proxy = Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), Array(classOf[Stub]), <span class="keyword">new</span> ProxyHandler(<span class="keyword">new</span> StubImpl))
  proxy <span class="keyword">match</span> {
    <span class="keyword">case</span> p: Stub =&gt; p.doSome();
  }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="动态代理" scheme="http://zhpooer.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux-grep手记]]></title>
    <link href="http://zhpooer.github.io/2014/04/18/linux-grep%E6%89%8B%E8%AE%B0/"/>
    <id>http://zhpooer.github.io/2014/04/18/linux-grep手记/</id>
    <published>2014-04-18T00:01:19.000Z</published>
    <updated>2014-04-18T00:55:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">常用方法</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>ls -l | <span class="keyword">grep</span> <span class="string">'^a'</span> <span class="comment"># 通过管道过滤ls -l输出的内容，只显示以a开头的行</span>

<span class="keyword">grep</span> <span class="string">'test'</span> d* <span class="comment"># 显示所有以d开头的文件中包含test的行</span>

<span class="keyword">grep</span> <span class="string">'test'</span> aa bb cc <span class="comment"># 显示在aa，bb，cc文件中匹配test的行</span>

<span class="keyword">grep</span> -i pattern files <span class="comment">#不区分大小写地搜索。默认情况区分大小写</span>

<span class="keyword">grep</span> -l pattern files <span class="comment"># 只列出匹配的文件名</span>

<span class="keyword">grep</span> -L pattern files <span class="comment"># 列出不匹配的文件名</span>

<span class="keyword">grep</span> -w pattern files <span class="comment"># 只匹配整个单词，而不是字符串的一部分(如匹配‘magic’，而不是‘magical’)</span>

<span class="keyword">grep</span> -C number pattern files <span class="comment"># 匹配的上下文分别显示[number]行</span>
<span class="keyword">grep</span> -A number pattern files <span class="comment"># 匹配的上下文显示后面的[number]行</span>
<span class="keyword">grep</span> -B number pattern files <span class="comment"># 匹配的上下文显示前面的[number]行</span>

<span class="keyword">grep</span> pattern1 \| pattern2 files <span class="comment"># 显示匹配 pattern1 或 pattern2 的行</span>

<span class="keyword">grep</span> pattern1 files | <span class="keyword">grep</span> pattern2 <span class="comment"># 显示既匹配 pattern1 又匹配 pattern2 的行</span>
</pre></td></tr></table></figure>

<h1 id="-grep">正则表达式与grep</h1>
<p>详细正则表达式介绍,<a href="/2014/04/15/java正则学习/">请点击我</a>.
不过在使用grep时,有些符号需要转义如 <code>{}&lt;&gt;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">grep</span> <span class="string">"a\{3, 5\}"</span>   <span class="comment"># a出现3到5次</span>
<span class="keyword">grep</span> <span class="string">"\&lt;"</span>          <span class="comment"># 查找左尖括号</span>
</pre></td></tr></table></figure>

<h1 id="-">常用的选项</h1>
<p>-?  同时显示匹配行上下的？行，如：grep -2 pattern filename同时显示匹配行的上下2行。</p>
<p>-b，--byte-offset  打印匹配行前面打印该行所在的块号码。</p>
<p>-c,--count   只打印匹配的行数，不显示匹配的内容。</p>
<p>-f File，--file=File   从文件中提取模板。空文件中包含0个模板，所以什么都不匹配。</p>
<p>-h，--no-filename   当搜索多个文件时，不显示匹配文件名前缀。</p>
<p>-i，--ignore-case   忽略大小写差别。</p>
<p>-q，--quiet   取消显示，只返回退出状态。0则表示找到了匹配的行。</p>
<p>-n，--line-number   在匹配的行前面打印行号。</p>
<p>-s，--silent  不显示关于不存在或者无法读取文件的错误信息。</p>
<p>-v，--revert-match  反检索，只显示不匹配的行。</p>
]]></content>
    
    
      <category term="grep" scheme="http://zhpooer.github.io/tags/grep/"/>
    
      <category term="linux" scheme="http://zhpooer.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day14-自定义标签]]></title>
    <link href="http://zhpooer.github.io/2014/04/17/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day14-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    <id>http://zhpooer.github.io/2014/04/17/传智播客day14-自定义标签/</id>
    <published>2014-04-17T01:04:00.000Z</published>
    <updated>2014-04-18T02:49:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">自定义标签</h1>
<p>作用: 替换JSP页面中的java脚本 <code>&lt;%%&gt;</code></p>
<p>且每次调用JSP都会生成新的标签对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="vbscript">&lt;%
<span class="built_in">Date</span> <span class="built_in">time</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();
out.write(<span class="built_in">time</span>.toLocaleString());
%&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">开发步骤</h2>
<ol>
<li><p>编写一个类 <code>javax.sevlet.jsp.tagext.SimpleTag</code>,
覆盖掉 <code>doTag()</code> 方法   <strong>ShowTimeSimpleTag.java</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowTimeSimpleTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span>{</span>
   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span>() <span class="keyword">throws</span> JspException, IOExcetpion {
       Date time = <span class="keyword">new</span> Date();
       PageContext pc = (PageContext) getJSPContext();
       pc.getOut().write(time.toLocaleString());
   }
}
</pre></td></tr></table></figure>
</li>
<li><p><strong>itcast.tld</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">taglib</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">tlib-version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">short-name</span>&gt;</span>myfn<span class="tag">&lt;/<span class="title">short-name</span>&gt;</span>
    <span class="comment">&lt;!-- 定位符 --&gt;</span>
    <span class="tag">&lt;<span class="title">uri</span>&gt;</span>http://www.itcast.cn/jsp/myfunction <span class="tag">&lt;/<span class="title">uri</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tag</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>showTime<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tag-class</span>&gt;</span>cn.itcast.ShowTimeSimpleTag <span class="tag">&lt;/<span class="title">tag-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> empty <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
<span class="tag">&lt;/<span class="title">taglib</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>通过Taglib指令导入外部标签库, 以及使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://"</span> prefix=<span class="string">"itcast"</span> %&gt;</span>
<span class="tag">&lt;<span class="title">itcast:showTime</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">实现简单功能</h2>
<ol>
<li><p>控制页面中某部分内容不显示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:hidden</span>&gt;</span>隐藏的内容<span class="tag">&lt;/<span class="title">itcast:hidden</span>&gt;</span>
public doTag(){
   // 不让标签主体内容显示, 就设么都不写
   // 要让主体内容显示, 就这么写
   JspFragment jf = getJSPBody();
   jf.invoke(out);  //  与 jf.invoke(null) 相同
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>控制结束标签后的JSP内容不执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:hidden</span>/&gt;</span>隐藏的内容
public doTag(){
    throw new SkipPageException(); // 忽略结束标签后的内容
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>控制主题内容重复执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:repeat</span> <span class="attribute">count</span>=<span class="value">"10"</span>&gt;</span>重复的内容<span class="tag">&lt;/<span class="title">itcast:repeat</span>&gt;</span>
public void setCount(int count); // 注入, 自动转换,仅限基本类型
public doTag(){
    for(1 to count){
        getJSPBody().invoke(null);
    }
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">attribute</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>count<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">required</span>&gt;</span>true<span class="tag">&lt;/<span class="title">required</span>&gt;</span>
        <span class="comment">&lt;!-- 是否支持表达式 count="${3+3}"--&gt;</span>
        <span class="tag">&lt;<span class="title">rtexprvalue</span>&gt;</span> true <span class="tag">&lt;/<span class="title">rtexprvalue</span>&gt;</span>
        <span class="comment">&lt;!-- rt:RunTime expr:Expression value --&gt;</span>
    <span class="tag">&lt;/<span class="title">attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>获取标签主题内容, 改变后再输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:upcase</span>&gt;</span>lower<span class="tag">&lt;<span class="title">itcast:upcase</span>&gt;</span>
public doTag(){
    JspFragment jf = getJSPBody();
    // 带有缓冲的数据字符输出流
    StringWriter sw = new StringWriter();
    jf.invoke(sw);
    String content = sw.getBuffer().toString();
    PageContext pc = (PageContext) getJSPContext();
    pc.getOut().write(content);
}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> scriptless <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">执行原理</h2>
<p>SimpleTag 接口中的执行原理:</p>
<ul>
<li><code>void doTag()</code>: 有服务器调用. 在JSP</li>
<li><code>JspTag getParent()</code>: 由程序员调用, 获取该标签的父标签对象, 没有返回null</li>
<li><code>void setJspBody(JspFragment jspBody)</code>: 服务器, 传入标签的内容</li>
<li><code>void setJspContext(JspContext pc)</code>: 服务器, 传入当前页面的的 pageContext</li>
<li><code>void setParent(JspFragment jf)</code>: 由服务器调用, 设置该标签的父标签对象, 没有返回null</li>
</ul>
<h2 id="tld-">tld 文件中的一些配置</h2>
<p>body-content的取值内容</p>
<ul>
<li>JSP: 不考虑, (给传统标签处理用到)</li>
<li>empty: 传统和简单标签都可以使用</li>
<li>scriptless: 给简单标签用的, 开始标签和结束标签内不能写 <code>&lt;%%&gt;</code>,
但是可以有<code>${1+2}</code></li>
<li>tagdependent: 给简单标签用的, 告诉标签类, 主体只是普通文本</li>
</ul>
<h2 id="-">开发属于自己的标签库</h2>
<h3 id="-if-">实现if功能的标签</h3>
<p>如果test为true 就输出主题内容, 如果是false就不输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">itcast:if</span> <span class="attribute">test</span>=<span class="value">"true"</span>&gt;</span>你好<span class="tag">&lt;<span class="title">itcast:if</span>&gt;</span>
public setTest(boolean test){}
public doTag(){
    JspFragment jf = getJSPBody();
    if(test) jf.invoke(null);

}
<span class="tag">&lt;<span class="title">tag</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body-content</span>&gt;</span> scriptless <span class="tag">&lt;/<span class="title">body-content</span>&gt;</span> <span class="comment">&lt;!--标签里面有内容单, 不写&lt;% %&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">attribute</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>test<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">required</span>&gt;</span>true<span class="tag">&lt;/<span class="title">required</span>&gt;</span>
        <span class="tag">&lt;<span class="title">rtexprvalue</span>&gt;</span> true <span class="tag">&lt;/<span class="title">rtexprvalue</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tag</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-if-else-">实现if else功能的标签库</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>&lt;itcast:choose&gt;
    &lt;itcast:when test=<span class="string">"true"</span>&gt; <span class="keyword">this</span> is <span class="keyword">if</span> &lt;/itcast:when&gt;
    &lt;itcast:otherwise&gt; <span class="keyword">this</span> is <span class="keyword">else</span> &lt;/itcast:otherwise&gt;
&lt;/itcast:choose&gt;

<span class="comment">// chooseTag</span>
<span class="annotation">@BeanProperty</span> <span class="keyword">var</span> flag:Boolean;

<span class="comment">// whenTag</span>
<span class="annotation">@BeanPropertyvar</span> test:Boolean;
<span class="keyword">def</span> doTag(){
    <span class="keyword">if</span>(test){
        getJSPBody().invoke(<span class="keyword">null</span>);
        (ChooseTag)getParent().setFlag(<span class="keyword">true</span>);
    }
}
<span class="comment">// otherwise</span>
<span class="keyword">def</span> doTag(){
    <span class="keyword">if</span>((ChooseTag)getParent().isFlag()){
        getJSPBody().invoke(<span class="keyword">null</span>);
    }
}
</pre></td></tr></table></figure>

<h3 id="-for-">实现 for 功能的标签</h3>
<p>简单版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>&lt;itcast:forEach items=<span class="string">"${list}"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;
    ${s}&lt;br/&gt;
&lt;/itcast:forEach&gt;

<span class="annotation">@BeanProperty</span> List items;
<span class="annotation">@BeanProperty</span> String <span class="keyword">var</span>;
<span class="keyword">def</span> doTag(){
    <span class="keyword">val</span> pc = (PageContext)getJSPContext();
    <span class="keyword">if</span>(items!=<span class="keyword">null</span>){
        <span class="keyword">for</span>(Object obj:items){
            pc.setAttribute(<span class="keyword">var</span>, obj);
            getJSPBody.invoke(<span class="keyword">null</span>);
        }
    }
}
</pre></td></tr></table></figure>

<p>复杂版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>&lt;!--<span class="keyword">or</span> items=&lt;%= <span class="keyword">list</span> %&gt; --&gt;
&lt;itcast:<span class="keyword">forEach</span> items=<span class="string">"${list}"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt; 
    ${s}&lt;br/&gt;
&lt;/itcast:<span class="keyword">forEach</span>&gt;

@BeanProperty Object items;
@BeanProperty String <span class="keyword">var</span>;
val collection:Collection = <span class="keyword">new</span> ArrayList();
def setItems(Object items) {
    <span class="keyword">if</span>(items <span class="keyword">instanceof</span> <span class="keyword">List</span>){
        collection = (<span class="keyword">List</span>)items;
    } <span class="keyword">else</span> <span class="keyword">if</span>(items <span class="keyword">instanceof</span> Map){
        collectoin = ((Map)items).entrySet();
    } <span class="keyword">else</span> <span class="keyword">if</span>(items.getClass().isArray()) {
        int len = <span class="keyword">Array</span>.getLength(items);
        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++){
            collection.add(java.reflect.<span class="keyword">Array</span>.get(items, i));
        }
    } <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不支持的类型"</span>);
    }
}
def doTag(){
    val pc = (PageContext)getJSPContext();
    <span class="keyword">for</span>(Object obj:collection){
        pc.setAttribute(<span class="keyword">var</span>, obj);
        getJSPBody.invoke(<span class="keyword">null</span>);
    }

}
</pre></td></tr></table></figure>

<h4 id="-">数组的反射</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="built_in">int</span> ii[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>};
<span class="built_in">String</span> strs[] = {<span class="string">"a"</span>, <span class="string">"b"</span>};
<span class="keyword">Class</span> clazz1 = ii.getClass();
<span class="keyword">Class</span> clazz2 = strs.getClass();
clazz1.<span class="built_in">isArray</span>();

<span class="built_in">int</span> <span class="built_in">len</span> = <span class="built_in">Array</span>.getLength(items);
<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">len</span>;i++){
    collection.add(java.reflect.<span class="built_in">Array</span>.<span class="keyword">get</span>(items, i));
}
</pre></td></tr></table></figure>

<h3 id="-html-">实现html转义标签</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>&lt;% pageContext<span class="preprocessor">.setAttribute</span>(<span class="string">"s"</span>, <span class="string">"&lt;hr/&gt;"</span>) %&gt;
&lt;itcast:htmlFilter&gt;
    ${s}
&lt;/itcast:htmlFilter&gt;
def doTag(){
    StringWriter sw = new StringWriter()<span class="comment">;</span>
    getJSPBody()<span class="preprocessor">.invoke</span>(sw)<span class="comment">;</span>
    String content = sw<span class="preprocessor">.getBuffer</span>()<span class="preprocessor">.toString</span>()<span class="comment">;</span>
    content = filter(content)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h1 id="jstl-">JSTL中的核心标签</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span>
<span class="comment">&lt;!-- 输出, 可转义 --&gt;</span>
<span class="tag">&lt;<span class="title">c:out</span> <span class="attribute">value</span>=<span class="value">"${p}"</span> <span class="attribute">default</span>=<span class="value">"没有值"</span> <span class="attribute">escapeXml</span>=<span class="value">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:out</span>&gt;</span>

<span class="comment">&lt;!-- 设置值 --&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">value</span>=<span class="value">"上海"</span> <span class="attribute">var</span>=<span class="value">"s"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span><span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="comment">&lt;!-- 设置JavaBean的属性 --&gt;</span>
<span class="tag">&lt;<span class="title">jsp:useBean</span> <span class="attribute">id</span>=<span class="value">"person"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.domain.Person"</span>&gt;</span><span class="tag">&lt;/<span class="title">jsp:useBean</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">target</span>=<span class="value">"${person}"</span> <span class="attribute">value</span>=<span class="value">"xxx"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="comment">&lt;!-- 设置Map的key和value的值 --&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">property</span>=<span class="value">"b"</span> <span class="attribute">value</span>=<span class="value">"bbb"</span> <span class="attribute">target</span>=<span class="value">"${map}"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>

<span class="comment">&lt;!-- 从指定域范围中删除数据, 不指定scope会全删除 --&gt;</span>
<span class="tag">&lt;<span class="title">c:remove</span> <span class="attribute">var</span>=<span class="value">"s1"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:remove</span>&gt;</span>

<span class="comment">&lt;!-- 相当于java的catch --&gt;</span>
<span class="tag">&lt;<span class="title">c:catch</span> <span class="attribute">var</span>=<span class="value">"e"</span>&gt;</span> <span class="vbscript">&lt;%=<span class="number">1</span>/<span class="number">0</span>%&gt;</span> <span class="tag">&lt;/<span class="title">c:catch</span>&gt;</span> ${e.message}

<span class="comment">&lt;!-- foreach --&gt;</span>
<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">begin</span>=<span class="value">"1"</span> <span class="attribute">end</span>=<span class="value">"10"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s} <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="comment">&lt;!-- strs = abcdefg --&gt;</span>
<span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">${strs}</span> <span class="attribute">begin</span>=<span class="value">"1"</span> <span class="attribute">end</span>=<span class="value">"10"</span> <span class="attribute">step</span>=<span class="value">"2"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s} <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span> <span class="attribute">width</span>=<span class="value">"438"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 姓名 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 性别 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> 城市 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>成绩 <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="comment">&lt;!-- vs指向一个对象, 该对象记录着当前遍历 的元素的一些信息 --&gt;</span>
    <span class="comment">&lt;!-- int getIndex(): 当前遍历的元素的索引号,从零开始 --&gt;</span>
    <span class="comment">&lt;!-- int getCount(); 当前遍历元素的位数, 从一开始 --&gt;</span>
    <span class="comment">&lt;!-- boolean isLast(); --&gt;</span>
    <span class="comment">&lt;!-- boolean isFirst(); --&gt;</span>
    <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">items</span>=<span class="value">"${ps}"</span> <span class="attribute">var</span>=<span class="value">"p"</span> <span class="attribute">varStatus</span>=<span class="value">"vs"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.name}  <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.gender} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.city} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> ${p.grade} <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

<span class="comment">&lt;!-- 遍历字符串 20140417--&gt;</span>
<span class="tag">&lt;<span class="title">c:set</span> <span class="attribute">var</span>=<span class="value">"s3"</span> <span class="attribute">value</span>=<span class="value">"2014-04-17"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:set</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:forToken</span> <span class="attribute">items</span>=<span class="value">"${s3}"</span> <span class="attribute">delims</span>=<span class="value">"=-"</span> <span class="attribute">var</span>=<span class="value">"s"</span>&gt;</span> ${s}<span class="tag">&lt;/<span class="title">c:forToken</span>&gt;</span>

<span class="comment">&lt;!-- 可以包含任何页面,包括任何界面 --&gt;</span>
<span class="tag">&lt;<span class="title">c:import</span> <span class="attribute">url</span>=<span class="value">"/3.jsp"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:import</span>&gt;</span>
<span class="tag">&lt;<span class="title">c:import</span> <span class="attribute">url</span>=<span class="value">"http://www.baidu.com"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:import</span>&gt;</span>

<span class="comment">&lt;!-- 转发 --&gt;</span>
<span class="tag">&lt;<span class="title">c:redirect</span> <span class="attribute">url</span>=<span class="value">"**.jsp"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">c:redirect</span>&gt;</span>

<span class="comment">&lt;!-- 对中文参数进行url编码, 能对其进行URL重写 --&gt;</span>
<span class="comment">&lt;!-- pageContext.setAttribute("url", request.getContextPath()+"/3.jsp?") --&gt;</span>
<span class="tag">&lt;<span class="title">c:url</span> <span class="attribute">value</span>=<span class="value">"3.jsp"</span> <span class="attribute">var</span>=<span class="value">"url"</span> <span class="attribute">scope</span>=<span class="value">"page"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">c:param</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">value</span>=<span class="value">"我擦"</span>&gt;</span> <span class="tag">&lt;/<span class="title">c:param</span>&gt;</span> 
<span class="tag">&lt;/<span class="title">c:url</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="自定义标签" scheme="http://zhpooer.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala和Dom4j的xml操作]]></title>
    <link href="http://zhpooer.github.io/2014/04/17/scala%E5%92%8Cdom4j%E7%9A%84xml%E6%93%8D%E4%BD%9C/"/>
    <id>http://zhpooer.github.io/2014/04/17/scala和dom4j的xml操作/</id>
    <published>2014-04-16T23:29:49.000Z</published>
    <updated>2014-04-17T13:53:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dom4j-xpath-">dom4j的xpath接口</h1>
<p><a href="/2014/04/06/传智播客day06-xml解析">dom4j具体操作, 猛击</a></p>
<ul>
<li><p><code>document.selectNodes(&quot;&quot;)</code> 查找多个匹配的节点</p>
</li>
<li><p><code>document.selectSingleNode(&quot;&quot;)</code> 查找只有一个匹配的节点, 如果没有返回null</p>
</li>
<li><p><code>node.valueOf(&quot;@name&quot;);</code> 获取节点中name属性的值</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>xpath</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>//BBB</code></td>
<td>选择所有的BBB</td>
</tr>
<tr>
<td><code>//DDD/BBB</code></td>
<td>选择所有DDD下面的BBB</td>
</tr>
<tr>
<td><code>/AAA/CCC/DDD/*</code></td>
<td>选择/AAA/CCC/DDD 下面所有的标签</td>
</tr>
<tr>
<td><code>/*/*/*/DDD</code></td>
<td>选择第四个层次的DDD</td>
</tr>
<tr>
<td><code>//* 所有的标签</code></td>
</tr>
<tr>
<td><code>/AAA/BBB[1]</code></td>
<td>选择第1个节点</td>
</tr>
<tr>
<td><code>/AAA/BBB[last()]</code></td>
</tr>
<tr>
<td><code>//@id</code></td>
<td>选择所有的id属性</td>
</tr>
<tr>
<td><code>//BBB[@name]</code></td>
<td>选择所有有name属性的BBB节点</td>
</tr>
<tr>
<td><code>//BBB[@*]</code></td>
<td>选择所有有属性的BBB节点</td>
</tr>
<tr>
<td><code>//BBB[not(@*)]</code></td>
<td>选择所有没有属性的BBB节点</td>
</tr>
<tr>
<td><code>//[@id=&#39;b1&#39;]</code></td>
<td>选择所有属性id=bi的属性</td>
</tr>
<tr>
<td><code>//*[count(BBB)=2]</code></td>
<td>选择有两个BBB子节点的节点</td>
</tr>
<tr>
<td><code>//*[count(*)=2]</code></td>
<td>选择由两个子节点的节点</td>
</tr>
<tr>
<td><code>//*[contains(name(), &quot;AAA&quot;)]</code></td>
<td></td>
</tr>
<tr>
<td><code>//*[string-length(name(),3)]</code></td>
<td></td>
</tr>
<tr>
<td><code>/AAA/EEE  //DDD/CCC</code></td>
<td>集合起来</td>
</tr>
</tbody>
</table>
<h2 id="-xml">读入xml</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>SAXReader reader = <span class="keyword">new</span> RAXReader();
Document <span class="built_in">document</span> = reader.read(<span class="string">"*.xml"</span>);
</pre></td></tr></table></figure>

<h2 id="dom4j-">dom4j 输出</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>org<span class="preprocessor">.dom</span>4j<span class="preprocessor">.io</span><span class="preprocessor">.OutputFormat</span> format = OutputFormat<span class="preprocessor">.createCompactFormat</span>()<span class="comment">;</span>
format<span class="preprocessor">.setEncoding</span>(<span class="string">"UTF-8"</span>)<span class="comment">;</span>
XMLWriter writer = new XMLWriter(new FileOutputStream(), format)<span class="comment">;</span>
writer<span class="preprocessor">.write</span>(document)<span class="comment">;</span>
writer<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="xpath-">xpath实际案例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">books</span>&gt;</span>
    <span class="tag">&lt;<span class="title">book</span>&gt;</span>
        <span class="tag">&lt;<span class="title">author</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">author</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
<span class="tag">&lt;/<span class="title">books</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Node node = document<span class="preprocessor">.selectSingleNode</span>(<span class="string">"//book[2]/author"</span>)<span class="comment">; // 会选中其中一个</span>
node<span class="preprocessor">.getText</span>()<span class="comment">;</span>

Node node = document<span class="preprocessor">.selectSingleNode</span>(<span class="string">"//book[2]"</span>)<span class="comment">;</span>
node<span class="preprocessor">.valueOf</span>(<span class="string">"@id"</span>)<span class="comment">;  // 获取属性ID</span>
</pre></td></tr></table></figure>

<h1 id="scala-xml-">scala xml 操作</h1>
<h2 id="-xml">加载和导出xml</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>val bookstore =
      <span class="tag">&lt;<span class="title">bookstore</span>&gt;</span>
        <span class="tag">&lt;<span class="title">book</span>&gt;</span>
          <span class="tag">&lt;<span class="title">title</span> <span class="attribute">lang</span>=<span class="value">"eng"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
          <span class="tag">&lt;<span class="title">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="title">price</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
        <span class="tag">&lt;<span class="title">book</span>&gt;</span>
          <span class="tag">&lt;<span class="title">title</span> <span class="attribute">lang</span>=<span class="value">"eng"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
          <span class="tag">&lt;<span class="title">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="title">price</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">book</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">bookstore</span>&gt;</span>
XML.save("bookstore1.xml", bookstore, "utf-8", true, null) // 第三个参数明是否要写xml头
// 加载
XML.loadFile("bookstore.xml")
</pre></td></tr></table></figure>

<h2 id="-">查询</h2>
<p>由于<code>scala.xml.Node</code> 继承于 Seq[Node], 所以可以用 scala 的 <code>Seq</code> 中的方法来操作xml,</p>
<p><a href="http://www.codecommit.com/blog/scala/working-with-scalas-xml-support" target="_blank">详细继承图,及案例</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">val</span> bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
<span class="keyword">val</span> price =
  bookstore <span class="keyword">match</span> {
    <span class="keyword">case</span> &lt;bookstore&gt;{ books @ _* }&lt;/bookstore&gt; =&gt;
      books.collectFirst {
        <span class="keyword">case</span> book @ &lt;book&gt;{ _* }&lt;/book&gt; <span class="keyword">if</span> (book \ <span class="string">"title"</span>).text == <span class="string">"Learning XML"</span> =&gt;
          (book \ <span class="string">"price"</span>).text
        }
    }
</pre></td></tr></table></figure>

<h2 id="crud">CRUD</h2>
<p>注: 还有另一种更新方法, 感觉不是很直观, 有兴趣的可以<a href="http://stackoverflow.com/questions/970675/scala-modifying-nested-elements-in-xml" target="_blank">猛击我</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>  <span class="keyword">it</span> should <span class="string">"append xml"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val book =
      &lt;book&gt;
        &lt;title lang=<span class="string">"zh"</span>&gt;Learn Scala&lt;/title&gt;
        &lt;price&gt;<span class="number">40.11</span>&lt;/price&gt;
      &lt;/book&gt;
    bookstore \ <span class="string">"book"</span> ++ book
  }

  <span class="keyword">it</span> should <span class="string">"remove child"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val afterDel = bookstore.child.<span class="built_in">filter</span>(node =&gt; (node \ <span class="string">"price"</span>).<span class="keyword">text</span> == <span class="string">"29.99"</span>)
  }

  <span class="keyword">it</span> should <span class="string">"update xml"</span> <span class="operator">in</span> {
    val bookstore = XML.loadFile(<span class="string">"bookstore.xml"</span>)
    val updated =
      (bookstore \ <span class="string">"book"</span>) map {
        _ match {
          <span class="keyword">case</span> book @ &lt;book&gt; { _* }&lt;/book&gt; <span class="keyword">if</span> (book \ <span class="string">"title"</span>).<span class="keyword">text</span> == <span class="string">"Learning XML"</span> =&gt;
            &lt;book&gt;&lt;title&gt;{ (book \ <span class="string">"title"</span>).<span class="keyword">text</span> }&lt;/title&gt;&lt;price&gt;<span class="number">3</span>&lt;/price&gt;&lt;/book&gt;
          <span class="keyword">case</span> x =&gt; x
        }
      }
  }
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="xpath" scheme="http://zhpooer.github.io/tags/xpath/"/>
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
      <category term="dom4j" scheme="http://zhpooer.github.io/tags/dom4j/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux-find手记]]></title>
    <link href="http://zhpooer.github.io/2014/04/16/linux-find%E6%89%8B%E8%AE%B0/"/>
    <id>http://zhpooer.github.io/2014/04/16/linux-find手记/</id>
    <published>2014-04-16T13:40:07.000Z</published>
    <updated>2014-04-17T01:04:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">常用方法</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>find ./ -name <span class="string">"*.log"</span> -type f  <span class="comment"># 找到文件后缀为.log的文件, 注意:一定要有引号</span>
find . -perm <span class="number">755</span> -<span class="keyword">print</span>       <span class="comment"># 找到权限为755的文件</span>
find ./ -user poe –<span class="keyword">print</span> <span class="comment"># 找到用户为poe的文件</span>
find /apps -group gem –<span class="keyword">print</span>
find / -mtime -<span class="number">5</span> –<span class="keyword">print</span> <span class="comment">#在系统根目录下查找更改时间在5日以内的文件</span>
find /<span class="keyword">var</span>/adm -mtime +<span class="number">3</span> –<span class="keyword">print</span> <span class="comment"># 在/var/adm目录下查找更改时间在3日以前的文件</span>
find /usr/sam -path <span class="string">"/usr/sam/dir1"</span> -prune -o –<span class="keyword">print</span> <span class="comment"># 在/usr/sam目录下查找不在dir1子目录之内的所有文件</span>
find . -maxdepth <span class="number">1</span> -name <span class="string">"*.zip"</span> -<span class="keyword">print</span> <span class="comment"># 只在的文件</span>
find . -perm <span class="number">755</span> -exec ls {} \; <span class="comment">##执行命令, 注意;和{}之间的空格</span>
</pre></td></tr></table></figure>

<h1 id="-type-"><code>-type</code></h1>
<p>查找某一类型的文件，诸如：</p>
<p>b - 块设备文件</p>
<p>d - 目录</p>
<p>c - 字符设备文件</p>
<p>p - 管道文件</p>
<p>l - 符号链接文件</p>
<p>f - 普通文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find . ! -<span class="built_in">type</span> d –<span class="built_in">print</span> # 在当前目录下查找除目录以外的所有类型的文件
</pre></td></tr></table></figure>

<h1 id="-ok-"><code>-ok</code></h1>
<p>和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="preprocessor">#在当前目录中查找所有文件名以.LOG结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示</span>
find . -name <span class="string">"*.conf"</span>  -mtime +<span class="number">5</span> -ok rm {  } \;
</pre></td></tr></table></figure>

<h1 id="-">其他有用指令</h1>
<p><code>-follow</code>：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件</p>
<p><code>-depth</code>：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找 </p>
<p><code>-xdev</code> 只查找当前目录下的文件 </p>
<p><code>-nogroup</code>: 查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在</p>
<h1 id="find-xargs">find 与 xargs</h1>
<p>类似于 <code>-exec</code> 指令, 但是效率高</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="preprocessor"># 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</span>
<span class="title">find</span> . -<span class="typedef"><span class="keyword">type</span> f -print | xargs file</span>
<span class="title">find</span> ./ -size <span class="number">0</span> | xargs rm -f & 删除文件大小为零的文件
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="linux" scheme="http://zhpooer.github.io/tags/linux/"/>
    
      <category term="find" scheme="http://zhpooer.github.io/tags/find/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day13-EL表达式]]></title>
    <link href="http://zhpooer.github.io/2014/04/16/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day13-el%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://zhpooer.github.io/2014/04/16/传智播客day13-el表达式/</id>
    <published>2014-04-16T03:42:31.000Z</published>
    <updated>2014-04-16T08:34:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="el-">EL表达式</h1>
<ul>
<li>作用, 向界面输出内容, 只适合显示数据</li>
<li>基本语法形式: ${EL表达式}</li>
<li><strong>不支持字符串连接操作</strong></li>
<li><strong>永远没有空指针</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">jsp:JavaBean</span> <span class="attribute">id</span>=<span class="value">"p"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.Person"</span>&gt;</span><span class="tag">&lt;/<span class="title">jsp:JavaBean</span>&gt;</span>
<span class="vbscript">&lt;%=p.getName()%&gt;</span> <span class="comment">&lt;!--Java表达式, 官方不建议使用--&gt;</span>
${p.name} <span class="comment">&lt;!--EL表达式, 官方推荐--&gt;</span>
</pre></td></tr></table></figure>

<ul>
<li><p>作用分解</p>
<ol>
<li>获取数据, 替换JSP中的<code>&lt;%= %&gt;</code></li>
<li>执行简单的数学或逻辑运输</li>
<li>EL隐式对象(难点, 容易和JSP的隐式对象混淆)</li>
<li>调用Java中的静态方法</li>
</ol>
</li>
</ul>
<h2 id="-">获取数据</h2>
<p>只能获取四大域对象中的数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="vbscript">&lt;%
   pageContext.setAttribute(<span class="string">"p"</span>, p, page|<span class="built_in">request</span>|session|application);
%&gt;</span>

${p} <span class="comment">&lt;!--依次查找名字为p的对象, 没有找到页面什么都不显示你--&gt;</span>
${p.name} <span class="comment">&lt;!-- 获取对象属性的值,显示到页面上 --&gt;</span>
${p.addreess.province}

<span class="comment">&lt;!-- 使用`[]`运算符, 获取 List 和 Map 中的数据
   但是无法获取 Set 中的数据
--&gt;</span>
<span class="vbscript">&lt;%
    List&lt;Person&gt; ps = <span class="keyword">new</span> ArrayList&lt;Person&gt;
    ps.add(<span class="keyword">new</span> Person(<span class="string">"a"</span>));
    ps.add(<span class="keyword">new</span> Person(<span class="string">"b"</span>));
    ps.add(<span class="keyword">new</span> Person(<span class="string">"c"</span>));
    ps.add(<span class="keyword">new</span> Person(<span class="string">"d"</span>));
    pageContent.setAttribute(<span class="string">"ps"</span>, ps);
    Map&lt;<span class="built_in">String</span>, Person&gt; m = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, Person&gt;;
    m.put(<span class="string">"aa"</span>, <span class="keyword">new</span> Person(<span class="string">"a"</span>));
%&gt;</span>

${ps[2].name}  <span class="comment">&lt;!-- output: d --&gt;</span>
${ps[2]['name']}

${m.aa.name}   <span class="comment">&lt;!-- output: a --&gt;</span>
${m['a'].name} <span class="comment">&lt;!-- output: a --&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">执行数据</h2>
<ul>
<li>empty 运算符: 判断一个对象是不是null,
还能判断一个集合中是否有元素, 是否为空字符串</li>
<li>三元判断符: <code>${empty user? &quot;true&quot;:&quot;false&quot;}</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>${<span class="number">1</span>+<span class="number">1</span>}      <span class="number">2</span>
${<span class="number">1</span>==<span class="number">2</span>}     <span class="literal">false</span>

${empty p}  p=<span class="string">""</span><span class="function"> =&gt;</span> <span class="literal">true</span>; p=<span class="literal">null</span><span class="function"> =&gt;</span> <span class="literal">true</span>; p=List<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>; p=List<span class="function"><span class="params">(<span class="string">"dfjk"</span>)</span> =&gt;</span> <span class="literal">false</span>

${empty user?<span class="string">"您还没有登陆"</span>:<span class="string">"欢迎您"</span>}
${<span class="string">"a"</span> + <span class="string">"b"</span>} &lt;!--报错!!!!!!!!!!!!不能字符串相加--<span class="function">-&gt;</span>
</pre></td></tr></table></figure>

<h2 id="el-11-">EL中的11个隐式对象</h2>
<table>
<thead>
<tr>
<th>内置对象</th>
<th>表示类型</th>
<th>备注</th>
<th>对应的JSP内置对象</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>pageContext</em></td>
<td>javax.servlet.jsp.PageContext</td>
<td>和jsp的内置对象完全一样</td>
<td>pageContext</td>
</tr>
<tr>
<td><em>requestScope</em></td>
<td>java.util.Map</td>
<td>代表servletRequest中的那个Map</td>
<td>没有</td>
</tr>
<tr>
<td><em>pageScope</em></td>
<td>java.util.Map</td>
<td>代表pageContext中的那个Map</td>
<td>没有</td>
</tr>
<tr>
<td><em>sessionScope</em></td>
<td>java.util.Map</td>
<td>代表session中的那个Map</td>
<td>没有</td>
</tr>
<tr>
<td><em>applicationScope</em></td>
<td>java.util.Map</td>
<td>代表application中的那个Map</td>
<td>没有</td>
</tr>
<tr>
<td><em>param</em></td>
<td>Map<String,String></td>
<td>获取单一请求参数</td>
<td>没有</td>
</tr>
<tr>
<td>paramValues</td>
<td>Map<String,String[]></td>
<td>获取重名请求参数</td>
<td>没有</td>
</tr>
<tr>
<td>header</td>
<td>Map<String,String></td>
<td>单一请求消息头</td>
<td>没有</td>
</tr>
<tr>
<td>headerValues</td>
<td>Map<String,String[]></td>
<td>重名请求消息头</td>
<td>没有</td>
</tr>
<tr>
<td>initParam</td>
<td>Map<String,String></td>
<td>代表web.xml中的全局变量</td>
<td>没有</td>
</tr>
<tr>
<td>cookie</td>
<td>Map<String,Cookie></td>
<td>获取Cookie对象</td>
<td>没有</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">&lt;!-- pageContent --&gt;</span>
<span class="vbscript">&lt;%= <span class="built_in">request</span>.getContextPath() %&gt;</span>
${pageContext.request.contextPath}  <span class="comment">&lt;!-- request.contextPath 非法 --&gt;</span>

${param.name} <span class="comment">&lt;!-- 获取单一请求参数的值 --&gt;</span>
${paramValues.password[0]}  <span class="comment">&lt;!-- 获取多个请求参数的值 --&gt;</span>

${header['Accept-Language']}  <span class="comment">&lt;!-- 请求消息头 --&gt;</span>
${headerValues['Accept-Language'][0]}  <span class="comment">&lt;!-- 重名的请求消息头 --&gt;</span>

${cookie.JSESSIONID} <span class="comment">&lt;!-- cookie对象 --&gt;</span>
${cookie.JSESSIONID.value} <span class="comment">&lt;!-- cookie对象的value --&gt;</span>
${cookie.JSESSIONID.name} <span class="comment">&lt;!-- cookie对象的name --&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-java-">调用Java中的静态方法</h2>
<p>产生原因: EL表达式不支持字符串的相关功能</p>
<p>EL 能调用普通Java类的静态方法, 但是不能调用实例的方法</p>
<p>开发步骤:</p>
<ol>
<li>定义一个静态类, 提供静态方法</li>
<li>在WEB-INF目录下建立一个扩展名为tld的xml文件</li>
<li>在jsp中使用</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&lt;%<span class="at_rule">@ taglib uri=<span class="string">"http://www.itcast.cn/jsp/myfunction"</span> prefix=<span class="string">"myfn"</span> %&gt;
$</span>{<span class="tag">myfn</span><span class="pseudo">:toUppercase(s)</span>}
</pre></td></tr></table></figure>

<p>WEB-INF/myfn.tld</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">taglib</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tlib-version</span>&gt;</span>1.0 <span class="tag">&lt;/<span class="title">tlib-version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">short-name</span>&gt;</span>myfn <span class="tag">&lt;/<span class="title">short-name</span>&gt;</span>
    <span class="comment">&lt;!-- 定位符 --&gt;</span>
    <span class="tag">&lt;<span class="title">uri</span>&gt;</span>http://www.itcast.cn/jsp/myfunction <span class="tag">&lt;/<span class="title">uri</span>&gt;</span>
    <span class="tag">&lt;<span class="title">function</span>&gt;</span>
        <span class="tag">&lt;<span class="title">description</span>&gt;</span>toUppercase the string<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>toUppercase <span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">function-class</span>&gt;</span>cn.itcast.MyFunctions <span class="tag">&lt;/<span class="title">function-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">function-signature</span>&gt;</span>java.lang.String toUppercase(java.lang.String)<span class="tag">&lt;/<span class="title">function-signature</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">function</span>&gt;</span>
<span class="tag">&lt;/<span class="title">taglib</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="jstl">JSTL</h2>
<p>sun提供了标准的EL函数</p>
<ul>
<li><p>JSTL标签库</p>
<ul>
<li>core: 核心</li>
<li>fmt: 国际化</li>
<li>sql: 数据库</li>
<li>xml: 操作xml</li>
<li>functions: EL函数</li>
</ul>
</li>
<li><p>由 Apache 实现, 需要导入 jstl.jar, standard.jar</p>
<p> 所有的java开发规范由JCP.org发布的, 代号 JSR-XXX
 JCP组织由: Oracle\Apache\Jboss 等知名开源组织构成</p>
</li>
<li>使用JSTL中的EL函数<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="vbscript">&lt;% taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> prefix=fn %&gt;</span> <span class="comment">&lt;!--导入--&gt;</span>
${fn:toLowerCase(s1)}
${fn:toUpperCase(s1)}
${fn:trim(s1)}
${fn:length(s1)}
${fn:escapeXml(s1)}  <span class="comment">&lt;!-- &lt;hr/&gt; 转义成 &lt;hr/&gt; --&gt;</span>
${fn:split(s1, "-")[0]}
${fn:join(s1, "-")[0]}  <span class="comment">&lt;!-- 联接 --&gt;</span>
${fn:indexOf(s1, "f")} <span class="comment">&lt;!--打印字符索引--&gt;</span>
${fn:contains(s1, "a")}  <span class="comment">&lt;!--是否包含字母--&gt;</span>
${fn:subString(s1, 0, 2)}  <span class="comment">&lt;!-- abcdefg =&gt; abc  --&gt;</span>
${fn:subString(s1, 5, 1000)}  <span class="comment">&lt;!-- abcdefg =&gt; fg, 数组不会越界, 只能是三个参数--&gt;</span>
<span class="comment">&lt;!-- startWith --&gt;</span>
<span class="comment">&lt;!-- endsWith --&gt;</span>
<span class="comment">&lt;!-- replace --&gt;</span>
<span class="comment">&lt;!-- subStringAfter --&gt;</span>
<span class="comment">&lt;!-- subStringBefore --&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="EL表达式" scheme="http://zhpooer.github.io/tags/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day13-JSP&JavaBean]]></title>
    <link href="http://zhpooer.github.io/2014/04/16/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day13-jsp&JavaBean/"/>
    <id>http://zhpooer.github.io/2014/04/16/传智播客day13-jsp&JavaBean/</id>
    <published>2014-04-16T01:18:59.000Z</published>
    <updated>2014-04-16T08:15:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jsp-">JSP中的九大隐式对象</h1>
<p>就是JSP对应的Servlet那些变量</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// JSP中可以取到的变量</span>
PageContext pageContext = <span class="keyword">null</span>;
HttpSession session = <span class="keyword">null</span>;
ServletContext application = <span class="keyword">null</span>;
ServletConfig config = <span class="keyword">null</span>;
JspWriter <span class="keyword">out</span> = <span class="keyword">null</span>;
Object page = <span class="keyword">this</span>;
JspWriter _jspx_out = <span class="keyword">null</span>;
PageContext _jspx_page_context = <span class="keyword">null</span>;
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内置对象名称</th>
<th>对应的类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>javax.servlet.http.HttpServletRequest</td>
<td></td>
</tr>
<tr>
<td>response</td>
<td>javax.servlet.http.HttpServletResponse</td>
<td></td>
</tr>
<tr>
<td>session</td>
<td>javax.servlet.http.HttpSession</td>
<td>jsp指令 session=&quot;true&quot;</td>
</tr>
<tr>
<td>application</td>
<td>javax.servlet.ServletContext</td>
<td></td>
</tr>
<tr>
<td>config</td>
<td>javax.servlet.ServletConfig</td>
<td></td>
</tr>
<tr>
<td>page</td>
<td>java.lang.Object</td>
<td>代表当前servlet对象本身</td>
</tr>
<tr>
<td>exception</td>
<td>java.lang.Throwable</td>
<td>jsp指令 isErrorPage=&quot;true&quot;</td>
</tr>
<tr>
<td>out</td>
<td>javax.servlet.jsp.JspWriter</td>
<td>和 reponse.getWriter()一样</td>
</tr>
<tr>
<td>pageContext</td>
<td>javax.servlet.jsp.PageContext</td>
</tr>
</tbody>
</table>
<h2 id="-out-">隐式对象 out的使用</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="vbscript">&lt;%
    out.write(<span class="string">"123"</span>); // JspWriter, 缓存<span class="number">8</span>kb
    <span class="built_in">response</span>.getWriter.write(<span class="string">"456"</span>);
%&gt;</span>
<span class="comment">&lt;!--结果是 456123--&gt;</span>
</pre></td></tr></table></figure>

<h2 id="pagecontext-">pageContext 内置对象</h2>
<p>作用:</p>
<ul>
<li><p>是一个域对象, 存的数据只能是当前页面来访问.
还能操作其他三个域对象(ServletRequest, HttpSession, ServletContext)的数据</p>
<p>  可以操作本身的域对象和其他的域对象</p>
<ol>
<li>setAttribute(String key, Object value, int scope)</li>
<li>getAttribute(String key, int scope)</li>
<li>removeAttribute(int scope)</li>
<li>scope: <code>PageContext.PAGE_SCOPE</code>
, <code>PageContext.REQUEST_SCOPE</code>
, <code>PageContext.SESSION_SCOPE</code>
, <code>PageContext.APPLICATION_SCOPE</code></li>
<li>findAttribute(String key), <strong>依次从页面、请求、会话、应用范围找对应的值</strong></li>
</ol>
</li>
<li><p>获得其他8个隐式对象</p>
<ol>
<li><code>pageContext.getRequest();</code></li>
<li><code>pageContext.getSession();</code></li>
<li>...</li>
</ol>
</li>
<li><p>提供了转发和包含的简单方法</p>
<ol>
<li><code>pageContext.forward(&quot;&quot;);</code></li>
<li><code>pageContext.include(&quot;&quot;);</code></li>
</ol>
</li>
</ul>
<h1 id="-">四大域对象</h1>
<ul>
<li>PageContext: 页面范围的数据, 用的很少</li>
<li>ServletRequest: 请求范围的数据, 用的很多. 显示一次数据后就没有用了</li>
<li>HttpSession: 会话范围内的数据, 用的很多, 每次请求和响应都需要的共享数据</li>
<li>ServletContext: 应用范围内的数据, 用的不多, 是所有的客户端都共享的信息. 注意同步!!!</li>
</ul>
<p>数据能不能取到, 关键是不是从一个地方取的数据</p>
<h1 id="javabean-">JavaBean 概念</h1>
<ul>
<li>什么是JavaBean(VO, Value Object; DO: Data Object; POJO: 简单Java对象)
  遵循一定的命名规则:<ol>
<li>必须由默认的构造方法</li>
<li>类的声明为public类型</li>
<li>字段都是私有的 <code>private boolean married</code>;</li>
<li>提供公有的getter或setter方法(属性)</li>
<li>一般实现 java.io.Serializable 接口</li>
</ol>
</li>
<li><p>应用场景</p>
<p> 封装数据, 便于传递数据</p>
</li>
</ul>
<h1 id="javaweb-">JavaWeb开发模型</h1>
<ul>
<li><p>模型一: JavaBean + JSP,只能开发很简单的应用,不适合企业级应用</p>
</li>
<li><p>模型二: MVC, Model+View+Controller</p>
<ul>
<li>Model: JavaBean 数据</li>
<li>View: JSP</li>
<li><p>Controller: Servlet</p>
<p>MVC只是三层架构模式中的前段展示层</p>
</li>
</ul>
</li>
</ul>
<h2 id="-">三层架构模型</h2>
<p><img src="/img/3layerstructor.png" alt="三层架构模型"></p>
<h2 id="-jsp-javabean">在JSP中使用JavaBean</h2>
<p>使用动作元素(内置标签)</p>
<ul>
<li><p>jsp:useBean: 用于从指定范围根据名称查找Javabean,
如果没有找到, 创建该 JavaBean 的实例, 然后放到指定的范围.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">jsp:useBean</span> <span class="attribute">id</span>=<span class="value">"p"</span> <span class="attribute">class</span>=<span class="value">"cn.itcast.Person"</span> 
             <span class="attribute">scope</span>=<span class="value">"page|request|session|application"</span>&gt;</span><span class="tag">&lt;/<span class="title">jsp:useBean</span>&gt;</span>
<span class="vbscript">&lt;% // 等价代码
   cn.itcast.Person p = <span class="literal">null</span>;
   p = (Person) pageContext.getAttribute(<span class="string">"p"</span>, pageContext.PAGE_SCOPE);
   <span class="keyword">if</span>(p==<span class="literal">null</span>){
       p = <span class="keyword">new</span> Person();
       pageContext.setAttribute(<span class="string">"p"</span>, p, pageContext.PAGE_SCOPE);
   }
%&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>jsp:setProperty: 给指定名称的对象设置值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;<span class="symbol">jsp:</span>setProperty property=<span class="string">"name"</span> name=<span class="string">"p"</span> value=<span class="string">"xxx"</span>/&gt;
&lt;<span class="string">%//</span> 等价代码
p.setName(<span class="string">"xxx"</span>);
%&gt;
</pre></td></tr></table></figure>
</li>
<li><p>jsp:getProperty: 如果一个属性的值是null, 界面就会显示null</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">jsp:getProperty</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">name</span>=<span class="value">"p"</span>/&gt;</span>
<span class="vbscript">&lt;%=p.getName()%&gt;</span> <span class="comment">&lt;!-- 等价代码 --&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h3 id="-javabean-">用请求参数设置 JavaBean 中的值</h3>
<p>在模型一中用到</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"Bean.jsp"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"female"</span>/&gt;</span> 先生
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"gender"</span> <span class="attribute">value</span>=<span class="value">"male"</span>/&gt;</span> 小姐
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>

<span class="comment">&lt;!-- Bean.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">jsp:setProperty</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">name</span>=<span class="value">"p"</span> <span class="attribute">param</span>=<span class="value">"name"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">jsp:setProperty</span> <span class="attribute">property</span>=<span class="value">"name"</span> <span class="attribute">name</span>=<span class="value">"p"</span> <span class="attribute">param</span>=<span class="value">"gender"</span>/&gt;</span>
<span class="comment">&lt;!-- 使用通配符, 简化上面调用, 前提: 表单的字段名和JavaBean的字段名一致 --&gt;</span>
<span class="tag">&lt;<span class="title">jsp:setProperty</span> <span class="attribute">property</span>=<span class="value">"*"</span> <span class="attribute">name</span>=<span class="value">"p"</span>/&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="JSP" scheme="http://zhpooer.github.io/tags/JSP/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="JavaBean" scheme="http://zhpooer.github.io/tags/JavaBean/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day12-jsp]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day12-jsp/"/>
    <id>http://zhpooer.github.io/2014/04/15/传智播客day12-jsp/</id>
    <published>2014-04-15T06:40:33.000Z</published>
    <updated>2014-04-15T08:58:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jsp">JSP</h1>
<p>全称Java Server Pages, 是一种用于开发动态web资源的技术</p>
<p>JSP=html中写java代码</p>
<p>Servlet: 只能写java代码, 写html不是很方便</p>
<h1 id="jsp-">JSP 的执行原理</h1>
<p>jsp 翻译成 .Java 再 编译成 .class, 然后Tomcat加载</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// JSP中可以取到的变量</span>
PageContext pageContext = <span class="keyword">null</span>;
HttpSession session = <span class="keyword">null</span>;
ServletContext application = <span class="keyword">null</span>;
ServletConfig config = <span class="keyword">null</span>;
JspWriter <span class="keyword">out</span> = <span class="keyword">null</span>;
Object page = <span class="keyword">this</span>;
JspWriter _jspx_out = <span class="keyword">null</span>;
PageContext _jspx_page_context = <span class="keyword">null</span>;
</pre></td></tr></table></figure>

<h1 id="jsp-">JSP语法</h1>
<h2 id="-">模板元素</h2>
<p>JSP中的HTML元素, 定义了JSP的外观和框架</p>
<h2 id="-">脚本表达式</h2>
<p>输出变量的值到页面上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&lt;%=new Date()<span class="preprocessor">.toLocaleString</span>()%&gt;
//translate to <span class="keyword">out</span><span class="preprocessor">.println</span>( new Date()<span class="preprocessor">.toLocaleString</span>() )<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">脚本片段</h2>
<p>书写Java逻辑, 原封不动的java代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;<span class="comment">%</span>
   语句一;
   语句二;
<span class="comment">%&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">table</span> <span class="attribute">border</span>=<span class="value">"1"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span> <span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="vbscript">&lt;%
    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++){
    %&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="vbscript">&lt;%=i%&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="vbscript">&lt;%=<span class="string">"aaa"</span> + i%&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="vbscript">&lt;%
    }
    %&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">声明</h2>
<p>定义类成员(静态变量, 静态方法, 实例变量, 实例方法)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>&lt;%!
   <span class="comment">// 实例变量</span>
   int i = <span class="number">100</span>;
   <span class="keyword">public</span> void <span class="function"><span class="keyword">method</span><span class="params">()</span><span class="comment">{
       println("hello world");
   }</span>
%&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">注释</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;<span class="string">%--</span>
   out.write(<span class="string">"helloworld"</span>)
--%&gt;
</pre></td></tr></table></figure>

<p><code>&lt;%-- --%&gt;</code>: 被注释的代码, 根本不会被翻译到Servlet中</p>
<p><code>&lt;!--  --&gt;</code>: 浏览器注释, 代码还是会被执行</p>
<h2 id="-">指令</h2>
<ul>
<li>作用 给服务器用, 指示服务器应该如何对待JSP页面</li>
<li>基本语法: <code>&lt;%@指令名称 指令属性=值 指令属性1=值1%&gt;</code></li>
</ul>
<h3 id="page">page</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&lt;%<span class="annotation">@page</span>
  language=<span class="string">"java"</span>
  <span class="keyword">import</span>=<span class="string">"java.util.Data, java.util.Random"</span>
%&gt;
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>默认值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>language</td>
<td>java</td>
<td>设置编写也语言</td>
</tr>
<tr>
<td>import</td>
<td></td>
<td>导入包, 用逗号分隔</td>
</tr>
<tr>
<td>session</td>
<td>true</td>
<td>是否生成 HttpSession 对象</td>
</tr>
<tr>
<td>buffer</td>
<td>8kb</td>
<td>字符输出流的缓存, none</td>
</tr>
<tr>
<td>autoFlush</td>
<td>true</td>
<td>自动刷新缓存</td>
</tr>
<tr>
<td>isThreadPage</td>
<td>false</td>
<td>是否线程安全</td>
</tr>
<tr>
<td>errorPage</td>
<td></td>
<td>页面出错时, 转到的页面, 如果以<code>/</code>开头,为绝对路径</td>
</tr>
<tr>
<td>isErrorPage</td>
<td>false</td>
<td>是否产生Exception对象, 错误后可以调用 exceptioin.getStackTrace()</td>
</tr>
<tr>
<td>contentType</td>
<td></td>
<td>改字符流编码,通知客户端显示字符集</td>
</tr>
<tr>
<td>pageEncoding</td>
<td>iso8859-1</td>
<td>指示服务器读取JSP时所用的编码, 同时有 contentType 的功能</td>
</tr>
<tr>
<td>isELIgnored</td>
<td>false</td>
<td>是否忽略EL表达式</td>
</tr>
</tbody>
</table>
<h3 id="taglib">taglib</h3>
<p>引入外部的标签用的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="vbscript">&lt;%@ taglib uri=<span class="string">""</span> prefix=<span class="string">"c"</span>%&gt;</span>
<span class="tag">&lt;<span class="title">c:if</span> <span class="attribute">test</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">c:if</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="include">include</h3>
<p>页面包含</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 首选, 效率高, 静态包含, 两个 jsp 翻译成一个 jsp --&gt;</span>
<span class="vbscript">&lt;%@ include
    file=<span class="string">"/**.jsp"</span>
%&gt;</span>
<span class="comment">&lt;!-- 动态包含, 两个 jsp, 合并显示--&gt;</span>
<span class="tag">&lt;<span class="title">jsp:include</span> <span class="attribute">page</span>=<span class="value">"/**.jsp"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h2 id="jsp-">JSP 常用内置标签(动作元素)</h2>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
<th>详细说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>jsp:include</td>
<td>动态包含</td>
<td>page:指向被包含页面</td>
</tr>
<tr>
<td>jsp:forward</td>
<td>转发</td>
<td>page: 指向转发路径</td>
</tr>
<tr>
<td>jsp:param</td>
<td>传递请求参数</td>
<td>name:键 value:值</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 源页面</span>
&lt;jsp:forward page=<span class="string">""</span>&gt;
    &lt;jsp:param <span class="keyword">value</span>=<span class="string">'key'</span> name=<span class="string">'username'</span>/&gt;
&lt;/jsp:forward&gt;

<span class="comment">// 目的页面</span>
request.getParameter(<span class="string">"username"</span>)
</pre></td></tr></table></figure>

<h1 id="error-">Error 的全局配置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">&lt;!-- error 全局配置 --&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="comment">&lt;!-- 异常类型匹配--&gt;</span>
    <span class="tag">&lt;<span class="title">exception-type</span>&gt;</span>java.lang.Exception <span class="tag">&lt;/<span class="title">exception-type</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span> /error.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
<span class="tag">&lt;<span class="title">error-page</span>&gt;</span>
    <span class="comment">&lt;!-- 响应码匹配 --&gt;</span>
    <span class="tag">&lt;<span class="title">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="title">error-code</span>&gt;</span>
    <span class="tag">&lt;<span class="title">location</span>&gt;</span> /error.jsp<span class="tag">&lt;/<span class="title">location</span>&gt;</span>
<span class="tag">&lt;/<span class="title">error-page</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="jsp" scheme="http://zhpooer.github.io/tags/jsp/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day12-session]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day12-session/"/>
    <id>http://zhpooer.github.io/2014/04/15/传智播客day12-session/</id>
    <published>2014-04-15T01:03:15.000Z</published>
    <updated>2014-04-15T06:40:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="session">Session</h1>
<p>默认情况下, 一个浏览器独占一个session对象</p>
<ul>
<li>HttpSession也是一个域对象</li>
<li>session对象由服务器创建</li>
<li>每一个session都有一个唯一的ID, 存到Cookie</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>void setAttribute(<span class="built_in">String</span> <span class="keyword">key</span>, <span class="built_in">Object</span> value);
<span class="built_in">Object</span> getAttribute(<span class="built_in">String</span> <span class="keyword">key</span>);
void removeAttribute(<span class="built_in">String</span> <span class="keyword">key</span>);
<span class="built_in">String</span> getId();
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 放数据</span>
HttpSession session = req.getSession();
session.setAttribute(<span class="string">"p"</span>, <span class="string">"ppp"</span>);
<span class="comment">// 取数据</span>
(<span class="built_in">String</span>) session.getAttribute(<span class="string">"p"</span>);

session.getAttribute(<span class="literal">true</span>); <span class="comment">// 如果没有session, 就创建</span>
session.getAttribute(<span class="literal">false</span>); <span class="comment">// 没有sessioin, 不创建, 返回null</span>
</pre></td></tr></table></figure>

<h1 id="session-">session访问延时</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Cookie c = new Cookie(<span class="string">"JSESSIONID"</span>, session<span class="preprocessor">.getId</span>())<span class="comment">;</span>
c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">;</span>
c<span class="preprocessor">.setMaxAge</span>()<span class="comment">;</span>
res<span class="preprocessor">.addCookie</span>(c)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="-">案例</h1>
<h2 id="-">简单的购物车</h2>
<p><em>ShowAllBooksServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>// 显示所有商品, 提供购买链接
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;h1&gt;本站有以下好书&lt;/h1&gt;"</span>)<span class="comment">;</span>
Map&lt;String, Book&gt; books = BookDB<span class="preprocessor">.findAllBooks</span>()<span class="comment">;</span>
for(Map<span class="preprocessor">.Entry</span>&lt;String, Book&gt; me:bookes<span class="preprocessor">.entrySet</span>()) {
   <span class="keyword">out</span><span class="preprocessor">.write</span>(me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getName</span>() + <span class="string">"&lt;a href='/BuyServlet?bookId="</span> + me<span class="preprocessor">.getKey</span>() + <span class="string">"'&gt;购买&lt;/a&gt;&lt;br/&gt;"</span> )<span class="comment">;</span>
}
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowCartServlet'&gt;查看购物车&lt;/a&gt;"</span>)
</pre></td></tr></table></figure>

<p><em>BuyServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>
String bookId  = req<span class="preprocessor">.getParameter</span>(<span class="string">"bookId"</span>)<span class="comment">;</span>
Book book = BookDb<span class="preprocessor">.findBookById</span>(bookId)<span class="comment">;</span>
HttpSession sessioin = request<span class="preprocessor">.getSession</span>()<span class="comment">;</span>
// 生成购物车
List&lt;Book&gt; cart = (List&lt;Book&gt;) session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
if(cart = null) {
    cart = new ArrayList&lt;Book&gt;()<span class="comment">;</span>
    session<span class="preprocessor">.setAttribute</span>(<span class="string">"cart"</span>, cart)<span class="comment">;</span>
}
//
cart<span class="preprocessor">.add</span>(book)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(book<span class="preprocessor">.getName</span> + <span class="string">"商品已经放入购物车"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowAllBooksServlet'&gt;继续购物&lt;/a&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>ShowCartServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
HttpSession session = req<span class="preprocessor">.getSession</span>(false)<span class="comment">; // 只是查询</span>
if(session == null){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"赶紧购物"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}

List&lt;Book&gt; books = (List&lt;Book&gt;)session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
if(books=null || books<span class="preprocessor">.size</span>()==<span class="number">0</span>){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您还没有购物"</span>)<span class="comment">;</span>
} else {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您购买了如下购物出&lt;br/&gt;"</span>)<span class="comment">;</span>
    for(Book book:books){
        <span class="keyword">out</span><span class="preprocessor">.write</span>(book<span class="preprocessor">.getName</span> + <span class="string">"&lt;br/&gt;"</span>)<span class="comment">;</span>
    }
}

<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ShowAllBooksServlet'&gt;继续购物&lt;/a&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='/ClearCartServlet'&gt;清空&lt;/a&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>ClearCartServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

List&lt;Book&gt; books = (List&lt;Book&gt;)session<span class="preprocessor">.getAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
// 方式一: 干掉session对象
session<span class="preprocessor">.invalidate</span>()<span class="comment">; // 让服务器端的HttpSession立即消失, 不推荐</span>

// 方式二；值干掉购物车
session<span class="preprocessor">.removeAttribute</span>(<span class="string">"cart"</span>)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>,<span class="string">"2;URL=/ShowAllBooksServlet"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"清空成功, 2秒后转到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">用户登陆</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="keyword">public</span> class User{
    <span class="keyword">private</span> <span class="built_in">String</span> username;
    <span class="keyword">private</span> <span class="built_in">String</span> password;
    <span class="keyword">private</span> <span class="built_in">String</span> nickname;
}
<span class="keyword">public</span> class UserDB{
    <span class="keyword">private</span> static <span class="built_in">List</span><span class="subst">&lt;</span>User<span class="subst">&gt;</span> users <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;</span>User<span class="subst">&gt;</span>;
    static {
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u1"</span>, <span class="string">"123"</span>, <span class="string">"u11"</span>));
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u2"</span>, <span class="string">"123"</span>, <span class="string">"u22"</span>));
        user<span class="built_in">.</span>add(<span class="literal">new</span> User(<span class="string">"u3"</span>, <span class="string">"123"</span>, <span class="string">"u33"</span>));
    }
    <span class="keyword">public</span> User find(<span class="built_in">String</span> username, <span class="built_in">String</span> password){
         for(User u:users){
              <span class="keyword">if</span>(u<span class="built_in">.</span>getName()<span class="built_in">.</span><span class="keyword">equals</span>(username)
                  <span class="subst">&&</span> u<span class="built_in">.</span>getPassword()<span class="built_in">.</span><span class="keyword">equals</span>(password))
              <span class="keyword">return</span> u;
         }
         <span class="keyword">return</span> <span class="built_in">null</span>;
    }
}
<span class="subst">&lt;</span>body<span class="subst">&gt;</span>
    <span class="subst">&lt;</span>form action<span class="subst">=</span><span class="string">"LoginServlet"</span> metho<span class="subst">=</span><span class="string">"post"</span><span class="subst">&gt;</span>
        用户名: <span class="subst">&lt;</span>input name<span class="subst">=</span><span class="string">"username"</span><span class="subst">/</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>br<span class="subst">/</span><span class="subst">&gt;</span>
        密码: <span class="subst">&lt;</span>input name<span class="subst">=</span><span class="string">"password"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">'password'</span><span class="string">'/&gt; &lt;br/&gt;
        &lt;input type=submit'</span><span class="subst">/</span><span class="subst">&gt;</span> <span class="subst">&lt;</span>br<span class="subst">/</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>/form<span class="subst">&gt;</span>
<span class="subst">&lt;</span>/body<span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<p><em>IndexServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

HttpSession  session = req<span class="preprocessor">.getSession</span>()<span class="comment">;</span>
User user = (User) session<span class="preprocessor">.getAttribute</span>(<span class="string">"user"</span>)<span class="comment">;</span>
if(user==null) {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt; href='Login.html'&gt;登陆&lt;/a&gt;"</span>)
} else {
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"欢迎你"</span> + user<span class="preprocessor">.getNickName</span>())<span class="comment">;</span>
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;a href='LogoutServlet'&gt;登出&lt;/a&gt;"</span>)<span class="comment">;</span>
}
</pre></td></tr></table></figure>

<p><em>LoginServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

User user = new User()<span class="comment">;</span>
BeanUtils<span class="preprocessor">.populate</span>(user, req<span class="preprocessor">.getParameterMap</span>())<span class="comment">;</span>

User dbUser = UserDB<span class="preprocessor">.find</span>(user<span class="preprocessor">.getUsername</span>(), user<span class="preprocessor">.getPassword</span>())<span class="comment">;</span>
if(dbUser==null){
    res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL=Login.html"</span>)<span class="comment">;</span>
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"两秒后转到登陆页面"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}
req<span class="preprocessor">.getSession</span>()<span class="preprocessor">.setAttribute</span>(<span class="string">"user"</span>, dbUser)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL=/"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"登陆成功, 两秒后到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>LogoutServlet</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

session<span class="preprocessor">.removeAttribute</span>(<span class="string">"user"</span>)<span class="comment">;</span>
res<span class="preprocessor">.setHeader</span>(<span class="string">"Refresh"</span>,<span class="string">"2;URL=/"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"清空成功, 2秒后转到主页"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-">防止表单的重复提交</h2>
<p>解决方案一: 客户端解决, 利用javascript</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btn"</span> <span class="attribute">byte</span>=<span class="value">"button"</span> <span class="attribute">onclick</span>=<span class="value">"toSubmit()"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">toSubmit</span><span class="params">()</span>{</span>
        document.forms[<span class="number">0</span>].submit();
        document.getElementById(<span class="string">"btn"</span>).disabled = <span class="literal">true</span>;
    }

</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>解决方案二: 令牌机制</p>
<p>服务器一生成一个唯一的ID, 向HttpSession中放一个,向表单隐藏域中放一个.</p>
<p>服务器二从中拿到ID,比对, 如果一样删掉HttpSession中的一个,
如果不一样认为是重复提交.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>// 方式一
String token = System<span class="preprocessor">.nanoTime</span>() + <span class="string">""</span><span class="comment">; // 纳秒</span>
// 方式二
String token = UUID<span class="preprocessor">.randomUUID</span>()<span class="preprocessor">.toString</span>()<span class="comment">;</span>
// 方式三,数据指纹
System<span class="preprocessor">.nanoTime</span>() + new Random()<span class="preprocessor">.nextLong</span>()
// sha | md5
java<span class="preprocessor">.security</span><span class="preprocessor">.MessageDigest</span> md = MessageDigest<span class="preprocessor">.getInstance</span>(<span class="string">"md5"</span>)<span class="comment">;</span>
byte b[] = md<span class="preprocessor">.digest</span>(s<span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
// b 不一定由对应的字符, 用Base64编码: <span class="number">3</span>字节----&gt;&gt; 四字节
sun<span class="preprocessor">.misc</span><span class="preprocessor">.BASE</span>64Encoder base = new BASE64Encoder()<span class="comment">;</span>
String token = base<span class="preprocessor">.encode</span>(b)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="-cookie">客户端禁用Cookie</h2>
<p>解决方案一: 提示: 为了更好的浏览网站, 请不要禁用你的cookie</p>
<p>解决方案二: URL重写</p>
<blockquote>
<p><a href="http://localhost/Servlet;JSESSIONID=11" target="_blank">http://localhost/Servlet;JSESSIONID=11</a></p>
<p>HttpServletResponse.encodeUrl(String url); // 重写</p>
<p>但是要对所有URL重写</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>req.getSession(); <span class="comment">// 一定要先运行, 生成一个session</span>
<span class="comment">// 如果客户端没有禁用, 就不需要重写了.</span>
res.encodeURL(url); <span class="comment">// http://localhost/Servlet;JSESSIONID=11</span>
</pre></td></tr></table></figure>

<h1 id="session-">session 生命周期</h1>
<h2 id="session-">session的销毁</h2>
<ol>
<li>调用 session.invalidate(), 立刻销毁</li>
<li>超时, 默认是30分钟; 在 web.xml 下配置</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">session-config</span>&gt;</span>
    <span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span>
    <span class="comment">&lt;!-- 单位是分钟 --&gt;</span>
<span class="tag">&lt;/<span class="title">session-config</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="session-">session的持久化状态</h2>
<p>是由服务器管理, 称为钝化或搁置, 出现情况:</p>
<ul>
<li>HttpSession 长时间没有了</li>
<li>内存用的太多</li>
<li>服务器重启</li>
</ul>
<p>放在HttpSession中的数据所属的类, 必须实现 java.io.Serializable 接口</p>
]]></content>
    
    
      <category term="HttpSession" scheme="http://zhpooer.github.io/tags/HttpSession/"/>
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java正则学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/15/java%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/15/java正则学习/</id>
    <published>2014-04-15T00:11:20.000Z</published>
    <updated>2014-04-15T23:29:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">正则表达式</h1>
<p>用于操作字符串的数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>// 定义一个功能对QQ号进行校验
// 长度 5-15, 只能是数字, 0不能开头
boolean match = "938393".match("[<span class="link_label">1-9</span>][<span class="link_reference">0-9</span>]{4,14}");
</pre></td></tr></table></figure>

<h2 id="-">常见规则</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre>Character classes
[abc] 	a, b, <span class="keyword">or</span> c (simple <span class="type">class</span>)
[^abc] 	Any <span class="property">character</span> except a, b, <span class="keyword">or</span> c (negation)
[a-zA-Z] 	a <span class="keyword">through</span> z <span class="keyword">or</span> A <span class="keyword">through</span> Z, inclusive (range)
[a-d[m-p]] 	a <span class="keyword">through</span> d, <span class="keyword">or</span> m <span class="keyword">through</span> p: [a-dm-p] (union)
[a-z&&[def]] 	d, e, <span class="keyword">or</span> f (intersection)
[a-z&&[^bc]] 	a <span class="keyword">through</span> z, except <span class="keyword">for</span> b <span class="keyword">and</span> c: [ad-z] (subtraction)
[a-z&&[^m-p]] 	a <span class="keyword">through</span> z, <span class="keyword">and</span> <span class="keyword">not</span> m <span class="keyword">through</span> p: [a-lq-z](subtraction)
 
Predefined <span class="property">character</span> classes
. 	Any <span class="property">character</span> (may <span class="keyword">or</span> may <span class="keyword">not</span> match line terminators)
\d 	A digit: [<span class="number">0</span>-<span class="number">9</span>]
\D 	A non-digit: [^<span class="number">0</span>-<span class="number">9</span>]
\s 	A whitespace <span class="property">character</span>: [ \t\n\x0B\f\r]
\S 	A non-whitespace <span class="property">character</span>: [^\s]
\w 	A <span class="property">word</span> <span class="property">character</span>: [a-zA-Z_0-<span class="number">9</span>]
\W 	A non-<span class="property">word</span> <span class="property">character</span>: [^\w]

Boundary matchers
^ 	The <span class="keyword">beginning</span> <span class="keyword">of</span> a line
$ 	The <span class="keyword">end</span> <span class="keyword">of</span> a line
\b 	A <span class="property">word</span> boundary
\B 	A non-<span class="property">word</span> boundary

Greedy quantifiers 贪懒
X? 	X, once <span class="keyword">or</span> <span class="keyword">not</span> <span class="keyword">at</span> all
X* 	X, zero <span class="keyword">or</span> more <span class="keyword">times</span>
X+ 	X, one <span class="keyword">or</span> more <span class="keyword">times</span>
X{n} 	X, exactly n <span class="keyword">times</span>
X{n,} 	X, <span class="keyword">at</span> least n <span class="keyword">times</span>
X{n,m} 	X, <span class="keyword">at</span> least n <span class="keyword">but</span> <span class="keyword">not</span> more than m <span class="keyword">times</span>
 
Reluctant quantifiers
X?? 	X, once <span class="keyword">or</span> <span class="keyword">not</span> <span class="keyword">at</span> all
X*? 	X, zero <span class="keyword">or</span> more <span class="keyword">times</span>
X+? 	X, one <span class="keyword">or</span> more <span class="keyword">times</span>
X{n}? 	X, exactly n <span class="keyword">times</span>
X{n,}? 	X, <span class="keyword">at</span> least n <span class="keyword">times</span>
X{n,m}? 	X, <span class="keyword">at</span> least n <span class="keyword">but</span> <span class="keyword">not</span> more than m <span class="keyword">times</span>
</pre></td></tr></table></figure>

<h2 id="-">匹配</h2>
<p><code>&quot;String&quot;.matches(regex)</code></p>
<h2 id="-">切割</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>String[] sep = <span class="keyword">str</span>.split(<span class="string">"\\s"</span>);
<span class="keyword">str</span> = <span class="string">"zhangaaaaaaaaboccccccshen"</span>
String[] sep = <span class="keyword">str</span>.split(<span class="string">"(.)\\1+"</span>); <span class="comment">// 组 &gt; zhang bo shen</span>
</pre></td></tr></table></figure>

<h2 id="-">组</h2>
<p><code>((A)(B(C)))</code> 从左括号开始,第一个括号就是第一组, 第二个括号就是第二组</p>
<h2 id="-">替换</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">str</span> = <span class="string">"zhangaaaaaaaaboccccccshen"</span>
<span class="comment">// 叠词替换成一个</span>
<span class="keyword">str</span>.replaceAll(<span class="string">"(.)\\1+"</span>, <span class="string">"$1"</span>);   <span class="comment">// zhangabocshen</span>

<span class="keyword">str</span> = <span class="string">"15800001111"</span>;
<span class="keyword">str</span>.replaceAll(<span class="string">"(\\d{3})\\d{4}(\\d{3})"</span>, <span class="string">"$1****$2"</span>);
</pre></td></tr></table></figure>

<h2 id="-">获取</h2>
<p>java.util.regex.Pattern: 正则表达式的对象形式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 将正则封装成对象</span>
Pattern p = Pattern.compile(<span class="string">"a*b"</span>);
<span class="comment">// 通过正则对象的获取匹配器对象</span>
Matcher m = p.matcher(<span class="string">"aaaab"</span>);
<span class="comment">// 使用Matcher对象对字符串进行操作</span>
<span class="keyword">boolean</span> b = m.matches();
<span class="keyword">while</span>(m.find()){
    m.<span class="keyword">group</span>();  <span class="comment">// 获取匹配的子序列</span>
    m.start();  <span class="comment">// index of start</span>
    m.end();
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="正则表达式" scheme="http://zhpooer.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java反射学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/14/java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/14/java反射学习/</id>
    <published>2014-04-14T13:33:07.000Z</published>
    <updated>2014-04-14T13:52:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">反射</h1>
<p>动态获取类中的信息, 就是java反射. 可以理解为对类的解剖.</p>
<p>对任意一个对象, 都能够调用他的任意一个方法和属性</p>
<h2 id="-class">获取Class</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 获取Class</span>
<span class="comment">// 方式一</span>
Person p = <span class="keyword">new</span> Person();
Class clazz = p.getClass();
<span class="comment">// 方式二</span>
Class clazz = Person.<span class="keyword">class</span>;
<span class="comment">// 方式三</span>
Class clazz = Class.forName(<span class="string">"xx.xx.Person"</span>);
</pre></td></tr></table></figure>

<h2 id="-java-lang-constructor">构造函数 java.lang.Constructor</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">Object</span> obj = clazz.newInstance();

<span class="comment">//构造函数要传参数</span>
<span class="function"><span class="keyword">Constructor</span> <span class="title">cons</span> = <span class="title">clazz</span>.<span class="title">getConstructors</span><span class="params">()</span>;</span>
clazz.getConstructor(<span class="keyword">String</span>.<span class="keyword">class</span>, <span class="keyword">String</span>.clazz);
cons.newInstance()
</pre></td></tr></table></figure>

<h2 id="-java-lang-field">获取字段 java.lang.Field</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Field f = clazz.getField(<span class="string">"age"</span>); <span class="comment">// 获取公共的字段</span>
Field f = clazz.getDeclaredField(<span class="string">"age"</span>); <span class="comment">// 获取所有的字段</span>
f.setAccessible(<span class="keyword">true</span>); <span class="comment">// 私有的变为可访问</span>
f.<span class="keyword">get</span>(obj);
</pre></td></tr></table></figure>

<h2 id="-java-lang-method">获取方法 java.lang.Method</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="function"><span class="keyword">Method</span>[] <span class="title">ms</span> = <span class="title">clazz</span>.<span class="title">getMethods</span><span class="params">()</span>;</span> <span class="comment">// 获取都是公有的方法</span>
<span class="function"><span class="keyword">Method</span> <span class="title">m</span> = <span class="title">clazz</span>.<span class="title">getDeclaredMethod</span><span class="params">("show", null)</span>;</span> <span class="comment">// 获取所有的方法</span>
m.invoke(obj, null);
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="反射" scheme="http://zhpooer.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java网络编程学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/14/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/14/java网络编程学习/</id>
    <published>2014-04-14T09:00:05.000Z</published>
    <updated>2014-04-14T13:30:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="java-net-inetaddress">java.net.InetAddress</h1>
<p><code>Inet6Address</code> ipv6协议</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>InetAddress ip = InetAddress<span class="preprocessor">.getLocalHost</span>()<span class="comment">;</span>
InetAddress ip = InetAddress<span class="preprocessor">.getByName</span>()<span class="comment">;</span>
InetAddress[] ip = InetAddress<span class="preprocessor">.getAllByName</span>()<span class="comment">; // 所有的地址</span>

ip<span class="preprocessor">.getHostAddress</span>()<span class="comment">; // 192.168.1.11</span>
ip<span class="preprocessor">.getHostName</span>()<span class="comment">; // www.google.com</span>
</pre></td></tr></table></figure>

<h1 id="socket">Socket</h1>
<ul>
<li>Socket 就是为网络服务提供的一种机制.</li>
<li>通信两端都有Socket</li>
<li>网络通信其实就是Socket间的通信</li>
<li>数据在两个Socket间通过IO传输</li>
</ul>
<h2 id="java-net-datagramsocket">java.net.DatagramSocket</h2>
<p>DatagramPacket: 用于发送或者接受的数据包</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();
<span class="built_in">String</span> s = <span class="string">"xxxxxxxxxxx"</span>;
byte[] buf = str.getBytes();
<span class="comment">// 发送, 可以用192.1.1.255发广播</span>
DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length,InetAddress.getByName(<span class="string">"192.168.1.100"</span>), <span class="number">10000</span>);
ds.send(dp);
ds.close();

<span class="comment">// 接收</span>
DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>); <span class="comment">// 要明确接受端口</span>
DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length);
ds.receive(dp); <span class="comment">// 阻塞式的</span>
<span class="built_in">String</span> ip = dp.getAddress.getHostAddress();
int port = dp.getPort();
<span class="keyword">new</span> <span class="built_in">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength());
</pre></td></tr></table></figure>

<h2 id="socket-serversocket">Socket 和 ServerSocket</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>// 客户端
Socket s = new Socket(<span class="string">"192.168.1.100"</span>, <span class="number">10000</span>)<span class="comment">;</span>

OutputStream <span class="keyword">out</span> = s<span class="preprocessor">.getOutputStream</span>()<span class="comment">; // s.getInputStream();</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"xxxx"</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
s<span class="preprocessor">.shutdownOutput</span>()<span class="comment">; // 告诉服务端, 这边数据发送完毕,让服务端停止读取</span>
s<span class="preprocessor">.close</span>()<span class="comment">;</span>

// 服务端
ServerSocket ss = new ServerSocket(<span class="number">100000</span>)<span class="comment">;</span>
Socket s == ss<span class="preprocessor">.accept</span>()<span class="comment">; // 获取客户端对象, 阻塞</span>

s<span class="preprocessor">.getInputStream</span>()<span class="comment">;</span>
<span class="keyword">in</span><span class="preprocessor">.read</span>(buf)<span class="comment">;</span>
new String(buf, <span class="number">0</span>, len)<span class="comment">;</span>

s<span class="preprocessor">.close</span>()<span class="comment">;</span>
ss<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h3 id="-">多线程服务端</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">while</span>(<span class="literal">true</span>){
    Socket s <span class="subst">=</span> ss<span class="built_in">.</span>accept();
    <span class="keyword">Thread</span> <span class="keyword">thread</span> <span class="subst">=</span> <span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Handler(s));
    <span class="keyword">thread</span><span class="built_in">.</span>start();
}
</pre></td></tr></table></figure>

<h1 id="url-urlconnection">URL&amp;URLConnection</h1>
<p>URL: 同一资源定位符, http协议</p>
<p>URI: 统一资源标识, mailto等 包括URL</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="built_in">String</span> str_url = <span class="string">"http://www.google.com/index.html?name.lisi"</span>;
URL url = <span class="keyword">new</span> URL(str_url);
url.getProtocol(); <span class="comment">// http</span>
url.getHost();  <span class="comment">// 192.168.1.100</span>
url.getFile();  <span class="comment">// /index.html?name.lisi</span>
url.getPath(); <span class="comment">//  /index.html</span>
url.getQuery(); <span class="comment">// name.lisi</span>

url.openStream(); <span class="comment">// url.openConnection().openStream();</span>

URLConnection uc = url.openConnection();
uc.getHeaderField(<span class="string">"Content-Type"</span>); <span class="comment">//text/html</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="网络编程" scheme="http://zhpooer.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IO技术学习]]></title>
    <link href="http://zhpooer.github.io/2014/04/13/io%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/04/13/io技术学习/</id>
    <published>2014-04-13T10:47:16.000Z</published>
    <updated>2014-04-15T09:58:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="io-">IO初识</h1>
<p>流按数据类型分类:</p>
<ol>
<li>字符流, 字节流读取文字自己数据后,
不直接操作而是先查指定的编码表, 获取指定的文字.
就是 字节流+编码表</li>
<li>字节流</li>
</ol>
<p>流按操作方式分类:</p>
<ol>
<li>输入流, 将外设中的数据读取到内存中</li>
<li>输出流, 将内存中的数据写到外设中</li>
</ol>
<h1 id="-">字符流</h1>
<p>字符流的两个顶层父类</p>
<ol>
<li>Reader</li>
<li>Writer</li>
</ol>
<p>如果操作文集数据, 优先考虑字符流
要将数据从内存写到硬盘上, 要使用字符流中的输出流.<code>Writer</code></p>
<h2 id="filewriter">FileWriter</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// 文件会自动创建或覆盖</span>
FileWriter fw = <span class="built_in">new</span> FileWriter(<span class="string">"demo.txt"</span>);
<span class="comment">// 数据写到内存临时缓冲区</span>
fw.write(<span class="string">"abce"</span>);
fw.flush(); <span class="comment">//进行刷新, 将数据直接写到硬盘上</span>
fw.<span class="built_in">close</span>();  <span class="comment">// 关闭会自动 flush</span>

<span class="comment">// 如果构造函数加入true, 可以实现文件的续写</span>
FileWriter fw = <span class="built_in">new</span> FileWriter(<span class="string">"demo.txt"</span>, <span class="constant">true</span>);
</pre></td></tr></table></figure>

<h2 id="io-">IO 异常处理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>FileWriter fw = <span class="keyword">null</span>;
<span class="keyword">try</span>{
}<span class="keyword">catch</span>(IOExcetpion e){
} <span class="keyword">finally</span> {
   <span class="keyword">if</span>(fw!=<span class="keyword">null</span>){ <span class="comment">/*  重要   */</span>
       <span class="keyword">try</span>{
           fw.close()
       }<span class="keyword">catch</span>(IOExcetpion){}
   }
}
</pre></td></tr></table></figure>

<h2 id="-">读取一个文件把字符串输入到控制台</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"demo.txt"</span>);
<span class="keyword">int</span> ch = <span class="number">0</span>;
<span class="keyword">while</span>((ch=fr.read())!=-<span class="number">1</span>){
   print(ch);
}
System.<span class="keyword">out</span>.prinln(ch1);
<span class="comment">// 方式二</span>
<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];
<span class="keyword">int</span> num  = <span class="number">0</span>;
<span class="keyword">while</span>((num = fr.read(buf))!=-<span class="number">1</span>){
    println(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));
}
</pre></td></tr></table></figure>

<h2 id="-">文件复制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// 1. 对一个已有文本</span>
FileReader src = <span class="built_in">new</span> FileReader(<span class="string">"file1"</span>);
<span class="comment">// 2. 创建一个目的, 用于存储到数据</span>
FileReader dist = <span class="built_in">new</span> FileWriter(<span class="string">"file2"</span>);
<span class="comment">// 3. 读写操作</span>
char[] buf = <span class="built_in">new</span> char<span class="number">[1024</span><span class="number">*4</span>];
<span class="typename">int</span> <span class="built_in">len</span> =<span class="number"> 0</span>;
while((<span class="built_in">len</span>=src.read(buf)) !=<span class="number"> -1</span>) {
    dist.write(buf,<span class="number"> 0</span>, <span class="built_in">len</span>);
}
<span class="comment">// 4. 关闭流资源</span>
src.<span class="built_in">close</span>();
dist.<span class="built_in">close</span>();
</pre></td></tr></table></figure>

<h2 id="-">字符流的缓冲区</h2>
<p>缓冲区提高读写效率</p>
<p>缓冲区要结合流来读取</p>
<h3 id="bufferedreader">BufferedReader</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="constant">FileWriter</span> fw = new <span class="constant">FileWriter</span>(<span class="string">"buf.txt"</span>);

<span class="constant">BufferedWriter</span> bufw = new <span class="constant">BufferedWriter</span>(fw); <span class="regexp">//</span> <span class="keyword">or</span> new <span class="constant">BufferedWriter</span>(fw, <span class="number">1024</span>);

bufw.write(<span class="string">"abcde"</span>);
bufw.newLine(); <span class="regexp">//</span> 新行
bufw.close();
<span class="regexp">//</span> fw.write(<span class="string">""</span>);<span class="regexp">//</span> 流已经被关了会抛错
</pre></td></tr></table></figure>

<h3 id="bufferedwriter">BufferedWriter</h3>
<p><code>read()</code>是从缓冲区取出字符数据. 做一覆盖了父类的read方法</p>
<p><code>readLine()</code>使用了读取缓冲区的read方法,将读取到的字符进行缓冲并判断换行标记,
将标记前的缓冲数据进行读取</p>
<h2 id="-">装饰设计模式</h2>
<p>对一组对象的功能进行增强时, 就可以使用该模式进行问题的解决.</p>
<p>装饰比继承灵活</p>
<p>特点: 装饰类和被装饰类都必须是所属同一接口或父类</p>
<h2 id="linenumberreader">LineNumberReader</h2>
<p>是 BufferedReader 的子类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>LineNumberReader lnr = new LineNumberReader(new FileReader())<span class="comment">;</span>

lnr<span class="preprocessor">.setLineNumber</span>(<span class="number">100</span>)<span class="comment">;</span>
while((line=lnr<span class="preprocessor">.readLine</span>())!=null){
    lnr<span class="preprocessor">.getLineNumber</span>() + <span class="string">":"</span>  + lnr<span class="preprocessor">.readLine</span>()<span class="comment">;</span>
}
lnr<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h1 id="-">字节流</h1>
<p>字符流的顶层父类</p>
<ol>
<li>InputStream</li>
<li>OutputStream</li>
</ol>
<p>字节流处理是字节数组, 字符流处理的是字符流</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>FileOutputStream fos = new FileOutputStream()<span class="comment">;</span>

fos<span class="preprocessor">.write</span>(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>

fos<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>fis.available(); <span class="comment">// 返回文件大小</span>
FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">""</span>);
<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()]; <span class="comment">// 小文件可以, 大文件慎用</span>
fis.read(buf);
<span class="keyword">new</span> String(buf);
</pre></td></tr></table></figure>

<h2 id="-">读取一个键盘录入的数据, 并打印在控制台上</h2>
<p><code>System.in</code> 关了之后, 就不能再用了, <em>千万别</em> <code>close()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">// 简单方法</span>
InputStream <span class="keyword">in</span> = System.<span class="keyword">in</span>;
<span class="keyword">int</span> ch = <span class="keyword">in</span>.read(); <span class="comment">// 会阻塞</span>
println(ch);

<span class="comment">// 方法一</span>
StringBuilder sb = <span class="keyword">new</span> StringBuilder();
<span class="keyword">while</span>((ch=<span class="keyword">in</span>.read())!=-<span class="number">1</span>){
    <span class="keyword">if</span>(ch==<span class="string">'\r'</span>){ <span class="keyword">continue</span>;}
    <span class="keyword">if</span>(ch==<span class="string">'\n'</span>){
        String temp = sb.toString();
        <span class="keyword">if</span>(<span class="string">"over"</span>.equals(temp)) <span class="keyword">break</span>;
        sb.<span class="keyword">delete</span>(<span class="number">0</span>, sb.length());
    } <span class="keyword">else</span>
        sb.append(ch);
}

<span class="comment">// 方法二</span>
InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.<span class="keyword">in</span>);
BufferedReader bufr = <span class="keyword">new</span> BufferedReader(isr);
bufr.readLine();
</pre></td></tr></table></figure>

<h2 id="-">转换流</h2>
<p><code>InputStreamReader</code>, 将字节转换成字符的桥梁, 可以设置字符集</p>
<blockquote>
<p><code>new InputStreamReader(in, charset)</code></p>
</blockquote>
<p><code>OutputStreamWriter</code>, 是字符流通向字节流的桥梁, 可指示编码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>Writer osw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.<span class="keyword">out</span>));
osw.<span class="keyword">write</span>();
osw.newLine();
osw.flush(); <span class="comment">// 如果要输出, 就要刷新缓冲</span>
</pre></td></tr></table></figure>

<p><code>FileWriter</code> 继承于 <code>OutputStreamWriter</code></p>
<h1 id="-">流的操作规律</h1>
<ol>
<li><p>明确源和目的</p>
<p> 源: InputStream Reader<br> 目的: OutputStream Writer</p>
</li>
<li><p>明确数据是否纯文本</p>
<ol>
<li>源是纯文本: reader</li>
<li>源不是纯文本: InputStream</li>
<li>目的是纯文本: Writer</li>
<li>目的不是纯文本: OutputStream</li>
</ol>
</li>
<li><p>明确具体的设备</p>
<p> 源设备, 目的设备</p>
<ol>
<li>硬盘: File</li>
<li>键盘: System.in, System.out</li>
<li>内存: 数组</li>
<li>网络: Socket流</li>
</ol>
</li>
<li><p>是否需要其他额外功能</p>
<p> 如果需要高效缓冲区, 就加上Buffer</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">new</span> FileWriter(<span class="string">"file"</span>); <span class="comment">// 以系统默认的编码写入文件</span>
<span class="comment">// 如果指定码表, 那么就不可以使用FileWriter,</span>
<span class="comment">// 他内部使用默认本地码表, 使用如下</span>
<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(), <span class="string">"UTF-8"</span>);
<span class="comment">// 同理, FileReader 亦然</span>
<span class="keyword">new</span> InputStreamReader(<span class="string">"file"</span>, <span class="string">"utf-8"</span>);
</pre></td></tr></table></figure>

<h1 id="java-io-file-">java.io.File类</h1>
<p>对文件或<em>文件夹</em>的属性进行操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre>File<span class="preprocessor">.separator</span><span class="comment">; 文件分隔符</span>
File<span class="preprocessor">.pathSeparator</span><span class="comment">; 路径夹分隔符</span>

//获取属性
File f = new File(<span class="string">"a.txt"</span>)<span class="comment">;</span>
File f = new File(dir, filename)<span class="comment">;</span>
f<span class="preprocessor">.getName</span>()<span class="comment">;</span>
f<span class="preprocessor">.getAbsolutePath</span>()<span class="comment">;</span>
File pathFile = f<span class="preprocessor">.getAbsoluteFile</span>()<span class="comment">;  </span>
f<span class="preprocessor">.getPath</span>()<span class="comment">;</span>
long len = f<span class="preprocessor">.length</span>()<span class="comment">;</span>
long time = file<span class="preprocessor">.lastModified</span>()<span class="comment">;</span>

// 文件的创建和删除
f<span class="preprocessor">.canWrite</span>()<span class="comment">;</span>
f<span class="preprocessor">.createNewFile</span>()<span class="comment">;  // 如果文件存在就不创建</span>
f<span class="preprocessor">.createTempFile</span>()<span class="comment">;</span>

f<span class="preprocessor">.delete</span>()<span class="comment">; </span>
file<span class="preprocessor">.deleteOnExist</span>()<span class="comment">;</span>

// 文件夹
f<span class="preprocessor">.mkdir</span>()<span class="comment">; // 创建单级目录</span>
f<span class="preprocessor">.mkdirs</span>()<span class="comment">; // 创建多级目录</span>

// 判断
f<span class="preprocessor">.exists</span>()<span class="comment">;</span>
f<span class="preprocessor">.isFile</span>()<span class="comment">;  // 要先判断文件是否存在</span>
f<span class="preprocessor">.isDirectory</span>()<span class="comment">; // 要先判断文件是否存在</span>

// 重命名
File f2 = new File(<span class="string">"2"</span>)<span class="comment">;</span>
f<span class="preprocessor">.renameTo</span>(f2)<span class="comment">;</span>

// 列出可用的系统根
File<span class="preprocessor">.listRoots</span>()<span class="comment">; //如 c盘 d盘 e盘</span>
File dRoot = new File(<span class="string">"d:\\"</span>)<span class="comment">;</span>
dRoot<span class="preprocessor">.getFreeeSpace</span>()<span class="comment">;</span>
dRoot<span class="preprocessor">.getTotalSpace</span>()<span class="comment">;</span>
dRoot<span class="preprocessor">.getUsableSpace</span>()<span class="comment">;</span>

// 获取当前目录下文件或文件夹的名称
String[] names = f<span class="preprocessor">.list</span>()<span class="comment">; // f必须是目录, 需要判断是否为空, 访问系统级目录也会空指针</span>
File[] files = f<span class="preprocessor">.listFiles</span>()<span class="comment">;</span>

f<span class="preprocessor">.list</span>(FilenameFilter)<span class="comment">; // 过滤器</span>
</pre></td></tr></table></figure>

<h1 id="java-util-properties-">java.util.Properties 集合</h1>
<p>Properties 是一个 HashTable, 特点</p>
<ol>
<li>键值都是字符串</li>
<li>集合中的数据可以保存在流中, 从流中获取</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Properties p <span class="subst">=</span> <span class="literal">new</span> Properties();  <span class="comment">// 注意: 只采用88591-字符编码</span>
p<span class="built_in">.</span>load(<span class="literal">new</span> FileInputStream());
p<span class="built_in">.</span>setProperty(<span class="string">"1"</span>, <span class="string">"2"</span>);
p<span class="built_in">.</span>stringPropertyNames();

<span class="comment">// 输出到流</span>
p<span class="built_in">.</span><span class="built_in">list</span>(PrintStream out);
<span class="comment">// 存储</span>
p<span class="built_in">.</span>store(OutputStream s, <span class="built_in">String</span> comments)
p<span class="built_in">.</span>store(Writer s, <span class="built_in">String</span> comments)
</pre></td></tr></table></figure>

<h1 id="-io-">其他IO流</h1>
<h2 id="printstream-printwriter">PrintStream 和 PrintWriter</h2>
<p>PrintStream 从来不抛出异常, 可以知己恩操纵文件</p>
<p>可以打印多种数据类型, 并保持数据的表示形式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"filename"</span>);
ps.print(<span class="number">97</span>);  <span class="comment">// 先将97变成字符串</span>

<span class="keyword">new</span> PrintWriter(Writer w);
<span class="keyword">new</span> PrintWriter(OuputStream w, <span class="literal">true</span>); <span class="comment">// 默认是带缓冲的, 可以设置自动刷新</span>
<span class="keyword">new</span> PrintWriter(File w);
<span class="keyword">new</span> PrintWriter(<span class="built_in">String</span> path);
</pre></td></tr></table></figure>

<h2 id="-sequenceinputstream">序列流 SequenceInputStream</h2>
<p>对多个流进行合并, 串联读取</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Vector<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> v = new Vector<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span>();
Enumeration<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> en = e.elements();
// 或
Enumeration<span class="tag">&lt;<span class="title">FileInputStream</span>&gt;</span> en = Collections.enumerations(list)
new SequenceInputStream(en);
</pre></td></tr></table></figure>

<h2 id="objectinputstream-objectoutputstream">ObjectInputStream 与 ObjectOutputStream</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(FileOutputStream);
oos.writeObject(Serializable obj);  <span class="comment">// obj 必须实现接口 java.io.Serializable</span>

ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream();
(<span class="built_in">Object</span>) ois.readObject();
</pre></td></tr></table></figure>

<h3 id="serializable">Serializable</h3>
<p>使用 <code>serialVersionUID</code> 验证序列化对象的类版本信息</p>
<h3 id="transient">transient</h3>
<p>被标记了 transient 的字段, 不会被序列化</p>
<h2 id="randomaccessfile">RandomAccessFile</h2>
<p>支持随机访问文件的读取和写入</p>
<ol>
<li>既能读,又能写</li>
<li>内部维护了以 byte 数组, 通过指针操作数组中的元素</li>
<li>可以通过 <code>getFilePoint()</code> 和 <code>seek()</code> 操作指针</li>
<li>它封装了 输入流 和 输出流</li>
<li>源和目的只能是 文件</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>RandomAccessFile f = new RandomAccessFile(<span class="string">""</span>, <span class="string">"rw"</span>)<span class="comment">;</span>
f<span class="preprocessor">.write</span>(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
f<span class="preprocessor">.seek</span>(<span class="number">1</span>*<span class="number">8</span>)<span class="comment">;</span>
f<span class="preprocessor">.readInt</span>(<span class="string">""</span>)<span class="comment">;</span>

f<span class="preprocessor">.close</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="pipedstream">PipedStream</h2>
<p>管道流, 输入和输出可以直接进行连接, <em>要结合线程使用</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>PipedInputStream pis = new PipedInputStream();
PipedOutputStream <span class="keyword">pos</span> = new PipedOutputStream();
pis.<span class="keyword">connect</span>(<span class="keyword">pos</span>);
</pre></td></tr></table></figure>

<h2 id="-">其他输入输出流</h2>
<ol>
<li>DataOutputStream 和 DataInputStream</li>
</ol>
<ol>
<li><p>ByteArrayInputStream 和 ByteArrayOutputStream</p>
<p> 源和目的都是内存, 关闭他没有效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>    ByteArrayOutputStream bos = new ByteArrayOutputStream()<span class="comment">;</span>
    ByteArrayInputStream bis = new ByteArrayInputStream(<span class="string">""</span><span class="preprocessor">.getBytes</span>())<span class="comment">;</span>
    bis<span class="preprocessor">.read</span>()<span class="comment">;</span>
    bos<span class="preprocessor">.write</span>()<span class="comment">;</span>
    bos<span class="preprocessor">.toByteArray</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>
</li>
<li><p>CharArrayReader 和 CharArrayWriter</p>
</li>
<li>StringReader 与 StringWriter</li>
</ol>
<h1 id="-">编码解码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>String <span class="keyword">str</span> = <span class="string">"你好"</span>;
<span class="keyword">str</span>.getBytes();
<span class="keyword">byte</span>[] buf = <span class="keyword">str</span>.getBytes(<span class="string">"GBK"</span>);

<span class="keyword">new</span> String(buf, <span class="string">"GBK"</span>)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
      <category term="IO" scheme="http://zhpooer.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day11-cookie]]></title>
    <link href="http://zhpooer.github.io/2014/04/13/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day11-cookie/"/>
    <id>http://zhpooer.github.io/2014/04/13/传智播客day11-cookie/</id>
    <published>2014-04-13T01:23:18.000Z</published>
    <updated>2014-04-15T02:15:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">会话概述</h1>
<p>在一次会话中, 浏览器可以发出多次请求和收到多次服务器响应</p>
<p>服务器为客户保存操作产生的数据, 比如购物网站的购物车</p>
<p>解决方案: Cookie(客户端技术), Session(服务端技术)</p>
<blockquote>
<p>服务器发送 Set-Cookie: name=any
客户端访问 cookie: name=any</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">Session s </span>=<span class="string"> request.getSession();</span>
</pre></td></tr></table></figure>

<h2 id="cookie-">Cookie技术</h2>
<p><img src="/img/cookie-info.png" alt="cookiez组成"></p>
<h3 id="cookie-">Cookie 中的属性</h3>
<p>name: 名称</p>
<p><em>value: 取值(不能是中文)</em></p>
<p><em>path: 可选, 路径, 默认值写Cookie那个程序的访问路径, 不包括文件名</em></p>
<p><em>maxAge: 可选. 最大存活时间, 默认是一次会话, 存在于浏览器进程内存中, 单位是秒</em></p>
<p>domain: 域名 可选,默认值是写Cookie的网站</p>
<p>comment: 备注 可选</p>
<p>version: 版本 可选</p>
<h3 id="-cookie">向客户端输出一个Cookie</h3>
<blockquote>
<p><code>HttpServletResponse.addCookie(Cookie c)</code></p>
</blockquote>
<p>客户端浏览器针对一个网站, 最多能存20个Cookie. 总共能存300个.
每个Cookie的大小不能超过4KB.(资源稀少)</p>
<h3 id="-cookie">服务端如何获取Cookie</h3>
<blockquote>
<p><code>HttpServletRequest.getCookies()</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);
PrintWriter <span class="keyword">out</span> = res.getWriter();
<span class="keyword">out</span>.write(<span class="string">"您最后来访的时间是: &lt;br/&gt;"</span>);
Cookie[] cookies = req.getCookies(); <span class="comment">// null</span>
<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; cookies!=<span class="keyword">null</span>&&i&lt;cookies.length;i++){<span class="comment">// 一定要判断是否为空</span>
     Cookie c = cookies[i];
     <span class="keyword">if</span>(<span class="string">"lastAccessTime"</span>.equals(c.getName())){
         String <span class="keyword">value</span> = c.getValue();
         <span class="keyword">long</span> time = Long.parseLong(<span class="keyword">value</span>);
         Date d = <span class="keyword">new</span> Date(time);
         DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);
         String stime = df.format(d);
         <span class="keyword">out</span>.write(stime);
         <span class="keyword">break</span>;
     }
}

Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"lastAccessTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);
c.setMaxAge( <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span> ); <span class="comment">//单位是秒</span>
res.addCookie(c);
</pre></td></tr></table></figure>

<h3 id="-cookie-">把指定的cookie删掉</h3>
<p>修改Cookie的生命周期,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"lastAccessTime"</span>, <span class="string">""</span>);
c.setMaxAge(<span class="number">0</span>);
response.addCookie(c);  <span class="comment">//覆盖掉原有的Cookie</span>
</pre></td></tr></table></figure>

<h3 id="-cookie">如何确定一个Cookie</h3>
<p>域名+路径+Cookie的名称</p>
<p>带不带cookie给服务器, 浏览器说了算. 根据你当前访问的路径来判断.
如果当前访问路径.startWith(已存Cookie路径) 为true, 就带给成立</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">; // 所有应用下的都能访问到该Cookie</span>
</pre></td></tr></table></figure>

<h4 id="-">案例一: 录入用户信息</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>// 产生一个登陆页面
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>

String username = <span class="string">""</span><span class="comment">;</span>
String checked = <span class="string">""</span>

Cookie cs[] = req<span class="preprocessor">.getCookies</span>()<span class="comment">;</span>
for(int i=<span class="number">0</span><span class="comment">; cs !=null && i &lt; cs.length; i++) {</span>
   Cookie c = cs[i]<span class="comment">;</span>
   if(<span class="string">"loginInfo"</span><span class="preprocessor">.equals</span>(c<span class="preprocessor">.getName</span>())){
       username = c<span class="preprocessor">.getValue</span>()<span class="comment">;</span>
       checked = <span class="string">"checked"</span>
       <span class="keyword">break</span><span class="comment">;</span>
   }
}
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;form action='/HelloServlet2' method='post'&gt;&lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"username: &lt;input type='text' name='username' value='"</span> +username +  <span class="string">"'/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"password: &lt;input type='password' name='password' value=''/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"remenber: &lt;input type='checkbox' name='remember' checked='"</span> + checked + <span class="string">"' /&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;input type=submit' name='password' value=''/&gt; &lt;br/&gt;"</span>)<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"&lt;/form&gt;"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>// 负责完成登陆验证, 同时以Cookie的形式把用户名记住, 前提不能是中文
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
// 获取用户名和密码
String username = request<span class="preprocessor">.getParameter</span>(<span class="string">"username"</span>)<span class="comment">;</span>
String password = request<span class="preprocessor">.getParameter</span>(<span class="string">"password"</span>)<span class="comment">;</span>
// 获取用户是否选择了记住用户名
String remember = request<span class="preprocessor">.getParameter</span>(<span class="string">"remember"</span>)<span class="comment">; // 没有选着就是null</span>

// 判断用户名和密码是否正确: 用户名翻转之后就是密码.比如用户名abc, 那么密码是cba
if(!username<span class="preprocessor">.equals</span>(new StringBuffer(password)<span class="preprocessor">.reverse</span>()<span class="preprocessor">.toString</span>())){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"错误的用户名或密码, 2秒后转向登陆页面"</span>)<span class="comment">;</span>
    res<span class="preprocessor">.retHeader</span>(<span class="string">"Refresh"</span>, <span class="string">"2;URL="</span> + req<span class="preprocessor">.getContextPath</span>() + <span class="string">"/HelloServlet"</span>)<span class="comment">;</span>
    return<span class="comment">;</span>
}
Cookie c = new Cookie(<span class="string">"loginInfo"</span>, username)
c<span class="preprocessor">.setPath</span>(req<span class="preprocessor">.getContextPath</span>())<span class="comment">;</span>
if(remember!=null){
// 如果用户选择记住用户名, 写cookie
    c<span class="preprocessor">.setMaxAge</span>(Integer<span class="preprocessor">.MAX</span>_VALUE)<span class="comment">;</span>
} else {
// 如果没有用户选择记住用户名, 删除cookie
    c<span class="preprocessor">.setMaxAge</span>(<span class="number">0</span>)<span class="comment">;</span>
}
cookie<span class="preprocessor">.addCookie</span>(c)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h4 id="-">案例二: 购书</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Book{
   <span class="keyword">private</span> String id;
   <span class="keyword">private</span> String name;
   <span class="keyword">private</span> <span class="keyword">int</span> price;
   <span class="keyword">private</span> String author;
   <span class="keyword">private</span> String description;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> BookDB{
   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Book&gt; books = <span class="keyword">new</span> HasMap&lt;String, Book&gt;();
   <span class="keyword">static</span> {
        books.put(<span class="string">"1"</span>, <span class="keyword">new</span> Book(<span class="string">"1"</span>, <span class="string">"葵花宝典"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
        books.put(<span class="string">"2"</span>, <span class="keyword">new</span> Book(<span class="string">"2"</span>, <span class="string">"葵花宝典1"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
        books.put(<span class="string">"3"</span>, <span class="keyword">new</span> Book(<span class="string">"3"</span>, <span class="string">"葵花宝典2"</span>, <span class="number">10</span>f, <span class="string">"xxx"</span>, <span class="string">"aaa"</span>));
   }
   <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Book&gt; <span class="title">findAllBooks</span>(){
       <span class="keyword">return</span> books;
   }

   <span class="keyword">public</span> <span class="keyword">static</span> <span class="title">findBookById</span>(String id) {
       books.<span class="keyword">get</span>(id);
   }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>//<span class="number">1</span> 显示所有商品
res<span class="preprocessor">.setContentType</span>(<span class="string">"text/html;charset=UTF-8"</span>)<span class="comment">;</span>
PrintWriter <span class="keyword">out</span> = res<span class="preprocessor">.getWriter</span>()<span class="comment">;</span>
<span class="keyword">out</span><span class="preprocessor">.print</span>(<span class="string">"&lt;h1&gt;本站有以下好书&lt;/h1&gt;"</span>)<span class="comment">;</span>
Map&lt;String, Book&gt; books = BookDB<span class="preprocessor">.findAllBooks</span>()<span class="comment">;</span>
for (Map<span class="preprocessor">.Entry</span>&lt;String, Book&gt; me: books<span class="preprocessor">.entrySet</span>()){
    <span class="keyword">out</span><span class="preprocessor">.write</span>(me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getName</span>() + <span class="string">"&lt;a target='_blank' href='"</span> + req<span class="preprocessor">.getContextPath</span> + <span class="string">"/HelloServlet2?bookId="</span> + me<span class="preprocessor">.getValue</span>()<span class="preprocessor">.getId</span>() + <span class="string">"' &gt;查看&lt;/a&gt;&lt;/br&gt;"</span>)<span class="comment">;</span>
}
//<span class="number">2</span> 显示用户最近的浏览记录

<span class="keyword">out</span><span class="preprocessor">.write</span>(<span class="string">"您最近的浏览历史是&lt;br/&gt;"</span>)<span class="comment">;</span>
Cookie cs[] = req<span class="preprocessor">.getCookies</span>()<span class="comment">;</span>
for(int i=<span class="number">0</span><span class="comment">;cs!=null&&i&lt;cs.length;i++){</span>
     Cookie c = cs[i]<span class="comment">;</span>
     if(<span class="string">"bookHistory"</span><span class="preprocessor">.equals</span>(c<span class="preprocessor">.getName</span>())){
          String value = c<span class="preprocessor">.getValue</span>()<span class="comment">;</span>
          String ids[] = value<span class="preprocessor">.split</span>(<span class="string">"\\-"</span>)<span class="comment">;</span>
          for(String id:ids) {
              <span class="keyword">out</span><span class="preprocessor">.write</span>(BookDB<span class="preprocessor">.findBookById</span>(id)<span class="preprocessor">.getName</span>()+<span class="string">"&lt;br/&gt;"</span>)
          }
          <span class="keyword">break</span><span class="comment">;</span>
     }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre>res.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);
PrintWriter out = res.getWriter();
<span class="comment">// 显示商品的详细信息, 写Cookie</span>
out.write(<span class="string">"详细呢容: &lt;br/&gt;"</span>);
String bookId = req.getParameter(<span class="string">"bookId"</span>);
Book book = BookDB.findBookById(bookId);
out.println(book.toString());

<span class="comment">// 写cookie: 记住浏览历史记录</span>

String bookids = makeIds(req, bookId);
Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"bookHistory"</span>, bookids);
c.setMaxAge(Integer.MAX_VALUE);
c.setPath(req.getContextPath());
res.addCookie(c);

<span class="comment">// 组织写到cookie中的书记的id, 多个id之间分割.最多三个</span>
<span class="comment">/*

一个cookie都没有      当前书:1            1
由cookie,但没有bookhistory  1       1
bookHistory=1               2           2-1
2-1                         2           1-2
*/</span>
<span class="keyword">private</span> String makeIds(HttpServletRequest res, String bookId){
    Cookie cs[] = res.getCookies();
    <span class="keyword">if</span>(cs==<span class="keyword">null</span>) <span class="keyword">return</span> bookId;
    Cookie bookHistoryCookie = <span class="keyword">null</span>;
    <span class="keyword">for</span>(Cookie c:cs) {
         <span class="keyword">if</span>(<span class="string">"bookHistory"</span>.equals(c.getName())){
             bookHistoryCookie = c;
             <span class="keyword">break</span>;
         }
    }
    <span class="keyword">if</span>(bookHistoryCookie == <span class="keyword">null</span>) <span class="keyword">return</span> bookId;
    String value = bookHistoryCookie.getValue();
    String ids[] = value.split(<span class="string">"\\-"</span>);
    LinkedList&lt;String&gt; <span class="keyword">list</span> = <span class="keyword">new</span> LinkedList&lt;String&gt;(Arrays.asList(ids));
    <span class="keyword">if</span>(<span class="keyword">list</span>.size()&lt;<span class="number">3</span>){
        <span class="keyword">if</span>(<span class="keyword">list</span>.contains(bookId))<span class="keyword">list</span>.remove(bookId);
        <span class="keyword">list</span>.addFirst(bookId);
    } <span class="keyword">else</span> {
        <span class="keyword">if</span>(<span class="keyword">list</span>.contains(bookId)){
            <span class="keyword">list</span>.remove(bookId);
        } <span class="keyword">else</span> {
            <span class="keyword">list</span>.removeLast();
        }
        <span class="keyword">list</span>.addFirst(bookId);                
    }
    StringBuffer sb = <span class="keyword">new</span> StringBuffer();
    <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt; <span class="keyword">list</span>.size();i++){
        <span class="keyword">if</span>(i&gt;<span class="number">0</span>) ab.append(<span class="string">"-"</span>);
        sb.append(<span class="keyword">list</span>.get(i));
    }
    <span class="keyword">return</span> sb.toString();
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="cookie" scheme="http://zhpooer.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java对象工具API]]></title>
    <link href="http://zhpooer.github.io/2014/04/12/java%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%85%B7api/"/>
    <id>http://zhpooer.github.io/2014/04/12/java对象工具api/</id>
    <published>2014-04-12T11:38:05.000Z</published>
    <updated>2014-04-12T14:47:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="system">System</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>System.<span class="keyword">long</span> currentTimeMillis();  <span class="comment">// 当前毫秒值</span>
System.exit();                <span class="comment">// 退出</span>
System.getProperties(); 
System.getProperty(<span class="string">"line.separator"</span>);
System.setProperty(key, <span class="keyword">value</span> ); <span class="comment">//给系统设置一些属性信息, 其他程序可以使用</span>
</pre></td></tr></table></figure>

<h1 id="java-lang-runtime">java.lang.Runtime</h1>
<p>每个Java应用都有一个Runtime类实例, 与其运行的环境相连接</p>
<blockquote>
<p>查API文档, 没有构造方法提要, 就是私有构造方法</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>Runtime r = Runtime.getRunTime();
<span class="keyword">try</span> {
    Process p = r.exec(<span class="string">"*.exe"</span>);
} <span class="keyword">catch</span>( IOException e ){} <span class="comment">// 调用本地程序</span>
p.destroy();
</pre></td></tr></table></figure>

<h1 id="java-lang-math">java.lang.Math</h1>
<p>提供了数学方法, 是静态的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">ceil</span>();    <span class="comment">// 取上值</span>
<span class="built_in">floor</span>();   <span class="comment">// 取下值</span>
<span class="built_in">round</span>();   <span class="comment">// 四舍五入</span>
<span class="built_in">max</span>();
<span class="built_in">pow</span>(<span class="number">3</span>, <span class="number">2</span>);     <span class="comment">// 三的二次方</span>
Math.<span class="built_in">random</span>() <span class="comment">// 0 到 1 的伪随机值</span>
Random r = new Random();
r.nextInt();
</pre></td></tr></table></figure>

<h1 id="java-util-date">java.util.Date</h1>
<blockquote>
<p>Date月份是由 0 到 11 表示</p>
</blockquote>
<ol>
<li><p>毫秒值 -&gt; 日期, 通过 <code>new Date(long time)</code> 完成  </p>
<p> 还可以通过 <code>setTime()</code> 设置.</p>
</li>
<li>日期对象 -&gt; 毫秒值 <code>getTime()</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">Date</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//当前日期和时间</span>

boolean after(<span class="built_in">Date</span> when);
boolean before(<span class="built_in">Date</span> when);
</pre></td></tr></table></figure>

</li>
</ol>
<p>从JDK1.1开始使用Calendar类实现日期和时间字段之间的转换,
使用DateFormat类来格式化和解析日期字符串.</p>
<h2 id="java-text-dateformat">java.text.DateFormat</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>// 日期 默认风格的日期
String myString = DateFormat<span class="preprocessor">.getDateInstance</span>()<span class="preprocessor">.format</span>(myDate)

// 日期 + 时间 默认风格的日期和时间
String myString = DateFormat<span class="preprocessor">.getDateTimeInstance</span>()<span class="preprocessor">.format</span>(myDate)

DateFormat<span class="preprocessor">.getDateInstance</span>(DateFormate<span class="preprocessor">.LONG</span>)<span class="comment">;</span>
DateFormat<span class="preprocessor">.getDateInstance</span>(DateFormate<span class="preprocessor">.MEDIUM</span>)<span class="comment">;</span>
DateFormat<span class="preprocessor">.getDateTimeInstance</span>(DateFormate<span class="preprocessor">.LONG</span>, DateFormate<span class="preprocessor">.LONG</span>)

// 自定义风格
new SimpleDateFormat(<span class="string">"yyyyMMdd"</span>)
</pre></td></tr></table></figure>

<h2 id="-">将日期格式的字符串 转成 日期对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">String</span> str_date = <span class="string">"2012-4-19"</span>;
DateFormat format = DateFormat.getDateInstance(DateFormat.<span class="built_in">LONG</span>);
<span class="built_in">Date</span> <span class="built_in">date</span> = format.parse(str_date);
</pre></td></tr></table></figure>

<h2 id="-">两个日期之间相隔多少天</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>long separatTime = **
<span class="built_in">Int</span> <span class="built_in">day</span> = separatTime/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>;
</pre></td></tr></table></figure>

<h1 id="java-util-calendar">java.util.Calendar</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Calendar c = Calendar<span class="preprocessor">.getInstance</span>()<span class="comment">;</span>

c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.YEAR</span>)<span class="comment">;</span>
c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.MONTH</span>)<span class="comment">;</span>
c<span class="preprocessor">.get</span>(Calendar<span class="preprocessor">.DAY</span>_OF_MONTH)<span class="comment">;</span>

c<span class="preprocessor">.set</span>(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">19</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.YEAR</span>, <span class="number">2</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.MONTH</span>, <span class="number">2</span>)<span class="comment">;</span>
c<span class="preprocessor">.add</span>(Calendar<span class="preprocessor">.DAY</span>_OF_MONTH, <span class="number">2</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="java" scheme="http://zhpooer.github.io/tags/java/"/>
    
  </entry>
  
</feed>
