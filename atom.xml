<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[竹杖芒鞋轻胜马，一蓑烟雨任平生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-06-28T14:23:01.856Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[haskell趣学-常用的函数]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/haskell%E8%B6%A3%E5%AD%A6-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/06/28/haskell趣学-函数的语法/</id>
    <published>2014-06-28T11:19:17.000Z</published>
    <updated>2014-06-28T14:22:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">模式匹配</h1>
<p>模式匹配决定参数的组成形式, Guard 进行参数的细化管理(过滤)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>sayMe :: <span class="function"><span class="params">(Integral a)</span> =&gt;</span> a<span class="function"> -&gt;</span> String   
sayMe <span class="number">1</span> = <span class="string">"One!"</span>   
sayMe <span class="number">2</span> = <span class="string">"Two!"</span>   
sayMe <span class="number">3</span> = <span class="string">"Three!"</span>   
sayMe <span class="number">4</span> = <span class="string">"Four!"</span>   
sayMe <span class="number">5</span> = <span class="string">"Five!"</span>   
sayMe x = <span class="string">"Not between 1 and 5"</span>
-- 将不会执行到, 模式从上到下执行
sayMe <span class="number">6</span> = <span class="string">"six"</span>


factorial :: <span class="function"><span class="params">(Integral a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a   
factorial <span class="number">0</span> = <span class="number">1</span>   
factorial n = n * factorial (n - <span class="number">1</span>)
</pre></td></tr></table></figure>

<p>在定义模式时，一定要留一个万能匹配的模式，
这样我们的进程就不会为了不可预料的输入而崩溃了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="label">charName ::</span> Char -&gt; String   
charName '<span class="literal">a</span>' = <span class="string">"Albert"</span>   
charName 'b' = <span class="string">"Broseph"</span>   
charName 'c' = <span class="string">"Cecil"</span>
-- when called
charName 'h' -- throws Exception

<span class="label">addVectors ::</span> (Num <span class="literal">a</span>) =&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>)   
addVectors <span class="literal">a</span> b = (fst <span class="literal">a</span> + fst b, snd <span class="literal">a</span> + snd b)
-- 或者可以这样
<span class="label">addVectors ::</span> (Num <span class="literal">a</span>) =&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>)   
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

<span class="label">first ::</span> (<span class="literal">a</span>, b, c) -&gt; <span class="literal">a</span>   
first (x, _, _) = x   
 
<span class="label">second ::</span> (<span class="literal">a</span>, b, c) -&gt; b   
second (_, y, _) = y   
  
<span class="label">third ::</span> (<span class="literal">a</span>, b, c) -&gt; c   
third (_, _, z) = z

<span class="label">head' ::</span> [<span class="literal">a</span>] -&gt; <span class="literal">a</span>   
head' [] = error <span class="string">"Can't call head on an empty list, dummy!"</span>   
<span class="label">head' (x:</span>_) = x

<span class="label">tell ::</span> (Show <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; String   
tell [] = <span class="string">"The list is empty"</span>   
<span class="label">tell (x:</span>[]) = <span class="string">"The list has one element: "</span> ++ show x   
<span class="label">tell (x:y:</span>[]) = <span class="string">"The list has two elements: "</span> ++ show x ++ <span class="string">" and "</span> ++ show y   
<span class="label">tell (x:y:</span>_) = <span class="string">"This list is long. The first two elements are: "</span> ++ show x ++ <span class="string">" and "</span> ++ show y

<span class="label">capital ::</span> String -&gt; String   
capital <span class="string">""</span> = <span class="string">"Empty string, whoops!"</span>   
<span class="label">capital all@(x:</span>xs) = <span class="string">"The first letter of "</span> ++ all ++ <span class="string">" is "</span> ++ [x]
</pre></td></tr></table></figure>

<h2 id="guards">Guards</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="label">bmiTell ::</span> (RealFloat <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; String   
bmiTell bmi   
    | bmi &lt;= <span class="number">18.5</span> = <span class="string">"You're underweight, you emo, you!"</span>   
    | bmi &lt;= <span class="number">25.0</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>   
    | bmi &lt;= <span class="number">30.0</span> = <span class="string">"You're fat! Lose some weight, fatty!"</span>   
    | otherwise   = <span class="string">"You're a whale, congratulations!"</span>

-- 通过反单引号，我们不仅可以以中缀形式调用函数，
-- 也可以在定义函数的时候使用它。有时这样会更易读。
<span class="label">myCompare ::</span> (Ord <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span> -&gt; Ordering   
<span class="literal">a</span> <span class="escape">`m</span>yCompare<span class="escape">` </span>b   
    | <span class="literal">a</span> &gt; b     = GT   
    | <span class="literal">a</span> == b    = EQ   
    | otherwise = LT
</pre></td></tr></table></figure>

<h2 id="where-">where 关键字</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>bmiTell :: (RealFloat <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; <span class="operator">a</span> -&gt; String   
bmiTell weight height   
    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>   
    | bmi &lt;= <span class="keyword">normal</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>   
    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>   
    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>   
    where bmi = weight / height ^ <span class="number">2</span>   
          skinny = <span class="number">18.5</span>   
          <span class="keyword">normal</span> = <span class="number">25.0</span>   
          fat = <span class="number">30.0</span>
<span class="comment">-- 也可以这样</span>
     where bmi = weight / height ^ <span class="number">2</span>   
           (skinny, <span class="keyword">normal</span>, fat) = (<span class="number">18.5</span>, <span class="number">25.0</span>, <span class="number">30.0</span>)

<span class="comment">-- 在where里面定义函数</span>
calcBmis :: (RealFloat <span class="operator">a</span>) =&gt; [(<span class="operator">a</span>, <span class="operator">a</span>)] -&gt; [<span class="operator">a</span>]   
calcBmis xs = [bmi w h | (w, h) &lt;- xs]  
    where bmi weight height = weight / height ^ <span class="number">2</span>
</pre></td></tr></table></figure>

<h2 id="let-">Let 关键字</h2>
<p>let 绑定则是个表达式，允许你在任何位置定义局部变量，
而对不同的 guard 不可见。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>cylinder :: <span class="function"><span class="params">(RealFloat a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a<span class="function"> -&gt;</span> a   
cylinder r h =  
    <span class="reserved">let</span> sideArea = <span class="number">2</span> * pi * r * h   
        topArea = pi * r ^<span class="number">2</span>   
    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea

[<span class="reserved">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]
(<span class="reserved">let</span> (a,b,c) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">in</span> a+b+c) * <span class="number">100</span>

-- 它做的不是过滤，而是绑定名字
calcBmis :: <span class="function"><span class="params">(RealFloat a)</span> =&gt;</span> [(a, a)]<span class="function"> -&gt;</span> [a]   
calcBmis xs = [bmi | (w, h) &lt;- xs, <span class="reserved">let</span> bmi = w / h ^ <span class="number">2</span>]
</pre></td></tr></table></figure>

<h2 id="case-">Case 表达</h2>
<p>模式匹配本质上不过就是 case 语句的语法糖而已。
这两段代码就是完全等价的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="title">head'</span> :: [a] -&gt; a   
<span class="title">head'</span> [] = error <span class="string">"No head for empty lists!"</span>   
<span class="title">head'</span> (x:_) = x

<span class="title">head'</span> :: [a] -&gt; a   
<span class="title">head'</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">"No head for empty lists!"</span>   
                      (x:_) -&gt; x
</pre></td></tr></table></figure>

<p>case表达式的语法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">case</span> expression <span class="operator">of</span> pattern -&gt; <span class="built_in">result</span>   
                   pattern -&gt; <span class="built_in">result</span>   
                   pattern -&gt; <span class="built_in">result</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>   
<span class="title">describeList</span> xs = <span class="string">"The list is "</span> ++ what xs   
    <span class="keyword">where</span> what [] = <span class="string">"empty."</span>   
          what [x] = <span class="string">"a singleton list."</span>   
          what xs = <span class="string">"a longer list."</span>
</pre></td></tr></table></figure>

<h1 id="-">递归</h1>
<p>递归实际上是定义函数以调用自身的方式,
在递归定义中声明的一两个非递归的值, 称作边界条件.</p>
<h2 id="max-">Max函数</h2>
<p><code>maximum</code> 函数取一组可排序的 List 做参数，并回传其中的最大值.</p>
<p>命令式:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(list:List)</span>:</span>Int = {
    var maxNum = <span class="number">0</span>
    <span class="keyword">for</span>(i &lt;- list) maxNum = maximum(i, maxNum)
    <span class="keyword">return</span> maxNum
}
</pre></td></tr></table></figure>

<p>函数式(递归):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>maximum :: (Ord <span class="operator">a</span>) =&gt; [<span class="operator">a</span>] -&gt; <span class="operator">a</span>
maximum [] = error <span class="string">"empty list"</span>
maximum [x] = x
maximum (x:xs) = <span class="built_in">max</span> x (maximum xs)
</pre></td></tr></table></figure>

<h2 id="-">其他案例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>take :: (Num i, Ord i) =&gt; i -&gt; [<span class="operator">a</span>] -&gt; [<span class="operator">a</span>]
take n _
    | n &lt;= <span class="number">0</span> = []
take _ []    = []
take n (x:xs) = x : take (n-<span class="number">1</span>) xs


reverse :: [<span class="operator">a</span>] -&gt; <span class="operator">a</span>
reverse [] = []
reverse [x:xs] = reverse xs ++ [x]


<span class="keyword">repeat</span> :: <span class="operator">a</span> -&gt; [<span class="operator">a</span>]
<span class="keyword">repeat</span> x = x : <span class="keyword">repeat</span> x

<span class="keyword">repeat</span> <span class="number">3</span>  <span class="comment">-- 会永远的执行下去</span>
take <span class="number">5</span> <span class="keyword">repeat</span> <span class="number">3</span>  <span class="comment">-- 得到3个</span>


zip :: [<span class="operator">a</span>] -&gt; [b] -&gt; [(<span class="operator">a</span>, b)]
zip [] _ = []
zip _ [] = []
zip (x:xs) (y:ys) = (x, y) : zip xs ys
</pre></td></tr></table></figure>

<h2 id="-">快速排序</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="label">quicksort ::</span> (Ord <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; <span class="literal">a</span>
quicksort [] = []
<span class="label">quicksort (x:</span>xs) = smallerSorted ++ [x] + biggerSorted
    where smallerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &lt;= x]
          biggerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &gt; x]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-TypeClass]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/haskell%E8%B6%A3%E5%AD%A6-typeclass/"/>
    <id>http://zhpooer.github.io/2014/06/28/haskell趣学-typeclass/</id>
    <published>2014-06-28T02:15:03.000Z</published>
    <updated>2014-06-28T12:09:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="type">Type</h1>
<p>Haskell 支持类型推导</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ghci&gt; <span class="symbol">:t</span> <span class="string">'a'</span>   
<span class="string">'a'</span> <span class="symbol">:</span><span class="symbol">:</span> <span class="constant">Char</span>   
ghci&gt; <span class="symbol">:t</span> <span class="constant">True</span>   
<span class="constant">True</span> <span class="symbol">:</span><span class="symbol">:</span> <span class="constant">Bool</span>   
ghci&gt; <span class="symbol">:t</span> <span class="string">"HELLO!"</span>   
<span class="string">"HELLO!"</span> <span class="symbol">:</span><span class="symbol">:</span> [<span class="constant">Char</span>]
</pre></td></tr></table></figure>

<p>函数也有类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="bullet">removeNonUppercase :: </span>[Char] -&gt; [Char]
removeNonUppercase st = [ c | c &lt;- st, c <span class="smartquote">`elem` ['</span>A'..<span class="emphasis">'Z'</span>]]

<span class="bullet">-- </span>Integer 也是整数，但它是无界的, Int 是有界的
<span class="bullet">factorial :: </span>Integer -&gt; Integer   
factorial n = product [1..n]

<span class="bullet">circumference :: </span>Float -&gt; Float   
circumference r = 2 * pi * r

<span class="bullet">circumference' :: </span>Double -&gt; Double   
circumference' r = 2 * pi * r

<span class="bullet">-- </span>Bool 表示布林值，它只有两种值：True 和 False
<span class="bullet">-- </span>Char 表示一个字符。一个字符由单引号括起，一组字符的 List 即为字串。
<span class="bullet">-- </span>Tuple 的类型取决于它的长度及其中项的类型。注意，空 Tuple 同样也是个类型，它只有一种值：()
</pre></td></tr></table></figure>

<h1 id="type-variables-">Type variables(类型变量?泛型?)</h1>
<p>类型变量, <code>head :: [a] -&gt; a</code>, 意味着 a 可以是任意的类型,
使用到类型变量的函数被称作&quot;多态函数 &quot;，
<code>head</code> 函数的类型声明里标明了它可以取任意类型的
<code>List</code> 并回传其中的第一个元素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>-- <span class="literal">a</span> 和 b 是不同的类型变量
<span class="label">fst ::</span> (<span class="literal">a</span>, b) -&gt; <span class="literal">a</span>
</pre></td></tr></table></figure>

<h1 id="typeclasses">Typeclasses</h1>
<p>类型定义行为的接口，如果一个类型属于某 Typeclass，
那它必实现了该 Typeclass 所描述的行为, 可以看做是 java 的 interface</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">-- +-*/之类的运算符也是同样。在缺省条件下，它们多为中缀函数。</span>
<span class="comment">-- 若要检查它的类型，就必须得用括号括起使之作为另一个函数，或者说以首码函数的形式调用它。</span>
<span class="comment">-- =&gt; 符号, 它左边的部分叫做类型约束</span>
<span class="comment">-- "相等函数取两个相同类型的值作为参数并回传一个布林值，</span>
<span class="comment">-- 而这两个参数的类型同在 Eq 类之中(即类型约束)"</span>
ghci&gt; :t (==)
(==) :: (Eq <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; <span class="operator">a</span> -&gt; Bool

<span class="comment">-- Num 相当于泛型?</span>
addVectors :: (Num <span class="operator">a</span>) =&gt; (<span class="operator">a</span>, <span class="operator">a</span>) -&gt; (<span class="operator">a</span>, <span class="operator">a</span>) -&gt; (<span class="operator">a</span>, <span class="operator">a</span>)   
addVectors <span class="operator">a</span> b = (fst <span class="operator">a</span> + fst b, snd <span class="operator">a</span> + snd b)
</pre></td></tr></table></figure>

<h2 id="-typeclass">常用的 TypeClass</h2>
<p><code>Eq</code> 包含可判断相等性的类型, 提供实现的函数是 == 和 /=</p>
<p><code>Ord</code> 包含可比较大小的类型. 包含了&lt;, &gt;, &lt;=, &gt;= 之类用于比较大小的函数..</p>
<p><code>Show</code> 的成员为可用字串表示的类型, 可以取任一Show的成员类型并将其转为字串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ghci&gt; show <span class="number">3</span>   
<span class="string">"3"</span>   
ghci&gt; show <span class="number">5.334</span>   
<span class="string">"5.334"</span>   
ghci&gt; show <span class="keyword">True</span>   
<span class="string">"True"</span>
</pre></td></tr></table></figure>

<p><code>Read</code> 函数可以将一个字串转为 Read 的某成员类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>ghci&gt; <span class="built_in">read</span> <span class="string">"True"</span> || False   
True   
ghci&gt; <span class="built_in">read</span> <span class="string">"8.2"</span> + <span class="number">3.8</span>   
<span class="number">12.0</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> - <span class="number">2</span>   
<span class="number">3</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"[1,2,3,4]"</span> ++ [<span class="number">3</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]

-- 搞不清楚究竟该是 Int 还是 Float 了
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> :: Int   
<span class="number">5</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> :: Float   
<span class="number">5.0</span>   
ghci&gt; (<span class="built_in">read</span> <span class="string">"5"</span> :: Float) * <span class="number">4</span>   
<span class="number">20.0</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"[1,2,3,4]"</span> :: [Int]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
ghci&gt; <span class="built_in">read</span> <span class="string">"(3, 'a')"</span> :: (Int, Char)   
(<span class="number">3</span>, <span class="string">'a'</span>)
</pre></td></tr></table></figure>

<p><code>Bounded</code> 的成员都有一个上限和下限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>ghci<span class="subst">&gt;</span> minBound <span class="tag">:: Int</span>   
<span class="subst">-</span><span class="number">2147483648</span>   
ghci<span class="subst">&gt;</span> maxBound <span class="tag">:: Char</span>   
<span class="string">'\1114111'</span>   
ghci<span class="subst">&gt;</span> maxBound <span class="tag">:: Bool</span>   
<span class="literal">True</span>   
ghci<span class="subst">&gt;</span> minBound <span class="tag">:: Bool</span>   
<span class="literal">False</span>
</pre></td></tr></table></figure>

<p><code>Enum</code> 的成员都是连续的类型,
个值都有后继子 (successer) 和前置子 (predecesor)，
分别可以通过 succ 函数和 pred 函数得到</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>ghci<span class="subst">&gt;</span> <span class="preprocessor">[</span><span class="string">'a'</span><span class="built_in">..<span class="variable">'e'</span></span><span class="preprocessor">]</span><span class="markup">   
"abcde"   
ghci&gt; </span><span class="preprocessor">[</span><span class="literal">LT</span> <span class="built_in">..</span> <span class="literal">GT</span><span class="preprocessor">]</span><span class="markup">   
</span><span class="preprocessor">[</span><span class="literal">LT</span>,<span class="literal">EQ</span>,<span class="literal">GT</span><span class="preprocessor">]</span><span class="markup">   
ghci&gt; </span><span class="preprocessor">[</span><span class="number">3</span> <span class="built_in">..</span> <span class="number">5</span><span class="preprocessor">]</span><span class="markup">   
</span><span class="preprocessor">[</span><span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="preprocessor">]</span><span class="markup">   
ghci&gt; succ 'B'   
'C'</span>
</pre></td></tr></table></figure>

<p><code>Num</code> 是表示数字的 Typeclass，它的成员类型都具有数字的特征.
类型只有亲近 <code>Show</code> 和 <code>Eq</code>，才可以加入 Num</p>
<p><code>Integral</code> 同样是表示数字的 Typeclass。
Num 包含所有的数字：实数和整数。
而 Intgral 仅包含整数，其中的成员类型有 Int 和 Integer</p>
<p><code>Floating</code> 仅包含浮点类型：Float 和 Double</p>
]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala Implicits手记]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/scala-implicits%E6%89%8B%E8%AE%B0/"/>
    <id>http://zhpooer.github.io/2014/06/28/scala-implicits手记/</id>
    <published>2014-06-28T01:57:30.000Z</published>
    <updated>2014-06-28T09:20:48.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://debasishg.blogspot.com/2010/06/scala-implicits-type-classes-here-i.html" target="_blank">详细说明</a></p>
<p>传统的代理模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Address</span><span class="params">(no: Int, street: String, city: String, 
  state: String, zip: String)</span></span>

<span class="class"><span class="keyword">trait</span> <span class="title">LabelMaker</span>[<span class="title">T</span>] {</span>
  <span class="keyword">def</span> toLabel(value: T): String
}


<span class="comment">// adapter class</span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">AddressLabelMaker</span> <span class="keyword">extends</span> <span class="title">LabelMaker</span>[<span class="title">Address</span>] {</span>
  <span class="keyword">def</span> toLabel(address: Address) = {
    <span class="keyword">import</span> address._
    <span class="string">"%d %s, %s, %s - %s"</span>.format(no, street, city, state, zip)
  }
}

<span class="comment">// the adapter provides the interface of the LabelMaker on an Address</span>
AddressLabelMaker().toLabel(Address(<span class="number">100</span>, <span class="string">"Monroe Street"</span>, <span class="string">"Denver"</span>, <span class="string">"CO"</span>, <span class="string">"80231"</span>))
</pre></td></tr></table></figure>

<p>在scala中可以这样</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>object LabelMaker {
  implicit object AddressLabelMaker extends LabelMaker[Address] {
<span class="code">    def toLabel(address: Address): String = {</span>
<span class="code">      import address._</span>
<span class="code">      "%d %s, %s, %s - %s".format(no, street, city, state, zip)</span>
<span class="code">    }</span>
  }
}

def printLabel[<span class="link_label">T</span>](<span class="link_url">t: T</span>)(implicit lm: LabelMaker[T]) = lm.toLabel(t)
// 简化成这样, 可以理解 隐式捕获 和 T 相关的LabelMaker, 语法糖
def printLabel[<span class="link_label">T: LabelMaker</span>](<span class="link_url">t: T</span>) = implicitly[LabelMaker[T]].toLabel(t)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-入门]]></title>
    <link href="http://zhpooer.github.io/2014/06/25/haskell%E8%B6%A3%E5%AD%A6-%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/06/25/haskell趣学-入门/</id>
    <published>2014-06-25T06:58:38.000Z</published>
    <updated>2014-06-25T08:12:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-heskell">什么是Heskell</h1>
<ul>
<li>纯函数式语言<ul>
<li>命令式编程, 变量在执行过后, 会发生变化(状态变化)</li>
<li>函数式, 函数唯一做的事是引用计数结果, 不产生副作用(如改变全局变量)</li>
<li>应用透明, 若以同样的参数调用同一个函数两次，得到的结果一定是相同.
编译器理解程序的行为, 容易验证函数的正确性, 使简单组合成复杂</li>
</ul>
</li>
<li>惰性(lazy), 若以同样的参数调用同一个函数两次, 得到的结果一定是相同值.<ul>
<li>结合引用透明, 可以把程序仅看作是数据的一系列变形</li>
</ul>
</li>
<li>静态类型, 编译器检查错误, 自动类型推导</li>
</ul>
<h2 id="-haskell">使用Haskell</h2>
<p>编译器 GHC, <code>apt-get install Haskell-platform</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ghci&gt; <span class="symbol">:l</span> myfunction.hs
</pre></td></tr></table></figure>

<h1 id="-">入门</h1>
<pre><code>ghci&gt; 2 + 15 
17 
ghci&gt; 5 / 2 
2.5
ghci&gt; False || True 
True 
ghci&gt; not False
True
ghci&gt; 1 == 0 
False 
ghci&gt; 5 /= 5 
False


ghci&gt; 5+&quot;llama&quot; -- 运算符要求两端都是数值
ghci&gt; 5==True  -- 报错, `==`对两个可比较的值可用, 橘子和苹果没法比较
</code></pre><p>中缀函数: <code>*</code>, <code>+</code>, 大多数命令式编程语言中的函数调用形式通常就是函数名,括号,
由逗号分隔的参数表.
在Haskell 中,函数调用的形式是函数名,空格,空格分隔的参数表</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>succ <span class="number">8</span>  <span class="comment">-- successor, 返回一个数的后继</span>
<span class="built_in">min</span> <span class="number">8</span> <span class="number">9</span>

<span class="comment">-- 函数调用拥有最高的优先级</span>
succ <span class="number">9</span> + <span class="built_in">max</span> <span class="number">5</span> <span class="number">4</span> + <span class="number">1</span>      <span class="comment">-- (succ 9) + (max 5 4) + 1</span>
succ <span class="number">9</span>*<span class="number">10</span>                 <span class="comment">-- (succ 9)*10</span>

<span class="comment">-- 使用中缀是函数清晰</span>
<span class="operator">div</span> <span class="number">92</span> <span class="number">10</span>
<span class="number">92</span> `<span class="operator">div</span>` <span class="number">10</span>
</pre></td></tr></table></figure>

<h2 id="-">定义函数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">-- 声明一个函数, 功能是一个数字乘2</span>
doubleMe x = x + x

doubleUs x y = x*<span class="number">2</span> + y*<span class="number">2</span>     <span class="comment">--  doubleUs x y = doubleMe x + doubleMe y</span>

<span class="comment">-- 首字母大写的函数是不允许</span>
doubleSmallNumber x = (<span class="keyword">if</span> x &gt; <span class="number">100</span> <span class="keyword">then</span> x <span class="keyword">else</span> x*<span class="number">2</span>) + <span class="number">1</span>
</pre></td></tr></table></figure>

<h2 id="list">List</h2>
<p>List 是一种单类型的数据结构,
可以用来存储多个类型相同的元素.
们可以在里面装一组数字或者一组字符, 但不能把字符和数字装在一起.</p>
<p>在 ghci 下，我们可以使用 <code>let</code> 关键字来定义一个常量.
在 ghci 下执行 <code>let a =1</code> 与在脚本中编写 <code>a=1</code> 是等价的.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre>ghci&gt; let lostNumbers = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">48</span>]   
ghci&gt; lostNumbers   
[<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">48</span>]

-- 一个 <span class="keyword">List</span> 由方括号括起，其中的元素用逗号分隔开来
ghci&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ++ [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]

-- 字串实际上就是一组字符的 <span class="keyword">List</span>，<span class="string">"Hello"</span> 只是 [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>]
-- ++ 有效率问题
ghci&gt; <span class="string">"hello"</span> ++ <span class="string">" "</span> ++ <span class="string">"world"</span>   
<span class="string">"hello world"</span>   
ghci&gt; [<span class="string">'w'</span>,<span class="string">'o'</span>] ++ [<span class="string">'o'</span>,<span class="string">'t'</span>]   
<span class="string">"woot"</span>

-- 用 : 运算符往一个 <span class="keyword">List</span> 前端插入元素
-- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 实际上是 <span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>:[] 的语法糖
ghci&gt; <span class="number">5</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  
[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]

-- 索引
ghci&gt; [<span class="number">9.4</span>,<span class="number">33.2</span>,<span class="number">96.2</span>,<span class="number">11.2</span>,<span class="number">23.25</span>] !! <span class="number">1</span>
<span class="number">33.2</span>

-- 常用函数
ghci&gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  
<span class="number">5</span>
ghci&gt; tail [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  
ghci&gt; last [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
<span class="number">1</span>
ghci&gt; init [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] 
[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]
ghci&gt; length [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
<span class="number">5</span>

ghci&gt; <span class="keyword">null</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   
<span class="keyword">False</span>   
ghci&gt; <span class="keyword">null</span> []   
<span class="keyword">True</span>

ghci&gt; reverse [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]
ghci&gt; take <span class="number">3</span> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]   
ghci&gt; take <span class="number">1</span> [<span class="number">3</span>,<span class="number">9</span>,<span class="number">3</span>]   
[<span class="number">3</span>]
ghci&gt; drop <span class="number">3</span> [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]   
[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]

ghci&gt; minimum [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="number">1</span>   
ghci&gt; maximum [<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
<span class="number">9</span>

ghci&gt; sum [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]   
<span class="number">31</span>   
ghci&gt; product [<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]   -- 返回元素的积
<span class="number">24</span>

-- 判断一个元素是否在包含于一个 <span class="keyword">List</span>，通常以中缀函数的形式调用它
ghci&gt; <span class="number">4</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="keyword">True</span>   
ghci&gt; <span class="number">10</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="keyword">False</span>
</pre></td></tr></table></figure>

<h2 id="-range">使用 Range</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>ghci&gt; <span class="attr_selector">[1..20]</span> 
<span class="attr_selector">[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]</span> 
ghci&gt; <span class="attr_selector">['a'..'z']</span> 
"abcdefghijklmnopqrstuvwxyz"

-- 跨步
ghci&gt; <span class="attr_selector">[2,4..20]</span> 
<span class="attr_selector">[2,4,6,8,10,12,14,16,18,20]</span>

-- 由于是惰性的, 可以得到无限长度 List
ghci&gt; take 24 <span class="attr_selector">[13,26..]</span>
ghci&gt; take 10 (cycle <span class="attr_selector">[1,2,3]</span>)
ghci&gt; take 10 (<span class="value">repeat</span> 5)
</pre></td></tr></table></figure>

<h2 id="list-comprehension">List Comprehension</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>]] 
[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>] 
[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; boomBangs xs = [ <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">then</span> <span class="string">"BOOM!"</span> <span class="keyword">else</span> <span class="string">"BANG!"</span> | x &lt;- xs, odd x]

<span class="comment">-- 过滤若条件为 false, 则不被包含</span>
<span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">10.</span><span class="number">.20</span>], x /= <span class="number">13</span>, x /= <span class="number">15</span>, x /= <span class="number">19</span>] 
[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; [ x*y | x &lt;-[<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>], y &lt;- [<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>], x*y &gt; <span class="number">50</span>] 
[<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]

<span class="comment">-- 自己定义length</span>
<span class="comment">-- _ 表示我们并不关心从 List 中取什么值，与其弄个永远不用的变量，不如直接一个 _</span>
<span class="title">ghci</span>&gt; length' xs = sum [<span class="number">1</span> | _ &lt;- xs]

<span class="comment">-- 去除所有的奇数</span>
<span class="title">ghci</span>&gt; <span class="keyword">let</span> xxs = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]] 
<span class="title">ghci</span>&gt; [ [ x | x &lt;- xs, even x ] | xs &lt;- xxs] 
[[<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">6</span>]]
</pre></td></tr></table></figure>

<h2 id="-tuple-">元组(Tuple)</h2>
<p>Tuple (元组)很像 List, 都是将多个值存入一个个体的容器.
Tuple 则要求你对需要组合的数据的数目非常的明确，
它的类型取决于其中项的数目与其各自的类型.(可以装载不同类型的数据)</p>
<p><code>[(1,2),(8,11),(4,5)]</code> 相较 <code>[[1,2],[8,11,5],[4,5]]</code></p>
<p><code>[(1,2),(8,11,5),(4,5)]</code>，<code>[(1,2),(&quot;one&quot;,2)]</code> 都会报错</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>ghci&gt; fst (<span class="number">8</span>,<span class="number">11</span>) 
<span class="number">8</span> 
ghci&gt; fst (<span class="string">"Wow"</span>, <span class="literal">False</span>) 
<span class="string">"Wow"</span>

ghci&gt; snd (<span class="number">8</span>,<span class="number">11</span>) 
<span class="number">11</span> 
ghci&gt; snd (<span class="string">"Wow"</span>, <span class="literal">False</span>) 
<span class="literal">False</span>
-- 这两个函数仅对序对有效, 不能应用于三元组，四元组和五元组之上

ghci&gt; zip [<span class="number">1</span>..] [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"cherry"</span>, <span class="string">"mango"</span>] 
[(<span class="number">1</span>,<span class="string">"apple"</span>),(<span class="number">2</span>,<span class="string">"orange"</span>),(<span class="number">3</span>,<span class="string">"cherry"</span>),(<span class="number">4</span>,<span class="string">"mango"</span>)]

-- 告诉它只要周长为 <span class="number">24</span> 的直角三角形
-- 同时也考虑上 b 边要短于斜边，<span class="literal">a</span> 边要短于 b 边情况
ghci&gt; let rightTriangles' = [ (<span class="literal">a</span>,b,c) | c &lt;- [<span class="number">1</span>..<span class="number">10</span>], b &lt;- [<span class="number">1</span>..c], <span class="literal">a</span> &lt;- [<span class="number">1</span>..b], <span class="literal">a</span>^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>, <span class="literal">a</span>+b+c == <span class="number">24</span>] 
ghci&gt; rightTriangles' 
[(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala培训monad]]></title>
    <link href="http://zhpooer.github.io/2014/06/22/scala%E5%9F%B9%E8%AE%ADmonad/"/>
    <id>http://zhpooer.github.io/2014/06/22/scala培训monad/</id>
    <published>2014-06-22T02:14:17.000Z</published>
    <updated>2014-06-22T07:46:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="monad">monad</h1>
<ul>
<li>magic</li>
<li>category</li>
<li>theory</li>
<li>design pattern</li>
<li>api</li>
</ul>
<p>函数式争论, 可赋值和不可赋值(运输的隐喻, 货车(可以赋值)和石油管道(Monad))</p>
<h2 id="scala-monad">scala中的Monad</h2>
<p>可扩展, 可重用, 可测试</p>
<ul>
<li><p>Option, 实现 <code>map</code> 和 <code>flatmap</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">()</span>:</span> Option[Int];
<span class="function"><span class="keyword">def</span> <span class="title">getQuantities</span><span class="params">()</span>:</span>Option[Int];

<span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">()</span>:</span>Option[Int] =
    getPrice().flatMap(price =&gt; getQuantities().map(price * _));

<span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">()</span>:</span>Option[Int] = {
    <span class="keyword">for</span>{
        price &lt;- getPrice()
        quantities &lt;- getQuantities()
    } <span class="keyword">yield</span> price * quantities;
}
</pre></td></tr></table></figure>
</li>
<li><p>Try</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>// java, 命令式, 不可重用
<span class="keyword">try</span>{
   val conn = DriverManager.getConnection(url, user, password);
} catch {
   case e:* =&gt; 
}

<span class="function"><span class="keyword">def</span> <span class="title">getDriver</span><span class="params">()</span>:</span>Try[String];

<span class="keyword">for</span>(driver &lt;- getDriver()) <span class="keyword">yield</span> driver
</pre></td></tr></table></figure>
</li>
<li><p>Future</p>
</li>
<li>all collections<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 八皇后问题</span>
def queen(n:Int) = {
    def placeQueens(k: Int): <span class="keyword">List</span>[<span class="keyword">List</span>[(Int, Int)]] =
        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">List</span>(<span class="keyword">List</span>())
        <span class="keyword">else</span> <span class="keyword">for</span> {
            
        }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="monad-">Monad是一个设计模式</h2>
<ul>
<li>不确定性技术</li>
<li>异常处理</li>
<li>并发</li>
<li>解析, <strong>scalaz</strong>, <code>ValidationNEL</code></li>
<li>持续计算</li>
<li><p>输入, 输出</p>
<figure class="highlight scala:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>
def greet {
<span class="code">    println("请输入")</span>
<span class="code">    val key = readLine</span>
<span class="code">    println("您输入的是" + key)</span>
}

// Monad
cass class IO[<span class="link_label">A</span>](<span class="link_url">run: (</span>) =&gt; A) {
   def map[<span class="link_label">B</span>](<span class="link_url">f: A=&gt; B</span>): IO[B]= IO(() =&gt; f(run()))
   def flatMap[<span class="link_label">B</span>](<span class="link_url">f: A =&gt; IO[B]</span>) :IO[B] =&gt; f(run())
}

// 将调用包装成函数
def io[<span class="link_label">A</span>](<span class="link_url">a: =&gt; A</span>): IO[A] = IO(() =&gt; a)

def putLine(a: String): IO[Unit] = io(println(s))
def getLine: IO[String] = io(readLine)

// 函数的调用和传递, 返回一个函数
def greet: IO[Unit] = for {
<span class="code">    _ &lt;- putLine("")</span>
<span class="code">    name &lt;- getLine</span>
<span class="code">    result &lt;- putLine("")</span>
} yield ()

// 运行函数
greet.run();
</pre></td></tr></table></figure>
</li>
<li><p>可变性计算</p>
</li>
</ul>
<p><strong>sap</strong></p>
<h1 id="reactive-with-akka">Reactive with Akka</h1>
<p>可用:</p>
<ul>
<li>出错了还能用</li>
<li>高负荷, 高压力下</li>
</ul>
<p>可扩展, 可恢复, 可回应</p>
<p>actor:</p>
<ul>
<li>具有ID</li>
<li>具有行为</li>
<li>交流方式是异步(synchronous)</li>
<li>一个actor是单线程</li>
</ul>
<p>时间驱动(Event Driven)</p>
<ul>
<li>Event是头等函数</li>
<li>消息会回复</li>
<li>消息会被存到一个 Queue</li>
<li>消息可以分发</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
    <span class="keyword">var</span> greeting = <span class="string">""</span>
    <span class="keyword">def</span> receive = {
       <span class="keyword">case</span> Greet =&gt; sender ! Greeting(greeting) <span class="comment">// </span>
    }
}

<span class="keyword">val</span> system = ActorSystem(<span class="string">"helloakka"</span>)

system.actorOf()
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客-OA系统]]></title>
    <link href="http://zhpooer.github.io/2014/06/20/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2-oa%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhpooer.github.io/2014/06/20/传智播客-oa系统/</id>
    <published>2014-06-20T01:02:49.000Z</published>
    <updated>2014-06-27T12:16:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>OA: Office Automation, 办公自动化<br>CRM: 客户关系管理系统<br>ERP: 企业资源管理系统<br>BBS: 论坛系统<br>CMS: 内容管理系统</p>
<p>软件开发流程</p>
<ol>
<li>需求调研, 形成调研文档</li>
<li>分析需求, 形成需求分析文档</li>
<li>设计(概要设计, 详细设计), 形成设计文档</li>
<li>编码</li>
<li>测试, 测试用例, 测试计划, 测试报告, 性能测试, 压力测试(HP LoadRunner)</li>
<li>运维</li>
</ol>
<h2 id="-">整体设计</h2>
<p>分层: 表现层, 业务层, 持久层</p>
<p>技术: Struts + Spring3.2 + Hibernate3.6 + Jquery1.8 + Ajax</p>
<p>代码规范:</p>
<ul>
<li>常量字母都大写, 单词之间使用<code>_</code>隔开, 例如 <code>DEFAULT_PAGE_SIZE</code></li>
<li>注释, 在代码中加入适当注释, 说明步骤, 与说明非简单逻辑</li>
<li>空行, 在代码中加入适当空行, 增加可读性</li>
<li>要格式化代码, 一个Java文件中代码不要过多, 一个方法中的代码不要过多</li>
</ul>
<p>约定:</p>
<ul>
<li>文件中都采用 UTF-8 编码, JDK版本, 编译环境统一</li>
<li>实体的主键属性的类型使用<code>Long</code>类型</li>
</ul>
<h1 id="-">搭建开发环境</h1>
<ol>
<li>创建Web项目<code>itcastOA</code></li>
<li>导入jar包(struts2, spring3.2, hibernate3.6, 数据库驱动, c3p0)</li>
<li><p>配置 web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>
<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> openSessionInView<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>OpenSessionInView<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> struts<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>StrtusPrepareAndExcutorFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>openSessionInView <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> /* <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2 <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> /* <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>

<span class="comment">&lt;!-- spring监听器 --&gt;</span>
<span class="tag">&lt;<span class="title">listener</span>&gt;</span>
   <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span> org.spring.web.context.ContextLoaderListener <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
<span class="tag">&lt;<span class="title">context-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span> contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:beans.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
<span class="tag">&lt;/<span class="title">context-param</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>加入 <code>struts.xml</code>, <code>beans.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span>&gt;</span>
    <span class="comment">&lt;!-- 读取属性文件的配置  --&gt;</span>
    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">locaction</span>=<span class="value">"classpath:jdbc.properties"</span>/&gt;</span>

    <span class="comment">&lt;!-- dataSource  --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSrouce"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.ComboPooledDataSource"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 本地会话工厂bean, LocalSessonFactoryBean --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.spring.hibernate.LocalSessionFactory"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">props</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">props</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- hbm的映射文件 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mappingDirectoryLocations"</span> &gt;</span>
            <span class="tag">&lt;<span class="title">list</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:cn/itcast/or/domain <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 事务管理器, HibernateTransactonManager --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"HibernateTransactionManager"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 事务通知, AOP切面, 事务注解驱动, 组件扫描 --&gt;</span>
    <span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"oaAdvice"</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span>
        <span class="comment">&lt;!-- 事务属性 --&gt;</span>
        <span class="tag">&lt;<span class="title">tx:attributes</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"save*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"update*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"delete*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"find*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tx:method</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tx:attributes</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span>
    <span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
        <span class="comment">&lt;!-- 切点  --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"execution(* cn.itcast.oa.service..*Service.*())"</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">aop:pointcut</span>&gt;</span>
        <span class="comment">&lt;!-- 切面 --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:adviser</span> <span class="attribute">advice-ref</span>=<span class="value">"oaAdvice"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"oaPC"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:adviser</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
    <span class="comment">&lt;!-- 组建扫描--&gt;</span>
    <span class="tag">&lt;<span class="title">context:compoent-scan</span> <span class="attribute">bas-package</span>=<span class="value">"cn.itcast.oa"</span>&gt;</span><span class="tag">&lt;/<span class="title">context:compoent-scan</span>&gt;</span>
    <span class="comment">&lt;!-- 支持注解  --&gt;</span>
    <span class="tag">&lt;<span class="title">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="title">context:annotation-config</span>&gt;</span>
    <span class="comment">&lt;!-- 事务注解驱动 --&gt;</span>
    <span class="tag">&lt;<span class="title">tx:annotation-driver</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="title">tx:annotation-driver</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> itcastOA <span class="keyword">default</span> <span class="keyword">character</span> <span class="keyword">set</span> utf8;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'xiaoming'</span> identified <span class="keyword">by</span> <span class="string">'123'</span>;</span>  <span class="comment">-- 创建一个普通用户</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast_oa.* <span class="keyword">to</span> itcast@localhost identified <span class="keyword">by</span> <span class="string">"123"</span>;</span>
</pre></td></tr></table></figure>
</li>
<li><p>数据连接参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>;; TODO
<span class="constant">driverClass</span>=
<span class="constant">jdbcUrl</span>=
<span class="constant">user</span>=
<span class="constant">password</span>=
<span class="constant">initPoolSize</span>=
<span class="constant">maxPoolSize</span>=
minPoolSize
</pre></td></tr></table></figure>
</li>
<li><p>创建包结构</p>
<pre><code> cn.itcast.oa.domain
 cn.itcast.oa.dao
 cn.itcast.oa.service
 cn.itcast.oa.web
 cn.itcast.oa.web.action
 cn.itcast.oa.web.filter
 cn.itcast.oa.web.interceptor
 cn.itcast.oa.web.listener
 cn.itcast.oa.utils
 cn.itcast.oa.base
</code></pre></li>
<li><p>抽取通用DAO</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre>package cn.itcast.oa.<span class="keyword">base</span>;
<span class="comment">// 抽取通用DAO</span>
<span class="keyword">public</span> <span class="keyword">interface</span> IBaseDao&lt;T&gt; {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(T entity);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(Long id);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(T entity)
    <span class="keyword">public</span> T <span class="title">findById</span>(Long id);
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findAll</span>();
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findByIds</span>(Long[] ids);
}
<span class="comment">// class UserDaoImpl extends BaseDaoImpl&lt;User&gt; implements IUserDao</span>
<span class="keyword">public</span> <span class="keyword">class</span> BaseDaoImpl&lt;T&gt; implements IBaseDao&lt;T&gt; {
    <span class="comment">// 在执行过程中, 获得实体类类型</span>
    Class&lt;T&gt; clazz;
    
    <span class="keyword">public</span> <span class="title">BaseDaoImpl</span>(){
        <span class="comment">// 获得父类类型的泛型</span>
        ParameterziedType genericSuperclass = <span class="keyword">this</span>.getClass().getGenericSuperclass();
        Type[] types = genericSuperclass.getActualTypedArguments();
        <span class="comment">// 获得实体类类型</span>
        clazz = (Class&lt;T&gt;)types[<span class="number">0</span>];
    }

    @Resource
    <span class="keyword">private</span> SessionFactory sessoinFactory;

    <span class="keyword">public</span> Session <span class="title">getSession</span>(){
        <span class="keyword">return</span> sessionFactory.getCurrentSession();
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(T entity){
        getSessoin().save(entity);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(Long id){
        <span class="comment">//先查询, 再删除</span>
        getSession().delete(<span class="keyword">this</span>.findById(id));
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(T entity){
        getSessoin().update(entity);
    }
    <span class="keyword">public</span> T <span class="title">findById</span>(Long id){
       <span class="keyword">return</span> <span class="keyword">this</span>.getSession().<span class="keyword">get</span>(clazz, id)
    }
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findAll</span>(){
        String hql = <span class="string">"from "</span> + clazz.getSimpleName();
        getSession().createQeury(query);
        <span class="keyword">return</span> query.list();
    }
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findByIds</span>(Long[] ids){
        <span class="keyword">if</span>(ids!=<span class="keyword">null</span> && ids.length &gt;<span class="number">0</span> ){
        String hql = <span class="string">"From "</span> + clazz.getSimpleName() + <span class="string">" where id in (:ids)"</span>;
        Qeury query = getSession().createQuery(hql);
        query.setParameterList(<span class="string">"ids"</span>, ids); <span class="comment">// 为命名参数赋值</span>
        <span class="keyword">return</span> query.list();
        }
        Collections.EMPTY_LIST;
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>抽取通用 Action</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span>&lt;<span class="title">T</span>&gt; <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">ActionSupport</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">ModelDriver</span>&lt;<span class="title">T</span>&gt; {</span>
    <span class="keyword">protected</span> T model;
    <span class="keyword">public</span> BaseAction(){
        <span class="comment">// 构造方法中实例化模型对象</span>
        ParameterzedTypes superclass = <span class="keyword">this</span>.getClass().getGernericSuperclass();
        Type[] types = superclass.getActualTypedArguments();
        <span class="comment">// 获得实体类类型</span>
        Class&lt;T&gt; clazz = (Class&lt;T&gt;)types[<span class="number">0</span>];
        model = clazz.newInstance();
    }
    <span class="keyword">public</span> T getModel(){
        <span class="keyword">return</span> model;
    }
    <span class="comment">// 将集合属性压入值栈</span>
    <span class="keyword">protected</span> <span class="keyword">void</span> set(String key, List&lt;?&gt; value) {
        ActionContext.getContext().getValueStack().set(key, value);
    }
    <span class="comment">// 将单个属性压入值栈</span>
    <span class="keyword">protected</span> <span class="keyword">void</span> push(Ojbect obj) {
        ActionContext.getContext().push(obj);
    }
}
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-3-">系统管理(3)</h1>
<p>抽取实体类: 岗位(Role), 部门(Department), 用户(User)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Role {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet();
}
<span class="keyword">public</span> <span class="keyword">class</span> Department {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Department parent;
    <span class="keyword">private</span> Set&lt;Department&gt; children = <span class="keyword">new</span> HashSet();
    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet();
}
<span class="keyword">public</span> <span class="keyword">class</span> User {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> loginName:String
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> <span class="keyword">int</span> gender;
    <span class="keyword">private</span> String phoneNumber
    <span class="keyword">private</span> Department department;
    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet();
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre>&lt;hibernate-mapping&gt;
    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"Role"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;gernerator <span class="type">class</span>=<span class="string">"native"</span>&gt;
            &lt;/gernerator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"description"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"user"</span> table=<span class="string">"itcast_user_role"</span>&gt;
            &lt;key column=<span class="string">"roleId"</span>&gt;&lt;/key&gt;
            &lt;many-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"user"</span> column=<span class="string">"userId"</span>&gt;&lt;/many-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;

    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"Department"</span> table=<span class="string">"itcast_department"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;gernerator <span class="type">class</span>=<span class="string">"native"</span>&gt;
            &lt;/gernerator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"description"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        
        &lt;many-<span class="keyword">to</span>-one <span class="property">name</span>=<span class="string">"parent"</span> <span class="type">class</span>=<span class="string">"Department"</span> column=<span class="string">"parentId"</span>&gt;&lt;/many-<span class="keyword">to</span>-one&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"children"</span>&gt;
            &lt;key column=<span class="string">"parentId"</span>&gt;
            &lt;/key&gt;
            &lt;one-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"Department"</span>/&gt;
        &lt;/<span class="keyword">set</span>&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"users"</span>&gt;
            &lt;key column=<span class="string">"department"</span>&gt;
            &lt;/key&gt;
            &lt;one-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"User"</span>&gt;&lt;/one-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;
    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"User"</span> table=<span class="string">"itcast_user"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;generator <span class="type">class</span>=<span class="string">"native"</span>&gt; &lt;/generator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"loginName"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"descrption"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"gender"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"email"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"phoneNumber"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;many-<span class="keyword">to</span>-one <span class="property">name</span>=<span class="string">"department"</span> <span class="type">class</span>=<span class="string">"Department"</span>&gt;&lt;/many-<span class="keyword">to</span>-one&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"roles"</span> table=<span class="string">"itcast_user_rols"</span>&gt;
            &lt;key column=<span class="string">"userId"</span>&gt;
            &lt;/key&gt;
            &lt;many-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"Role"</span> column=<span class="string">"roleId"</span>&gt;&lt;/many-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;
&lt;/hibernate-mapping&gt;
</pre></td></tr></table></figure>

<h2 id="-">岗位管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre>@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">Role</span>&gt; {</span>
    @Resource
    <span class="keyword">private</span> IRoleService roleService;
    <span class="comment">// 查询所有岗位列表</span>
    @Action(value=<span class="string">"role_List"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"rolsList.jsp"</span>)})
    <span class="keyword">public</span> String <span class="keyword">list</span>(){
        <span class="keyword">List</span>&lt;Role&gt; roleList = roleService.findAll();
        set(<span class="string">"roleList"</span>, roleList);
        <span class="keyword">return</span> <span class="string">"list"</span>;
    }
    
    @Action(value=<span class="string">"role_delete"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"roleList"</span>, type=<span class="string">"redirectAction"</span>)})
    <span class="keyword">public</span> String delete(){
        <span class="keyword">return</span> <span class="string">"toList"</span>;
    }
    
    @Action(value=<span class="string">"role_save"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"roleList"</span>, type=<span class="string">"redirectAction"</span>)})
    <span class="keyword">public</span> String save(){
        <span class="keyword">return</span> <span class="string">"toList"</span>;
    }

    <span class="comment">// 跳转到updateUI页面</span>
    <span class="keyword">public</span> String updateUI(){
        Role role = roleService.findById(model.getId);
        push(role);
        <span class="keyword">return</span> <span class="string">"updateUI"</span>;
    }

}

@Service
@Transaction
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">IRoleService</span> {</span>
    @Resource
    <span class="keyword">private</span> IRoleDao roleDao;
    <span class="comment">// 查询岗位列表</span>
    @Transactional(readOnly=<span class="keyword">true</span>)
    <span class="keyword">public</span> <span class="keyword">List</span>&lt;Role&gt; findAll(){
        roleDao.findAll();
    }
}

<span class="comment">// 岗位管理</span>
@Repository
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Role</span>&gt; <span class="keyword">implements</span> <span class="title">IRoleDao</span> {</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">&lt;!-- RoleAction-role_save-validation.xml --&gt;</span>
<span class="tag">&lt;<span class="title">validators</span>&gt;</span>
    <span class="tag">&lt;<span class="title">field</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">field-validator</span> <span class="attribute">type</span>=<span class="value">"requiedstring"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">message</span> <span class="attribute">key</span>=<span class="value">"roleNameNotNull"</span>&gt;</span><span class="tag">&lt;/<span class="title">message</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">field-validator</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">field</span>&gt;</span>
<span class="tag">&lt;/<span class="title">validators</span>&gt;</span>
<span class="comment">&lt;!-- messages.properties --&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>岗位名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>相关操作<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"roleList"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${name} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${description} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>  <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">部门管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre>@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">Departemnt</span>&gt;{</span>
    <span class="comment">// 注意返回上一级时的设计</span>
    <span class="keyword">private</span> Long parentId; <span class="comment">// 属性驱动, 上级部门的Id</span>
    
    <span class="comment">// 查询部门列表功能</span>
    <span class="keyword">public</span> String <span class="keyword">list</span>(){
        <span class="keyword">if</span>(parentId == <span class="keyword">null</span>) {
            <span class="comment">// 查询顶级部门列表</span>
            <span class="comment">// hql: from department where parent is null</span>
            <span class="keyword">List</span> <span class="keyword">list</span> = departmentService.findTopTist();
        } <span class="keyword">else</span> {
            <span class="comment">// 查询下级部门</span>
            <span class="comment">// hql: from department where parent.id=:parentId;</span>
            <span class="keyword">list</span> = departmentService.findChildren(parentId);
        }
        
        set(<span class="string">"list"</span>, <span class="keyword">list</span>);
        <span class="keyword">return</span> <span class="keyword">LIST</span>;
    }
    <span class="comment">// 删除上级部门同时删除下级部门, 配置cascade</span>
    <span class="keyword">public</span> String delete(){
        <span class="keyword">if</span>(getParent().getId()!=<span class="keyword">null</span>)parentId = model.getParent().getId();
        <span class="keyword">return</span> TOLIST;
    }
    <span class="comment">// 新建 删除时,要注意传过来 parentId</span>
    <span class="keyword">public</span> String saveUI(){
        <span class="comment">// 准备部门列表数据, 用户填充下拉框</span>
        <span class="comment">// 使用递归, 包装成树形结构, 使用缩进</span>
        <span class="comment">// 空格 替换成 &nbsp;</span>
    }
    <span class="keyword">public</span> String save(){}
    <span class="keyword">public</span> String updateUI(){
        <span class="comment">// 准备部门列表数据, 用户填充下拉框</span>
        <span class="comment">// 使用递归, 包装成树形结构名字</span>
        <span class="comment">// 空格 替换成 &nbsp;</span>
        <span class="comment">// 在修改时展示的不应该是全的树</span>
    }
    <span class="keyword">public</span> String update(){}
}
</pre></td></tr></table></figure>

<h2 id="-">用户管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="annotation">@Scope</span>(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> {</span>
    <span class="keyword">private</span> Long departmentId;
    <span class="keyword">private</span> Long[] roleIds ;
    
    <span class="keyword">public</span> String <span class="title">updateUI</span>(){
        <span class="comment">// 准备部门列表, 可以使用 json-lib和ajax, 异步获得</span>
        <span class="comment">// 准备岗位列表</span>
    }
    <span class="keyword">public</span> String <span class="title">save</span>(){
        <span class="comment">// 根据departmentid 和 roleids手动配置;</span>

        <span class="comment">// 某人密码是"1234"</span>
        <span class="comment">// 使用 md5 加密</span>
    }

    <span class="comment">// 初始化密码</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPassword</span>(){
    }
}
</pre></td></tr></table></figure>

<h3 id="-">用户名重复客户端校验</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="comment">// 绑定离焦时间</span>
        $(<span class="string">"#loginName"</span>).blur(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="keyword">var</span> v = <span class="keyword">this</span>.value;
            $.post(${contextPath/user_checkLoginName}, {<span class="string">'loginName'</span>: v}, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
                <span class="keyword">if</span>(data==<span class="number">1</span>) {
                    <span class="comment">// 当前登陆名字已经存在</span>
                    $(<span class="string">"#showMsg"</span>).html(<span class="string">"当前登陆名已经存在"</span>);
                    $(<span class="string">"#saveBtn"</span>).hide();
                } <span class="keyword">else</span> {
                    $(<span class="string">"#showMsg"</span>).html(<span class="string">"当前输入名可以使用"</span>);
                    $(<span class="string">"#saveBtn"</span>).show();
                }
            })
        });
    })
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// UserAction</span>
<span class="keyword">public</span> <span class="built_in">String</span> checkLoginName(){
    <span class="built_in">String</span> loginName <span class="subst">=</span> model<span class="built_in">.</span>getLoginName()<span class="built_in">.</span>trim();
    <span class="built_in">List</span><span class="subst">&lt;</span>User<span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> userService<span class="built_in">.</span>findByLoginName(loginName);
    response<span class="built_in">.</span>setContentType(<span class="string">"text/html;charset=utf-8"</span>);
    <span class="built_in">String</span> flag <span class="subst">=</span> <span class="number">0</span>;
    <span class="keyword">if</span>(<span class="built_in">list</span><span class="subst">!=</span><span class="built_in">null</span> <span class="subst">&&</span> <span class="built_in">list</span><span class="built_in">.</span>size()<span class="subst">&gt;</span><span class="number">0</span>) {
        <span class="comment">// 当前登录名已经存在</span>
        flag <span class="subst">=</span> <span class="string">"1"</span>
    }
    out<span class="built_in">.</span>print(flag);
    <span class="keyword">return</span> <span class="literal">NONE</span>;
}
</pre></td></tr></table></figure>

<h1 id="-">权限管理</h1>
<p>角色就是权限的集合, 角色关联权限.
在进行任何一个操作之前, 先判断用户是否有权限</p>
<h2 id="-">权限实体</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Privilege {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String url;        <span class="comment">//权限对应的访问url地址</span>
    <span class="keyword">private</span> Privilege parent;  <span class="comment">// 对应的上级权限</span>
    <span class="keyword">private</span> Set&lt;Privilege&gt; children = <span class="keyword">new</span> HashSet();
    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet();
}

<span class="keyword">public</span> <span class="keyword">class</span> Role {
    <span class="keyword">private</span> Set&lt;Privilege&gt; privileges = <span class="keyword">new</span> HashSet();
}
</pre></td></tr></table></figure>

<h3 id="-">初始化数据</h3>
<figure class="highlight sql:"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&gt; source privilege<span class="class">.sql</span>; -- 导入初始化数据
&gt; insert into <span class="function">user(loginName, name, password)</span> <span class="function">values(<span class="string">"admin"</span>, <span class="string">"超级用户"</span>, <span class="function">md5(admin)</span>)</span>;
</pre></td></tr></table></figure>

<h3 id="-">显示层</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> RoleAction {
    <span class="keyword">public</span> String <span class="title">setPrivilegeUI</span>() {
        <span class="comment">// 根据id 查询当前设置权限的角色</span>
        Role role = roleService.findById();
        push(role);

        <span class="comment">// 准备权限列表数据</span>
        <span class="comment">// 使用 ul li 可以来展示树形结构</span>
        <span class="comment">// 配合使用 jquery TreeView 插件</span>
        List privileges = privilegeService.findTopPrivilege();

        <span class="comment">// 设置privilegesIds属性驱动的值, 用于页面回显</span>
        <span class="keyword">return</span> <span class="string">"setPrivilegeUI"</span>;
    }
    
    <span class="keyword">private</span> Long[] privilegeIds;
    <span class="keyword">public</span> String <span class="title">setPrivilege</span>(){
        Role role = roleService.findById();
        <span class="keyword">if</span>(privilegeIds != <span class="keyword">null</span> && privilegeIds.length&gt;<span class="number">0</span>) {
            List privilegeList = priprivilegeService.findByIds(privilegeIds);
        } <span class="keyword">else</span> {
            
        }
        
        <span class="keyword">return</span> TOLIST;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">&lt;!-- set order-by=id 设置权限树有序  --&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    $(<span class="string">"#root"</span>).treeview();
    <span class="comment">//为复选框绑定事件</span>
    <span class="comment">// 当选中或取消某个权限时, 同时选中或者取消下级权限</span>
    $(<span class="string">"input[name=privilegeIds]"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        $(<span class="keyword">this</span>).siblings(<span class="string">"ul"</span>).find(<span class="string">"input"</span>).attr(<span class="string">'checked'</span>, <span class="keyword">this</span>.checked);
    });
    <span class="comment">// 当选中某个权限时, 同时选中上级选项</span>
    <span class="keyword">if</span>(<span class="keyword">this</span>.checked){
        $(<span class="keyword">this</span>).parents(<span class="string">"li"</span>).children(<span class="string">"input"</span>).attr(<span class="string">'checked'</span>, <span class="literal">true</span>);
    } <span class="keyword">else</span> {
        <span class="keyword">if</span>($(<span class="keyword">this</span>).parent(<span class="string">'li'</span>).siblings(<span class="string">'li'</span>).children(<span class="string">'input:checked'</span>).size()==<span class="number">0</span>){
            $(<span class="keyword">this</span>).parent().parent().siblings(<span class="string">"input"</span>).attr(<span class="string">"checked"</span>, <span class="literal">false</span>);
        }
    }
    <span class="comment">// 当取消某个权限时, 如果兄弟权限没有选中, 取消上级选项</span>
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"root"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"children"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"abc"</span>/&gt;</span>
            <span class="comment">&lt;!--  label的案件效果和input绑定--&gt;</span>
            <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">应用主页面</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> {</span>
    <span class="keyword">public</span> String <span class="title">index</span>(){
        <span class="keyword">return</span> <span class="string">"index"</span>;
    }
    <span class="keyword">public</span> String <span class="title">top</span>(){}
    <span class="keyword">public</span> String <span class="title">left</span>(){}
    <span class="keyword">public</span> String <span class="title">right</span>(){}
    <span class="keyword">public</span> String <span class="title">bottom</span>(){}
}
</pre></td></tr></table></figure>

<h1 id="-">用户登陆和注销</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">// UserAction</span>
<span class="keyword">public</span> String <span class="title">login</span>(){
    User user = userService.login(model);
    <span class="keyword">if</span>(user != <span class="keyword">null</span>) {
        session().put(key, <span class="keyword">value</span>);
    } <span class="keyword">else</span> {
        <span class="keyword">this</span>.addActionError(<span class="string">"用户名或者密码不正确"</span>);
        <span class="keyword">return</span> <span class="string">"loginUI"</span>;
    }
    <span class="keyword">return</span> <span class="string">"home"</span>;
}

<span class="keyword">public</span> String <span class="title">logout</span>(){
    session.remove(<span class="string">"loginUser"</span>);
    <span class="keyword">return</span> <span class="string">"loginUI"</span>;
}

<span class="comment">// UserService</span>
<span class="keyword">public</span> User <span class="title">login</span>(){
    model.setPassword(md5(model.getPassword()));
    <span class="comment">// 根据用户名和密码查询用户</span>
    <span class="keyword">return</span> userDao.findUserByLoginNameAndPassword()
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>&lt;<span class="keyword">global</span>-<span class="constant">result</span>&gt;
    &lt;<span class="constant">result</span> <span class="property">name</span>=<span class="string">"loginUI"</span>&gt;
        index.jsp
    &lt;/<span class="constant">result</span>&gt;
&lt;/<span class="keyword">global</span>-<span class="constant">result</span>&gt;
</pre></td></tr></table></figure>

<h1 id="-">使用权限</h1>
<p>左侧菜单数据从数据库中获取，编写监听器, 当项目启动时加载权限数据, 将权限数据放入 <code>application</code> 作用域</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">// 在web.xml配置监听器</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAIniitListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span>(ServletContextEvent sce) {
        <span class="comment">// 获得 spring 工厂对象</span>
        <span class="comment">// 方式一: application.getAttribute(WebApplicationContextUtil.ROOT_WEB_APPLICATION_CONTEXT);</span>
        WebApplicationContext cxt =
            WebApplicationContextUtil.getWebApplicationContext(sce.getServletContext());
        IPrivilegeService ps = cxt.getBean(<span class="string">"privilegeService"</span>);
        <span class="comment">// 从工厂中获得一个权限的Service对象</span>
        List&lt;Privilege&gt; privilegeTopList = ps.findTopList();
        <span class="comment">// 将权限数据放入作用域, lazy要设置为 false</span>
        sce.getServletContext().setAttribute(<span class="string">"privilegeTopList"</span>, privilegeTopList);

        <span class="comment">//需要全部权限对应的url</span>
        List&lt;String&gt; allUrls = ps.findAllUrls();
        sce.getServletContext().setAttribute(<span class="string">"allUrls"</span>, allUrls);        
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span>(ServletContextEvent sce){}
}

<span class="comment">// User.class, role privileges都要立即加载</span>
<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPrivilegeByName</span>(String privilegeName){
    <span class="keyword">if</span>(isAdmin()) <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">for</span>(Role r: roles) {
       Set&lt;Privilege&gt; privileges = r.getPrivileges();
       <span class="keyword">for</span>(Privilege privilege : privileges) {
           <span class="keyword">if</span>(privilegeName.equals(privilege.getName())) {
               <span class="keyword">return</span> <span class="keyword">true</span>;
           }
       }
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
}

<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span>(){
    <span class="keyword">return</span> <span class="string">"admin"</span>.equals(loginName);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 侧边栏根据权限显示 --&gt;</span>
<span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"#application.privilegeTopList"</span>&gt;</span>
     <span class="comment">&lt;!-- 使用 ongl表达式调用对象方法 --&gt;</span>
     <span class="tag">&lt;<span class="title">s:if</span> <span class="attribute">test</span>=<span class="value">"#session.loginUser.checkPrivilegeByName(name)"</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">s:if</span>&gt;</span>
<span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">权限拦截器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="xml"><span class="php"><span class="comment">// 在struts中注册 interceptor</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPrivilegeInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> {</span>
    <span class="keyword">public</span> String intercept(ActionInvocation ai) {
        ActionProxy actionProxy = ai.getProxy();  <span class="comment">// 获得当前 Action的代理对象</span>
        
        String <span class="keyword">namespace</span> = <span class="title">actionProxy</span>.<span class="title">getNamespace</span>();
        String actionName = actionProxy.getActionName();
        
        String url = <span class="keyword">namespace</span> + <span class="title">actionName</span>;
        <span class="comment">// 如果有UI结尾的去掉</span>
        <span class="keyword">if</span>(url.endsWith(<span class="string">"UI"</span>)) {
            url.subString(<span class="number">0</span>, url.length()-<span class="number">2</span>);
        }
        
        User user = ActionContext.getSession().get(<span class="string">"loginUser"</span>);
        <span class="comment">//如果用户没有登陆</span>
        <span class="keyword">if</span>(user == <span class="keyword">null</span>) {
            <span class="comment">// 如果用户访问的是登陆页面,方向</span>
            <span class="keyword">if</span>(<span class="string">"user_login"</span>.equals(url)) {
                <span class="keyword">return</span> ai.invoke();
            } 
            <span class="comment">// 如果用户访问的不是登陆, 跳转到登陆页面</span>
            <span class="keyword">return</span> <span class="string">"loginUI"</span>;
        } <span class="keyword">else</span> {
            <span class="comment">// 如果用户已经登陆</span>
            <span class="keyword">List</span>&lt;String&gt; allUrls = servletContext().getAttribute(<span class="string">"allUrls"</span>);
            <span class="comment">// 如果当前访问的功能不需要控制</span>
            <span class="keyword">if</span>(!allUrls.contains(url)) <span class="keyword">return</span> ai.invoke();
            
            boolean hasPrivilege = usesr.checkPrivilegeByUrl(url);
            <span class="comment">// 如果用户有权限</span>
            <span class="keyword">if</span>(hasPrivilege) <span class="keyword">return</span> ai.invoke();
            <span class="comment">// 如果用户没有,掉转到没有权限的提示页面</span>
            <span class="keyword">return</span> <span class="string">"noPrivilege"</span>;
        }

        <span class="keyword">return</span> <span class="keyword">null</span>;
    }
}</span></span>
</pre></td></tr></table></figure>

<h2 id="-">页面嵌套显示</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// index.jsp</span>
<span class="keyword">if</span>(<span class="keyword">window</span>.<span class="keyword">parent</span> != <span class="keyword">window</span>) {
    <span class="keyword">window</span>.<span class="keyword">parent</span>.location.href = <span class="string">"index.jsp"</span>
}
</pre></td></tr></table></figure>

<h1 id="-">个人信息</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> itcast_privilege (<span class="number">21</span>, <span class="string">"个人设置"</span>, <span class="keyword">null</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> itcast_privilege (<span class="number">22</span>, <span class="string">"个人信息"</span>, <span class="number">21</span>);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// userAction</span>
<span class="comment">// 设置个人信息</span>
<span class="keyword">private</span> File resource;
<span class="keyword">private</span> String resourceFileName;
<span class="keyword">private</span> resourceContentType;

<span class="keyword">public</span> String <span class="title">setUserInfo</span>(){
    <span class="keyword">if</span>(model.getId()==<span class="keyword">null</span>) {
        <span class="comment">// 跳转的设置页面</span>
        <span class="comment">// 在是视图层, user 中的集合还没有初始化, opensessionInview,</span>
        <span class="comment">// 在一次请求中才生效</span>
        User user = session.<span class="keyword">get</span>(<span class="string">"loginUser"</span>);
        push( userService.findById(user.getId()) );
        <span class="keyword">return</span> <span class="string">"SetUserInfo"</span>
    } <span class="keyword">else</span> {
        <span class="comment">// 设置信息</span>
        User user = userService.findById(model.getId());
        <span class="comment">// 可以抽到 BaseAction, 文件夹按日期存储文件</span>
        <span class="comment">// 获得uploadFiles的绝对磁盘路径</span>
        String realPath = servletContext.getRealPath(<span class="string">"uploadFiles"</span>);
        <span class="keyword">int</span> position = resourceFileName.lastIndexOf(<span class="string">"."</span>);
        String suffix = resourceFileName.subString(position);

        String filename = UUID.randomUUID().toString() + suffix;

        File destFile = <span class="keyword">new</span> File(realPath + File.separator+ filename);
        resource.renameto(destFile);
        user.setSavePath(filename);
        userService.update(user);
        <span class="keyword">return</span> <span class="string">"toSetUserInfoUI"</span>;
    }
}
<span class="comment">// User</span>
class User {
    <span class="keyword">private</span> String savePath;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 文件上传 --&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"resource"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="struts-">struts文件下载</h2>
<ul>
<li>Action中提供 <code>InputStream inputName</code></li>
<li>配置结果集<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">result</span> <span class="attribute">name</span>=<span class="value">"stream"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"inputName"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"contentType"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"contentDisposition"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">论坛管理</h1>
<ol>
<li>提取实体, 版块(form), 主题(Topic), 回复(Reply);
帖子类型, 普通帖子, 精华帖, 置顶帖, 热门帖;
不同类型的帖子会影响列表排序<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">// FormManagerAction, 重写Dao, findAll按position排序</span>
<span class="keyword">public</span> <span class="keyword">class</span> Form {
    Long id;
    String name;
    String description;
    <span class="keyword">int</span> position = <span class="number">0</span>; <span class="comment">// 默认为0, 在新建时等于id的值</span>
    Set&lt;Topic&gt; topics;
    <span class="comment">// 提高检索效率</span>
    Int topicCount; <span class="comment">// 主题数量</span>
    Int articleCount; <span class="comment">// 文章数量(回复数)</span>
    Topic lastTopic;   <span class="comment">// 最后发表主题</span>
}

<span class="keyword">public</span> <span class="keyword">class</span> Topic {
    Long id;
    String title;
    String content;
    <span class="keyword">int</span> type;
    User author;  <span class="comment">// 多对一</span>
    Date postTime;
    String ip;
    Date lastUpdateTime; <span class="comment">// 针对主题最后回复时间</span>
    Set&lt;Reply&gt; replies;
    <span class="comment">// 提高检索效率</span>
    Int replyCount;
    Reply lastReply;
}

<span class="keyword">public</span> <span class="keyword">class</span> Reply {
    Long id;
    String content;
    Date postTime;
    User author;
    String ip;
    Int deleted;
    Topic topic;
}
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">论坛管理模块</h2>
<p>论坛版块管理, 添加, 删除, 上移下移</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>class FormManagerAction{}
<span class="comment">// 上移</span>

<span class="comment">// Service</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveUp</span>(Long id) {
    <span class="comment">// select * from form where position &lt; :up desc limit 0,1</span>
    <span class="comment">// 相互交换位置信息</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;s:<span class="keyword">if</span> test=<span class="string">"#s.first"</span>&gt; 上移 &lt;/s:<span class="keyword">if</span>&gt;
</pre></td></tr></table></figure>

<h2 id="-">论坛模块</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">FormAction</span> {</span>
    <span class="keyword">public</span> String <span class="keyword">list</span>(){
    }
    
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[photoshop钢笔工具]]></title>
    <link href="http://zhpooer.github.io/2014/06/18/photoshop%E9%92%A2%E7%AC%94%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhpooer.github.io/2014/06/18/photoshop钢笔工具/</id>
    <published>2014-06-18T06:17:51.000Z</published>
    <updated>2014-06-18T08:20:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">画出虚线</h1>
<ul>
<li>矩形选框工具, 填充黑色, 不取消选框</li>
<li>编辑, 预设画笔</li>
<li>画笔控制栏, 调整间距, 形状动态, 控制选方向</li>
</ul>
<h1 id="-p-">钢笔工具(P)</h1>
<p>实现复杂图像的抠图</p>
<p>贝塞尔曲线 转化为 选区: <code>ctrl + 回车</code></p>
<p>贝塞尔曲线组成:</p>
<ol>
<li>锚点</li>
<li>连接锚点之间的曲线, 路径</li>
</ol>
<p>删除锚点</p>
<ul>
<li>方式一: 选择点, 安装 <code>del</code>, 删除之后要在最新锚点上单机(续上)</li>
<li>方式二: 历史回退</li>
</ul>
<p>移动锚点</p>
<ul>
<li>使用路径选择工具(A)(黑), 针对整体进行调节</li>
<li>使用路径选择工具(A)(白), 针对细节, 路径进行调节</li>
</ul>
<p>杠杆, 调节路径的造型, 拖拽描点</p>
<ul>
<li>杠杆的长度, 弧度的大小</li>
<li>杠杆的方向, 弧度的方向</li>
</ul>
<p>alt : 暂时切换到转换点工具</p>
<ul>
<li>移动到转换点, 可调节转换点</li>
</ul>
<p>用尽量少的锚点, 绘制尽量准确的曲线</p>
<p>吸管工具(I)</p>
<p>三种点的类型:(相互转换按住<code>alt</code>)</p>
<ol>
<li>尖角点, 没有杠杆</li>
<li>平滑点, 两条杠杆保持在同一条直线上</li>
<li>贝塞尔点, 两条杠杆, 不在同一条直线上</li>
</ol>
]]></content>
    
    
      <category term="photoshop" scheme="http://zhpooer.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day48-Javascript 面向对象]]></title>
    <link href="http://zhpooer.github.io/2014/06/17/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day48-javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://zhpooer.github.io/2014/06/17/传智播客day48-javascript-面向对象/</id>
    <published>2014-06-17T01:00:32.000Z</published>
    <updated>2014-06-19T08:34:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">简介</h1>
<p>Javascript 核心组成部分</p>
<ul>
<li>ECMAScript, 标准, 语法</li>
<li>BOM, 浏览器对象模型, <code>window</code> 对象<ul>
<li><code>document</code></li>
<li><code>alert()</code>, <code>eval()</code></li>
</ul>
</li>
<li>DOM, 文档对象模型, 利用DOM解析XML, HTML<ul>
<li><code>document</code>对象<ul>
<li><code>documentElement</code>属性, 指向根节点</li>
</ul>
</li>
<li><code>element</code>对象<ul>
<li>获取属性, <code>getAttribute()</code></li>
</ul>
</li>
<li><code>node</code>对象</li>
</ul>
</li>
</ul>
<h1 id="-">面向对象</h1>
<p>含义</p>
<ul>
<li>万物皆对象</li>
<li>new 对象()</li>
<li>继承, 实现, 多态</li>
</ul>
<h1 id="-">函数</h1>
<p><code>function 函数名(){}</code></p>
<p>定义函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 普通方式</span>
<span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span>{</span> };
<span class="comment">// 构造函数</span>
<span class="keyword">var</span> fn2 = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">()</span>;</span>
<span class="comment">// 直接方式</span>
<span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span> };
</pre></td></tr></table></figure>

<h2 id="arguments-">Arguments对象</h2>
<p>javascript 不存在函数重载,
如果定义多个同名函数, 只有最后定义的是起作用的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span>{</span>
   <span class="comment">// 获取当前函数的实参的个数, 可以模拟函数重载的效果</span>
   <span class="built_in">arguments</span>.length;
}
</pre></td></tr></table></figure>

<h2 id="-">全局变量和局部变量</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span>{</span>
   <span class="comment">// 相当于 window.b = "b", 不建议, 不规范</span>
   b = <span class="string">"b"</span>;
}

<span class="comment">// 在全局变量和局部变量同名时, 函数中只能访问局部变量</span>
<span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span>{</span>
    <span class="comment">// 局部变量 a 被定义出来, 但还没有初始化</span>
    alert(a);    <span class="comment">// 输出是 undefined</span>
    <span class="keyword">var</span> a = <span class="string">"b"</span>;
}
</pre></td></tr></table></figure>

<h2 id="-">匿名函数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">// 函数可以当做参数传递, 简称回调函数</span>
<span class="comment">// 匿名回调函数, 匿名函数可以当做参数传递给一个函数</span>
<span class="keyword">var</span> one = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span><span class="keyword">return</span> <span class="number">1</span>;}
<span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(a,b)</span>{</span><span class="keyword">return</span> a()+b();}
fn(one, <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span><span class="keyword">return</span> <span class="number">2</span>;});  <span class="comment">// 3</span>

<span class="comment">// 一次性调用函数, 自调函数</span>
(
  <span class="function"><span class="keyword">function</span> <span class="params">(str)</span>{</span>
    alert(str);
  }
)(<span class="string">"hello"</span>); <span class="comment">// 调用函数</span>

<span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span>{</span>
   <span class="keyword">var</span> a = <span class="string">"a"</span>;
   <span class="comment">// 内部函数, 私有函数, 保证私有性</span>
   <span class="function"><span class="keyword">function</span> <span class="title">n</span><span class="params">()</span>{</span> alert(a); }
   <span class="keyword">return</span> n;
}
fn()();
</pre></td></tr></table></figure>

<h1 id="-">闭包</h1>
<p>闭包, 函数可以函数之外定义的变量</p>
<ul>
<li>降低耦合度</li>
<li>实现作用域的跨域访问</li>
</ul>
<p>局限性</p>
<ul>
<li>函数初始化的位置在局部(函数中)</li>
<li>函数和函数之间存在耦合度</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>
funtion fn(){
    <span class="keyword">var</span> f = []
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) {
        f[i] = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="keyword">return</span> i;
        }
    }
    <span class="keyword">return</span> f;
}
<span class="keyword">var</span> f = fn();
f[<span class="number">0</span>]();   <span class="comment">// 3</span>
f[<span class="number">1</span>]();   <span class="comment">// 3</span>
f[<span class="number">2</span>]();   <span class="comment">// 3</span>
</pre></td></tr></table></figure>

<h1 id="-">对象</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="comment">// 定义对象</span>
<span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();

<span class="keyword">var</span> obj2 = {};

<span class="function"><span class="keyword">function</span> <span class="title">obj3</span><span class="params">()</span>{</span>}

<span class="keyword">var</span> hero = {
    name: <span class="string">"zhangwuji"</span>,
    syaMe : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"i am zhangwuji"</span>);
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">Hero</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.name = <span class="string">"zhang"</span>
    <span class="keyword">this</span>.sayMe = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"i am zhangwuji"</span>);
    }
}

$(<span class="string">"#ok"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.value;
})
</pre></td></tr></table></figure>

<h2 id="-">操纵对象和方法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="keyword">var</span> hero = {
    name : <span class="string">"zhangwuji"</span>,
    sayMe: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"i am zhangwuji"</span>);
    }
}

<span class="comment">// 调用普通对象的属性和方法</span>
hero.name
hero.sayMe()
hero[<span class="string">'sayMe'</span>]();

<span class="comment">//修改</span>
hero.name = <span class="string">"zhouzhiruo"</span>;
hero.sayMe = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
   alert(<span class="string">"我是周芷若"</span>);
}
<span class="comment">// 增加</span>
hero.value = <span class="string">"zhouzhiruo"</span>;

<span class="comment">// 删除</span>
<span class="keyword">delete</span> hero.name;
<span class="keyword">delete</span> hero.sayMe;

<span class="comment">// 调用函数对象(构造器)的属性和方法</span>
<span class="function"><span class="keyword">function</span> <span class="title">Hero</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.name = <span class="string">"zhangwuji"</span>;
    <span class="keyword">this</span>.sayMe = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"i am zhangwuji"</span>);
    }
}
<span class="keyword">var</span> hero = <span class="keyword">new</span> Hero();
</pre></td></tr></table></figure>

<h2 id="-">内部类型</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// javascript 是弱类型</span>
<span class="keyword">var</span> str = <span class="string">"abcdefg"</span>;
<span class="keyword">var</span> i = <span class="number">1</span>;
<span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];
</pre></td></tr></table></figure>

<h2 id="javascript-">javascript内建对象</h2>
<p>数据封装类</p>
<ul>
<li><p>Object对象, 是所有对象的父类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">// 定义一个对象</span>
<span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();
<span class="keyword">var</span> obj2 = {};

<span class="keyword">var</span> a = {}; <span class="comment">// 对象</span>
<span class="keyword">var</span> b = []; <span class="comment">// 空数组</span>
<span class="keyword">var</span> c = <span class="comment">//; // 正则表达式</span>
</pre></td></tr></table></figure>
</li>
<li><p>Array对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">var</span> arr1 = [];
<span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();
<span class="comment">// length 获取数组长度</span>

<span class="comment">// 常用方法</span>
<span class="comment">// pop(), push() 插入和删除</span>
<span class="comment">// reverse() 颠倒数组中的元素</span>
<span class="keyword">var</span> str = <span class="string">"abcde"</span>;
<span class="keyword">var</span> arr = str.split(<span class="string">""</span>); <span class="comment">// a, b, c, d, e</span>
</pre></td></tr></table></figure>
</li>
<li><p>String对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> str1 = <span class="string">"aaa"</span>;
<span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"aaa"</span>);

alert(<span class="keyword">typeof</span> str1);  <span class="comment">// String</span>
alert(<span class="keyword">typeof</span> str2);  <span class="comment">// Object</span>

<span class="comment">// == 和 != 值相等</span>
<span class="comment">// === 和 !== 全相等(值和类型)</span>

<span class="string">"abcde"</span>.substr(<span class="number">3</span>, <span class="number">2</span>);  <span class="comment">// de</span>
</pre></td></tr></table></figure>
</li>
<li><p>Number对象</p>
</li>
</ul>
<p>工具类</p>
<ul>
<li><p>Date对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();
d.getDate();
d.getDay();  <span class="comment">// 星期</span>
</pre></td></tr></table></figure>
</li>
<li><p>Math对象</p>
</li>
<li>Regex对象, <code>/^abc$/.test()</code></li>
<li><p>Functions对象, 全局对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">isNaN</span>();
<span class="built_in">eval</span>();
<span class="built_in">decodeURI</span>();
</pre></td></tr></table></figure>
</li>
<li><p>Events对象</p>
</li>
</ul>
<p>错误类</p>
<ul>
<li>Error对象</li>
<li>Thrown对象</li>
</ul>
<h1 id="-">原型</h1>
<p>函数本身就是对象, 即函数对象.
对象一定具有属性和方法, 原型就是函数对象的一个特殊属性,
只要函数对象存在, 就一定由原型对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">Hero</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.name = <span class="string">"zhangwuji"</span>;
    <span class="keyword">this</span>.sayMe = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"i am zhangwuju"</span>);
    }
}
<span class="comment">// 通过原型为函数对象 Hero 增加属性和方法</span>
<span class="keyword">var</span> hero = <span class="keyword">new</span> Hero();
Hero.prototype.value = <span class="string">"zhouzhiruo"</span>;
Hero.prototype.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    alert(<span class="string">"hello"</span>);
}
log(hero.value); <span class="comment">// zhouzhiruo</span>

<span class="comment">// 以上会造成代码原型混乱</span>
<span class="comment">// 以下更简单, 但是有顺序需求,</span>
<span class="comment">// 必须在 new Hero 之前定义</span>
Hero.prototype = {
    value: <span class="string">"zhouzhiruo"</span>,
    sayVal: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        alert(<span class="string">"hero"</span>);
    }
}
</pre></td></tr></table></figure>

<p>当函数对象自身的属性或方法与原型的属性或方法同名</p>
<ul>
<li>调用的属性和方法是函数对象自身的属性和方法</li>
<li>原型上的属性和方法都是真实存在的</li>
<li>函数自身上的方法可以重写原型上的方法和属性</li>
</ul>
<p>意义</p>
<ul>
<li>利用原型为函数对象增加属性和方法</li>
<li>利用自身的属性和方法重写原型的属性和方法</li>
<li>利用原型为内建类型提供属性和方法</li>
</ul>
<p>通过增加内建对象的属性和方法, 做到自定义方法最大化</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">Array</span>.prototype.inArray = <span class="function"><span class="keyword">function</span><span class="params">(color)</span> {</span>
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, len=<span class="keyword">this</span>.length;i&lt;len;i++){
        <span class="keyword">if</span>(<span class="keyword">this</span>[i]===color){
            <span class="keyword">return</span> <span class="literal">true</span>;
        }
    }
    <span class="keyword">return</span> <span class="literal">false</span>;
}
</pre></td></tr></table></figure>

<h1 id="-">继承</h1>
<p>继承的关系</p>
<ul>
<li>子类的实例可以共享父类的方法</li>
<li>子类可以重写, 重载及扩展父类的方法</li>
<li>子类和父类都是子类实例的类型</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">// 继承方式一, 缺陷, 继承依赖于 new A</span>
<span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.a = <span class="string">"a"</span>;
}
<span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>.b = <span class="string">"b"</span>;
}

<span class="keyword">var</span> a = <span class="keyword">new</span> A();
B.prototype = a;

<span class="keyword">var</span> b = <span class="keyword">new</span> B();
log(b.a); <span class="comment">// 输出 a</span>

<span class="comment">// 继承方式二:</span>
<span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span>{</span>}
A.prototype = {a:<span class="string">"a"</span>};
<span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span>{</span>
   <span class="keyword">this</span>.b = <span class="string">"b"</span>;
}
B.prototype = A.prototype;
</pre></td></tr></table></figure>

<h2 id="-">多函数对象继承</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 方式一:</span>
<span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span>{</span>}
A.prototype = {
    a: <span class="string">"a"</span>
}
<span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span>{</span>}
B.prototype = A.prototype;
B.prototype.name = <span class="string">"a"</span>;
</pre></td></tr></table></figure>

<h2 id="-">普通对象的继承</h2>
<p>普通对象之间是没有原型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// 浅复制, 对象内容一致</span>
<span class="function"><span class="keyword">function</span> <span class="title">exendsCopy</span><span class="params">(obj)</span>{</span>
    <span class="keyword">var</span> b = {};
    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> obj) {
        b[i] = p[i];
    }
    b.uber = obj;
    <span class="keyword">return</span> b;
}
<span class="keyword">var</span> a = {name: <span class="string">"a"</span>}
<span class="keyword">var</span> b = extendCopy(a);
</pre></td></tr></table></figure>

<p>深复制, 内存地址一样(银行系统)</p>
<h1 id="jqeury-">jQeury插件</h1>
<p>分类:</p>
<ul>
<li>封装对象方法的插件 <code>$(exp).each()</code><ul>
<li><code>jQeury.fn.extend(obj)</code></li>
</ul>
</li>
<li>封装全局方法的插件 <code>$.each()</code><ul>
<li><code>jQuery.extend(obj)</code></li>
</ul>
</li>
<li>选择器插件<ul>
<li>扩展jQeury的选择器内容(xPath 插件)</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>$(<span class="string">"#input"</span>).test()

jQuery.fn.extends({
    test: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="comment">// this是jqeury对象</span>
        <span class="keyword">this</span>.val();
    }
})
</pre></td></tr></table></figure>

<h1 id="2048-">2048游戏</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>&lt;header&gt;
    &lt;h1&gt;<span class="number">2048</span>&lt;/h1&gt;
    &lt;a href=<span class="string">"javascript:newGame();"</span> <span class="property">id</span>=<span class="string">"newgamebutton"</span>&gt;new game&lt;/a&gt;
    &lt;p&gt;score&lt;span <span class="property">id</span>=<span class="string">"score"</span>&gt;<span class="number">0</span>&lt;/span&gt;&lt;/p&gt;
&lt;/header&gt;
&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"grid-container"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-0-1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-0-2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-0-3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-0-4"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-1-0"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-1-1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-1-2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-1-3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;

    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-2-0"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-2-1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-2-2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-2-3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;

    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-3-0"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-3-1"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-3-2"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"grid-cell"</span> <span class="property">id</span>=<span class="string">"grid-cell-3-3"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td><td class="code"><pre><span class="keyword">var</span> board = <span class="keyword">new</span> <span class="built_in">Array</span>();
$(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    newgame();
})
<span class="function"><span class="keyword">function</span> <span class="title">newgame</span><span class="params">()</span>{</span>
    <span class="comment">// 初始化棋盘格子</span>
    init();
    <span class="comment">// 随机生成数字</span>
    gernerateOneNumber();
    gernerateOneNumber();

    $(document).keydown(<span class="function"><span class="keyword">function</span><span class="params">(event)</span>{</span>
        <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// left</span>
            <span class="comment">// 是否可以向左移动</span>
            <span class="keyword">if</span>(moveLeft()){
            }
            <span class="keyword">break</span>;
    })
}

<span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span>{</span>
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++){
        board[i] = [];
        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++){
            board[i][j] = <span class="number">0</span>;
            <span class="keyword">var</span> gridCell = $(<span class="string">"grid-cell-"</span> + i + <span class="string">"-"</span> + j );
            <span class="comment">// 通过js设置grid的位置</span>
            gridCell.css(<span class="string">"top"</span>, getPosTop(i, j));
            gridCell.css(<span class="string">"left"</span>, getPosLeft(i, j));
        }
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">updateBoardView</span><span class="params">()</span>{</span>
    <span class="comment">// 随机生成位置</span>
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++){
        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++){
            
            $(<span class="string">"#grid-container"</span>).append(<span class="string">"&lt;div class='number-cell' id="</span>number-cell-i-j<span class="string">"&gt;&lt;/div&gt;"</span>)
            <span class="keyword">var</span> numberCell = $(<span class="string">"#number-cell-i-j"</span>);
            <span class="keyword">if</span>(board[i][j] == <span class="number">0</span>){
                numberCell.css(<span class="string">"width"</span>, <span class="string">"0px"</span>);
                numberCell.css(<span class="string">"height"</span>, <span class="string">"0px"</span>);
                numberCell.css(<span class="string">"top"</span>, getPosTop(i, j)+<span class="number">50</span>);
                numberCell.css(<span class="string">"left"</span>, getPosLeft(i, j)+<span class="number">50</span>);
            }
        }
    }
    <span class="comment">// 设置数字值的字体样式</span>
    $(<span class="string">".number-cell"</span>).css(<span class="string">"line-height"</span>, <span class="string">"100px"</span>);
    $(<span class="string">".number-cell"</span>).css(<span class="string">"font-size"</span>, <span class="string">"60px"</span>);
    <span class="comment">// 初始化数字格子</span>
    updateBoardView();
}

<span class="function"><span class="keyword">function</span> <span class="title">generateOneNumber</span><span class="params">()</span>{</span>
    <span class="keyword">var</span> randx = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>));
    <span class="keyword">var</span> randy = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>));
    <span class="keyword">while</span>(<span class="literal">true</span>){
        <span class="keyword">if</span>(board[randx][randy] == <span class="number">0</span>){ <span class="keyword">break</span> }
        randx = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>));
        randy = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>));
    }
    <span class="keyword">var</span> randNumber = <span class="built_in">Math</span>.random()&lt;<span class="number">0.5</span>?<span class="number">2</span>:<span class="number">4</span>;
    board[randx][randy] = randNumber;
    showNumberWithAnimation(randx, randy, randNumber);
}

<span class="function"><span class="keyword">function</span> <span class="title">getPosTop</span><span class="params">(i, j)</span>{</span>
    <span class="keyword">return</span> <span class="number">20</span> + i*<span class="number">120</span>;
}

<span class="function"><span class="keyword">function</span> <span class="title">getPosLeft</span><span class="params">(i, j)</span>{</span>
    <span class="keyword">return</span> <span class="number">20</span> + j*<span class="number">120</span>;
}
</pre></td></tr></table></figure>

<p><!-- 自然, 说话, 关怀 ,惊喜 --></p>
<h1 id="-">就业指南</h1>
<p>学习</p>
<p>找工作</p>
<ul>
<li>准备</li>
<li><p>投简历(时间8:30到9:00点), 2-4页简历</p>
<ul>
<li>基本信息<pre><code>姓名, 年龄, 毕业院校, 专业, 工作经验,
目前所在地, 联系方式(手机号码, email一起), 不贴照片(建议)
</code></pre></li>
<li>工作经历, 某某年至某某年, 就职于某某公司, 负责某某工作</li>
<li><p>项目经验</p>
<pre><code>某某系统(项目名称), 项目周期(某某到某某, N个月),
所在平台(JavaEE, Oracle, Linux)及架构(三大框架)
项目描述,
  该项目或者系统是某某公司或者企业提出需求,
  完成了哪些功能, 实现了哪些需求, 满足了哪些要求, 运用了哪些技术.

  我在项目中, 担任哪些角色, 负责哪些工作, 完成哪些功能,
  实现哪些需求, 满足哪些需求, 运用哪些技术,
  遇到哪些问题是如何解决的, 从中学到了哪些内容
</code></pre></li>
<li>专业技能(若不及三页, 宋体小四, 行间距1.5倍), 自我评价<pre><code>学习能力, 具备良好的团队合作意识, 吃苦耐劳, 能适应长期加班
</code></pre></li>
<li>简历网站: 拉钩网, 猎聘网, 内推网, 一天200份左右, 直接发hr邮件</li>
<li>简历邮件主题<pre><code>主题: 应聘职位, 姓名, 手机号码
正文: 简历
附件: 简历
</code></pre></li>
</ul>
</li>
<li>笔试<ul>
<li>带纸和笔, 最好组团</li>
<li>收集笔试题(&gt;2000), 过滤掉会的, 收集不会和会但是不熟</li>
<li>准备自我最好的技术, 做适当提升</li>
<li>留联系方式</li>
</ul>
</li>
<li>面试<ul>
<li>笔试三天之后, 直接问面试是什么时间?</li>
<li>日志记录, 记录地点日期</li>
<li>之前先了解公司</li>
<li>注意着装, 头发, 上衣带领, 衣服有袖, 不穿短裤以及运动裤, 色调浅色, 商务休闲鞋</li>
<li>带纸和笔, 手机静音</li>
<li>坐姿, 自然</li>
<li>规避技术题<ol>
<li>研究笔试</li>
<li>简历上针对性罗列技术</li>
<li>心里暗示(不停地重复哪些技术比较好), 主导面试, 自我介绍,
准备开场白(工作经历, 性格和爱好, 60秒搞定), 成为聊天的主线(平常培养)</li>
<li>碰到不会的问题, 直接回答我不会</li>
<li>非技术类问题, 1. 永远不要说实话, 2. 都是演员, 谁认真都输了, 3. 注意对方是什么样的人(话多话少, 技术关注, 寻找共同话题)<pre><code> 极限测试, 中间没有间歇, 停顿一会儿
 压力测试, 不停打击情绪和自信心
 问缺点, 一工作时间不强, 懒散但是工作上不是, 双向性格
 为什么选择编程, 感兴趣, 专业培训, 提高能力, 不能一辈子只做技术或开发
</code></pre></li>
</ol>
</li>
</ul>
</li>
<li>谈工资, 在真实的自我评估上, 工作经验加成, 相关工作经验加成,
如果自我评估5000, 期望值8000, 第一次说期望值, 若太高, 对方给出价格和期望值平均,
若还是太高, 再来一边, 最后行就行, 不行就拉倒, 当对方纠结时,
说服它, 抬高对方, 抬高对方公司(还差钱不), 抬高自己(肯定可以给你带来更多价值)</li>
</ul>
<p>入职</p>
<ul>
<li>合同分一年合同(试用期不能超过一个月), 三年合同(试用期不能超过三个月),
五年合同(试用期不能超过三个月). 如果是半年试用期, 问一下为什么超过半年</li>
<li>签完合同, 可以随时离开, 一个月之前提前通知</li>
<li>如果在合同履行过程中, 无辜辞退, 最多可以有18个月工资</li>
<li>注意个人所得税, 保险(五险一金), 税前8000, 税后6000;税前12000,税后9000;税前15000,税后12000;
饭补一个月四五百;笔记本补助, 一个月50;出差补助(100或50), 技术住宿(200-300), 吃饭补助(50-100);</li>
</ul>
<p>入职黑色三个月</p>
<ul>
<li>适应阶段, 遇到问题<ul>
<li>上网搜索答案</li>
<li>问同学</li>
<li>回来找老师</li>
<li>问公司同事</li>
</ul>
</li>
<li>找都技术牛人, 想尽各种办法处好关系, 以备后用, <strong>投其所好</strong></li>
<li>出差带小礼品</li>
<li>出差回来单独请客吃饭(如领导, 牛人, 行政或人力), 不聊工作, 从电影, 风土人情扯到工作</li>
<li>努力工作时, 要注意周围. 有成绩, 要告诉别人. (如出差工作, 日报, 周报, 大家辛苦工作时的照片)</li>
</ul>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala培训2]]></title>
    <link href="http://zhpooer.github.io/2014/06/15/scala%E5%9F%B9%E8%AE%AD2/"/>
    <id>http://zhpooer.github.io/2014/06/15/scala培训2/</id>
    <published>2014-06-15T02:11:33.000Z</published>
    <updated>2014-06-15T09:46:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">大数据</h1>
<p>数据来源:</p>
<ul>
<li>网站点击量(分析用户行为习惯)</li>
<li>广告</li>
<li>反洗钱</li>
</ul>
<p>实时分析</p>
<p>Hadoop 依赖硬盘, 对内存消耗小</p>
<p>硬件发展趋势, 硬盘 cpu 数据交换瓶颈, 发展速度慢, 故尽量使用内存做数据分析</p>
<p>Spark的中间数据放到内存中，对于迭代运算效率更高</p>
<p>storm 流式计算</p>
<p>shark(sql) depends on spark</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// wordcount</span>
<span class="keyword">val</span> sc = <span class="keyword">new</span> SparkContxt(<span class="string">""</span>, <span class="string">"myjob"</span>, <span class="string">""</span>);

<span class="comment">// RDD Resilent Distribute dataset</span>
<span class="comment">// 弹性分布式数据集</span>
<span class="keyword">val</span> file = sc.textFile(<span class="string">"hdfs://..."</span>);
<span class="keyword">val</span> errors = file.filter(_.contains(<span class="string">"error"</span>));
errors.cache();
<span class="comment">// take Action, 延迟执行</span>
errors.count();


<span class="comment">// RDD Objects, 基于图</span>
rdd1.join(rddd2).groupBy(..).filter(..);
</pre></td></tr></table></figure>

<p>TODO neo4j mahout</p>
<p>杭州数源 alyanbo/sliner/restful-hub</p>
<p>Erik Meijer</p>
<p>scalaz</p>
<p>netty</p>
<p>RESTful, spray</p>
]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day47-Jquery EasyUI2]]></title>
    <link href="http://zhpooer.github.io/2014/06/13/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day47-jquery-easyui2/"/>
    <id>http://zhpooer.github.io/2014/06/13/传智播客day47-jquery-easyui2/</id>
    <published>2014-06-13T01:09:05.000Z</published>
    <updated>2014-06-13T09:01:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">完善系统菜单</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> simplenodes = [
   <span class="comment">// id是当前节点编号, pid是父节点编号</span>
   {name: <span class="string">"系统功能"</span>, id:<span class="number">1</span>, pId:<span class="number">0</span>},
   {name:<span class="string">"部门管理"</span>, id: <span class="number">2</span>, pId:<span class="number">1</span>, url:<span class="string">"department.jsp"</span>},
   {name:<span class="string">"员工管理"</span>, id: <span class="number">3</span>, pId:<span class="number">1</span>, url:<span class="string">"employee.jsp"</span>}
]
$.fn.zTree.init($(<span class="string">"#simpleTree"</span>), simplesettings, simplenodes);
</pre></td></tr></table></figure>

<h1 id="-">数据表格</h1>
<p>数据表格, 生成table组件, 具有编辑, 显示, 排序的基本功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 完全针对html本地table数据 --&gt;</span>
<span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"easyui-datagrid"</span>&gt;</span>
    <span class="comment">&lt;!-- 表头 --&gt;</span>
    <span class="tag">&lt;<span class="title">thead</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="comment">&lt;!-- field主要用于远程json数据的匹配--&gt;</span>
        <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'id', width:200"</span>&gt;</span>编号<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'name'"</span>&gt;</span> 名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'price'"</span>&gt;</span> 价格<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">thead</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tbody</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>100 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>手机 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>1999 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

<span class="comment">&lt;!-- 远程json数据, 本地html定义 --&gt;</span>
<span class="comment">&lt;!-- pagination: true 设置分页条--&gt;</span>
<span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"easyui-datagrid"</span> <span class="attribute">data-options</span>=<span class="value">"url:data.json, pagination:true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">thead</span>&gt;</span>
       <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
         <span class="comment">&lt;!-- field主要用于远程json数据的匹配--&gt;</span>
         <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'id', width:200"</span>&gt;</span>编号<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
         <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'name'"</span>&gt;</span> 名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
         <span class="tag">&lt;<span class="title">th</span> <span class="attribute">data-options</span>=<span class="value">"field:'price'"</span>&gt;</span> 价格<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
       <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">thead</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

<span class="comment">&lt;!-- 远程json数据, js定义datagrid --&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
       <span class="comment">// js定义表格</span>
       $(<span class="string">'#grid'</span>).datagrid({
           columns: [[
           <span class="comment">// field 用于匹配远程json属性, width宽度, align居中</span>
           {
               field: <span class="string">"id"</span>,
               title: <span class="string">"编号"</span>, 
               width: <span class="number">100</span>,
               align: center,
               <span class="comment">// 复选效果, 不设置singleSelect</span>
               checkbox: <span class="literal">true</span>
           },
           {
               field: <span class="string">"price"</span>,
               title: <span class="string">"价格"</span>
               width: <span class="number">100</span>,
               align: center
           }
           ]],
           url: <span class="string">"data.json"</span>,
           <span class="comment">// 只允许单选a</span>
           singleSelect: <span class="literal">true</span>,
           <span class="comment">// 显示行号</span>
           rownumbers: <span class="literal">true</span>,
           <span class="comment">// 工具栏, 表格上方工具按钮</span>
           toolbar: [
               { id: <span class="string">'save'</span>, text:<span class="string">'保存'</span>,
                 iconCls:<span class="string">'icon-save'</span>,
                 handler:<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>log(<span class="string">"save"</span>)}
               }, <span class="comment">//每一个对象就是一个按钮</span>
           ]
       })
    });
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"grid"</span>&gt;</span><span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">// data.json</span>
{
    <span class="string">"total"</span>: <span class="string">"28"</span>,
    <span class="string">"rows"</span>:[
        {<span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"name"</span>, <span class="string">"price"</span>: <span class="string">"100"</span>}
    ]
}
<span class="comment">// 简单格式, 设置pagination: flase时使用</span>
{
    {<span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"name"</span>, <span class="string">"price"</span>: <span class="string">"100"</span>},
    {<span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"name"</span>, <span class="string">"price"</span>: <span class="string">"100"</span>}
}
</pre></td></tr></table></figure>

<h2 id="-">数据表格的分页</h2>
<p>采用 Ajax 分页方式, 页面table不动,
所有查询条件都缓存在datagrid数据表格中.
每次查询都是以ajax方式将条件发送到服务器,
服务器返回json</p>
<p>页面第一次加载时, 自动向服务器发送参数,
page当前页码, 当前页数,
服务器只需要返回完整数据格式<code>{total:&quot;&quot;, rows: [{}]}</code></p>
<p>每次页面条件改变, 都会发送请求<code>?page=..&amp;&amp;rows=</code>, 更新效果</p>
<h1 id="-">员工管理页面</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="comment">&lt;!-- employee.jsp --&gt;</span>
<span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"easyui-layout"</span>&gt;</span>
    <span class="comment">&lt;!-- 页面布局, 中间区域显示数据 --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"region:'center'"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"grid"</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
$(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    $(<span class="string">"#grid"</span>).datagrid({
        columns:[[
            { field:<span class="string">"id"</span>, checkbox: <span class="literal">true</span> },
            { field:<span class="string">"name"</span>, title:<span class="string">"姓名"</span>, width:<span class="number">200</span> },
            { field:<span class="string">"age"</span>, title:<span class="string">"年龄"</span>, width:<span class="number">100</span> },
            { field:<span class="string">"birthday"</span>, title:<span class="string">"生日"</span>, width:<span class="number">200</span> },
            { field:<span class="string">"department"</span>, title:<span class="string">"部门"</span>, width:<span class="number">200</span>,
                formatter: <span class="function"><span class="keyword">function</span><span class="params">(value, row, index)</span>{</span>
                    <span class="comment">// 格式化输出</span>
                    <span class="comment">// value 是页面中显示的值</span>
                    <span class="comment">// row 整行对应的 json 数据</span>
                    <span class="keyword">return</span> rowData.department.name;
                }
            },
        ]],
        <span class="comment">// 数据来源</span>
        url: <span class="string">"${contextPath}/empPageQuery.action"</span>,
        pagination: <span class="literal">true</span>,
        rownumbers: <span class="literal">true</span>,
        <span class="comment">// 填满区域</span>
        fit: <span class="literal">true</span>,
        toolbar:[
            {
                id: <span class="string">"save"</span>,
                text: <span class="string">"保存员工"</span>,
                iconCls: funciton(){
                    log(执行保存);
                }
            }
        ]
    })
})
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Pagnination {
    <span class="comment">// 请求参数</span>
    <span class="keyword">private</span> <span class="keyword">int</span> pageno; <span class="comment">// 页码</span>
    <span class="keyword">private</span> <span class="keyword">int</span> numberPerPage; <span class="comment">// 每页记录数</span>
    <span class="comment">// 查询结果</span>
    <span class="keyword">private</span> DetachedCriteria criteria; <span class="comment">// 存储任意的查询条件</span>
    <span class="comment">// 结果数据</span>
    <span class="keyword">private</span> <span class="keyword">long</span> total;
    <span class="keyword">private</span> List rows;
}

<span class="comment">// EmployeeAction</span>
<span class="comment">// 接收分页参数</span>
<span class="keyword">private</span> <span class="keyword">int</span> page;
<span class="keyword">private</span> <span class="keyword">int</span> rows;

<span class="comment">// TODO</span>
@Action(<span class="keyword">value</span>=<span class="string">"empPageQuery"</span>, result={@Result})
<span class="keyword">public</span> String <span class="title">empPageQuery</span>(){
     Pagination pagination = <span class="keyword">new</span> Pagination();
     pagination.setPageno(page);
     pagination.setNumberPerPage(rows);

     DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Employee.class);
     pagination.setDetachedCriteria(detachedCriteria);
     
     employeeService.findPageData(pagination);
     context.push(pagination); <span class="comment">// return json</span>
}

<span class="keyword">public</span> <span class="title">findPageData</span>(Pagination pagination) {
    DetachedCriteria criteria = pagination.getDetachedCriteria();
    criteria.setProjection(Projections.rowCount());
    <span class="keyword">long</span> total = dao.findTaotal

    criteria.setProjection(<span class="keyword">null</span>);
    criteria.setResultTransformer(Criteria.ROOT_ENTITY);
    
    <span class="keyword">int</span> firstResult;
    <span class="keyword">int</span> maxResult;
    dao.findRowData(criteria);
}
</pre></td></tr></table></figure>

<h2 id="-">添加功能</h2>
<p>可以通过 jquery easyui 进行客户端校验</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"region:'east'"</span> <span class="attribute">style</span>=<span class="value">"width:250px;"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>添加员工<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">id</span>=<span class="value">"saveEmployeeForm"</span> <span class="attribute">aciton</span>=<span class="value">"saveEmployee.action"</span>&gt;</span>
        <span class="comment">&lt;!-- 非空校验  --&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">class</span>=<span class="value">"easyui-validatebox"</span> <span class="attribute">data-options</span>=<span class="value">"required: true"</span> /&gt;</span>
        <span class="comment">&lt;!-- 长度校验 --&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span>
               <span class="attribute">class</span>=<span class="value">"easyui-validatebox"</span> <span class="attribute">data-options</span>=<span class="value">"required: true, validType:'length[3,12]'"</span>/&gt;</span>
        <span class="comment">&lt;!-- 数字校验  --&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"age"</span>
               <span class="attribute">class</span>=<span class="value">"easyui-numberbox"</span> <span class="attribute">data-options</span>=<span class="value">"required: true, min:18"</span>/&gt;</span>
        <span class="comment">&lt;!-- 日期选择框  --&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"birthday"</span>
               <span class="attribute">class</span>=<span class="value">"easyui-datebox"</span> <span class="attribute">data-options</span>=<span class="value">"required: true, editable: false"</span>/&gt;</span>
        <span class="comment">&lt;!--  mode: remote, 在输入过程中会自动向服务器发送请求, 可以完成自动提示 --&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"department.id"</span>
               <span class="attribute">class</span>=<span class="value">"easyui-combobox"</span> <span class="attribute">data-options</span>=<span class="value">"valueField:'', textField: '', url:'listDepartment.json'"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"savebtn"</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0)"</span> <span class="attribute">class</span>=<span class="value">"easyui-linkbutton"</span>
            <span class="attribute">data-optionis</span>=<span class="value">"plain:true"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
$(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="comment">// 会先执行表单的 validate, 然后再提交</span>
    $(<span class="string">"saveBtn"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="comment">// $("saveEmployeeForm").submit(); 同步提交方式</span>
        <span class="comment">// 异步方式, 不是通过ajax,而是通过 iframe来模拟ajax</span>
        $(<span class="string">"saveEmpolyeeForm"</span>).form(<span class="string">'submit'</span>,{
            <span class="comment">// 可以指定url, 如果不指定, 使用form默认的action</span>
            success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
                <span class="comment">// data是服务器返回的内容, 没有经过处理</span>
                <span class="comment">// 处理成功后的函数</span>
                <span class="keyword">if</span>(data==<span class="string">"Success"</span>) {
                    $.messager.alert(<span class="string">"信息"</span>, <span class="string">"保存员工信息成"</span>, <span class="string">"info"</span>);
                    <span class="comment">// 重置form</span>
                    $(<span class="string">"#saveEmployeeForm"</span>).get(<span class="number">0</span>).reset(); <span class="comment">//或 $("#saveEmployeeForm").form("reset");</span>
                    <span class="comment">// 刷新datagrid</span>
                    $(<span class="string">"grid"</span>).datagrid(<span class="string">"reload"</span>);
                } <span class="keyword">else</span> {
                    $.messager.alert(<span class="string">"信息"</span>, <span class="string">"保存失败"</span>, <span class="string">"error"</span>)
                }
            }
        })
    })

})
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre>@ParentPackaget(<span class="string">"json-default"</span>)
@Namespace(<span class="string">"/"</span>)
@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentAction</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">ActionSupport</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">ModelDriver</span>&lt;&gt;{</span>
    <span class="keyword">private</span> Department department = <span class="keyword">new</span> Department();
    <span class="keyword">private</span> DepartmentService departmentService;

    @Action(value=<span class="string">"listDepartments"</span> results = {@Results(name=<span class="string">""</span>, type=<span class="string">""</span>)})
    <span class="keyword">public</span> String listDepartment() {
        service.findAllDepartments();
    }
}


@Service(<span class="string">"departmentService"</span>)
@Transactional
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentService</span> {</span>
    @Resources
    <span class="keyword">private</span> DepartmentDao dao;
    <span class="comment">// 脑补</span>
}

@Repository(<span class="string">"departmentdao"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentDao</span>{</span>
    <span class="comment">// 脑补</span>
}

<span class="comment">// 保存逻辑, EmployeeAction</span>
@Action(value=<span class="string">"saveEmployee"</span>)
<span class="keyword">public</span> String saveEmployee(){
    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>)
    <span class="comment">// 调用业务层完成</span>
    <span class="keyword">try</span> {
        employeeService.saveEmployee(employee);
        <span class="comment">// easyUI 处理的是原始的字符, 所以直接写字符</span>
        response.getWriter().print(<span class="string">"Success"</span>);
    } <span class="keyword">catch</span> (Exception e){
        response.getWriter().print(<span class="string">"Failed"</span>);
    }
    <span class="keyword">return</span> NONE;
}
</pre></td></tr></table></figure>

<h2 id="-">修改功能</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>toolbar:[
    {
        id: <span class="string">"edit"</span>,
        text: <span class="string">"修改员工"</span>,
        handler: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="comment">// 获取到表格中用户选中</span>
            <span class="keyword">var</span> <span class="keyword">array</span> = $(<span class="string">"#grid"</span>).datagrid(<span class="string">'getSelections'</span>);
            <span class="keyword">if</span>(<span class="keyword">array</span>.length==<span class="number">0</span>) {
                <span class="comment">// 用户一条也没有选</span>
                <span class="variable">$message</span>.alert(<span class="string">"警告"</span>, <span class="string">"修改数据前必须选中一条数据"</span>, <span class="string">"warning"</span>);
            }
            <span class="keyword">if</span>(<span class="keyword">array</span>.length&gt;<span class="number">1</span>){
                $.messager.alert(<span class="string">"警告"</span>, <span class="string">"只能选中一条数据"</span>, <span class="string">"warning"</span>);
            }
            <span class="keyword">var</span> row = <span class="keyword">array</span>[<span class="number">0</span>];
            <span class="comment">// 回显, 有一些不足, 可以手动修改</span>
            $(<span class="string">"#saveEmployeeForm"</span>).form(<span class="string">'load'</span>, row);
            <span class="comment">// 在页面中给一个隐藏域, id, 默认值为0,</span>
            <span class="comment">// 在保存时, 服务器根据id的值, 判断新添加还是更新</span>
            <span class="comment">// 页面添加表单重置按钮, 清空表单值,</span>
            <span class="comment">// 注意: $("input[name='id']") 需要手动清空</span>
        }
    }
]
</pre></td></tr></table></figure>

<h2 id="-">员工批量删除</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>toolbar: [{
    id: <span class="string">"delete"</span>,
    title: <span class="string">"删除员工"</span>,
    handler: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">var</span> array = $(<span class="string">"#grid"</span>).datagrid(<span class="string">'getSelections'</span>);
        <span class="keyword">if</span>(array.length==<span class="number">0</span>) {
            $.messager.alert(<span class="string">"警告"</span>, <span class="string">"必须选中一条数据"</span>, <span class="string">"warning"</span>);
            <span class="keyword">return</span>;
        }
        vara idArray = [];
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length;i++) {
            idArray.push(array[i].id);
        }
        <span class="keyword">var</span> ids = idArray.join(<span class="string">", "</span>);
        $.post(<span class="string">"${contextPath}/delteEmployees.action"</span>, {<span class="string">"ids"</span>: ids}, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
            <span class="keyword">if</span>(data.result==<span class="string">"success"</span>) {
            } <span class="keyword">else</span> {
            }
            <span class="comment">// 刷新表格</span>
            $(<span class="string">"#grid"</span>).datagrid(<span class="string">'reload'</span>);
        });
    }
}
]
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">// EmployeeAction</span>
<span class="keyword">private</span> String ids;
<span class="annotation">@Action</span>(value=<span class="string">"deleteEmployees"</span>, results={<span class="annotation">@Result</span>(name=<span class="string">""</span>, type=<span class="string">"json"</span>)})
<span class="keyword">public</span> String <span class="title">deleteEmployees</span>(){
    <span class="comment">// 获取删除员工的id</span>
    String idArray = ids.split(<span class="string">", "</span>);
    
    <span class="comment">// 调用业务层完成删除</span>
    service.deleteEmployees(idArray);
    <span class="comment">//返回 Map("result" -&gt; "success|failure")</span>
}
</pre></td></tr></table></figure>

<h2 id="datagrid-">datagrid 快速编辑</h2>
<p>快速编辑, 在表格内编辑</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="code"><pre>columns: [[
    {
        field: <span class="string">"id"</span>,
        <span class="comment">// 具有别编辑的能力</span>
        editor: {
            type: `validatebox`,
            options: {
                reqiure: <span class="literal">true</span>
            }
        }
    }
]],
onAfterEdit: <span class="function"><span class="keyword">function</span><span class="params">(rowIndex, rowData, changes)</span>{</span>
    <span class="comment">// 如果不加, 会将仓库修改为空</span>
    rowData[`department.id`] = rowData.department.id;
    <span class="comment">// rowData当前编辑后数据</span>
    $.post(<span class="string">"${contextPath}/saveEmployee.action"</span>, rowData, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
        $.messager.alert(<span class="string">"信息"</span>, <span class="string">"编辑成功"</span>, <span class="string">"info"</span>);
    })
}
<span class="comment">// 开启编辑状态</span>
<span class="keyword">var</span> index = <span class="literal">undefined</span>;
toolbar: [{
    id: <span class="string">'lineedit'</span>,
    text: <span class="string">'行内编辑'</span>,
    handler: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="keyword">var</span> array = $(<span class="string">'#grid'</span>).datagrid(<span class="string">'getSelections'</span>);
        <span class="comment">// 只能在一行中开启</span>
        <span class="keyword">if</span>(array.length == <span class="number">1</span>) {
            <span class="comment">// 获取选中行</span>
            <span class="keyword">var</span> row = array[<span class="number">0</span>];
            index = $(<span class="string">"grid"</span>).datagrid(<span class="string">'getRowIndex'</span>, row);
            $(<span class="string">"#grid"</span>).datagrid(<span class="string">'beginEditor'</span>, index)
        }
    }
},
{
    id: <span class="string">"endedit"</span>,
    text: <span class="string">"结束编辑"</span>,
    handler: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        $(<span class="string">"#grid"</span>).datagrid(<span class="string">'endEditor'</span>, index)
    }
}]
</pre></td></tr></table></figure>

<h2 id="datagrid-">datagrid 表格右键自定义菜单</h2>
<p>通过 easyui 的 menu 完成自定义菜单, 鼠标右键点击事件 <code>oncontextmenu</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">&lt;!-- onRowcontetxMenu: function(e, rowIndex, rowData){
    e.preventDefault(); // 屏蔽原事件
    $("#rightMenu").menu("show", {
        left: e.pageX,
        right: e.pageY
    })
}
--&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"rightMenu"</span> <span class="attribute">class</span>=<span class="value">"easyui-menu"</span> <span class="attribute">style</span>=<span class="value">"width:120px"</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span> New <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span> 修改 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="comment">&lt;!-- 分割线 --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"menu-sep"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="comment">&lt;!-- 子菜单 --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width='120px'"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span> 删除员工 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="searchbox-">searchbox 搜索框</h2>
<p>只支持单条件查询</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span> <span class="title">doSearch</span><span class="params">(value, name)</span> {</span>
    log(<span class="string">"在name中搜索value"</span>);
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">class</span>=<span class="value">"easyui-searchbox"</span>
       <span class="attribute">data-options</span>=<span class="value">"menu:#mm, prompt: '请输入您的搜索内容',
       search: doSearch"</span>/&gt;</span>

<span class="comment">&lt;!-- 搜索项div --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mm"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"name:'city'"</span>&gt;</span>按照城市搜索<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"name:'name'"</span>&gt;</span>按照姓名搜索<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[photoshop入门 画笔类工具]]></title>
    <link href="http://zhpooer.github.io/2014/06/12/photoshop%E5%85%A5%E9%97%A8-%E7%94%BB%E7%AC%94%E7%B1%BB%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhpooer.github.io/2014/06/12/photoshop入门-画笔类工具/</id>
    <published>2014-06-12T08:08:31.000Z</published>
    <updated>2014-06-18T03:22:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">制作彩虹</h1>
<ol>
<li>选框工具, 矩形, 羽化5</li>
<li>线性, 填充</li>
<li>变成曲线<ul>
<li>方式一: 变形,</li>
<li>方式二: 水平方向变成竖直方向, 滤镜/扭曲/切变</li>
</ul>
</li>
<li>设置透明度</li>
</ol>
<h1 id="-b-">画笔工具(B)</h1>
<p>切换笔尖粗细 <code>[</code>, <code>]</code>, 按住 <code>shift</code>可画直线</p>
<p><code>F5</code>, 调出画笔面板</p>
<ul>
<li>间距, 线条由无数个圆形组成</li>
<li>形状动态<ul>
<li>大小抖动, 画出有大有小</li>
<li>最小直径, 大小抖动的最小值</li>
<li>角度抖动</li>
<li>圆度抖动, z轴上抖动</li>
</ul>
</li>
<li>散布, 发散开, 配合钢笔工具(描边), 可画出星光闪闪效果(可以调整背景)</li>
</ul>
<h1 id="-y-">历史记录工具(Y)</h1>
<p>涂抹后, 可恢复历史历史记录中的局部样式</p>
<h1 id="-e-">橡皮差工具(E)</h1>
<h1 id="-">模糊工具和锐化工具</h1>
<p>作用相反, 通常用滤镜下的工具 <code>usm锐化</code>, <code>高斯模糊</code></p>
<h1 id="-g-">渐变工具(G)</h1>
<p>实现多种颜色的柔和过度</p>
<p>渐变编辑器:</p>
<ul>
<li>前景到背景的渐变(两种颜色)</li>
<li>渐变编辑条, 色标(下), 不透明度色标(上), 点击添加色标, 拖拽删除</li>
<li>菱形, 颜色中心点</li>
<li>复制色标, 选中要复制的色标, 在其他地方单击添加</li>
</ul>
<p>渐变样式, 决定以什么样的形式填充</p>
<ul>
<li>线性渐变, 通过鼠标的落点和起点, 来填充,
鼠标没有填充的地方, 以最接近的颜色填充</li>
<li>径向渐变, 从中间拖拽而出</li>
<li>角度渐变</li>
<li>对称渐变</li>
<li>菱形渐变</li>
</ul>
<h1 id="-">制作彩虹光盘</h1>
<ul>
<li>新建画布200*200, 72pi/inc</li>
<li>标识出中心点</li>
<li>椭圆选框画出大圆, 填充灰色</li>
<li>变形选框(alt + s + t), 不断填充颜色</li>
<li>图层样式, 增加投影</li>
</ul>
<h1 id="-">制作球体</h1>
<ul>
<li>圆形选框工具</li>
<li>渐变填充(亮 黑 灰)</li>
<li>新建图层, 变形工具, 制作投影</li>
<li>投影填充黑色, 图层四把锁一针对有像素的地方填充黑色</li>
<li>对投影图层高斯模糊, 并修改透明度</li>
</ul>
<h1 id="-">制作蜡烛</h1>
<ul>
<li>矩形选框工具, 渐变填充(暗红, 红, 深红)</li>
<li>制作火焰, 新建图层, 画出三个圆(红, 黄, 白), 涂抹工具, 涂抹火焰形状</li>
</ul>
]]></content>
    
    
      <category term="photoshop" scheme="http://zhpooer.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day46-JQuery EasyUI]]></title>
    <link href="http://zhpooer.github.io/2014/06/12/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day46-jquery-easyui/"/>
    <id>http://zhpooer.github.io/2014/06/12/传智播客day46-jquery-easyui/</id>
    <published>2014-06-12T01:03:59.000Z</published>
    <updated>2014-06-12T13:20:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">简介</h1>
<p>j2ee企业开发, 服务端界面没有门户网站界面要求那么复杂,
没有要求那么美观</p>
<ul>
<li>种类一: 门户网站, 大量用户使用, 页面内信息非常多, 没有很高界面设计要求</li>
<li>种类二, 企业内网应用系统, 用户很少,页面内信息量不多, 页面设计要求不高</li>
</ul>
<p>针对内网系统, 界面开发工作由java工程师来完成. java工程师设计这些系统,
基于页面设计框架技术完成(Flex技术, ExtJS, EasyUI), 这些框架不需要
关注页面的显示部分</p>
<h1 id="-">目录结构</h1>
<ul>
<li>Locale: 存放国际化js文件, 如果不知道 locale, 默认提示信息是英文, 导入
<code>easyui-lang-zh_CN.js</code>, 将提示信息变为中文.</li>
<li>plugins: 插件目录</li>
<li>themes: 内置了五种主题, 每种主题内部的文件结构是相同的,
每种主题都提供了<code>easyui.css</code>,<ul>
<li>icon.css + icons 文件夹, 用于图标显示(与主题无关)</li>
</ul>
</li>
<li>jquery.min.js, jquery框架js文件</li>
<li>easyloader.js, 用于提供 easyui 框架核心加载器, 想使用 plugin,
可以用加载器去加载插件</li>
<li>easyui.min.js, easyloader.js + 36个plugin</li>
</ul>
<h1 id="-maven-maveneasyui">使用maven构建 maveneasyui</h1>
<p>新建JSP, 导入 <code>jquery.js</code>, <code>easyui.min.js</code>,
<code>easyui-lang-zh_CN.js</code>, <code>icon.css</code>, <code>easyui.css</code></p>
<h1 id="-">案例: 系统主界面设计</h1>
<p>JavaEE主界面特点:后台应用系统, 填满屏幕: 顶部logo, 底部copyrights,中部 menu+content</p>
<p>门户网站: 高度是屏幕的两到三倍</p>
<h2 id="layout-">layout插件</h2>
<p>layout插件, 完成页面布局</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 可以对div和body使用 --&gt;</span>
<span class="comment">&lt;!-- 添加 class="easyui-layout" --&gt;</span>
<span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"easyui-layout"</span>&gt;</span>
<span class="comment">&lt;!-- 在layout中, 由东西南北中五个区域 --&gt;</span>
<span class="comment">&lt;!-- 过region属性，指定div属于哪个区域 ，region属性属于easyui对象属性 --&gt;</span>
<span class="comment">&lt;!-- 可以对东西南北四个区域 设置高、宽 --&gt;</span>
<span class="comment">&lt;!-- 剩下的就是center(center区域是必须的，其它区域可以省略) --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">region</span>=<span class="value">"north"</span> &gt;</span>北部区域<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="comment">&lt;!-- 可以通过title指定标题 --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-option</span>=<span class="value">"region:south'"</span> <span class="attribute">style</span>=<span class="value">"height: 100px;"</span>&gt;</span>南区域<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-option</span>=<span class="value">"region:'west', title:'员工管理系统'"</span>&gt;</span>西部区域<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-option</span>=<span class="value">"region:east'"</span>&gt;</span>东部区域<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-option</span>=<span class="value">"region:center'"</span>&gt;</span>中部区域<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-accordion-">折叠面板(accordion)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- fit:true , 占满父容器窗口  --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"easyui-accordion"</span> <span class="attribute">data-options</span>=<span class="value">"fit:true"</span>&gt;</span>
    <span class="comment">&lt;!-- 对每个折叠面板，设置title属性 ，用于面部标题  --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"title:'基本菜单'"</span>&gt;</span> 基本面板 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="comment">&lt;!-- 可以对任何一个面部，添加iconCls属性，指定面板标题的图标, 自动寻找iconCss --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"title:'系统菜单', iconCls:'icon-search'"</span>&gt;</span> 系统面板 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-tabs-">选项卡插件(tabs)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 选项卡面板 --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mytabs"</span> <span class="attribute">calss</span>=<span class="value">"easyui-tabs"</span> <span class="attribute">data-options</span>=<span class="value">"fit:true"</span>&gt;</span>
    <span class="comment">&lt;!-- 内部提供多个面板 --&gt;</span>
    <span class="comment">&lt;!-- closeable: true, 设置是否可以被关闭 --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"title:'百度', closable: true"</span>&gt;</span>面板1<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"title:'新浪'"</span>&gt;</span>面板2<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>$(<span class="string">"baduClick"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="comment">// 调用选项卡面板 add 方法</span>
    $(<span class="string">"#mytabs"</span>).tabs(<span class="string">'add'</span>,{
        title:<span class="string">'百度'</span>,
        content:<span class="string">''</span>,
        closable: <span class="literal">true</span>
    });
});<span class="string">'</span>
</pre></td></tr></table></figure>

<h2 id="ztree-">ztree 树形菜单的制作</h2>
<p>jquery 树形结构第三方插件<code>ztree</code></p>
<p>ztree功能介绍</p>
<ul>
<li>Core 核心功能，负责树显示</li>
<li>Excheck 扩展勾选功能</li>
<li>Exedit 扩展可编辑</li>
<li>Exhide 扩展隐藏</li>
</ul>
<p><code>All = core + check + edit + hide</code> 只需要在项目导入 all.js 使用ztree所有功能</p>
<h3 id="-ztree">导入ztree</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- ztree --&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"jquery.ztree.all-3.5.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"zTreeStyle.css"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">制作基本菜单</h3>
<p>基于标准数据菜单: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ui</span> <span class="attribute">class</span>=<span class="value">"ztree"</span> <span class="attribute">id</span>=<span class="value">"standardtree"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ui</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="comment">// 标准数据</span>
<span class="comment">// 页面加载后, 进行ztree配置</span>
<span class="keyword">var</span> standardsettings = {}; <span class="comment">// 标准数据树, 不进行任何配置</span>
<span class="comment">// 准备节点数据</span>
<span class="keyword">var</span> standardnodes = [
   {name: <span class="string">"节点一"</span>},{name:<span class="string">"节点二"</span>, children:[ {name:<span class="string">"节点二一"</span>} ]}
]
<span class="comment">// 初始化ztree</span>
$.fn.zTree.init($(<span class="string">"#standardTree"</span>), standardsettings, standardnodes);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>Ztree 标签数据树缺点：和easyui ztree一样, 通过children指定子节点,
如果子节点层次过多, 不利于编写和维护.</p>
<p>基于简单数据树</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ui</span> <span class="attribute">class</span>=<span class="value">"ztree"</span> <span class="attribute">id</span>=<span class="value">"simpleTree"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ui</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="comment">// 标准数据</span>
<span class="comment">// 页面加载后, 激活简单ztree配置</span>
<span class="keyword">var</span> simplesettings = {
    data:{
        simpleData{
            enable:<span class="literal">true</span>
        },
        <span class="comment">// 对所有节点增加单击时间</span>
        callback:{
           onClick:<span class="function"><span class="keyword">function</span><span class="params">(event, treeId, treeNode, clickFlag)</span>{</span>
               <span class="comment">// treeNode 就是当前点击的节点 treeNode.curl</span>
               <span class="keyword">if</span>($(<span class="string">"mytabls"</span>).tabs(<span class="string">'exist'</span>, treeNode.name)){
                   <span class="comment">// 如果存在, 切换到</span>
                   $(<span class="string">'#mytabs'</span>).tabs(<span class="string">'select'</span>, treeNode.name);
                   
               } <span class="keyword">else</span> {
                   <span class="comment">// 如果不存在, 新增</span>
                   $(<span class="string">'#mytabs'</span>).tabs(<span class="string">'add'</span>, {
                       title: treeNode.name,
                       content: treeNode.curl
                       <span class="string">'&lt;div&gt;
                           &lt;iframe src="treeNode.curl"&gt;
                           &lt;/iframe&gt;
                       &lt;/div&gt;'</span>
                   });
               }
           }
        }
    }
};
<span class="comment">// 准备节点数据</span>
<span class="keyword">var</span> simplenodes = [
   <span class="comment">// id是当前节点编号, pid是父节点编号</span>
   {name: <span class="string">"节点一"</span>, id:<span class="number">1</span>, pId:<span class="number">0</span>},
   <span class="comment">// icon: 设置图标呢, url: 打开新窗口</span>
   {name:<span class="string">"节点二"</span>, id: <span class="number">2</span>, pId:<span class="number">0</span>,
    icon: <span class="string">"*.png"</span>,
    url:<span class="string">"http://www.baidu.com"</span>},
    <span class="comment">// 自定义属性curl</span>
   {name:<span class="string">"节点二一"</span>, id: <span class="number">3</span>, pId:<span class="number">2</span>
    curl:<span class="string">"http://www.baidu.com"</span>}
]
<span class="comment">// 初始化ztree</span>
$.fn.zTree.init($(<span class="string">"#simpleTree"</span>), simplesettings, simplenodes);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="maven-ssh-">Maven完成ssh框架整合(注解方式)</h1>
<p>非注解 + jpa + struts2 convention 插件</p>
<pre><code>导入 servlet, jsp(provided范围)
导入 junit4(test范围)
导入 Spring
    context, aspects, orm, web, test
导入 hibernate
    hibernate-core, jpa
导入struts2
    Struts2-core, struts2-spring, struts2-json, struts2-convention
导入 slf4j-log4j
导入 c3p0, mysql驱动
</code></pre><h2 id="-">配置文件</h2>
<p>web.xml配置, spring核心监听器,
struts2 核心过滤器, OpenSessionInViewFilter 延迟加载问题,
log4j.properties</p>
<p><!-- applicationContext.xml --></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
	<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
	<span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span>
	<span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span>
	<span class="attribute">xmlns:cache</span>=<span class="value">"http://www.springframework.org/schema/cache"</span>
	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span>
	<span class="comment">&lt;!-- 引入外部 properties 文件 --&gt;</span>
	<span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:jdbc.properties"</span>/&gt;</span>
	<span class="comment">&lt;!-- 数据库连接池  --&gt;</span>
	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.driver}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.url}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.username}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.password}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> 
		<span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"</span>&gt;</span>
		<span class="comment">&lt;!-- 引用数据库连接池 --&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
		<span class="comment">&lt;!-- 配置hibernate其它属性 --&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span>
			<span class="tag">&lt;<span class="title">props</span>&gt;</span>
				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
			<span class="tag">&lt;/<span class="title">props</span>&gt;</span>
		<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
		<span class="comment">&lt;!-- 自动扫描注解类 --&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"packagesToScan"</span>&gt;</span>
			<span class="tag">&lt;<span class="title">list</span>&gt;</span>
				<span class="tag">&lt;<span class="title">value</span>&gt;</span>cn.itcast.domain<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
			<span class="tag">&lt;/<span class="title">list</span>&gt;</span>
		<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"hibernateTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.HibernateTemplate"</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span> /&gt;</span>
	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
	<span class="comment">&lt;!-- 事务管理 --&gt;</span>
	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</span>
		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span> /&gt;</span>
	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
	<span class="comment">&lt;!-- 注解管理事务 --&gt;</span>
	<span class="tag">&lt;<span class="title">tx:annotation-driven</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>/&gt;</span>
	<span class="comment">&lt;!-- 扫描组件 --&gt;</span>
	<span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"cn.itcast.web, cn.itcast.service, cn.itcast.dao"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">实体类</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="annotation">@Entity</span>
<span class="annotation">@Table</span>(name=<span class="string">"department"</span>, catalog=<span class="string">"easyui"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> {</span>
    <span class="annotation">@Id</span>
    <span class="annotation">@GeneratedValue</span>(strategy=Generation.IDENTITY)
    <span class="keyword">private</span> Integer id;
    <span class="keyword">private</span> String name;
    <span class="annotation">@OneToMany</span>(mappedBy=<span class="string">"department"</span>, targetEntity=Employee.class)
    <span class="keyword">private</span> Set&lt;Employee&gt; emloyeees = <span class="keyword">new</span> HashSet&lt;Employee&gt;();
}
<span class="annotation">@Entity</span>
<span class="annotation">@Table</span>(name=<span class="string">"employee"</span>, catalog=<span class="string">"easyui"</span>)
<span class="annotation">@NamedQueries</span>(value={<span class="annotation">@NamedQquery</span>(name=<span class="string">"Employee.login"</span>,
              query=<span class="string">"from Employee where name=? and password=?"</span>)})
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Empoyee</span>{</span>
    <span class="annotation">@Id</span>
    <span class="annotation">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)
    <span class="keyword">private</span> Integer id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> Integer age;
    <span class="keyword">private</span> Date birthday;
    <span class="annotation">@ManyToOne</span>(targetEntity=Department.class)
    privat Department department;
}
</pre></td></tr></table></figure>

<h1 id="-">表现层</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>&lt;s:actionerros/&gt;
&lt;form action=<span class="string">"${contextPath}/login.action"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;
    用户名
    &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;
    &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;
    &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"submit"</span>/&gt;
&lt;/form&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>@ParentPackage(<span class="string">"struts-default"</span>)
@Namespace(<span class="string">"/"</span>)
@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">ActionSupport</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">ModelDriver</span>&lt;<span class="title">Employee</span>&gt;{</span>
    @Resource
    <span class="keyword">private</span> EmployeeService employeeService;
    
    <span class="keyword">private</span> Employee employee = <span class="keyword">new</span> Emplyee();
    @Action(value=<span class="string">"login"</span>, results={@Result(name=<span class="string">"success"</span>, location=<span class="string">"/index.jsp"</span>)
    @Result(name=<span class="string">"input"</span>, location=<span class="string">"/login.jsp"</span>)})
    <span class="keyword">public</span> String login(){
        log(<span class="string">"用户登陆"</span>);
        Employee loginUser = employeeService.login(employee);
        <span class="keyword">if</span>(loginUse = <span class="keyword">null</span>) {
            <span class="keyword">this</span>.addActionError(<span class="string">"用户名或密码错误"</span>);
            <span class="keyword">return</span> INPUT;
        } <span class="keyword">else</span> {
           session.setAttribute(<span class="string">"user"</span>, loginUser);
           <span class="keyword">return</span> SUCCESS;
        }
    }
}
</pre></td></tr></table></figure>

<h1 id="-">业务层和数据层</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="annotation">@Repository</span>(<span class="string">"employeeDao"</span>)
<span class="keyword">public</span> classs EmployeeDao{
    <span class="annotation">@Resource</span>(name=<span class="string">"hibernateTemplate"</span>)
    <span class="keyword">private</span> HibernateTemplate template;
    <span class="keyword">private</span> Employee <span class="title">login</span>(Employee employee) {
       List employees = template.findByNamedQuery(<span class="string">"Employee.login"</span>,
             employee.getName, employee.getPassword());
       retirn employee.isEmpty()?:;
    }
}

<span class="annotation">@Service</span>(<span class="string">"emplyeeService"</span>)
<span class="annotation">@Transactional</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span>{</span>
   <span class="annotation">@Resource</span>(name=<span class="string">"employeeDao"</span>)
   <span class="keyword">private</span> EmployeeDao employDao;
   <span class="keyword">public</span> Employee <span class="title">login</span>(Employee user) {
      empoyeeDao.login(user);
   }
}
</pre></td></tr></table></figure>

<h1 id="message-">message 消息框</h1>
<p>easyUI提供了5种消息框</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// 警告框</span>
$.messager.alert(<span class="string">"标题"</span>, <span class="string">"内容"</span>, <span class="string">"warning|error|info|questiong(图标)"</span>)
<span class="comment">// 确认框</span>
$.messager.confirm(<span class="string">"标题"</span>, <span class="string">"内容"</span>, <span class="function"><span class="keyword">function</span><span class="params">(r)</span>{</span> <span class="keyword">if</span>(r){} <span class="keyword">else</span> {} });
<span class="comment">// 输入框</span>
$.messager.prompt(<span class="string">"标题"</span>, <span class="string">"内容"</span>, <span class="function"><span class="keyword">function</span><span class="params">(input)</span>{</span> log(input)});
<span class="comment">// 进度条</span>
$.messager.progress({interval: <span class="number">1000</span>});
window.setTimeout(<span class="string">'$.messager.progerss("close");'</span>, <span class="number">5000</span>);
<span class="comment">// 右下角提示框</span>
$.messager.show({
    title:<span class="string">""</span>,
    msg:<span class="string">""</span>,
    timeout: <span class="number">5000</span>,
});
</pre></td></tr></table></figure>

<h1 id="-">用户退出功能</h1>
<p>通过 menubutton 制作下拉菜单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 下拉菜单 --&gt;</span>
<span class="comment">&lt;!-- 提供menu属性, 指向下拉菜单项的div的id --&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:void(0)"</span> <span class="attribute">class</span>=<span class="value">"easyui-menubutton"</span> <span class="attribute">data-options</span>=<span class="value">"menu:'#menu'"</span>&gt;</span>控制面板<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"menu"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-options</span>=<span class="value">"iconCls:'icon-edit'"</span>&gt;</span>修改密码 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="comment">&lt;!--分割线 --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"menu-sep"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">onclick</span>=<span class="value">"logout();"</span>&gt;</span>用户退出<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span>{</span>
    $messager.confirm(<span class="string">"确认窗口"</span>, <span class="string">"确认退出吗"</span>, <span class="function"><span class="keyword">function</span><span class="params">(isConfirm)</span>{</span>
        <span class="keyword">if</span>(isConfirm) {
            <span class="comment">// 用户选择跳转</span>
            location.href = <span class="string">"${contextPath}/logout.action"</span>
        }
    })
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="annotation">@Action</span>(value=<span class="string">"logout"</span>, result={<span class="annotation">@Result</span>(name=<span class="string">"success"</span>, location=<span class="string">"/index.jsp"</span>)})
<span class="keyword">public</span> String <span class="title">logout</span>(){
    getSession().invalidate()
    <span class="keyword">return</span> SUCESS;
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[photoshop入门-海尔案例]]></title>
    <link href="http://zhpooer.github.io/2014/06/11/photoshop%E5%85%A5%E9%97%A8-%E6%B5%B7%E5%B0%94%E6%A1%88%E4%BE%8B/"/>
    <id>http://zhpooer.github.io/2014/06/11/photoshop入门-海尔案例/</id>
    <published>2014-06-11T13:40:39.000Z</published>
    <updated>2014-06-12T07:54:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">海尔案例</h1>
<p>切换到渐变工具 <code>G</code></p>
<p>新建画布, 大小 110mm*75mm</p>
<p>用标记线分割为三部分</p>
<p>中间部分渐变, 和下边部分渐变</p>
<ul>
<li>切换到渐变工具, 设置前景色(亮灰色)和背景色(白色)</li>
<li>在渐变工具属性栏第一项中, 选择前景到背景的渐变(预设中第一项)</li>
<li>选择属性栏中, 第二栏第一项(线性渐变)</li>
<li>新建图层, 按住<code>shift</code>, 从最上边缘拖拽到下边缘</li>
</ul>
<p>使用魔术棒工具, 剪切电视素材</p>
<p>使用魔术棒工具, 剪切人物, 切换人物衣服颜色</p>
<ul>
<li>选择磁性套索工具, 圈出当前图层人物的衣服</li>
<li>调整色彩 <code>Ctrl+U</code>(图像/调整/色相饱和度), 红-&gt;蓝</li>
</ul>
<p>加入蓝带素材, 添加若隐若现效果</p>
<ul>
<li>切换橡皮擦工具 <code>E</code>, 调节硬度, 擦除蓝带</li>
</ul>
<p>加入显示器素材, 借助标记线, 使其居中</p>
<p>输入文字:</p>
<pre><code>流媒体电视
自由高清1200P
</code></pre><p>制作按钮</p>
<ul>
<li>新建图层, 画出椭圆选择框, 使用渐变工具(蓝-&gt;白)填充背景</li>
<li>图层样式, 描边</li>
<li>新建图层, 亮光样式, 套索工具,
填充白色, 滤镜/高斯模糊, 不透明度80%, 合并图层</li>
<li>复制三个, 同时选择, 切换V移动工具, 居中</li>
</ul>
<p>文字输入(注意文字摆放位置)</p>
<pre><code>原装进口国际名牌显示器
运动图像更加清晰平稳
画面清晰, 立体感强
</code></pre><p>tip: 弱化抠图边缘, 使用橡皮擦工具, 硬度最小, 插边缘</p>
<h1 id="-">电脑展示效果</h1>
<ol>
<li>画布大小, 280mm*210mm</li>
<li>标示线划分两部分</li>
<li>制作浅色光晕<ul>
<li>方式一: 上半部分深红色填充, 借助标示线在中心画出亮红色红色椭圆, 对椭圆高斯模糊</li>
<li>方式二: 新建两个图层, 分别填充在标示线上半部分填充深红和浅红色(深色在上),
选中深色, 椭圆选择框, 羽化, 删除</li>
</ul>
</li>
<li>下半部分发光, 填充颜色, 椭圆羽化, 删除</li>
<li>导入显示器素材, 使用魔术棒工具扣图,新建图层,并把屏幕填充为黑色,
白色椭圆高斯模糊, 删除白色部分, 75%透明</li>
<li>制作显示器倒影和投影, <code>Ctrl+J</code>, 自由变换右击, 透明度设为 30%, 黑色椭圆高斯模糊</li>
<li>输入文字</li>
</ol>
<h1 id="-">自由变换</h1>
<p><code>ctrl + t</code>右键由许多操作: </p>
<ul>
<li>斜切<code>Ctrl + shift</code>, 可以按照该调节边角点所引导出的两条边的角度进行移动</li>
<li>扭曲<code>Ctrl</code>, 可以做任意点的调节</li>
<li>透视<code>Ctrl + shift + alt</code>, 模拟近大远小的关系</li>
<li>变形, 立体效果变化</li>
</ul>
<h1 id="-">画框的放置</h1>
<ol>
<li>组合画框和画</li>
<li>自由变换, 调整透视, 近大远小</li>
<li>厚度设置, 画一个长条, 自由变化, 移动中心点到画框边缘, 透视调节</li>
<li>增加投影效果<ul>
<li>方式一, 图层样式</li>
<li>方式二, 画出投影区域, 用高斯模糊, 透明</li>
</ul>
</li>
</ol>
<h1 id="-">磨皮</h1>
<p>针对人物皮肤处理</p>
<ol>
<li>针对背景层, 原位复制</li>
<li>新图层做滤镜高斯模糊, 调整数值</li>
<li>橡皮擦工具(E), 不透明度 38%, 擦除需要变清晰的地方(五官, 衣服边缘, 脖迹线)</li>
</ol>
<h1 id="-">去斑</h1>
<p>仿制图章(S), 把正常部分复制出来, 遮盖到不想要的地方, 对齐属性(保证画面的延续性)</p>
<ol>
<li>调整画笔大小, 刚好遮盖到不想要的地方</li>
<li>在周边, 取样(alt+单击), 遮盖(单击)</li>
</ol>
<h1 id="-">纹理修复</h1>
<ol>
<li>切换到仿制图章(S), 按住Alt, 准星对准取样线中心,
不松开 alt, 切换到要修复地方, 松开 alt, 涂抹修复</li>
<li>明暗变化, 在周边取样</li>
</ol>
<p>大面积纹理修复</p>
<ol>
<li>选区工具, 羽化, 复制, 旋转</li>
</ol>
<p>消失点修复, 主要用来识别透视角度</p>
<ol>
<li>滤镜, 消失点工具</li>
</ol>
<h1 id="-j-">修复画笔工具(J)</h1>
<p>在完成复制遮盖的过程中, 可以实现和背景之间颜色融合(类似仿制图章工具)</p>
<ul>
<li>修复画笔工具会和背景融合, 而仿制图章工具不会</li>
</ul>
<p>污点修复工具, 类似修复画笔工具, 但是不取样</p>
<p>修补工具</p>
<ul>
<li>源, 从外面拿回来</li>
<li>目标, 从里面拿出去</li>
<li>透明, 趋向于半透明的变成透明</li>
</ul>
<h1 id="tip">Tip</h1>
<p>脸部偏暗部分, 显瘦, 脸部偏亮, 显胖</p>
]]></content>
    
    
      <category term="photoshop" scheme="http://zhpooer.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day45 SVN]]></title>
    <link href="http://zhpooer.github.io/2014/06/10/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day45-svn/"/>
    <id>http://zhpooer.github.io/2014/06/10/传智播客day45-svn/</id>
    <published>2014-06-10T13:18:45.000Z</published>
    <updated>2014-06-11T11:54:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="svn-">SVN简介</h1>
<p>Maven: 项目管理工具, 完成项目构建</p>
<p>SVN (Subversion)版本管理工具, 属于 SCM 部分软件配置管理</p>
<p>项目中为什么要版本控制?</p>
<ul>
<li>在多人团队同时进行项目开发, 每个人写好代码,
需要同步给其它人, 使用U盘工具, 容易出现版本更新不及时的问题</li>
<li>里程碑: 项目节点管理, 通过标签tag进行记录, 即时项目备份、恢复,
在项目升级 出现问题，很容易恢复</li>
<li>分支概念, 搭建基础架构, 对项目进行分支, 每个分支独立开发, 支持合并</li>
</ul>
<h1 id="subversion-">Subversion服务器</h1>
<p>工作方式</p>
<ol>
<li>单独安装Subversion服务器程序,
直接使用客户端连接SVN Server(没有对用户名和密码加密，不安全)</li>
<li>Subversion服务器和Apache服务器整合, Apache负责密码加密(更加安全)</li>
</ol>
<p>数据存储方式</p>
<ul>
<li>BDB (Berkeley DB), 数据库方式</li>
<li>FSFS, 采用文件系统来存储(推荐)</li>
</ul>
<p>SVN 管理版本文件, 就是硬盘上文件夹, 里面存放不同版本的文件</p>
<ul>
<li>复制, 修改, 合并方案 (Subversion 服务器默认方式):
这种方案，允许多个人，对服务器副本文件，进行同时修改，在修改后，再合并 </li>
<li>锁定, 修改, 解锁方案: 只允许一个人修改文件</li>
</ul>
<h2 id="-">安装服务器</h2>
<ol>
<li><p>下载安装 Subversion</p>
<pre><code> svnadmin : 管理员创建仓库管理命令
 mod_dav_svn : 和Apache整合
 svnserve : 启动svn服务器
 svn : 执行svn客户端命令
</code></pre></li>
<li>建立仓库, <code>svnadmin create itcast</code>, 会生成目录结构: <ul>
<li>conf下存放配置文件, authz授权文件、passwd 用户密码文件、svnserve.conf 核心配置</li>
<li>db 存放版本管理一些文件</li>
<li>hooks 钩子事件</li>
<li>locks 锁文件</li>
</ul>
</li>
<li><p>配置Subversion服务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 方式一</span>
<span class="subst">&gt;</span> svnserve <span class="attribute">-d</span> –r 文档仓库路径
<span class="comment">// 方式二 制作windows服务</span>
<span class="subst">&gt;</span> sc create SVN<span class="attribute">-Service</span> binpath<span class="subst">=</span><span class="string">"\bin\svnserve.exe --service -r C:\Repositories\svn"</span> displayname<span class="subst">=</span> <span class="string">"SVN-Service"</span> start<span class="subst">=</span> auto depend<span class="subst">=</span>Tcpip
<span class="subst">&gt;</span> net start SVN<span class="attribute">-Service</span> <span class="comment">// 启动服务</span>
<span class="subst">&gt;</span> net delete SVN<span class="attribute">-Service</span> <span class="comment">// 停止服务</span>
</pre></td></tr></table></figure>
</li>
<li><p>客户端操作</p>
<pre><code> svn checkout -从版本库取出一个工作拷贝 
 svn commit -将改动的文件提交到版本库
 svn update -更新你的工作拷贝 
 svn add -向版本库中添加新文件
 svn delete -从版本库中删除文件
 svn revert -取消所有的本地编辑
 svn info -显示本地或远程条目的信息 
 svn list -列出版本库目录的条目 
 svn status -查看当前工作区状态
 svn help -获取帮助信息
</code></pre></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="blockquote">&gt; svn checkout svn://localhost/itcast</span>
<span class="blockquote">&gt; svn add index.jsp  ;; 在工作副本加入新的文件, 并通知服务器</span>
<span class="blockquote">&gt; svn commit index.jsp -m "first commit" ;; 提交到中心服务器, 每一次提交版本加一</span>
<span class="blockquote">&gt; svn update ;; 将本地的文件更新到最新文件</span>
<span class="blockquote">&gt; svn revert ;; 取消本地副本的编辑</span>
</pre></td></tr></table></figure>

<h2 id="-">权限配置</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">;;; senserve.conf</span>
<span class="comment">;; 匿名用户不能进行读写, 认证用户可以写入</span>
<span class="setting">anon-access = <span class="value">none</span></span>
<span class="setting">auth-access = <span class="value">write</span></span>

<span class="comment">;; 密码文件生效</span>
<span class="setting">password-db=<span class="value">passwd</span></span>

<span class="comment">;; 授权文件生效</span>
<span class="setting">authz-db = <span class="value">authz</span></span>

<span class="comment">;; 修改 passwd, 创建用户和密码</span>
<span class="comment">;; 修改 authz, 配置用户权限</span>
</pre></td></tr></table></figure>

<h1 id="tortoisesvn">TortoiseSVN</h1>
<h1 id="-">冲突解决</h1>
<p>多个人, 同时对一份代码进行修改, 再同时去提交产生问题
后提交用户, 出现文件过时错误, 服务器文件发生变化</p>
<p>解决方法: 修改时对文件上锁, 或: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>// 在tortoise上操作
svn <span class="operator"><span class="keyword">update</span>
edit confilict
mark resolved
<span class="keyword">commit</span></span>
</pre></td></tr></table></figure>

<h1 id="eclipse-svn-">eclipse svn 插件</h1>
<h1 id="svn-apache-">svn+apache整合配置</h1>
<p>为什么 Subversion 整合 Apache</p>
<ul>
<li>使用HTTP协议访问SVN服务</li>
<li>Apache提供密码加密功能</li>
</ul>
<ol>
<li>下载与svn相对应的apache安装程序, 安装之</li>
<li><p>修改 httpd.conf, 复制 <code>mod_dav_svn.so</code> <code>mod_authz_zvn</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">;; 将下列2行前方的#移除</span>
LoadModule dav_module modules/mod_dav<span class="preprocessor">.so</span>
LoadModule dav_fs_module modules/mod_dav_fs<span class="preprocessor">.so</span>
<span class="comment">;; 并同时在上面两行下面增加以下两行</span>
LoadModule dav_svn_module modules/mod_dav_svn<span class="preprocessor">.so</span>
LoadModule authz_svn_module modules/mod_authz_svn<span class="preprocessor">.so</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建密码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>;; 复制产生的文件到 svn/conf
htpasswd <span class="attribute">-cb</span> <span class="preprocessor">[</span>filename<span class="preprocessor">]</span><span class="markup"> </span><span class="preprocessor">[</span>username<span class="preprocessor">]</span><span class="markup"> </span><span class="preprocessor">[</span>password<span class="preprocessor">]</span><span class="markup"></span>
</pre></td></tr></table></figure>
</li>
<li><p>修改httpd.conf, 将svn的服务映射为 http 服务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">#配置虚拟目录#</span>
&lt;location /svn/itcast&gt;
<span class="comment">#引用远程访问模块</span>
<span class="constant">DAV</span> svn
<span class="comment">#项目版本库路径#</span>
<span class="constant">SVNPath</span> <span class="constant">F</span><span class="symbol">:/software/repository/svn/itcast</span>
<span class="comment">#授权文件#</span>
<span class="constant">AuthzSVNAccessFile</span> <span class="constant">F</span><span class="symbol">:/software/repository/svn/itcast/conf/authz</span>
<span class="comment">#所有用户都需要身份验证#</span>
<span class="constant">Satisfy</span> <span class="constant">Any</span>
<span class="constant">Require</span> valid-user
<span class="comment">#验证方式#</span>
<span class="constant">AuthType</span> <span class="constant">Basic</span>
<span class="comment">#项目的名称#</span>
<span class="constant">AuthName</span> <span class="string">"itcast"</span>
<span class="comment">#用户文件#</span>
<span class="constant">AuthUserFile</span> <span class="constant">F</span><span class="symbol">:/software/repository/svn/itcast/conf/passwd</span>.apache
&lt;<span class="regexp">/location&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">快速整合</h2>
<p>可以下载集合包</p>
<h1 id="-">分支, 标签, 切换, 合并使用</h1>
<p>在实际企业开发中，SVN仓库中应该存在三个顶级目录</p>
<ul>
<li><code>/trunk</code> 存放开发的“主线”</li>
<li><code>/branches</code> 存放支线副本</li>
<li><code>/tags</code> 存放标签副本</li>
</ul>
<p>trunk: 存放主项目(项目主线)</p>
<p>tag: 在项目开发遇到里程碑(某些模块已经开发完后，记录当前时间 项目版本),
在企业开发中对于tag ，只读 不写</p>
<ul>
<li>新建tag, 新建tag, 文件推送到 <code>TAGS</code>目录, 命名为 <code>***_v1.0</code></li>
<li>如果发现之前版本存在bug, 切换到tag, 不在tag上开发，创建分支 <code>branch/***_v1.0</code></li>
<li>切换到分支, 修改bug, 再打标签 v1.1 </li>
<li>切换到主线, 对分支进行合并 </li>
</ul>
]]></content>
    
    
      <category term="创智播客" scheme="http://zhpooer.github.io/tags/%E5%88%9B%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[photoshope入门 选区]]></title>
    <link href="http://zhpooer.github.io/2014/06/09/photoshope%E5%85%A5%E9%97%A8-%E9%80%89%E5%8C%BA/"/>
    <id>http://zhpooer.github.io/2014/06/09/photoshope入门-选区/</id>
    <published>2014-06-09T07:41:13.000Z</published>
    <updated>2014-06-10T11:45:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">选区</h1>
<p>作用：针对选区进行编辑</p>
<p>可以在创建选区的工具属性栏上找到布尔运算</p>
<ul>
<li>新选区: 移动选区, 取消选择</li>
<li>加    : shift</li>
<li>减    : alt</li>
<li>相交  : shift + alt</li>
</ul>
<p>更改图层顺序：<code>ctrl + [</code> 向上移动, <code>ctrl + [</code> 向下移动, <code>ctrl + shift + [</code> 到最底层, <code>ctrl + shift + ]</code> 到最顶层</p>
<h1 id="-">图片处理方式</h1>
<p>三种处理方式</p>
<ul>
<li>脚版 源图片</li>
<li>挖版</li>
<li>羽化版</li>
</ul>
<h2 id="-">使用羽化版</h2>
<ol>
<li>M 选框工具</li>
<li>羽化快捷键, <code>ctrl + alt + D</code> 或 <code>shift + F6</code></li>
</ol>
<p>变换选区 <code>alt + s t</code>, 针对选区进行大小变换</p>
<ul>
<li>约束等比: shift(拖拽边角点)</li>
<li>约束中心点: alt</li>
</ul>
<p>自由变换外框: <code>ctrl + t</code>, 针对像素进行大小变化</p>
<ul>
<li>如果在选区的条件下, 自由变换像素, 背景色填充(可以制作透视图)</li>
</ul>
<p>切换到画笔工具 B</p>
<ul>
<li>画笔工具是以当前的前景色进行绘制</li>
<li>调节笔尖大小: <code>[</code> 和 <code>]</code></li>
<li>调节笔尖硬度(模糊, 柔和): <code>shift + [</code> 和 <code>shift + ]</code></li>
</ul>
<h1 id="-">制作气泡</h1>
<ol>
<li>新建画布(任意大小)</li>
<li>针对背景色填充黑色</li>
<li>绘制合适大小正圆</li>
<li>针对选区新建图层, 并填充白色</li>
<li>针对选区进行 变换选区, 把选区适当缩小</li>
<li>针对缩小后的选区执行 羽化, 数值适当控制</li>
<li>用该选区, 针对之前填充得到的白色圆, 进行删除</li>
<li>使用画笔工具添加高光部分</li>
</ol>
<h1 id="-">复制方法</h1>
<p>位移复制, 在V移动工具下, 按住鼠标左键拖拽</p>
<p>原位复制</p>
<ol>
<li>拖拽图层到新建图层</li>
<li><code>ctrl + j</code>, 如果带有选区, 会复制选区内的像素到新的图层</li>
</ol>
<p>使用情景: 制作编辑的副本, 快速恢复</p>
<p>恢复到画面初识打开的状态: <code>F12</code></p>
<h1 id="-">套索工具</h1>
<p>切换到套索工具 <code>L</code></p>
<p>不规则形状, 选框</p>
<ol>
<li>套索工具, 绘制曲线, 按住左键拖拽</li>
<li>多边形套索工具, 绘制直线, 不断单击, 双击可以直接完成连线,
退格可以取消上一次选择, <code>ESC</code>取消所有绘制</li>
<li>磁性套索工具</li>
</ol>
<p>小技巧, 绘制过程中同时需要直线和曲线, 在绘制过程中, <code>ALT</code>键暂时切换</p>
<p>合并选中图层: <code>ctrl + T</code></p>
<h1 id="-">文字输入</h1>
<p>切换文字输入工具 <code>T</code>, 可以填充前景色或背景色</p>
<p><code>ctrl + 回车</code> 结束文字输入, <code>esc</code>取消本次输入</p>
<p>调节文字大小, <code>ctrl + T</code>或直接更改字体大小</p>
<p>双击文本图层, 调出字符面板</p>
<ul>
<li>标准文本配置 100, 100, 0, 0, 0</li>
<li>调节间距 <code>alt + 左右</code>, 调节行距 <code>alt + 上下</code></li>
</ul>
<p>段落选项: 修改避头尾法则和段落格式</p>
<h1 id="-">制作百货公司标牌</h1>
<ol>
<li>新建画布 650mm*150mm, 或通过赋值模板来新建画布</li>
<li>填充背景图层</li>
<li>在素材中, 使用选区工具选中楼体, 拖拽楼体到新建画布</li>
<li>楼体通过变形工具变形</li>
<li>画箭头<ul>
<li>使用自定义形状工具, 来新建箭头标签, 通过变形调整箭头, <code>ctrl+回车</code>, 把贝塞尔曲线变成选区</li>
<li>手工画箭头, 多边形套索工具 + <code>shift</code> 画水平线</li>
</ul>
</li>
<li>画出正圆形, 将箭头放到正圆上, 用图层转选择(<code>ctrl+选择图层预览</code>),
并删除箭头图层</li>
<li>选择正圆形图层, 删除箭头选区</li>
<li>输入文字<code>百货公司</code>, <code>Department store</code></li>
</ol>
<h1 id="-">魔术棒工具</h1>
<p>针对颜色边缘形状创建选区</p>
<p>切换到魔术棒 <code>W</code></p>
<ul>
<li>容差值, 与单击点色彩的差异不超过</li>
<li>连续, 要求颜色是区域是连续在一起的</li>
</ul>
<p>使用情景:</p>
<ol>
<li>主体颜色相对单一</li>
<li>背景颜色相对单一</li>
<li><strong>主体和背景之间的颜色反差较大, 由相对清晰的边缘</strong></li>
</ol>
<p>反选: <code>ctrl + shift + I</code></p>
<h1 id="-">图层样式面板</h1>
<p><code>F7</code> 打开图层面板</p>
<p>投影</p>
<ul>
<li>混合模式: 正片叠底</li>
<li>不透明度: 75度</li>
<li>角度, 常用30度,120度, 使用全局光(只有一个光源, 默认),
距离(投影和原物件距离), 扩展(投影的虚实程度, 羽化), 大小(投影大小)</li>
</ul>
<p>复制图层效果: <code>alt</code>键拖动 或 选择图层再组合键 <code>alt + l y c</code> <code>alt + l y p</code></p>
<p>清除图层样式: <code>alt + l + y + a</code></p>
<p>TODO: 制作木乃伊</p>
<ol>
<li>用魔术棒工具选择木乃伊</li>
<li>新建文字, 双击文字图层, 打开图层样式面板(可以设置UI样式)</li>
<li>给文字增加</li>
</ol>
<h1 id="tip">Tip</h1>
<p>常有面板: 图层 + 通道 + 路径 + 历史记录</p>
]]></content>
    
    
      <category term="photoshop" scheme="http://zhpooer.github.io/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day44-maven]]></title>
    <link href="http://zhpooer.github.io/2014/06/09/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day44-maven/"/>
    <id>http://zhpooer.github.io/2014/06/09/传智播客day44-maven/</id>
    <published>2014-06-09T01:04:08.000Z</published>
    <updated>2014-06-10T12:31:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="maven-">Maven技术简介</h1>
<p>项目管理工具, 包含一个项目对象模型(Project Object Model), 一组标准集合,
一个项目生命周期(Lifecycle), 一个依赖管理系统(Dependency Managerment)
和用来运行定义在色和那个吗周期阶段(Phase)中的插件(Plugin)目标(goal)的逻辑</p>
<ul>
<li>Pom 项目管理周期</li>
<li>标准集合</li>
<li>项目生命周期</li>
<li>依赖管理系统</li>
<li>插件</li>
</ul>
<p>开发思想: 约定优于配置</p>
<p>针对Java开发项目管理工具, 提供构建工具所提供功能的超集, 除了构建功能之外,
Maven还可以管理项目结构, 管理依赖关系</p>
<p>maven管理项目: 清理, 编译, 测试, 报告, 打包, 部署, 清理</p>
<h1 id="maven-">maven快速入门</h1>
<p>目录结构</p>
<ul>
<li><code>bin</code> 提供mvn命令</li>
<li><code>conf/setting.xml</code>, 提供核心配置文件</li>
</ul>
<h2 id="-">安装配置</h2>
<p>仓库, 用来管理打包后的项目</p>
<p>修改 <code>conf/settings.xml</code>, 配置maven</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 自定义本地仓库位置 --&gt;</span>
<span class="tag">&lt;<span class="title">localRepository</span>&gt;</span> <span class="tag">&lt;/<span class="title">localRepository</span>&gt;</span>
</pre></td></tr></table></figure>

<p>名词解释</p>
<table>
<thead>
<tr>
<th>名词</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Project</td>
<td>何您想build的事物，Maven都可以认为它们是工程。这些工程被定义为工程对象模型(POM，Poject Object Model)</td>
</tr>
<tr>
<td>Pom</td>
<td>它是指示Maven如何工作的元数据文件,位于每个工程的根目录中</td>
</tr>
<tr>
<td>GroupId</td>
<td>组名(工程名), groupId是一个工程的在全局中唯一的标识符</td>
</tr>
<tr>
<td>ArtifactId</td>
<td>项目名称, artifact 是工程将要产生或需要使用的文件，它可以是jar文件, 每个artifact都由groupId和 artifactId组合的标识符唯一识别</td>
</tr>
<tr>
<td>Dependency</td>
<td>依赖</td>
</tr>
<tr>
<td>plug-in</td>
<td>插件</td>
</tr>
<tr>
<td>Repository</td>
<td>仓库</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="subst">&gt;</span> mvn archetype:create <span class="attribute">-DgroupId</span><span class="subst">=</span><span class="literal">cn</span><span class="built_in">.</span>itcast<span class="built_in">.</span>maven<span class="built_in">.</span>quickstart <span class="subst">\</span>
<span class="attribute">-DaritifactId</span><span class="subst">=</span>simple <span class="attribute">-DarichetypeArtifactId</span><span class="subst">=</span>maven<span class="attribute">-archetype</span><span class="attribute">-quickstart</span>
</pre></td></tr></table></figure>

<p>项目目录结构</p>
<ul>
<li><code>pom.xml</code>, 位于工程根目录, 对项目进行配置</li>
<li><code>src/main/java</code>, 存放项目源码</li>
<li><code>src/test/java</code>, 存放测试源码</li>
</ul>
<h2 id="-">常用命令</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="blockquote">&gt; mvn compile  ;; 编译, 在工程目录生成target目录</span>
<span class="blockquote">&gt; mvn test     ;; 运行测试</span>
<span class="blockquote">&gt; mvn test -Dtest=${classname} ;; 测试运行单个类</span>
<span class="blockquote">&gt; mvn clean    ;; 清除编译的结果, 删除target</span>
<span class="blockquote">&gt; mvn package  ;; 打包</span>
<span class="blockquote">&gt; mvn package –Dmaven.test.skip=true ;; 打包时不执行测试</span>
<span class="blockquote">&gt; mvn install  ;; 打包后, 安装到本地仓库中 ${仓库根目录}/groupid/artifact/version/</span>
<span class="blockquote">&gt; mvn deploy   ;; 发布到本地仓库或服务器(例如Tomcat、Jboss)</span>
</pre></td></tr></table></figure>

<p>生命周期，从上到下执行， 如果执行后面的命令，自动执行之前项目构建步骤</p>
<pre><code>validate
generate-sources
process-sources
generate-resources
process-resources     复制并处理资源文件，至目标目录，准备打包。
compile     编译项目的源代码。
process-classes
generate-test-sources 
process-test-sources
generate-test-resources
process-test-resources     复制并处理资源文件，至目标测试目录。
test-compile     编译测试源代码。
process-test-classes
test     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。
prepare-package
package     接受编译好的代码，打包成可发布的格式，如 JAR 。
pre-integration-test
integration-test
post-integration-test
verify
install     将包安装至本地仓库，以让其它项目依赖。
deploy     将最终的包复制到远程的仓库，以让其它开发人员与项目共享。
</code></pre><h3 id="-">转换其他工程项目</h3>
<p>转换Eclipse工程</p>
<blockquote>
<p>mvn eclipse:eclipse<br>mvn eclipse:clean  ;; 清除Eclipse设置信息</p>
</blockquote>
<p>转换成IDEA工程</p>
<blockquote>
<p>mvn idea:idea<br>mvn idea:clean //清除idea设置信息</p>
</blockquote>
<p>显示一个插件的详细信息(configuration, goals等):</p>
<blockquote>
<p>mvn help:describe -Dplugin=pluginName -Ddetail</p>
</blockquote>
<h1 id="eclipse-maven-">Eclipse基于maven构建</h1>
<p>安装 m2eclipse, 更新配置文件, 点击 reindex对仓库中的项目重建索引</p>
<ul>
<li>新建maven项目,选择archetype:maven-archetype-quickstart</li>
</ul>
<h2 id="-web-">建立web项目</h2>
<p>方式一: 选择archetype:maven-archetype-webapp,</p>
<ul>
<li>需要在<code>src</code>下手动建立 <code>src/main/java</code></li>
<li>使用 <code>tomcat-maven-plugin</code>, <code>mvn tomcat:run</code>, 运行tomcat</li>
</ul>
<p>方式二: 跳过骨架选择, 使用默认的骨架, package 设置为 war</p>
<ul>
<li>需要在 <code>src/main/webapp</code> 下建立 WEB-INF/web.xml</li>
<li><p>推荐： 跳过骨架选择方式，生成目录结构最完整</p>
</li>
<li><p><code>src/main/java</code> 存放项目源码</p>
</li>
<li><code>src/main/resources</code> 存放项目配置文件</li>
<li><code>src/test/java</code> 存放测试源码</li>
<li><code>src/test/resources</code> 存放测试配置文件</li>
<li><code>src/main/webapp</code> 存放页面代码 </li>
</ul>
<h1 id="maven-">maven 配置详解</h1>
<h2 id="-">仓库</h2>
<p>maven项目管理, 依赖于三种仓库</p>
<ul>
<li>本地仓库, 根据 settings.xml 配置, 可以缓存网络上的项目, 也可以自己的应用安装到仓库</li>
<li>远程仓库(网络上的仓库), 公司内部搭建服务器(私服)</li>
<li>中心仓库, 当本地项目 依赖其它项目, 而依赖的项目本地没有, 去网络上中央仓库找<ul>
<li>Maven内置了远程公用仓库：<a href="http://repo1.maven.org/maven2" target="_blank">http://repo1.maven.org/maven2</a></li>
<li>这个公共仓库是由Maven自己维护, 里面有大量的常用类库,
并包含了世界上大部分流行的开源项目构件.目前是以java为主.</li>
</ul>
</li>
</ul>
<p>中央仓库是最大网络远程仓库, 里面管理jar包,
也并不是企业开发全部(有些jar包需要到私服下载JBOSS私服、Spring 私服)</p>
<h2 id="pom-">POM 配置详解</h2>
<p>全景图</p>
<ul>
<li>坐标: groupId、artifactId、version</li>
<li>聚合: modules 分模块</li>
<li>继承: parent、 dependencyManagement</li>
<li>依赖: dependences</li>
<li>工程信息： name、description、url</li>
<li>构建配置： properties、 packaging、 build 、reporting</li>
</ul>
<p>用户编写maven项目，自定义 pom.xml 默认继承 &quot;超级POM文件&quot;</p>
<pre><code>自定义POM + 超级POM = 有效POM
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">project</span>&gt;</span>
    <span class="comment">&lt;!-- 使用Pom对象版本4.0.0 --&gt;</span>
    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span>
    
    <span class="comment">&lt;!-- 当前项目的坐标, 唯一的锁定项目在仓库中的位置  --&gt;</span>
    <span class="comment">&lt;!-- 如果要寻找项目, 先要获得项目的坐标, 可以是 jar 或 war --&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>io.zhpooer<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mavendemo3<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-snapshot<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    
    <span class="comment">&lt;!-- Maven 构建项目默认提供常见的三种打包项目 --&gt;</span>
    <span class="comment">&lt;!-- * jar包, 简单java项目 --&gt;</span>
    <span class="comment">&lt;!-- * war包, web项目 --&gt;</span>
    <span class="comment">&lt;!-- * pom, 父项目，提供pom被子项目继承  --&gt;</span>
    <span class="tag">&lt;<span class="title">packageing</span>&gt;</span>war<span class="tag">&lt;/<span class="title">packageing</span>&gt;</span>
    
    <span class="comment">&lt;!-- 如果使用tomcat:run 运行项目，访问项目通过 artifactId 属性 --&gt;</span>
    <span class="comment">&lt;!-- 在项目编译打包、安装部署，使用artifactId 属性 --&gt;</span>
    <span class="comment">&lt;!-- name属性用于生成文档  --&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
<span class="tag">&lt;/<span class="title">project</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">构建依赖</h2>
<p>在一个项目可以在 pom.xml 中 通过 <code>&lt;dependencies&gt;</code> 引入对其它项目的依赖</p>
<pre><code>坐标决定项目在仓库中唯一位置.
通过坐标导入项目, 通过坐标导入jar包.
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="comment">&lt;!-- 坐标： groupId、artifactId、version, 找到jar位置 --&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span><span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span><span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;<span class="title">classifier</span>&gt;</span><span class="tag">&lt;/<span class="title">classifier</span>&gt;</span>
        
        <span class="comment">&lt;!-- compile:编译范围,默认scope,在classpath中存在 --&gt;</span>
        <span class="comment">&lt;!-- provided:已提供范围,编译需要, 不会被打包, 比如容器提供Servlet API --&gt;</span>
        <span class="comment">&lt;!-- runtime:运行时范围,编译不需要,接口与实现分离 --&gt;</span>
        <span class="comment">&lt;!-- test:测试范围,单元测试环境需要 --&gt;</span>
        <span class="comment">&lt;!-- system:系统范围,自定义构件，指定systemPath --&gt;</span>
        <span class="tag">&lt;<span class="title">scope</span>&gt;</span><span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
        
        <span class="comment">&lt;!-- 导入项目类型：type 默认值 jar  --&gt;</span>
        <span class="tag">&lt;<span class="title">type</span>&gt;</span><span class="tag">&lt;/<span class="title">type</span>&gt;</span>
        <span class="tag">&lt;<span class="title">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="title">systemPath</span>&gt;</span>
        
        <span class="comment">&lt;!-- 标记依赖是否可选, A-&gt;B-&gt;C，那么当A依赖于C时就可以设为可选 --&gt;</span>
        <span class="tag">&lt;<span class="title">optional</span>&gt;</span><span class="tag">&lt;/<span class="title">optional</span>&gt;</span>
        
        <span class="comment">&lt;!-- 排除依赖： exclusions 某些依赖项目不想导入 --&gt;</span>
        <span class="tag">&lt;<span class="title">exclusions</span>&gt;</span>
            <span class="tag">&lt;<span class="title">exclusion</span>&gt;</span>
                <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span> <span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
                <span class="tag">&lt;<span class="title">groupId</span>&gt;</span> <span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">exclusion</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">exclusions</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">传递性依赖</h2>
<p>如果两个jar包, 依赖不同版本的jar包, 传递依赖倒置jar版本冲突问题</p>
<ul>
<li>第一原则：路径近者优先原则, x2.0传递给A最近</li>
<li>第二原则：第一声明者优先原则, 当路径相等时，则由POM声明的依赖顺序决定</li>
</ul>
<p>解决方法</p>
<ul>
<li>解决间接依赖最好方式就是直接依赖(直接声明)</li>
<li>锁定版本<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependencyManagement</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.struts <span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>struts2-core <span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="title">version</span>&gt;</span>${struts2.version} <span class="tag">&lt;/<span class="title">version</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependencyManagement</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">统一维护版本</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">properties</span>&gt;</span>
    <span class="tag">&lt;<span class="title">spring.version</span>&gt;</span> 3.2.0.RELEASE <span class="tag">&lt;/<span class="title">spring.version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">struts2.version</span>&gt;</span> 2.3.15.2 <span class="tag">&lt;/<span class="title">struts2.version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
<span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.struts <span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>struts2-core <span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">version</span>&gt;</span>${struts2.version} <span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-maven">重构maven</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mavenstore<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span>
  <span class="tag">&lt;<span class="title">name</span>&gt;</span>mavenstore<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
  <span class="tag">&lt;<span class="title">description</span>&gt;</span>仓库管理系统<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
  <span class="tag">&lt;<span class="title">build</span>&gt;</span>
    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span>
      <span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
          <span class="tag">&lt;<span class="title">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="title">source</span>&gt;</span>
          <span class="tag">&lt;<span class="title">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="title">target</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">build</span>&gt;</span>
  <span class="comment">&lt;!-- 统一维护版本 --&gt;</span>
  <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">spring.version</span>&gt;</span>3.2.0.RELEASE<span class="tag">&lt;/<span class="title">spring.version</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">struts2.version</span>&gt;</span>2.3.15.2<span class="tag">&lt;/<span class="title">struts2.version</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">hibernate.version</span>&gt;</span>3.6.10.Final<span class="tag">&lt;/<span class="title">hibernate.version</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="title">mysql.version</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">ehcache.version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="title">ehcache.version</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">c3p0.version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="title">c3p0.version</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
  
  <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
  	<span class="comment">&lt;!-- spring --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- hibernate --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${hibernate.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- struts2 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${struts2.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>struts2-json-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${struts2.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${struts2.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- 日志 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- c3p0 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${c3p0.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- mysql驱动 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${mysql.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- 缓存 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>${ehcache.version}<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- servlet jsp --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- junit4 --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  	<span class="comment">&lt;!-- jstl --&gt;</span>
  	<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  		<span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
  	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">project</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">多模块和继承</h1>
<p>多模块: 定义一组构建模块的聚集,
构建父模块的时候, 会自动构建子模块, 父模块的packaging必须为POM</p>
<p>继承: 复用配置, 子模块可以任意重写父模块的配置</p>
<ol>
<li><p>建立父工厂, 打包方式为 POM</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- parent.pom --&gt;</span>
<span class="tag">&lt;<span class="title">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>新建两个子模块</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">&lt;!-- child.pom --&gt;</span>
<span class="tag">&lt;<span class="title">parent</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span><span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span><span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="title">relativePath</span>&gt;</span>
<span class="tag">&lt;/<span class="title">parent</span>&gt;</span>

<span class="comment">&lt;!-- parent.pom  --&gt;</span>
<span class="comment">&lt;!-- 在父工程中指定子模块 --&gt;</span>
<span class="comment">&lt;!-- 父工程编译同时编译子工程 --&gt;</span>
<span class="tag">&lt;<span class="title">modules</span>&gt;</span>
    <span class="tag">&lt;<span class="title">module</span>&gt;</span>child<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
<span class="tag">&lt;/<span class="title">modules</span>&gt;</span>
<span class="comment">&lt;!-- 父工程引用的包子工程也可以使用 --&gt;</span>
<span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span> <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">生命周期和插件使用</h1>
<p>Maven提供三套生命周期</p>
<ul>
<li><code>mvn clean</code> 清理生命周期</li>
<li><code>mvn install</code> 项目构建生命周期</li>
<li><code>mvn site</code> 生成站点生命周期</li>
</ul>
<h2 id="-">插件</h2>
<p>maven本身是一个框架, 三个生命周期每个环节都是依赖插件.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">plugins</span>&gt;</span>
<span class="comment">&lt;!-- maven-compiler-plugin 编译插件 --&gt;</span>
<span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="tag">&lt;<span class="title">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="title">source</span>&gt;</span>
        <span class="tag">&lt;<span class="title">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="title">target</span>&gt;</span>
        <span class="tag">&lt;<span class="title">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">encoding</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>

<span class="comment">&lt;!-- maven-surefire-plugin 测试插件 --&gt;</span>
<span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="comment">&lt;!-- 跳过测试 --&gt;</span>
        <span class="tag">&lt;<span class="title">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="title">skip</span>&gt;</span>
        <span class="tag">&lt;<span class="title">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="title">testFailureIgnore</span>&gt;</span>
        <span class="comment">&lt;!-- 解决中文输出乱码  --&gt;</span>
        <span class="tag">&lt;<span class="title">argline</span>&gt;</span>-Dfile.encoding=UTF-8 <span class="tag">&lt;/<span class="title">argline</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>

<span class="comment">&lt;!-- 使用tomcat:run命令, tomcat插件  --&gt;</span>
<span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="comment">&lt;!-- 可选，指定端口 --&gt;</span>
        <span class="tag">&lt;<span class="title">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="title">port</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugins</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="profile-">profile 使用</h2>
<p>自定义一组配置，在运行时指定，覆盖默认配置</p>
<ol>
<li><p>配置profile</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">profiles</span>&gt;</span>
    <span class="tag">&lt;<span class="title">profile</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
            <span class="tag">&lt;<span class="title">jdbc.url</span>&gt;</span>jdbc:mysql:///dev<span class="tag">&lt;/<span class="title">jdbc.url</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span>
    <span class="tag">&lt;<span class="title">profile</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>product<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">properties</span>&gt;</span>
            <span class="tag">&lt;<span class="title">jdbc.url</span>&gt;</span>jdbc:mysql:///product<span class="tag">&lt;/<span class="title">jdbc.url</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">properties</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span>
<span class="tag">&lt;/<span class="title">profiles</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>db.properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>jdbc<span class="preprocessor">.url</span>=${jdbc<span class="preprocessor">.url</span>}
</pre></td></tr></table></figure>
</li>
<li><p>在项目构建时, 是pom生效</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">build</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource</span>&gt;</span>
            <span class="tag">&lt;<span class="title">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="title">directory</span>&gt;</span>
            <span class="tag">&lt;<span class="title">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="title">filtering</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">resource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
<span class="tag">&lt;/<span class="title">build</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="blockquote">&gt; mvn -Pdev  ;; 或</span>
<span class="blockquote">&gt; mvn -Pproduct</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="maven-nexus-">maven的私服(Nexus)搭建</h1>
<p>maven仓库分为三种: 本地仓库, 远程仓库(私服【第三方仓库】、 中央仓库)</p>
<ul>
<li>如果需要项目依赖, 优先从本地仓库下载</li>
<li>如果本地仓库没有项目依赖, 自动去中央仓库下载, 在本地仓库缓存</li>
</ul>
<p>安装nexus</p>
<ul>
<li>下载 <code>nexus.war</code>, 解压到 <code>tomcat/webapp</code>目录</li>
<li>启动tomcat访问, 用<code>user=admin;password=admin123</code>登陆</li>
<li>配置 <code>repository</code>(仓库列表), 具有七个仓库配置, 四种类型<ul>
<li>group(仓库组), 一组仓库， 当使用坐标，按照组内顺序查找 </li>
<li>hosted(宿主), 私服<ul>
<li>Releases: 指公司内部已经发布正式版本的项目</li>
<li>Snapshorts: 指公司内部项目还处于测试版本的项目</li>
<li>3rd party: 私服配置指向第三方仓库, 由其它公司私服</li>
</ul>
</li>
<li>proxy(代理): 通过私服去连接 apache或者 中央仓库</li>
<li>virtual(虚拟): 兼容maven1格式</li>
</ul>
</li>
</ul>
<h2 id="-">私服安装后配置</h2>
<p>在运行私服后, 自动在 <code>$HOME/sonatype-work</code> 目录, 创建私服目录结构</p>
<ul>
<li>设置 <code>downloadRemoteIndex=true</code>, 下载中央库索引</li>
<li><code>sonatype-work/storage/central</code>下放置中央仓库下载的包</li>
</ul>
<h2 id="-">将本地项目发布到私服</h2>
<ol>
<li><p>在本地maven的 <code>settings.xml</code> 配置连接私服用户名和密码,
<code>sonatype-work\nexus\conf\security.xml</code> 提供私服内部用户名和密码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 正式发行仓库账号 --&gt;</span>
<span class="tag">&lt;<span class="title">server</span>&gt;</span> 
    <span class="tag">&lt;<span class="title">id</span>&gt;</span> releases <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">username</span>&gt;</span> admin <span class="tag">&lt;/<span class="title">username</span>&gt;</span>
    <span class="tag">&lt;<span class="title">password</span>&gt;</span> admin123 <span class="tag">&lt;/<span class="title">password</span>&gt;</span>
<span class="tag">&lt;/<span class="title">server</span>&gt;</span>
<span class="comment">&lt;!-- 快照发行仓库账号 --&gt;</span>
<span class="tag">&lt;<span class="title">server</span>&gt;</span> 
    <span class="tag">&lt;<span class="title">id</span>&gt;</span> Snapshots <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
    <span class="tag">&lt;<span class="title">username</span>&gt;</span> admin <span class="tag">&lt;/<span class="title">username</span>&gt;</span>
    <span class="tag">&lt;<span class="title">password</span>&gt;</span> admin123 <span class="tag">&lt;/<span class="title">password</span>&gt;</span>
<span class="tag">&lt;/<span class="title">server</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>修改本地pom.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 发布到私服 --&gt;</span>
<span class="tag">&lt;<span class="title">distributionManagement</span>&gt;</span>
    <span class="tag">&lt;<span class="title">repository</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="title">id</span>&gt;</span><span class="comment">&lt;!--此处ID以上页server中的一致--&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>Internal Releases<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url</span>&gt;</span>releases仓库地址<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">repository</span>&gt;</span>
    <span class="tag">&lt;<span class="title">snapshotRepository</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span><span class="comment">&lt;!--此处ID以上页server中的一致--&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>Internal Snapshots<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url</span>&gt;</span>snapshots仓库地址<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">snapshotRepository</span>&gt;</span>
<span class="tag">&lt;/<span class="title">distributionManagement</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>发布, 根据版本自动发布到 snapshot 或 release</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="blockquote">&gt; mvn deploy</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">从私服下载文件</h2>
<p>默认情况下, 如果本地仓库没有,
去中央仓库找, 不会去私服找, 需要配置去私服下载项目</p>
<ol>
<li><p>配置镜像, setting.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">mirrors</span>&gt;</span>
    <span class="tag">&lt;<span class="title">mirror</span>&gt;</span>
      	<span class="tag">&lt;<span class="title">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
     	<span class="tag">&lt;<span class="title">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="title">mirrorOf</span>&gt;</span>
        <span class="tag">&lt;<span class="title">url</span>&gt;</span>内部公共仓库地址<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">mirror</span>&gt;</span>
<span class="tag">&lt;/<span class="title">mirrors</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>激活</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">&lt;!-- setting.xml --&gt;</span>
<span class="tag">&lt;<span class="title">profiles</span>&gt;</span>
    <span class="comment">&lt;!-- id: nexus 和 mirror的id一致 --&gt;</span>
    <span class="tag">&lt;<span class="title">profile</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">repositories</span>&gt;</span>
            <span class="tag">&lt;<span class="title">repository</span>&gt;</span>
                <span class="tag">&lt;<span class="title">id</span>&gt;</span>central<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
                <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
                <span class="tag">&lt;<span class="title">releases</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">releases</span>&gt;</span>
                <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">repository</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">repositories</span>&gt;</span>
        <span class="tag">&lt;<span class="title">pluginRepositories</span>&gt;</span>
            <span class="tag">&lt;<span class="title">pluginRepository</span>&gt;</span>
                <span class="tag">&lt;<span class="title">id</span>&gt;</span>central<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
                <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="title">url</span>&gt;</span>
                <span class="tag">&lt;<span class="title">releases</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">releases</span>&gt;</span>
                <span class="tag">&lt;<span class="title">snapshots</span>&gt;</span><span class="tag">&lt;<span class="title">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="title">enabled</span>&gt;</span><span class="tag">&lt;/<span class="title">snapshots</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">pluginRepository</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">pluginRepositories</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span>
<span class="tag">&lt;/<span class="title">profiles</span>&gt;</span>
<span class="comment">&lt;!-- profile要使用, 必须要激活 --&gt;</span>
<span class="tag">&lt;<span class="title">activeProfiles</span>&gt;</span>
    <span class="tag">&lt;<span class="title">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="title">activeProfile</span>&gt;</span>
<span class="tag">&lt;/<span class="title">activeProfiles</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>使程序更新 settings.xml</p>
</li>
</ol>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="maven" scheme="http://zhpooer.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala thoughtworks培训]]></title>
    <link href="http://zhpooer.github.io/2014/06/08/scala-thoughtworks%E5%9F%B9%E8%AE%AD/"/>
    <id>http://zhpooer.github.io/2014/06/08/scala-thoughtworks培训/</id>
    <published>2014-06-08T05:06:47.000Z</published>
    <updated>2014-06-26T07:41:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-scala-">基于scala的框架</h1>
<p>play: web框架, 仿制rails</p>
<p>spark: 大数据分析</p>
<h1 id="-">动态类型和静态类型</h1>
<p>动态: 运行时, 进行类型检查</p>
<p>静态: 编译时, 进行类型检查</p>
<p>简单地说，在声明了一个变量之后，不能改变它的类型的语言，是静态语言；能够随时改变它的类型的语言，是动态语言. </p>
<h2 id="-">为什么要静态类型</h2>
<ul>
<li>编译检查, 安全类型</li>
<li>工具提示</li>
<li>性能好</li>
<li>Java/C#</li>
</ul>
<h2 id="-">为什么要动态特性</h2>
<ul>
<li>轻量和灵活, 可根据框架自动生成代码</li>
<li>运行时改变程序的行为</li>
<li>Python/Ruby, JavaScript</li>
</ul>
<p>什么是码农? 人肉编译器, 把业务场景编译成代码</p>
<h1 id="-">为什么要面向对象</h1>
<p>解决问题更方便, 快捷?</p>
<p>面向对象更好地描述业务逻辑, 与人认知世界的方式相似(总结)</p>
<p>三大特征, 解决三个问题</p>
<ul>
<li>封装, 规范, 可维护</li>
<li>继承, 可重用</li>
<li>多态, 可扩展(<a href="http://www.zhihu.com/question/20177988" target="_blank">javascript如何实现?</a>)</li>
</ul>
<p>Java数据和行为分开(Dao和Model), 不太面向对象. ruby on rails把数据和行为一同封装(面向对象).</p>
<p>TODO: 丧钟为谁而鸣?</p>
<h1 id="-">为什么要函数式编程</h1>
<p><a href="http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%89%AF%E4%BD%9C%E7%94%A8#.E5.BC.95.E7.94.A8.E9.80.8F.E6.98.8E" target="_blank">什么是纯函数</a></p>
<p>函数可以当做参数传递, 表述清晰</p>
<p>函数式编程特性, 如何解决 可维护性, 可重用性, 可扩展性?</p>
<ul>
<li>无副作用</li>
<li><a href="http://www.jdon.com/42422" target="_blank">引用透明</a></li>
<li><a href="http://zh.wikipedia.org/zh/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank">高阶函数</a></li>
</ul>
<p>面向对象, 对象在做事情; 函数式, 函数在做</p>
<table>
<thead>
<tr>
<th>解决问题</th>
<th>面向对象</th>
<th>函数式</th>
</tr>
</thead>
<tbody>
<tr>
<td>重用单位</td>
<td>类</td>
<td>方法</td>
</tr>
<tr>
<td>可维护性</td>
<td>信息封装</td>
<td>信息不变化</td>
</tr>
<tr>
<td>可扩展性</td>
<td>类组合</td>
<td>方法组合</td>
</tr>
</tbody>
</table>
<p><a href="/2014/05/16/函数式编程手记">深入函数式,请猛击</a></p>
<h2 id="-">为什么函数式编程没有流行起来?</h2>
<p>图灵完备: 可计算的都可计算. (递归, 需要无限的计算资源)</p>
<p>物理限制, 计算资源有限, 内存有限</p>
<p>现今内存和 cpu 运算速度指数增长, 以及对并行运算的需求</p>
<h1 id="scala-">scala特性</h1>
<p>动态性: REPL, 运行时编译</p>
<p>tuple: 可以存储不同类型的集合</p>
<!-- **tessdemo** -->

<h1 id="-">学习资源</h1>
<p><a href="http://twitter.github.io/scala_school/zh_cn/" target="_blank">twitter scala 指南</a></p>
<p><a href="https://typesafe.com/platform/getstarted" target="_blank">typesafe scala 交互学习</a></p>
<p><a href="https://code.csdn.net/DOC_Scala/chinese_scala_offical_document" target="_blank">scala官方文档中文</a></p>
<p><a href="http://scalatutorials.com/" target="_blank">scala在线学习</a></p>
]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day43-ssh综合练习 仓库管理系统]]></title>
    <link href="http://zhpooer.github.io/2014/06/03/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day43-ssh%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/"/>
    <id>http://zhpooer.github.io/2014/06/03/传智播客day43-ssh综合练习/</id>
    <published>2014-06-03T01:05:17.000Z</published>
    <updated>2014-06-07T06:19:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">仓库管理系统的分析</h1>
<p>项目开发两种:</p>
<ol>
<li>前端人员制作页面(CSS+DIV/Frame)</li>
<li>Java工程师开发前端页面(UI框架 ExtJS, JqueryEasyUI, flex),
同时开发服务器端</li>
</ol>
<p>导入页面新项目:</p>
<ul>
<li>新建项目, 将代码复制(不建议 import), 不同开发工具, 结构不同</li>
<li>使用 JavaEE5 版本</li>
</ul>
<p>功能</p>
<ul>
<li>用户登陆功能</li>
<li>仓库管理(仓库CURD), 单表的增删改查</li>
<li>货物的入库管理</li>
<li>货物的出库管理</li>
<li>库存管理(多条件的组合查询, 分页效果)</li>
<li>历史记录管理</li>
</ul>
<p>开发目标:</p>
<ol>
<li>实现所有功能</li>
<li>能够熟练开发 ssh, 完成 多表, 单表增删改查, 多条件分页查询, Ajax功能</li>
</ol>
<h1 id="-">项目开发流程</h1>
<p>采用 瀑布开发模型(自上而下)</p>
<ol>
<li>需求调研和需求分析</li>
<li>项目分析设计<ol>
<li>页面原型制作(CSS+DIV, Frameset, ExtJS, EasyUI), 为了和客户 确认需求</li>
<li>数据库设计(E-R图, 分析图, 企业不需要),
使用 PowerDesigner 数据库建模工具(概念数据模型CDM, 物理数据模型PDM, 面向对象模型OOM)</li>
<li>软件功能进行分析设计(UML同一建模语言)<pre><code>用例图, 描述系统功能需求
时序图, 活动图, 系统流程
类图, 程序结构
工具: Ration Rose, StarUML, Jude, 生成基础程序代码
</code></pre></li>
</ol>
</li>
<li>系统技术选项, struts2+spring3+Hibernate3+JQuery+C3P0+MySQL+Tomcat<ol>
<li>程序代码编写</li>
<li>代码测试</li>
<li>项目实施部署, 后期运维</li>
</ol>
</li>
</ol>
<h1 id="-">数据库建模</h1>
<p>仓库管理模块分析, 需要四张表</p>
<ul>
<li>Userinfo 用户信息表</li>
<li>Store 仓库表</li>
<li>Goods 货物表</li>
<li>History 进出库历史数据</li>
</ul>
<p>关系:
一个仓库存放多种货物
一个货物进出库产生多条历史记录</p>
<p>企业进行数据库设计, 通过 PowerDesigner 完成, 生成sql脚本, 经典版本 12.5</p>
<ul>
<li>CDM, 概念模型, 类似 E-R图分析</li>
<li>PDM, 表结构, 直接生成 sql 语句(入口)</li>
<li>OOM 面向对象模型, 类图, 直接生成程序代码</li>
<li>BPM 业务流程模型, 流程设计</li>
</ul>
<p><img src="/img/pd_ssh.png" alt="PowerDesigner"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> store <span class="keyword">character</span> <span class="keyword">set</span> UTF8;</span>
use store;
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> userinfo( /*用户表*/
   id <span class="keyword">varchar</span>(<span class="number">32</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
   name <span class="keyword">varchar</span>(<span class="number">50</span>),
   password <span class="keyword">varchar</span>(<span class="number">32</span>)
);</span>
<span class="comment">/*仓库表*/</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> store(
	id <span class="keyword">varchar</span>(<span class="number">32</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
	name <span class="keyword">varchar</span>(<span class="number">32</span>),/*仓库名称*/
	addr <span class="keyword">varchar</span>(<span class="number">100</span>),/*仓库所在地*/
	manager <span class="keyword">varchar</span>(<span class="number">32</span>) /*仓库管理人员，不关联userinfo表*/
);</span>

<span class="comment">/*货物表*/</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> goods(
	id <span class="keyword">varchar</span>(<span class="number">32</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
	name <span class="keyword">varchar</span>(<span class="number">50</span>),/*货物名称*/
	nm   <span class="keyword">varchar</span>(<span class="number">10</span>),/*货物简记内码,如阿斯匹林为ASPL*/
	unit <span class="keyword">varchar</span>(<span class="number">10</span>),   /*计量单位,<span class="number">1</span>:个，<span class="number">2</span>:GK,<span class="number">3</span>:只，..*/
	amount <span class="keyword">numeric</span>(<span class="number">10</span>,<span class="number">2</span>),/*库存数量*/
	storeid <span class="keyword">varchar</span>(<span class="number">32</span>),/*所在仓库ID*/
	<span class="keyword">constraint</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(storeid) <span class="keyword">references</span> store(id)
);</span>
<span class="comment">/*出入库历史记录*/</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> history(
	id <span class="keyword">varchar</span>(<span class="number">32</span>) <span class="keyword">primary</span> <span class="keyword">key</span>,
	goodsid <span class="keyword">varchar</span>(<span class="number">32</span>),
	datetime <span class="keyword">varchar</span>(<span class="number">19</span>),/*出入库时间*/
	_type   <span class="keyword">char</span>(<span class="number">1</span>),/*类型<span class="number">1</span>:入库，２：出库*/
	amount <span class="keyword">numeric</span>(<span class="number">10</span>,<span class="number">2</span>),/*这次出入库的数量*/
	remain <span class="keyword">numeric</span>(<span class="number">10</span>,<span class="number">2</span>),/*余量*/
	_user <span class="keyword">varchar</span>(<span class="number">50</span>),   /*操作员名称，直接保存名称，不引用userinfo表*/
	<span class="keyword">constraint</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(goodsid) <span class="keyword">references</span> goods(id)
);</span>
</pre></td></tr></table></figure>

<h1 id="-">登陆页面</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">package</span> web.action
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriver</span>{</span>
    <span class="keyword">private</span> Userinfo userinfo = <span class="keyword">new</span> Userinfo();
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(LoginAction.class);

    <span class="annotation">@Override</span> <span class="keyword">public</span> Userinfo <span class="title">getModel</span>(){
        <span class="keyword">return</span> userinfo;
    }

    <span class="keyword">public</span> String <span class="title">execute</span>(){
        Userinfo loinUser = userinfoService.login(userinfo);
        <span class="keyword">if</span>(loginUser==<span class="keyword">null</span>) {
            <span class="keyword">this</span>.addActionError(getText(<span class="string">"loginfail"</span>));
            <span class="keyword">return</span> INPUT;
        } <span class="keyword">else</span> {
            LOG.info(<span class="string">"登陆"</span>);
            ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user"</span>, loginUser);
            <span class="keyword">return</span> SUCCESS;
        }
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
<span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"login"</span> <span class="attribute">class</span>=<span class="value">"LoginAction"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span> <span class="attribute">name</span>=<span class="value">"input"</span>&gt;</span> login.jsp <span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;<span class="title">result</span>&gt;</span> main.jsp <span class="tag">&lt;/<span class="title">result</span>&gt;</span>
<span class="tag">&lt;/<span class="title">action</span>&gt;</span>

// LoginAction-login-validation.xml
<span class="tag">&lt;<span class="title">validators</span>&gt;</span>
    <span class="tag">&lt;<span class="title">field</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">field-validator</span> <span class="attribute">type</span>=<span class="value">"requiredstring"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">message</span> <span class="attribute">key</span>=<span class="value">"name.required"</span>&gt;</span><span class="tag">&lt;/<span class="title">message</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">field-validator</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">field</span>&gt;</span>
    <span class="tag">&lt;<span class="title">field</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">field-validator</span> <span class="attribute">type</span>=<span class="value">"requiredstring"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">message</span> <span class="attribute">key</span>=<span class="value">"password.required"</span>&gt;</span><span class="tag">&lt;/<span class="title">message</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">field-validator</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">field</span>&gt;</span>
<span class="tag">&lt;/<span class="title">validators</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>// LoginAction<span class="preprocessor">.properties</span>
password<span class="preprocessor">.required</span>=密码不能为空
name<span class="preprocessor">.required</span>=用户名不能为空
</pre></td></tr></table></figure>

<h2 id="-">业务层</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserinfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserinfoService</span>{</span>
    <span class="keyword">public</span> Userinfo <span class="title">login</span>(Userinfo user) {
        <span class="keyword">return</span> userinfoDao.login(user);
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserinfoDaoImpl</span> <span class="title">impletments</span> <span class="title">UserinfoDao</span>{</span>
    <span class="keyword">public</span> Userinfo <span class="title">login</span>(Userinfo userinfo) {
        template.find(<span class="string">"from Userinfo where name=? and passwor?"</span>,
            userinfo.getName(), MD5Util.encypt(userinfo.getPassword()));
    }
}
</pre></td></tr></table></figure>

<h1 id="-">添加仓库</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreActoin</span> <span class="keyword">extends</span> <span class="title">ActoinSupport</span> <span class="keyword">implements</span> <span class="title">ModelDirver</span> {</span>
    <span class="keyword">private</span> Store store = <span class="keyword">new</span> Store();
    <span class="keyword">public</span> String <span class="title">add</span>(){
        <span class="keyword">return</span> <span class="string">"addSuccess"</span>;
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreServiceImpl</span> <span class="keyword">implements</span> <span class="title">StoreService</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStore</span>(Store store) {
        storeDao.saveStore(store);
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreDaoImpl</span> <span class="keyword">implements</span> <span class="title">StoreDao</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStore</span>(Store store) {
        template.save(store);
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>&lt;action <span class="property">name</span>=<span class="string">"store_*"</span> <span class="type">class</span>=<span class="string">"StoreAction"</span>&gt;
    &lt;<span class="constant">result</span> <span class="property">name</span>=<span class="string">"addSuccess"</span> type=<span class="string">"redirectAction"</span>&gt; stort_list &lt;/<span class="constant">result</span>&gt;
&lt;/action&gt;
</pre></td></tr></table></figure>

<h1 id="-">仓库列表查询</h1>
<p>仓库列表页面: jsp/store/store.jsp</p>
<figure class="highlight java:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// storeActoin</span>
<span class="keyword">public</span> String <span class="title">list</span>(){
    List&lt;Store&gt; stores = storeService.findAllService();
    ActionContext.getContext().put(<span class="string">"stores"</span>, stores);
    <span class="keyword">return</span> <span class="string">"listSuccess"</span>;   <span class="comment">// storeList.js</span>
}

<span class="comment">// StoreService</span>
<span class="keyword">public</span> List&lt;Store&gt; <span class="title">findAllStores</span>(){
    <span class="keyword">return</span> storeDao.findAll();
}
<span class="comment">// &lt;query name="store-query-all"&gt; from Store &lt;/query&gt;</span>
<span class="comment">// StoreDao</span>
<span class="keyword">public</span> List&lt;Store&gt; <span class="title">findAll</span>(){
    template.findByNamedQuery(<span class="string">"Store.findAll"</span>).list();
}
</pre></td></tr></table></figure>

<h1 id="-">仓库删除和仓库修改</h1>
<p>脑补</p>
<h1 id="-">窗口嵌套</h1>
<figure class="highlight javascript:"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>if(window<span class="preprocessor">.self</span> != window<span class="preprocessor">.top</span>){
    window<span class="preprocessor">.top</span><span class="preprocessor">.location</span><span class="preprocessor">.href</span> = <span class="string">"${pageContext.request.contentPath}/login.jsp"</span><span class="comment">;</span>
}
</pre></td></tr></table></figure>

<h1 id="-">货物入库操作</h1>
<p>登记货物入库, 将货物与仓库进行关联, 如果仓库中存在货物,
在原有的数量上增加, 如果没有就新建. 还有进行历史记录的保存.</p>
<h2 id="-">仓库下拉列表的制作</h2>
<p>做法一: 先执行 Action 查询所有仓库, 跳转 jsp 通过 <s:select> 生成下拉列表</p>
<p>做法二: 先加载 jsp, 通过Ajax查询所有仓库内容, 返回json, 显示下拉列表</p>
<figure class="highlight javascript:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>$(funciton(){
    $.get(<span class="string">"${contextPath}/store_ajaxlist.action"</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
        $(data).each(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="keyword">var</span> $option = $(<span class="string">"&lt;option value='"</span> + <span class="keyword">this</span>.id + <span class="string">"'&gt;&lt;/option&gt;"</span>)
            $(<span class="string">"#selectOption"</span>).append($option);
        })
    });
})
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">// storeAction</span>
<span class="keyword">public</span> String <span class="title">ajaxlist</span>(){
    List&lt;Store&gt; stores = storeService.findAllStores();
    
    <span class="comment">// 方案一: flexJson</span>
    JSONSerializer jsonSerializer = <span class="keyword">new</span> JSONSerializer();
    String json = jsonSerializer.serialize(stores);
    resopons.setContentType(<span class="string">"text/json;charset=utf-8"</span>);
    response.getWriter().print(json);
    
    <span class="comment">// 方案二: struts-json-plugin</span>
    ActionContext.getContext().getValueStack().push(store);
    <span class="keyword">return</span> <span class="string">"ajaxSuccess"</span>
}
<span class="keyword">public</span> <span class="keyword">class</span> Store{
    <span class="comment">// 不序列化 Goodses</span>
    @Json(serialize=<span class="keyword">false</span>)
    <span class="keyword">public</span> Set <span class="title">getGoodses</span>(){
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- struts.xml  --&gt;</span>
<span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"default"</span> <span class="attribute">namespace</span>=<span class="value">"/"</span> <span class="attribute">extends</span>=<span class="value">"jsondefault"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">result</span> <span class="attribute">name</span>=<span class="value">"ajaxSuccess"</span> <span class="attribute">type</span>=<span class="value">"json"</span>&gt;</span><span class="tag">&lt;/<span class="title">result</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">仓库列表缓存使用</h2>
<p>如果项目中不经过改变, 经常进行入库操作, 每次入库操作都显现下拉列表,</p>
<p>如果将仓库列表放入缓存, 在下次查询, 调用缓存, 不需要查询数据</p>
<p>Spring直接继承 Ehcache, 导入 <code>context-support.jar</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns:cache</span>=<span class="value">"http://www.springframework.org/schema/cache"</span>&gt;</span>
<span class="comment">&lt;!-- 缓存工厂 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ehCahceFactory"</span> <span class="attribute">class</span>=<span class="value">"EhCacheManagerFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 缓存管理器 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"ehCacheManager"</span> <span class="attribute">class</span>=<span class="value">"EhCacheManager"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 注解驱动缓存 --&gt;</span>
    <span class="comment">&lt;!-- todo --&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>

<span class="comment">&lt;!-- 配置默认缓存区域 --&gt;</span>
<span class="comment">&lt;!-- ehcache.xml --&gt;</span>
<span class="tag">&lt;<span class="title">cache</span> <span class="attribute">name</span>=<span class="value">"store"</span> <span class="attribute">maxElementInMemory</span>=<span class="value">"1000"</span>&gt;</span>
    <span class="comment">&lt;!-- any other config --&gt;</span>
<span class="tag">&lt;/<span class="title">cache</span>&gt;</span>
</pre></td></tr></table></figure>

<p>使用 spring 缓存注解</p>
<ol>
<li><code>@Cacheable</code>, 负责将缓存</li>
<li><code>@CacheEvict</code>, 负责将缓存中的数据清空</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// service, 放入缓存 </span>
@Cachable(<span class="keyword">value</span>=<span class="string">"store"</span>)
<span class="keyword">public</span> List&lt;&gt; <span class="title">findAllStore</span>(){}

<span class="comment">// 调用后清理缓存</span>
@CacheEvict(<span class="keyword">value</span>=<span class="string">"store"</span>, allEntries=<span class="keyword">true</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStore</span>(){
}
</pre></td></tr></table></figure>

<h2 id="-">简记码的数据回显</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 隐藏域id,用来标识货物是否存在, 当用户输入 后, 把查询到的货物id存入 --&gt;</span>
<span class="tag">&lt;<span class="title">s:hidden</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">id</span>=<span class="value">"goodeId"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:hidden</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>$(<span class="string">"input[name='nm']"</span>).blur(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
     <span class="comment">// 发送请求给服务器, 判断简记码是否存在</span>
     $.post(<span class="string">"${contextPath}/goods_findByNm.action"</span>, {<span class="string">"nm"</span>: $(<span class="keyword">this</span>).val}, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
         <span class="keyword">if</span>(data==<span class="literal">null</span>) {
             <span class="comment">// 清空表单, 但是不能隐藏域</span>
             <span class="comment">// $('form[name='select]').get(0).reset(); // 会出bug, 手动清空</span>
             $(<span class="string">"#goodsId"</span>).val(<span class="string">""</span>);
         } <span class="keyword">else</span> {
             <span class="comment">// 查询到货物</span>
             $(<span class="string">"#goodsId"</span>).val(data.id);
             $(<span class="string">"input[name='name']"</span>).val(data.name);
             $(<span class="string">"input[name=unit']"</span>).val(data.unit);
             $(<span class="string">"#storeSelect"</span>).val(data.store.id); <span class="comment">// 通过val函数, 使选中</span>
         }
     });
});
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsAction</span> <span class="keyword">extends</span> <span class="title">ActioinSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriver</span>&lt;<span class="title">Goods</span>&gt; {</span>
    <span class="comment">// 模型驱动</span>
    <span class="keyword">private</span> Goods goods = <span class="keyword">new</span> Goods();
    <span class="comment">// 业务犯法根据, 简记码查询</span>
    <span class="keyword">public</span> String findByNum(){
        <span class="comment">// 会报错, 可以用 OpenSessionInView</span>
        Goods goodsResult = goodsService.findByNm(goods.getNm());
        <span class="keyword">return</span> <span class="string">"findByNmSuccess"</span>; <span class="comment">// result type=json</span>
    }
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDao</span> {</span>
    <span class="keyword">public</span> Good findByNm(String nm) {
        template.findByNamedQeury(<span class="string">"Goods.findByNm"</span>, nm);
    }
}
</pre></td></tr></table></figure>

<h2 id="-">入库操作</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre>// GoodsAction
public String save(){
    Userinfo user = session<span class="preprocessor">.get</span>(<span class="string">"user"</span>)<span class="comment">;</span>
    goodsService<span class="preprocessor">.saveGoods</span>(goods)<span class="comment">;</span>
    return <span class="string">"saveSccess"</span><span class="comment">;  // remain.jsp</span>
}

// GoodeService, goods history -&gt; uuid
public void saveGoods(Goods goods, Userinfo user) {
    // 判断页面是否传递货物 id
    // 如果goods 里id不为空, 说明货物已经存在, 只需要修改数量
    // apache common-lang 工具
    if(StingUtils<span class="preprocessor">.isNotBlank</span>(goods<span class="preprocessor">.getId</span>())){
        // 修改数量----update
        Goods persistGoods = goodsDao<span class="preprocessor">.findById</span>(goods<span class="preprocessor">.getId</span>())<span class="comment">;</span>
        persistGoods<span class="preprocessor">.setAmount</span>(persistGoods<span class="preprocessor">.getAmount</span>() + goods<span class="preprocessor">.getAmount</span>())<span class="comment">;</span>
        History history = new History()<span class="comment">;</span>
        history<span class="preprocessor">.setUser</span>(user<span class="preprocessor">.getName</span>())<span class="comment">;</span>
        history<span class="preprocessor">.setType</span>(<span class="string">"1"</span>)<span class="comment">;</span>
        history<span class="preprocessor">.setDatetime</span>(new Date()<span class="preprocessor">.toLocaleString</span>)<span class="comment">;</span>
        history<span class="preprocessor">.setGoods</span>(persistGoods)<span class="comment">;</span>
        history<span class="preprocessor">.setAmount</span>(goods<span class="preprocessor">.getAmount</span>())<span class="comment">;</span>
        history<span class="preprocessor">.setRemain</span>(persistGoods<span class="preprocessor">.getAmount</span>())<span class="comment">;// 余量</span>
        historyDao<span class="preprocessor">.save</span>(history)<span class="comment">;</span>
    } else {
        // 新货物入库
        goodsDao<span class="preprocessor">.save</span>(goods)<span class="comment">;</span>

        History history = new History()<span class="comment">;</span>
        history<span class="preprocessor">.setUser</span>(user<span class="preprocessor">.getName</span>())<span class="comment">;</span>
        history<span class="preprocessor">.setType</span>(<span class="string">"1"</span>)<span class="comment">;</span>
        history<span class="preprocessor">.setDatetime</span>(new Date()<span class="preprocessor">.toLocaleString</span>)<span class="comment">;</span>
        history<span class="preprocessor">.setGoods</span>(persistGoods)<span class="comment">;</span>
        history<span class="preprocessor">.setAmount</span>(goods<span class="preprocessor">.getAmount</span>())<span class="comment">;</span>
        history<span class="preprocessor">.setRemain</span>(goods<span class="preprocessor">.getAmount</span>())<span class="comment">;// 余量</span>
        historyDao<span class="preprocessor">.save</span>(history)<span class="comment">;</span>
    }
}
</pre></td></tr></table></figure>

<h2 id="-">货物名自动补全</h2>
<p>使用 Jquery UI 库完成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">// 静态, 一次性查询所有货物</span>
$(<span class="string">"input[name='name']"</span>).autocomplete({
    source: []
});
<span class="comment">// 动态, 根据用户当前输入, 自动补全</span>
$(<span class="string">"input[name='name']"</span>).autocomplete({
    source: <span class="function"><span class="keyword">function</span><span class="params">(request, response)</span> {</span>
        <span class="comment">// 获取用户当前输入的字符</span>
        <span class="keyword">var</span> term = request.term;
        $.post(<span class="string">"goods_findNameLick"</span>, {name: term}, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
            <span class="comment">// 回显数据</span>
            response(data);
        })
    },
    <span class="comment">// 选择补全列表回显 </span>
    select: <span class="function"><span class="keyword">function</span><span class="params">(event, ui)</span>{</span>
        <span class="comment">// ui.item可以是 source 绑定数组的某个元素</span>
        <span class="comment">// ui.item.value 返回选中值</span>
        <span class="comment">// TODO 进行回显</span>
    }
});
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// GoodsAction</span>
<span class="keyword">public</span> String <span class="title">findNameLike</span>(){
    goodsService.findNameLike(name);
    <span class="keyword">return</span> <span class="string">"findNameLickSuccess"</span>; <span class="comment">// type json</span>
}

<span class="comment">// GoodsDao</span>
<span class="keyword">public</span> List&lt;Goods&gt; <span class="title">findNameLike</span>(){
    String hql = <span class="string">"from Goods where name lick ?"</span>;
    <span class="keyword">return</span> template.findQuery(hql, <span class="string">"%"</span> + hql + <span class="string">"%"</span>).list();
}

<span class="comment">// Goods</span>
<span class="keyword">public</span> String <span class="title">getValue</span>(){
    <span class="keyword">return</span> name;
}
</pre></td></tr></table></figure>

<h1 id="-">多条件组合分页查询</h1>
<ol>
<li>修改库存管理的查询表单</li>
</ol>
<h2 id="-">服务器完成分页条件查询</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="code"><pre><span class="comment">// Pagination</span>
package page
<span class="keyword">public</span> <span class="keyword">class</span> Pagination{
    <span class="keyword">private</span> <span class="keyword">int</span> pageno; <span class="comment">// 页码</span>
    <span class="keyword">private</span> <span class="keyword">int</span> numberPerPage = <span class="number">10</span>; <span class="comment">// 每页记录条数</span>

    <span class="keyword">private</span> Map parameterMap;<span class="comment">// request 提供的方法</span>

    <span class="comment">// 结果显示数据</span>
    <span class="keyword">private</span> <span class="keyword">long</span> totalCount; <span class="comment"><span class="xmlDocTag">///</span> 总记录数</span>
    <span class="keyword">private</span> <span class="keyword">int</span> totalPageCount; <span class="comment">//总页数</span>

    privaate List data; <span class="comment">// 当前显示数据</span>

    <span class="keyword">public</span> Strinig <span class="title">getParamUrl</span>(){
        <span class="keyword">for</span>(Entry&lt;String, String[]&gt; entry : parameterMap.entrySet()){
             <span class="comment">// TODO </span>
        }
    }
}

<span class="comment">// option value= 请选择</span>
<span class="comment">// GoodAction</span>
<span class="keyword">public</span> String <span class="title">pageQuery</span>(){
     Pagination pagination = <span class="keyword">new</span> Pagination();
     <span class="keyword">if</span>(req.getParameter(<span class="string">"pageno"</span>) == <span class="keyword">null</span>) {
         pagination.setPageno(<span class="number">1</span>);
     } <span class="keyword">else</span> {
         pagination.setPageinfo(Integer.parseInt(req.getParameter(<span class="string">"pageno"</span>)));
     }
     pagination.setParameterMap(req.getParameterMap());
     goodsService.findPageData(pagination);
     <span class="keyword">return</span> <span class="string">"pageQuerySuccess"</span>;
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPageData</span>(Pagination pagination){
    Map pMap = pagination.getParameterMap();
    DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Goods.class);

    <span class="comment">// QBC 单表条件 TODO, pmap.get()[0], 可能会报错</span>
    <span class="keyword">if</span>(StringUtis.isNotBlank(pMap.<span class="keyword">get</span>(<span class="string">"nm"</span>)[<span class="number">0</span>])) {
        detachedCriteria.add(Restriction.eq(<span class="string">"nm"</span>, pMap.<span class="keyword">get</span>(<span class="string">"nm"</span>)));
    }
    <span class="keyword">if</span>(StringUtis.isNotBlank(pMap.<span class="keyword">get</span>(<span class="string">"name"</span>))) {
        detachedCriteria.add(Restriction.lick(<span class="string">"name"</span>, <span class="string">"%"</span> + pMap.<span class="keyword">get</span>(<span class="string">"name"</span>)) + <span class="string">"%"</span>);
    }
    
    <span class="keyword">if</span>(StringUtis.isNotBlank(pMap.<span class="keyword">get</span>(<span class="string">"store.id"</span>))) {
        Store s = <span class="keyword">new</span> Store();
        store.setId(pMap.<span class="keyword">get</span>(<span class="string">"store.id"</span>));
        detachedCriteria.add(Restriction.eq(<span class="string">"store"</span>, store);
    }
    <span class="comment">// 设置投影, select count(*)</span>
    detachedCriteria.setProjection(Projections.rowCount()); 
    Long count = goodsDao.findTotalCount(detachedCriteria);
    pagination.setTotalCount(totalCount);

    <span class="keyword">int</span> totalPageCount = (totalCount + pagination.getNumberPerPage()-<span class="number">1</span>) / pagination.getNumberPerpage();
    
    <span class="comment">// 分页代码查询</span>
    <span class="keyword">int</span> firstResult = (paination.getPageno()-<span class="number">1</span>)*pagination.getNumberPerpate();
    <span class="keyword">int</span> maxResults = pagination.getNumberPerpage();
    
    <span class="comment">// 清除投影效果</span>
    detachedCriteria.setProjection(<span class="keyword">null</span>); 
    List&lt;Goods&gt; goodses = goodsDao.findPageData(detachedCriteria, firstResult, maxResult )
    pagination.setData(goods);
}
<span class="comment">// GoodsDao</span>
<span class="keyword">public</span> <span class="keyword">long</span> <span class="title">findTotalCount</span>(DetachedCriteria criteria){
    <span class="keyword">return</span> template.findByCriteria(criteria).<span class="keyword">get</span>(<span class="number">0</span>);
}
</pre></td></tr></table></figure>

<h1 id="get-">Get编码过滤器</h1>
<p>TODO</p>
<p>问题: 如果开发需要在url中拼接中文, 手动对url编码</p>
<ol>
<li><code>response.encodeUrl()</code></li>
<li><code>c:url</code> 在页面中对url编码</li>
<li><code>UrlEncoder.encode(paramValue)</code></li>
</ol>
<h1 id="-">自定义标签(分页工具)</h1>
<p>自定义标签最常见应用: 权限控制(控制按钮没有权限不显示), 分页工具条</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaginationTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSuppport</span>{</span>
    <span class="keyword">private</span> <span class="keyword">int</span> pageno; <span class="comment">// 当前页码</span>
    <span class="keyword">private</span> <span class="keyword">long</span> totalCoiunt; <span class="comment">// 总记录上</span>
    <span class="keyword">private</span> <span class="keyword">int</span> numberPerpage; <span class="comment">// 每页记录数</span>
    <span class="keyword">private</span> String paramUrl; .<span class="comment">// 查询条件的参数url</span>
    
    <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span>() {
        JspWriter out = getJspContext().getOut();
        <span class="comment">// 生成div输出分页工具条</span>
        out.write(<span class="string">"&lt;a href=&gt;"</span> + request.getContextPath() + <span class="string">"div"</span>);
        
        <span class="comment">// 输出页码, 总记录数, 没页记录数</span>
        <span class="comment">// TODO</span>
        <span class="comment">// 以上太麻烦, 可以用freemark</span>
    }
}
</pre></td></tr></table></figure>

<h1 id="-">历史记录查询</h1>
<p>查询条件来自 goods 表字段, 查询结果来自 history表字段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span> {</span>
    <span class="keyword">private</span> History history = <span class="keyword">new</span> History();
    <span class="keyword">private</span> HistoryService historyService;
    
    <span class="keyword">public</span> String <span class="title">pageQuery</span>(){
        <span class="comment">// 根据请求的参数, 封装 pagination</span>
        Pagination pagination = <span class="keyword">new</span> Pagination();
        String pageno = ServletActionContext.getRequest().getParameter(<span class="string">"pageno"</span>);
        <span class="keyword">if</span>(pageno==<span class="keyword">null</span>){
            pagination.setPageno(<span class="number">1</span>);
        } <span class="keyword">else</span> {
            pagination.setPageno(Integer.parseInt(pageno));
        }
        <span class="comment">// 参数</span>
        pagination.setParameterMap(SevletActionContext.getRequest().getParameterMap());
        historyService..findPageData(pagination);
        <span class="keyword">return</span> <span class="string">"pageQeurySuccess"</span>;
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">HistoryService</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPageData</span>(Pagination pagination){
        <span class="comment">// 将参数转换为 查询 sql, 使用QBC</span>
        Map&lt;String, String[]&gt; parameterMap = pagination.getParameterMap();
        DetachedCriteria detachedCriteria = DetachedCriteria.forClass(History.class);
        <span class="comment">// 添加条件</span>
        <span class="comment">// 如果查询根对象和查询条件位于同一张表中, 单表查询</span>
        <span class="comment">// 跟对象history ,条件goods --- 多表查询</span>
        String nm = getValueFromMap(parameterMap, <span class="string">"goods.nm"</span>);
        String name = getValueFromMap(parameterMap, <span class="string">"goods.name"</span>);
        String storeid = getValueFromMap(parameterMap, <span class="string">"goods.store.id"</span>);

        <span class="comment">// 多表查询</span>
        detachedCriteria.createAlias(<span class="string">"goods"</span>, <span class="string">"g"</span>, Criteria.INNER_JOIN);
        <span class="comment">// 三表关联 detachedCriteria.createAlias("g.store", "s", Criteria.INNER_JOIN);</span>
        
        <span class="keyword">if</span>(String Utils.isNotBlank(nm)) {
            <span class="comment">// 根据货物的简记码查询</span>
            detachedCriteria.add(Restriction.eq(<span class="string">"g.nm"</span>, nm));
        }
        <span class="keyword">if</span>(String Utils.isNotBlank(name)) {
            detachedCriteria.add(Restriction.like(<span class="string">"g.name"</span>, <span class="string">"%"</span>+ name + <span class="string">"%"</span>));
        }
        <span class="keyword">if</span>(String Utils.isNotBlank(name)) {
            Store store = <span class="keyword">new</span> Store();
            detachedCriteria.add(Restriction.eq(<span class="string">"g.store"</span>, store));
        }
        detachedCriteria.setProjection(Projections.rowCount());
        <span class="keyword">long</span> totalCount = historyDao.findTotalCount(detachedCriteria);
        pagination.setTotalCount(totalcount);

        <span class="keyword">int</span> totalPageCount = TODO;
        pagination.setTotalPageCount();
        <span class="comment">// 参照上一次分页代码</span>
        
        <span class="comment">//多表关联和投影查询, 返回两个对象的数组</span>
        <span class="comment">// 投影改变结果策略, 不再将结果封装到Root数组, 而是根据查询数据类型进行返回</span>
        detachedCriteria.setProjection(<span class="keyword">null</span>); <span class="comment">// 清除了投影, 也重置了封装策略</span>
        <span class="comment">// 恢复封装策略</span>
        <span class="comment">// AliaToBeanResultTransformer, 组装非 bean 对象</span>
        detachedCriteria.setResultTransformer(Criteria.ROOT_ENTITY);
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryDaoImpl</span> <span class="keyword">implements</span> <span class="title">HistoryDao</span> {</span>
    <span class="comment">// TODO</span>
}
</pre></td></tr></table></figure>

<h1 id="paginationtag-freemarker-">paginationTag的freemarker重构</h1>
<p>在标签类中输出HTML十分不方便</p>
<p>freemarker: 基于模板, 用来生成输出文本的通用工具</p>
<p>原理: ftl模板文件 + 动态数据 = 输出(通常是 html 访问文件)</p>
<p>应用: 页面静态化</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="xml"><span class="tag">&lt;<span class="title">#--</span> 这是注释 <span class="attribute">--</span>&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>${title}<span class="tag">&lt;/<span class="title">html</span>&gt;</span> <span class="comment">&lt;!-- 变量 --&gt;</span>
${title ! 默认值}
<span class="tag">&lt;<span class="title">#user</span> ??&gt;</span> 判断是否存在
<span class="tag">&lt;<span class="title">#list</span>&gt;</span>               <span class="comment">&lt;!-- ftl指令 --&gt;</span>

<span class="comment">&lt;!-- if指令 --&gt;</span>
<span class="tag">&lt;<span class="title">#if</span> <span class="attribute">animals.python</span> &lt; <span class="attribute">100</span>&gt;</span>
    大于
<span class="tag">&lt;<span class="title">#else</span>&gt;</span>
    小于
<span class="tag">&lt;/<span class="title">#if</span>&gt;</span>

<span class="comment">&lt;!-- list指令 --&gt;</span>
<span class="tag">&lt;<span class="title">#list</span> <span class="attribute">as</span> <span class="attribute">being</span>&gt;</span>
   输出${being.price}
<span class="tag">&lt;/<span class="title">#list</span>&gt;</span>

<span class="comment">&lt;!-- 页面包含 --&gt;</span>
<span class="tag">&lt;<span class="title">#inlcude</span> "/<span class="attribute">a.html</span>"&gt;</span>

<span class="comment">&lt;!-- 内置函数 --&gt;</span>
${test?html} <span class="comment">&lt;!-- 转义 --&gt;</span>
${test?cap_first} <span class="comment">&lt;!-- 第一个字母大写 --&gt;</span>
${test?lower_case}
${test?size}</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="keyword">Configuration</span> conf = <span class="keyword">new</span> <span class="keyword">Configuration</span>();
conf.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"模板文件文件夹"</span>));

Template tmp = conf.getTemplate(<span class="string">"flt文件名"</span>);
<span class="keyword">Map</span>&lt;<span class="typename">String</span>, <span class="typename">String</span>&gt; dataMap = <span class="keyword">new</span> HashMap&lt;<span class="typename">String</span>, <span class="typename">String</span>&gt;();
dataMap.put(<span class="string">"title"</span>, <span class="string">"freemarker入门"</span>);

tmp.<span class="keyword">process</span>(<span class="keyword">map</span>, <span class="keyword">new</span> PrintWriter(System.<span class="keyword">out</span>));
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day42-Spring 事务管理]]></title>
    <link href="http://zhpooer.github.io/2014/05/29/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day42-spring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/05/29/传智播客day42-spring-事务管理/</id>
    <published>2014-05-29T01:01:42.000Z</published>
    <updated>2014-05-30T01:21:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="spring-">Spring事务管理</h1>
<p>在Java开发中, 事务管理代码放到业务层</p>
<h2 id="-api">事务管理 API</h2>
<ul>
<li><p><code>PlatformTransactionManager</code> 提供事务管理方法, 核心接口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 提交事务</span>
void <span class="function">commit(TransactionStatus status)</span>;
<span class="comment">// 根据事务定义信息，获得当前状态 </span>
TransactionStatus <span class="function">getTransaction(TransactionDefinition definition)</span>;
<span class="comment">// 回滚事务</span>
void <span class="function">rollback(TransactionStatus status)</span>
</pre></td></tr></table></figure>
</li>
<li><p><code>TransactionDefinition</code> 事务的定义信息(隔离级别, 传播行为, 超时时间, 只读)</p>
<ul>
<li>ISOLATION_xxx 事务隔离级别 </li>
<li>PROPAGATION_xxx  事务传播行为 </li>
<li>int getTimeout()  获得超时信息</li>
<li>boolean isReadOnly()  判断事务是否只读</li>
</ul>
</li>
<li>TransactionStatus 事务具体行为, 每一个时刻点, 事务具体状态信息</li>
</ul>
<p>关系: PlatformTransactionManager 根据 TransactionDefinition 进行事务管理, 
管理过程中事务存在多种状态, 每个状态信息通过 TransactionStatus 表示</p>
<h2 id="platformtransactionmanager">PlatformTransactionManager</h2>
<p>Spring 为不同的持久化框架提供了不同的PlatformTransactionManager接口实现 ,
针对不同的持久层技术, 要选用对应的事务管理器</p>
<table>
<thead>
<tr>
<th>不同平台事务管理器实现</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>
<td>使用Spring JDBC或iBatis 进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate3.HibernateTransactionManager</td>
<td>使用Hibernate3.0版本进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.jpa.JpaTransactionManager</td>
<td>使用JPA进行持久化时使用</td>
</tr>
<tr>
<td>org.springframework.jdo.JdoTransactionManager</td>
<td>当持久化机制是Jdo时使用</td>
</tr>
<tr>
<td>org.springframework.transaction.jta.JtaTransactionManager</td>
<td>使用一个JTA实现来管理事务，在一个事务跨越多个资源时必须使用</td>
</tr>
</tbody>
</table>
<h1 id="-">事务的隔离级别</h1>
<p>四大特性: ACID, 原子性, 一致性, 隔离性, 持久性</p>
<p>隔离性引发并发问题：脏读 不可重复读, 幻读</p>
<ul>
<li>脏读 一个事务读取另一个事务 未提交数据</li>
<li>不可重复读 一个事务读取另一个事务 已经提交 update 数据</li>
<li>虚读  一个事务读取另一个事务 已经提交 insert 数据</li>
</ul>
<p>事务的隔离级别: 为了解决事务隔离性引发的问题</p>
<ul>
<li>DEFAULT 默认级别  mysql REPEATABLE_READ 、 oracle READ_COMMITTED</li>
<li>READ_UNCOMMITED  导致所有问题发生</li>
<li>READ_COMMITTED 防止脏读、 发生不可重复读和虚读</li>
<li>REPEATABLE_READ 防止脏读、不可重复读，发生虚读</li>
<li>SERIALIZABLE 防止所有并发问题 </li>
</ul>
<h1 id="-">事务的传播行为</h1>
<p>为什么要有事务的传播行为?(Why)</p>
<pre><code>实际开发中, 业务层方法间相互调用, 如在删除客户信息时, 要先删除订单信息
那么删除订单出错,客户要不要删除?
</code></pre><p>什么是事务的传播行为?(what)</p>
<pre><code>一个业务层事务调用令一个业务层事务, 事务间之间关系如何处理
</code></pre><p>七种传播行为:</p>
<ul>
<li>PROPAGATION_REQUIRED 支持当前事务, 如果不存在 就新建一个</li>
<li>PROPAGATION_SUPPORTS 支持当前事务, 如果不存在，就不使用事务</li>
<li>PROPAGATION_MANDATORY 支持当前事务, 如果不存在，抛出异常</li>
<li>PROPAGATION_REQUIRES_NEW 如果有事务存在, 挂起当前事务, 创建一个新的事务<ul>
<li>生成订单, 发送通知邮件, 通知邮件会创建一个新的事务, 如果邮件失败, 不影响订单生成</li>
</ul>
</li>
<li>PROPAGATION_NOT_SUPPORTED    以非事务方式运行，如果有事务存在，挂起当前事务</li>
<li>PROPAGATION_NEVER 以非事务方式运行, 如果有事务存在, 抛出异常</li>
<li>PROPAGATION_NESTED 如果当前事务存在, 则嵌套事务执行<ul>
<li>依赖于 JDBC3.0 提供 SavePoint 技术 </li>
<li>删除客户 删除订单, 在删除客户后, 设置SavePoint, 执行删除订单, 删除订单和删除客户在同一个事务,
删除订单失败， 事务回滚 SavePoint , 由用户控制是事务提交 还是 回滚</li>
</ul>
</li>
</ul>
<h1 id="-">事务管理方式</h1>
<p>编程式事务管理 </p>
<ul>
<li>在代码中通过 TransactionTemplate 手动进行事务管理, 在实际开发中很少被用到</li>
</ul>
<p>声明式事务管理</p>
<ul>
<li>在配置文件中, 对 Bean 的方法进行事务管理, 基于AOP思想, 无需写代码 </li>
</ul>
<h2 id="-">实际案例: 转账</h2>
<p>如果没有进行事务管理, JdbcTemplate DAO 每一个操作, 都是一个事务</p>
<p>数据库脚本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (
  <span class="string">`id`</span> <span class="keyword">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,
  <span class="string">`name`</span> <span class="keyword">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,
  <span class="string">`money`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,
  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="string">`id`</span>)
) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET=utf8;</span>
<span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'aaa'</span>, <span class="string">'1000'</span>);</span>
<span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'bbb'</span>, <span class="string">'1000'</span>);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 最全的spring 模板 --&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>
	<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span>
	<span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span>
	<span class="attribute">xmlns:tx</span>=<span class="value">"http://www.springframework.org/schema/tx"</span>
	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span>
    <span class="comment">&lt;!-- 导入外部属性文件, 配置连接池 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"accountService"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.AccountServiceImpl"</span>&gt;</span>
         <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"accountDao"</span> <span class="attribute">ref</span>=<span class="value">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
         <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionTemplate"</span> <span class="attribute">ref</span>=<span class="value">"transactionTemplate"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"accountDao"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.AccountDaoImpl"</span>&gt;</span>
    <span class="comment">&lt;!-- 将连接池注入给DAO, JdbcTemplate会自动 创建 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 编程式事务管理配置 --&gt;</span>
    <span class="comment">&lt;!-- 事务管理模板 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionTemplate"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionManager"</span> <span class="attribute">ref</span>=<span class="value">"tractionManager"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 事务管理器 --&gt;</span>
    <span class="comment">&lt;!-- org.springframework.jdbc.datasource.DataSourceTransactionManager 用来管理jdbc事务操作 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSrouce"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span>{</span>
    <span class="comment">// 自动注入</span>
    <span class="keyword">private</span> AccountDao accountDao;
    <span class="keyword">private</span> TransactionTemplate transactionTemplate;
    
    <span class="comment">// 转账</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(String outAccount, String inAccount, Double money) {
            <span class="comment">// 编程式事务管理, 使用事务模板管理事务</span>
        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult(){
            <span class="annotation">@Override</span>
            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span>(){
                accountDao.outMoney(outAccount, money);
                accountDao.inMoney(inAccount, money);
            }
        });
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outMoney</span>(String outAccount, Double money) {
        String sql = <span class="string">"update account set money = money-? where name=?"</span>;
        getJdbcTemplate().update(sql, money, outAccount);
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inMoney</span>(String inAccount, Double money) {
        String sql = <span class="string">"update account set money = money+? where name=?"</span>;
        getJdbcTemplate().update(sql, money, inAccount);
    }
}
</pre></td></tr></table></figure>

<h3 id="-">声明式事务管理</h3>
<h4 id="transactionproxyfactorybean">TransactionProxyFactoryBean</h4>
<p>通过 TransactionProxyFactoryBean 对业务类创建代理,
实现声明式事务管理, 无需修改 Service 代码</p>
<p>缺点, 需要为每个Bean 都创建单独代理对象，开发量巨大</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 事务管理器 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span>
    <span class="tag">&lt;<span class="title">proerty</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">proerty</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 为目标Servicee创建代理 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">name</span>=<span class="value">"accountServiceProxy"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span>
    <span class="comment">&lt;!-- 目标 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"target"</span> <span class="attribute">ref</span>=<span class="value">"accountService"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 针对接口代理 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"proxyInterfaces"</span> <span class="attribute">value</span>=<span class="value">"zhpooer.AccountService"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 增强 事务管理 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionManager"</span> <span class="attribute">ref</span>=<span class="value">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 事务管理属性 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionAttributes"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">props</span>&gt;</span>
           <span class="comment">&lt;!-- key 就是方法名  --&gt;</span>
           <span class="comment">&lt;!-- value prop格式：PROPAGATION,ISOLATION,readOnly,-Exception,+Exception --&gt;</span>
           <span class="comment">&lt;!-- PROPAGATION 事务传播行为 --&gt;</span>
           <span class="comment">&lt;!-- ISOLATION, 事务隔离级别 --&gt;</span>
           <span class="comment">&lt;!-- readOnly  表示事务是只读的，不能进行修改操作  --&gt;</span>
           <span class="comment">&lt;!-- -Exception 发生这些异常事务进行回滚(默认发生任何异常事务都会回滚) --&gt;</span>
            <span class="comment">&lt;!-- +Exception 事务将忽略这些异常，仍然提交事务  --&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"transfer"</span>&gt;</span> PROPAGATION_REQUIRED, readOnly, +java.lang.ArithmeticException <span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">props</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 注入代理对象: @Qualifier("accountServiceProxy") --&gt;</span>
</pre></td></tr></table></figure>

<h4 id="tx-">tx, 自动代理</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 定义事务管理增强 --&gt;</span>
<span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"txAdvicd"</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tx:attribute</span>&gt;</span>
        <span class="comment">&lt;!--
        name="transfer" 事务管理方法名
        isolation="DEFAULT" 默认隔离级别
        qpropagation="REQUIRED"  默认传播行为
        read-only="false"  是否只读
        no-rollback-for=""  发生异常不会滚  类似+Exception
        rollback-for=""  发生异常回滚 类似-Exception
        timeout="-1"  不超时
        --&gt;</span>
        <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"transfer"</span> <span class="attribute">isolatioin</span>=<span class="value">"DEFAULT"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span>
                   <span class="attribute">read-only</span>=<span class="value">"false"</span> <span class="attribute">timeout</span>=<span class="value">"-1"</span>&gt;</span><span class="tag">&lt;/<span class="title">tx:method</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tx:attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span>
<span class="comment">&lt;!-- 使用Aop 进行自动代理 --&gt;</span>
<span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
    <span class="comment">&lt;!-- 定义切点 --&gt;</span>
    <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"execution(public * * (..))"</span> <span class="attribute">id</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:pointcut</span>&gt;</span>
    <span class="comment">&lt;!-- 定义切面 --&gt;</span>
    <span class="tag">&lt;<span class="title">aop:advisor</span> <span class="attribute">advice-ref</span>=<span class="value">"txAdvice"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:advisor</span>&gt;</span>
<span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
</pre></td></tr></table></figure>

<h4 id="-">注解实现事务管理</h4>
<ol>
<li><p>在需要管理的类或者方法添加 <code>@Trasactional</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// isolation 隔离级别</span>
<span class="comment">// propagation 传播行为</span>
<span class="comment">// readOnly 是否只读</span>
<span class="comment">// noRollbackFor 发生异常不回滚</span>
<span class="comment">// rollbackFor 发生异常回滚</span>
<span class="comment">// timeout 超时时间 -1 不超时</span>

<span class="annotation">@Transactional</span>(isolation=Isolation.DEFAULT,propagation=,
               readyOnly=, noRollbackFor=, rollbackFor, timeout=)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span>(){}
</pre></td></tr></table></figure>
</li>
<li><p>在 applicationContext.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="subst">&lt;</span>tx:annotation<span class="attribute">-driven</span> transaction<span class="attribute">-manager</span><span class="subst">=</span><span class="string">"transactionManager"</span><span class="subst">&gt;&lt;</span>/tx:annotation<span class="attribute">-driven</span><span class="subst">&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="ssh-">SSH 框架整合</h1>
<p>导入Jar包, 及配置文件</p>
<ul>
<li>表现层框架 struts2, <code>struts2-json-plugin.jar</code>,
<code>struts2-spring-plugin.jar</code>, <code>struts2-conversion.jar</code>(注解), 以及 web.xml(filter), struts2.xml</li>
<li><p>业务层 spring3</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>配置 web.xml
<span class="tag">&lt;<span class="title">listener</span>&gt;</span>
    <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span> ContextLoaderListner <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>持久层框架 hibernate3</p>
</li>
</ul>
<h2 id="spring-hibernate-">Spring 和 Hibernate 整合</h2>
<h3 id="-">零障碍整合</h3>
<p>通过 Spring 提供 LocalSessionFactoryBean, 注解引入hibernate配置文件,
在 Spring 容器中获得 SessionFactory对象, 将 SessionFactory, 注入到 DAO 程序</p>
<p>图书添加</p>
<p>移动脚本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span>(
    id <span class="keyword">int</span> <span class="keyword">not</span> <span class="keyword">null</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> <span class="keyword">key</span>,
    bookname <span class="keyword">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,
    price <span class="keyword">double</span> <span class="keyword">not</span> <span class="keyword">null</span>
);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> {</span>
     <span class="keyword">private</span> Integer id;
     <span class="keyword">private</span> String bookname;
     <span class="keyword">private</span> <span class="keyword">double</span> price;
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span>{</span>
    
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span>(){}
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">&lt;!-- hibernate.cfg.xml --&gt;</span>
<span class="tag">&lt;<span class="title">mapping</span> <span class="attribute">resource</span>=<span class="value">"domain.Book.hbm.xml"</span>/&gt;</span>

<span class="comment">&lt;!-- Book.hbm.xml --&gt;</span>
<span class="tag">&lt;<span class="title">hibernate-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">class</span> <span class="attribute">name</span>=<span class="value">"domain.Book"</span> <span class="attribute">table</span>=<span class="value">"book"</span> <span class="attribute">catalog</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">id</span> <span class="attribute">name</span>=<span class="value">"id"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">generator</span> <span class="attribute">class</span>=<span class="value">"identity"</span>&gt;</span> <span class="tag">&lt;/<span class="title">generator</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">id</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"bookname"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"price"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">hibernate-mapping</span>&gt;</span>

<span class="comment">&lt;!-- applicationContext.xml --&gt;</span>
<span class="comment">&lt;!-- 配置 sessionFactory --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span>
    <span class="comment">&lt;!-- 加载hibernate配置文件 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"configLocation"</span> <span class="attribute">value</span>=<span class="value">"classpath:hibernate.cfg.xml"</span>&gt;</span>  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 注入 sessionFactory --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"bookDao"</span> <span class="attribute">class</span>=<span class="value">"dao.BookDao"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionfactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionfactory"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"bookService"</span> <span class="attribute">class</span>=<span class="value">"service.BookService"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"bookDao"</span> <span class="attribute">ref</span>=<span class="value">"bookDao"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tx:attribute</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"*"</span>&gt;</span> <span class="tag">&lt;/<span class="title">tx:method</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tx:attribute</span>&gt;</span>
<span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span>
<span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
    <span class="tag">&lt;<span class="title">aop:advisor</span> <span class="attribute">advice-ref</span>=<span class="value">"transactionManager"</span> <span class="attribute">pointcut</span>=<span class="value">"execution()"</span>&gt;</span> <span class="tag">&lt;/<span class="title">aop:advisor</span>&gt;</span>
<span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">// BookDao.java</span>
<span class="comment">// HibernateTemplate 常用 api</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span>(Book book){
    <span class="keyword">this</span>.getHibernateTemplate().save(book);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span>(Book book) {
    <span class="keyword">this</span>.getHibernateTemplate().update(book);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBook</span>(Book book) {
    <span class="keyword">this</span>.getHibernateTemplate().delete(book);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span>(Integer id) {
    <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().<span class="keyword">get</span>(Book.class, id);
}p
<span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span>(){
    <span class="comment">// this.getSession().createQuery("from Book").list();</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().find(<span class="string">"from Book"</span>);
}
<span class="keyword">public</span> Book <span class="title">findByName</span>(String name){
    <span class="comment">//  this.getSession().createQuery("from Book where name=?").setParameter(0, name).uniqueResult();</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.getHibernateTemplate().find(<span class="string">"from Book where name=?"</span>, name);
}
</pre></td></tr></table></figure>

<p>业务层</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> BookService{
    <span class="keyword">private</span> BookDao bookDao;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span>(Book book) {
        bookDao.saveBook(book);
    }
    <span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBooks</span>(){
        <span class="keyword">return</span> bookDao.findAll();
    }
}
</pre></td></tr></table></figure>

<h3 id="-hibernate-spring">将 Hibernate 参数配置到 Spring</h3>
<p>将 hibernate框架的所有参数, 都配置到 applicationContext.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">&lt;!-- applicationContext.xml --&gt;</span>
<span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:"</span>&gt;</span><span class="tag">&lt;/<span class="title">context:property-placeholder</span>&gt;</span>
<span class="comment">&lt;!-- c3p0连接池 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"com.ComboPooledDataSource"</span>&gt;</span>
    <span class="comment">&lt;!-- any other configuration  --&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 配置 sessionFactory --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">props</span>&gt;</span>
            <span class="comment">&lt;!-- 数据库方言 --&gt;</span>        
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span> org.hibernate.dialect.MySQLDialect <span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2dll.auto"</span>&gt;</span>update <span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>true <span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>true <span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">props</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 配置 hbm 文件 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mappingResources | mappingLocations | mappingDirectoryLocations"</span>&gt;</span>
        <span class="comment">&lt;!-- mappingResources --&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>cn/zhpooer/Person.hbm.xml <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        
        <span class="comment">&lt;!-- mappingLocations --&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath: cn/zhpooer/Person.hbm.xml <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        
        <span class="comment">&lt;!-- mappingDirectoryLocations, 查找所有目录下的配置文件 --&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath: cn/zhpooer/domain <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="hibernatetemplate-">HibernateTemplate 用法</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre>template.save(obj);
template.update(obj);
template.saveOrUpdate();
template.delete(obj);
template.get(class, id);
template.load(class, id)

// 查询
template.find(hql, Object... args); // QBC查询, 等价于 session.createQeury(hql);

template.findByCriteria(detachedCriteria) // 完全面向对象查询
template.findByNamedQuery(queryName) // 命名查询, 查询语句写入配置文件, 方便项目管理

public void testQBC {
    HibernateTemplate template = new HibernateTemplate();
    DetachedCriteria criteria = DetachedCriteria.forClass(Book.class); // 生成 select * from book;
    criteria.add(Restrictions.like("bookname", "%为什么%"));
    List<span class="tag">&lt;<span class="title">Book</span>&gt;</span> books = template.findByCriteria(criteria);
}
/* 配置文件
* <span class="tag">&lt;<span class="title">hibernate-mapping</span>&gt;</span>
*     <span class="comment">&lt;!-- 配置 hql --&gt;</span>
*     <span class="tag">&lt;<span class="title">query</span> <span class="attribute">name</span>=<span class="value">"book.findbyname"</span>&gt;</span> from book where bookname like ?<span class="tag">&lt;/<span class="title">query</span>&gt;</span>
*     <span class="comment">&lt;!-- 配置 sql --&gt;</span>
*     <span class="tag">&lt;<span class="title">sql-query</span> <span class="attribute">name</span>=<span class="value">"book.findbynamesql"</span>&gt;</span>
*         <span class="tag">&lt;<span class="title">return</span> <span class="attribute">class</span>=<span class="value">"domain.Book"</span>&gt;</span><span class="tag">&lt;/<span class="title">return</span>&gt;</span> <span class="comment">&lt;!-- 将结果集封装到book对象 --&gt;</span>
*         select * from book where bookname like ?
*     <span class="tag">&lt;/<span class="title">sql-query</span>&gt;</span>
* <span class="tag">&lt;/<span class="title">hibernate-mapping</span>&gt;</span>
*/ 
public void testFindByNamedQuery(){
    List<span class="tag">&lt;<span class="title">Book</span>&gt;</span> books = template.findByNamedQuery("book.findbyname", "%为什么%")

    List<span class="tag">&lt;<span class="title">Book</span>&gt;</span> books = template.findByNamedQuery("book.findbynamesql", "%为什么%")
}
</pre></td></tr></table></figure>

<h2 id="spring-struts-">Spring 和 Struts 整合</h2>
<p>Struts2 整合 Spring 框架原理: 修改 struts2 默认对象工厂(struts -&gt; spring),
导入 <code>struts2-spring-plugin</code></p>
<h3 id="-service">自动装配 Service</h3>
<p>由 struts2 自己装配Action, 再由 Spring</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookaddAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span>{</span>
    <span class="keyword">private</span> Book book = <span class="keyword">new</span> Book();
    <span class="comment">// 自动装配, 不需要提供任何配置, 只需要在Action里提供 service的 set方法</span>
    <span class="comment">// 原理: struts配置文件中</span>
    <span class="comment">// `struts.objectFactory.spring.autoWire = true`(根据名字自动注入), 生效 </span>

    <span class="keyword">private</span> BookService bookService;
    <span class="keyword">public</span> String <span class="title">execute</span>(){
        pringln(<span class="string">"添加图书"</span>)
        <span class="keyword">return</span> NONE;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"bookadd.action"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"bookname"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"price"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>

<span class="tag">&lt;<span class="title">struts</span>&gt;</span>
    <span class="tag">&lt;<span class="title">package</span> <span class="attribute">name</span>=<span class="value">"default"</span> <span class="attribute">namespace</span>=<span class="value">"/"</span> <span class="attribute">extends</span>=<span class="value">"struts-default"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"bookadd"</span> <span class="attribute">class</span>=<span class="value">BookaddAction""</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">package</span>&gt;</span>
<span class="tag">&lt;/<span class="title">struts</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="action-spring-">Action由 Spring 管理</h3>
<p>将 struts2 的Action配置spring管理的Bean对象</p>
<ol>
<li><p>将Action配置为 Spring 中的一个Bean对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- applicationContext.xml 加入ActionBean --&gt;</span>
<span class="comment">&lt;!-- 必须设置为 prototype --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"bookaddAction"</span> <span class="attribute">class</span>=<span class="value">"action.BookaddAction"</span> <span class="attribute">scope</span>=<span class="value">"prototype"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"bookService"</span> <span class="attribute">ref</span>=<span class="value">"bookService"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>Struts.xml 配置 Spring bean 的 id, 作为 class 的属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 不是真实类名, 只是只给伪类名 --&gt;</span>
<span class="tag">&lt;<span class="title">package</span>&gt;</span>
    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">name</span>=<span class="value">"bookadd"</span> <span class="attribute">class</span>=<span class="value">"bookaddAction"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">action</span>&gt;</span>
<span class="tag">&lt;/<span class="title">package</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="-">结论</h3>
<p>第一种整合方式, Action 由 Struts2 自己管理, Service对象采用自动装配</p>
<p>第二种整合方式, Action 由 spring 自己管理, 依赖注入service对象, struts2 需要配置伪类名</p>
<p>第二种方式, 可以对 Action 进行 AOP 增强</p>
<h1 id="-">延迟加载问题</h1>
<p>懒加载对象, 但是对象已经脱管, 报异常 <code>no session</code></p>
<p>解决方案</p>
<ol>
<li>设置为立即加载 lazy=false, 缺点, 每次查询客户, 都要查询订单</li>
<li>在业务层, 事务关闭前手, 动初始化
<code>Hibernate.initialize(customer.getOrders())</code>, 缺点, 需要写代码</li>
<li>OpenSessionView, session 不随事务关闭而关闭,
将 session 延迟到表现层, 存在性能问题, 通过配置, 无需编码<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">&lt;!-- web.xml --&gt;</span>
<span class="comment">&lt;!-- 在Struts2的过滤器前, 配置 OpenSessionInViewFilter --&gt;</span>
<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>openfilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.springframework.orm.hiberante3.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>openfilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-">注解整合</h1>
<p>导入 <code>struts-conversion-plugin.jar</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// hiberante注解 是对 jpa注解的扩展</span>
<span class="annotation">@Entity</span>
<span class="annotation">@Table</span>(name=<span class="string">"book"</span>, catalog=<span class="string">""</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> {</span>
    <span class="annotation">@Id</span>
    <span class="annotation">@GeneratedValue</span>(strategy = GeneratedType.IDENTITY)
    <span class="keyword">private</span> Integer id;
    <span class="comment">// 如果列名和属性名不一致, 可以不写</span>
    <span class="annotation">@Column</span>(name=<span class="string">""</span>, nullable=<span class="keyword">true</span>)
    <span class="keyword">private</span> String bookname;
    <span class="keyword">private</span> <span class="keyword">double</span> price;
}
<span class="annotation">@Repository</span>(<span class="string">"bookDao"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> {</span>
    <span class="annotation">@Resource</span>(name=<span class="string">"hiberanteTemplate"</span>)
    <span class="keyword">private</span> HiberanteTemplate template;
}
<span class="annotation">@Controller</span>(<span class="string">"bookaddAction"</span>)
<span class="annotation">@Scope</span>(<span class="string">"prototype"</span>)
<span class="annotation">@Namespace</span>(<span class="string">"/"</span>)
<span class="annotation">@ParentPackage</span>(<span class="string">"struts-default"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookaddAction</span>{</span>
    <span class="annotation">@Action</span>(<span class="string">"bookadd"</span>)
    <span class="keyword">public</span> String <span class="title">execute</span>(){
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">&lt;!--  AnnotationSessionFactoryBean 支持注解功能--&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.orm.hiberante3.annotation.AnnotationSessionFactoryBean "</span>&gt;</span>
    <span class="comment">&lt;!-- 其他配置同上  --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"packageToScan"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">list</span>&gt;</span>
            <span class="tag">&lt;<span class="title">value</span>&gt;</span>cn.zhpooer<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"cn.itcast, io.zhpooer."</span>/&gt;</span>
<span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span>
<span class="comment">&lt;!-- 注解事务管理 --&gt;</span>

<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSrouce"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">tx:</span> <span class="attribute">annotation-driven</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>/&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="spring" scheme="http://zhpooer.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day41-spring AOP]]></title>
    <link href="http://zhpooer.github.io/2014/05/27/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day41-spring-aop/"/>
    <id>http://zhpooer.github.io/2014/05/27/传智播客day41-spring-aop/</id>
    <published>2014-05-27T01:19:03.000Z</published>
    <updated>2014-05-28T01:26:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="aop-">AOP 概念</h1>
<p>Aspect Oriented Programing 面向切面编程, AOP是对OOP(面向对象编程) 思想的延伸,</p>
<p>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码(性能监视、事务管理、安全检查、缓存)</p>
<p>底层原理: <strong>代理</strong> </p>
<ul>
<li><p>传统继承, 纵向结构代码复用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> wirteLog(){doSome()}
}

<span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">BaseDao</span>{</span>}
<span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">BaseDao</span>{</span>}
</pre></td></tr></table></figure>
</li>
<li><p>AOP, 使用代理机制, 将复用的代码放入代理中</p>
</li>
</ul>
<h2 id="-">相关术语</h2>
<ul>
<li>Joinpoint(连接点), 在代理过程中, 可以被拦截的点(指方法)</li>
<li>Pointcut(切入), 要对哪些Jointpoint进行拦截定义, 指定拦截(个别方法)</li>
<li>Advice(通知, 建议), 增强的代码逻辑(日志记录), 方法级别</li>
<li>Introduction(引介), 特殊类型Advice, 对原有的类对象添加一个新的属性或者方法</li>
<li>Target, 被代理对象</li>
<li>Weaving(织入), 把增强应用到目标对象, 来创建对象的过程</li>
<li>Proxy(代理), 一个类被AOP织入增强后，就产生一个结果代理类</li>
<li>Aspect(切面), 是切入点(Joinpoint)和通知(Advice)的结合, 多个切点和多个通知组成</li>
</ul>
<h1 id="aop-">AOP底层原理</h1>
<p>AOP, 使用代理机制, 将复用的代码放入代理中</p>
<h2 id="jdk-">JDK动态代理</h2>
<p>使用JDK动态代理, JDK1.3新特性</p>
<p>原理： 针对内存中Class对象，使用类加载器 动态为目标对象实现接口的创建代理类</p>
<ul>
<li>代理类 是动态创建的， 代理类 和 被代理对象 实现相同接口 </li>
<li>被代理对象 必须要实现 接口(JDK代理 只能针对接口 进行代理)</li>
</ul>
<h2 id="cglib">CGLIb</h2>
<p>JDK动态代理, 为目标对象接口生成代理对象,
对于不使用接口的业务类, 无法使用JDK动态代理</p>
<p>CGLIB(Code Generation Library)是一个开源项目.
是一个强大的,高性能,高质量的Code生成类库,
它可以在运行期扩展Java类与实现Java接口.
Hibernate支持CGlib 来实现PO字节码的动态生成.</p>
<ul>
<li>Hibernate 默认PO 字节码生成技术  javassist</li>
</ul>
<p>CGLIB 是一个第三方技术，使用时 ，需要下载 jar 包</p>
<ul>
<li>Spring3.2 版本， spring-core jar包 已经集成 cglib 开发类 </li>
</ul>
<p>原理: CGlib采用非常底层字节码技术, 可以为一个类创建子类,
解决无接口代理问题</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">public</span> ProductDao <span class="title">createCglibProxy</span>(){
    <span class="comment">// 创建代理的核心对象</span>
    Enhancer enhancer = <span class="keyword">new</span> Enhancer();
    <span class="comment">// 设置被代理类, 为类创建子类</span>
    enhancer.setSuperclass(productDao.getClass());
    enhancer.setCallback( <span class="keyword">new</span> MethodInterceptor(){
        <span class="keyword">public</span> Object <span class="title">intercept</span>(Object proxy, Method method, Object[] rags, MethodProxy methodProxy){
            <span class="comment">// 为 addProduct 计算运算时间</span>
            <span class="keyword">if</span> (method.getName().equals(<span class="string">"addProduct"</span>)) {<span class="comment">// 当前执行方法</span>
                <span class="keyword">long</span> start = System.currentTimeMillis();
                Object result = methodProxy.invokeSuper(proxy, args);
                <span class="keyword">long</span> end = System.currentTimeMillis();
                System.<span class="keyword">out</span>.println(<span class="string">"addProduct方法运行时间 : "</span> + (end - start));
                <span class="keyword">return</span> result;
            } <span class="keyword">else</span> {
                <span class="comment">// 不进行增强</span>
                <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);
            }
        }
    });
    <span class="comment">// 返回代理</span>
    <span class="keyword">return</span> (ProductDao) enhancer.create();
}
</pre></td></tr></table></figure>

<h2 id="-">结论</h2>
<p>程序中应优先对接口创建代理，便于程序解耦维护</p>
<ul>
<li>若目标对象实现了若干接口.spring使用JDK的java.lang.reflect.Proxy类代理</li>
<li>若目标对象没有实现任何接口.spring使用CGLIB库生成目标对象的子类</li>
</ul>
<h1 id="-spring-aop">传统Spring AOP</h1>
<p>AOP 开发规范: AOP联盟为通知Advice定义了<code>org.aopalliance.aop.Interface.Advice</code></p>
<p>Spring AOP 实现 AOP 联盟定义的规范</p>
<p>传统Spring AOP提供五类 Advice:
    前置通知(代码增强) org.springframework.aop.MethodBeforeAdvice</p>
<pre><code>* 在目标方法执行前实施增强
后置通知 org.springframework.aop.AfterReturningAdvice
* 在目标方法执行后实施增强
环绕通知 org.aopalliance.intercept.MethodInterceptor
* 在目标方法执行前后实施增强
异常抛出通知 org.springframework.aop.ThrowsAdvice
* 在方法抛出异常后实施增强
引介通知 org.springframework.aop.IntroductionInterceptor （课程不讲 了解）
* 在目标类中添加一些新的方法和属性
</code></pre><h2 id="advisor">Advisor</h2>
<p>Advisor 就是对 PointCut 应用 Advise, 指一个 Point 和一个 Advise</p>
<p>类型：</p>
<ul>
<li>Advisor : 代表一般切面, Advice本身就是一个切面, 对目标类所有方法进行拦截(没有切点)</li>
<li>PointcutAdvisor : 代表具有切点的切面, 可以指定拦截目标类哪些方法</li>
<li>IntroductionAdvisor : 代表引介切面，针对引介通知而使用切面(不重要)</li>
</ul>
<h3 id="-advisor">普通 Advisor</h3>
<p>使用Advice作为一个切面, 不定义切点, 拦截目标类所有方法 </p>
<ol>
<li>导入jar包, <code>spring-aop.jar</code>, <code>com.springsource.org.aopalliance.jar</code></li>
<li><p>被代理接口和实现类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span>{</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>();}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDAOImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span>{</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(){};}
</pre></td></tr></table></figure>
</li>
<li><p>编写前置增强</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span>(Method method, Object[] args, Object target){
        pring(<span class="string">"方法前"</span>)
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>为目标对象配置代理</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"customerDao"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.CusotmerDao"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mybeforeadvice"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.MyMethodBeforeAdvice"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 使用代理工厂类, 创建代理 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"customerDAOProxy"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span>
        <span class="comment">&lt;!--
        target : 代理的目标对象
        proxyInterfaces : 代理要实现的接口, 如果多个接口可以使用以下格式赋值
        proxyTargetClass : 是否对类代理而不是接口，设置为true时，使用CGLib代理
        interceptorNames : 需要织入目标的Advice
        singleton : 返回代理是否为单实例，默认为单例
        optimize : 当设置为true时，强制使用CGLib
        --&gt;</span>
        <span class="comment">&lt;!-- 目标 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"target"</span> <span class="attribute">ref</span>=<span class="value">"customerDAO"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- 针对接口代理,如果不用接口代理, 可以不写 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"proxyInterfaces"</span> <span class="attribute">value</span>=<span class="value">"cn.itcast.aop.c_advisor.CustomerDAO"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- 增强 
            interceptorNames 表示可以运用多个 Advice, 必须写value
            value 引用增强的名字
        --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptorNames"</span> <span class="attribute">value</span>=<span class="value">"mybeforeadvice"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>使用代理</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>CustomerDao dao = context<span class="preprocessor">.getBean</span>(<span class="string">"customerDAOProxy"</span>)<span class="comment">;</span>
dao<span class="preprocessor">.save</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="pointcutadvisor">PointcutAdvisor</h3>
<p>带有切点的切面, 指定被代理对象哪些方法会被增强</p>
<ul>
<li>JdkRegexpMethodPointcut 构造正则表达式切点</li>
<li>使用正则表达式 切点切面 <code>org.springframework.aop.support.RegexpMethodPointcutAdvisor</code></li>
</ul>
<ol>
<li>创建被代理接口和对象 <code>public class OrderDaoImpl implements OrderDAO{}</code></li>
<li><p>环绕代码增强</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodInterceptor</span>{</span>}
</pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"OrderDao"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.OrderDaoImpl"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mymethodinterceptor"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.MyMethodInterceptor"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 定义切点切面 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"myadvisor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span>
        <span class="comment">&lt;!-- 正则表达式规则 --&gt;</span>
        <span class="comment">&lt;!-- pattern: zhooer\.OrderDao\.add.* --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"pattern"</span> <span class="attribute">value</span>=<span class="value">".*"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- 多个规则 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"patterns"</span> <span class="attribute">value</span>=<span class="value">"*add, *delete"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"advice"</span> <span class="attribute">ref</span>=<span class="value">"mymethodinterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 创建代理 --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"orderDAOProxy"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.ProxyFactoryBean"</span> &gt;</span>
        <span class="comment">&lt;!-- 目标 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"target"</span> <span class="attribute">ref</span>=<span class="value">"orderDAO"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- 针对类代理 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"proxyTargetClass"</span> <span class="attribute">value</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- 增强 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptorNames"</span> <span class="attribute">value</span>=<span class="value">"myadvisor"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">自动代理</h2>
<p>使用ProxyFactoryBean 创建代理，需要为每个Bean 都配置一次, 非常麻烦</p>
<p>自动代理和ProxyFactoryBean本质区别:
    ProxyFactoryBean, 先有被代理对象, 传递ProxyFactoryBean, 创建代理 
    自动代理, Bean构造过程中, 使用后处理Bean 创建代理, 返回构造完成对象就是代理对象 </p>
<p>自动代理原理： 根据xml中配置advisor的规则，得
知切面对哪个类的哪个方法进行代理 (切面中本身就包含 被代理对象信息) ,
就不需要ProxyFactoryBean ，使用BeanPostProcessor 完成自动代理 </p>
<ul>
<li>BeanNameAutoProxyCreator 根据Bean名称创建代理 </li>
<li>DefaultAdvisorAutoProxyCreator 根据Advisor本身包含信息创建代理</li>
<li>AnnotationAwareAspectJAutoProxyCreator 基于Bean中的AspectJ 注解进行自动代理</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 被代理对象 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"OrderDao"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.OrderDaoImpl"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"customerDao"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.CusotmerDao"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 增强 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mymethodinterceptor"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.MyMethodInterceptor"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mybeforeadvice"</span> <span class="attribute">class</span>=<span class="value">"zhpooer.MyMethodBeforeAdvice"</span>&gt;</span> <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 第一种BeanName自动代理  --&gt;</span>
<span class="comment">&lt;!-- 后处理, 不需要配置id --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</span>
    <span class="comment">&lt;!-- 对所有DAO结尾Bean 进行代理 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"beanNames"</span> <span class="attribute">value</span>=<span class="value">"*DAO"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 增强 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"interceptorNames"</span> <span class="attribute">value</span>=<span class="value">"mymethodinterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>

<span class="comment">&lt;!-- 第二种,基于切面信息自动代理 --&gt;</span>
<span class="comment">&lt;!-- 切面 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"myadvisor"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;</span>
    <span class="comment">&lt;!-- 切点拦截信息 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"patterns"</span> <span class="attribute">value</span>=<span class="value">"zhpooer\.OrderDAO\.save.*"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 增强 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"advice"</span> <span class="attribute">ref</span>=<span class="value">"mybeforeadvice"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 后处理会自动读取切面信息   --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="aspectj">AspectJ</h1>
<p>Spring 2.0 之后,</p>
<p>AspectJ是一个面向切面的框架,它扩展了Java语言.
AspectJ定义了AOP语法所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件.</p>
<p>Spring2.0之后 为了简化 AOP编程,  整合了 AspectJ, 支持AspectJ 技术 
@AspectJ 是AspectJ1.5新增功能, 通过JDK5注解技术，允许直接在Bean类中定义切面</p>
<p>新版本Spring框架, 建议使用AspectJ方式来开发AOP, 而不需要使用传统 Spring AOP 编程</p>
<h2 id="-">基于注解</h2>
<ol>
<li>导入jar包, <code>aspectj.weaver.jar</code>, <code>spring-aspects.jar</code></li>
<li>spring配置文件, 需要 aop 名称空间, <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 配置自动代理 --&gt;</span>
<span class="comment">&lt;!-- &lt;bean class="... AnnotationAwareAspectJAutoProxyCreator" /&gt; --&gt;</span>
<span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span>/&gt;</span>
</pre></td></tr></table></figure>

</li>
</ol>
<p>常用注解</p>
<pre><code>@Aspect 定义切面 
通知类型 
@Before 前置通知，相当于BeforeAdvice
@AfterReturning 后置通知，相当于AfterReturningAdvice
@Around 环绕通知，相当于MethodInterceptor
@AfterThrowing抛出通知，相当于ThrowAdvice
@After 最终final通知，不管是否异常，该通知都会执行
@DeclareParents 引介通知，相当于IntroductionInterceptor (不要求掌握)
</code></pre><p>切点使用指定哪些连接点 会被增强, 通过execution函数，可以定义切点的方法切入</p>
<pre><code>语法： execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)
execution(public * *(..)) 匹配所有public修饰符 任何方法 
execution(* cn.itcast.service.HelloService.*(..))  匹配HelloService类中所有方法 
execution(int cn.itcast.service.UserService.regist(..))  匹配UserService中int返回类型 regist方法 
execution(* cn.itcast.dao..*(..))  匹配cn.itcast.dao包下 （包含子包） 所有类 所有方法
execution(* cn.itcast.dao.*(..)) 不包含子包  
execution(* cn.itcast.dao.GenericDAO+.*(..))  匹配GenericDAO 所有子类 或者 实现类 所有方法
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span>{</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(){}
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(){}
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span>(){}
}

<span class="comment">// 自定义切面类</span>
<span class="annotation">@Aspect</span>
<span class="comment">// 声明一个切面类</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> {</span>

    <span class="comment">//方式一 前置通知</span>
    <span class="annotation">@Before</span>(<span class="string">"execution(public * *(..))"</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span>(){
        <span class="comment">// 前置通知不能拦截目标方法执行</span>
    }
    <span class="annotation">@Before</span>(<span class="string">"execution(public * *(..)"</span>))
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span>(aspactj.Joinpoint joinpoint){
        joinpoint.toString(); <span class="comment">// 获得拦截点的信息</span>
    }
    
    <span class="comment">// 方式二 后置通知</span>
    <span class="annotation">@AfterReturning</span>(<span class="string">"execution(public * *(..))"</span>, returning=<span class="string">"returnValue"</span>)
    <span class="comment">// returnValue 是代理方法参数名, 前后两个参数名必须一致</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span>(Object returnValue){
        <span class="comment">// 获得方法的返回值</span>
    }

    <span class="comment">// 方式三 环绕通知</span>
    <span class="annotation">@Around</span>(<span class="string">"execution()"</span>, )
    <span class="keyword">public</span> Object <span class="title">around</span> (ProceedingJoinPoint pjp){
        <span class="comment">// 可以阻止 search 方法执行</span>
        Object result = pjp.proceed();
        <span class="keyword">return</span> result;
    }

    <span class="comment">//方式四 抛出通知 , 出现异常后, 方法得到执行</span>
    <span class="annotation">@AfterThrowing</span>(<span class="string">"execution()"</span>, throwing=<span class="string">"e"</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span>(Throwable e){
    }

    <span class="comment">//方式五 最终通知, 不管代码是不是抛出代码都执行, 可以用来释放资源</span>
    <span class="annotation">@After</span>(<span class="string">"execution()"</span>)
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span>(){
    }
}
<span class="comment">// &lt;bean id="userDao" class="zhpooer.UserDao"&gt;&lt;/bean&gt;</span>
<span class="comment">// &lt;bean id="myAspect" class="zhpooer.MyAspect"&gt;&lt;/bean&gt;</span>
</pre></td></tr></table></figure>

<h3 id="-">切点的定义</h3>
<p>直接在通知上定义切点表达式, 会造成切点的重复, 工作量大, 不易维护</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 切点定义</span>
<span class="annotation">@Pointcut</span>(<span class="string">"execution()"</span>)
<span class="comment">// 方法名,就是切点名字</span>
<span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mypointcut</span>(){}

<span class="comment">// 应用切点</span>
<span class="annotation">@After</span>(<span class="string">"MyAspect.mypointcut()"</span>)
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span>(){}
</pre></td></tr></table></figure>

<p>advisor 和 aspect 区别 ？</p>
<pre><code>advisor 是 spring 中 aop定义切面，通常由一个切点和一个通知组成
aspect 是规范中切面 ， 允许由多个切点和 多个通知组成     
</code></pre><h2 id="-xml">基于XML</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// 被代理对象</span>
<span class="keyword">public</span> <span class="keyword">class</span> ProductDao {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span>();
}

<span class="keyword">public</span> <span class="keyword">class</span> MyAspect {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span>(){
        <span class="comment">// 前置增强</span>
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span>(Ojbect returnValue){
        <span class="comment">// 后置增强</span>
    }
    <span class="keyword">public</span> Objct <span class="title">around</span>(ProceedingJoinPoint pjp){
        <span class="comment">// 环绕增强</span>
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 定义被代理对象 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"productDao"</span> <span class="attribute">class</span>=<span class="value">"ProductDao"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 定义切面 --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"myAspect"</span> <span class="attribute">class</span>=<span class="value">"MyAspect"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 进行AOP配置 --&gt;</span>
<span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
    <span class="tag">&lt;<span class="title">aop:aspect</span> <span class="attribute">ref</span>=<span class="value">"myAspect"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"exection"</span> <span class="attribute">id</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:pointcut</span>&gt;</span>
        <span class="comment">&lt;!-- 配置前置  --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:before</span> <span class="attribute">method</span>=<span class="value">"before"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:before</span>&gt;</span>
        <span class="comment">&lt;!-- 后置增强 --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:after-returning</span> <span class="attribute">method</span>=<span class="value">"afterReturning"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"mypointcut"</span>
             <span class="attribute">returning</span>=<span class="value">"returnValue"</span>/&gt;</span>
        <span class="comment">&lt;!-- 环绕增强  --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:around</span> <span class="attribute">method</span>=<span class="value">"around"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:around</span>&gt;</span>
        <span class="comment">&lt;!-- 抛出通知  --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:after-throwing</span> <span class="attribute">method</span>=<span class="value">"afterThrowing"</span> <span class="attribute">throwing</span>=<span class="value">"ex"</span>&gt;</span> <span class="tag">&lt;/<span class="title">aop:after-throwing</span>&gt;</span>
        <span class="comment">&lt;!-- 最终通知 --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:after</span> <span class="attribute">method</span>=<span class="value">"after"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"mypointcut"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:after</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">aop:aspect</span>&gt;</span>
<span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="jdbc-template">JDBC Template</h1>
<p>Spring 为各种支持的持久化技术, 都提供了简单的模板工具类和回调</p>
<table>
<thead>
<tr>
<th>不同持久化技术</th>
<th>模板工具</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDBC</td>
<td>org.springframework.jdbc.core.JdbcTemplate</td>
</tr>
<tr>
<td>Hibernate</td>
<td>org.springframework.orm.hiberante3.HibernateTemplate</td>
</tr>
<tr>
<td>IBatis</td>
<td>org.springframework.orm.ibatis.SqlMapClientTemplate</td>
</tr>
<tr>
<td>JPA</td>
<td>org.springframework.orm.jpa.JpaTemplate</td>
</tr>
</tbody>
</table>
<p>JdbcTemplate 是用来简化JDBC操作的, 类似 DbUtils 框架.</p>
<h2 id="-">快速入门</h2>
<p>导入jar包, <code>spring-jdbc.jar</code>, <code>spring-tx.jar</code></p>
<h3 id="-jdbc">手动运行Jdbc</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span>(){
   <span class="comment">// 数据库连接池</span>
   DirverManagerDataSource ds = <span class="keyword">new</span> DirverManagerDataSource();
   ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);
   ds.setUrl(<span class="string">"jdbc:mysql:///"</span>);
   ds.setUsername();
   ds.setPassword();
   JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(ds);
   jt.execute(<span class="string">""</span>);
}
</pre></td></tr></table></figure>

<h3 id="-xml-">使用 xml 配置</h3>
<p>常用数据源</p>
<ul>
<li><p>Spring 数据源实现类 <code>DriverManagerDataSource</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>&lt;bean <span class="property">id</span>=<span class="string">"dataSource"</span> <span class="type">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql:///spring3day2"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"username"</span> value=<span class="string">"root"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span> value=<span class="string">"abc"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
&lt;/bean&gt;
&lt;bean <span class="property">id</span>=<span class="string">"JdbcTemplate"</span> <span class="type">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"dataSource"</span> <span class="keyword">ref</span>=<span class="string">"dataSource"</span>&gt; &lt;/<span class="keyword">property</span>&gt;
&lt;/bean&gt;
</pre></td></tr></table></figure>
</li>
<li><p>DBCP 数据源 BasicDataSource </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>&lt;bean <span class="property">id</span>=<span class="string">"dataSource"</span> <span class="type">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql:///spring3day2"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"username"</span> value=<span class="string">"root"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span> value=<span class="string">"abc"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
&lt;/bean&gt;
</pre></td></tr></table></figure>
</li>
<li><p>C3P0 数据源 ComboPooledDataSource</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>&lt;bean <span class="property">id</span>=<span class="string">"dataSource"</span> <span class="type">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;
    &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"driverClass"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"jdbcUrl"</span> value=<span class="string">"jdbc:mysql:///spring3day2"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"user"</span> value=<span class="string">"root"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
	&lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span> value=<span class="string">"abc"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
&lt;/bean&gt;
</pre></td></tr></table></figure>

</li>
</ul>
<p>外部属性文件引入, 在Spring 直接修改常用属性，不方便，
可以将属性抽取出来 建立单独 properties 文件，在Spring 中引入properties</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 方式一  --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"location"</span> <span class="attribute">value</span>=<span class="value">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- 方式二 --&gt;</span>
<span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"classpath:jdbc.properties"</span>&gt;</span>

<span class="comment">&lt;!-- 将连接池配置参数，使用 ${属性key} --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSource"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.driver}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.url}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.user}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">value</span>=<span class="value">"${jdbc.password}"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<h3 id="jdbctemplate-crud">JdbcTemplate CRUD</h3>
<p>UserDAO 实现数据库操作, 必须要使用 JdbcTemplate, Spring 将jdbcTemplate 注入 UserDAO  </p>
<p>Spring 为每种持久化技术 提供一个支持类, 支持类作用，在DAO 中注入 模板工具类</p>
<pre><code>JDBC: org.springframework.jdbc.core.support.JdbcDaoSupport
Hibernate 3.0: org.springframework.orm.hibernate3.support.HibernateDaoSupport
iBatis: org.springframework.orm.ibatis.support.SqlMapClientDaoSupport
</code></pre><p>用户自己编写DAO 只需要继承 JdbcDaoSupport, 就可以注入 JdbcTemplate</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> {</span>
    <span class="comment">// 修改</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(User user){
        String sql = <span class="string">"insert into user value(?, ?)"</span>;
        getJdbcTemplate().update(sql, user.getId(), user.getName());
    }
    <span class="comment">// 简单查询查询, 返回原始类型, string类型</span>
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span>(){
        String sql = <span class="string">"select count(*) from user"</span>;
        <span class="keyword">return</span> getJdbcTemplate().queryForInt(sql);
    }
    <span class="keyword">public</span> String <span class="title">findNameById</span>(<span class="keyword">int</span> id){
        String sql = <span class="string">"select name from where id=?"</span>;
        <span class="keyword">return</span> getJdbcTemplate().queryForObject(sql, String.class, id);
    }
    <span class="comment">// 复杂查询, 手动完成对象封装</span>
    <span class="keyword">public</span> User <span class="title">findById</span>(<span class="keyword">int</span> id) {
        <span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().queryForObject(sql, <span class="keyword">new</span> UserRowMapper(),id);
    }
    <span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span>(){
        <span class="keyword">return</span> <span class="keyword">this</span>.getJdbcTemplate().query(sql, <span class="keyword">new</span> UserRowMapper());
    }

    class UserRowMapper implements RowMapper&lt;User&gt; {
        <span class="annotation">@Override</span>
        <span class="keyword">public</span> User <span class="title">mapRow</span>(ResultSet rs, <span class="keyword">int</span> rowNum) <span class="keyword">throws</span> SQLException {
        <span class="comment">// rs 已经指向每一条数据，不需要自己调用 next，将rs指向数据 转换 User对象</span>
            User user = <span class="keyword">new</span> User();
            user.setId(rs.getInt(<span class="string">"id"</span>));
            user.setName(rs.getString(<span class="string">"name"</span>));
            <span class="keyword">return</span> user;
        }
    }
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="spring" scheme="http://zhpooer.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
