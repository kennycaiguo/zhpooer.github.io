<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[竹杖芒鞋轻胜马，一蓑烟雨任平生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2014-07-11T15:46:18.283Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[传智播客day55-Oracle管理]]></title>
    <link href="http://zhpooer.github.io/2014/07/11/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day55-oracle%E7%AE%A1%E7%90%86/"/>
    <id>http://zhpooer.github.io/2014/07/11/传智播客day55-oracle管理/</id>
    <published>2014-07-11T02:08:35.000Z</published>
    <updated>2014-07-11T12:35:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="dbca">DBCA</h1>
<p>DBCA 是一个管理Oracle数据库的工具</p>
<ul>
<li>ASM, 自动存储管理, 数据库文件在外设文件存储介质管理</li>
<li>创建数据库</li>
<li>配置数据库选项</li>
<li>删除数据库</li>
<li>管理模板</li>
</ul>
<p>DBA工作:</p>
<ul>
<li>评测数据库服务器硬件</li>
<li>安装Oracle数据库软件</li>
<li>规划数据库<ul>
<li>计划数据库的逻辑存储结构<ul>
<li>多少磁盘驱动器</li>
<li>需要多少数据文件</li>
<li>需要用多大的表空间</li>
<li>专用存储的类型和尺寸, 哪种类型才信息将被存储</li>
</ul>
</li>
<li>数据库总设计</li>
<li>数据库备份策略</li>
</ul>
</li>
<li>创建并且打开数据库</li>
<li>数据库备份</li>
<li>注册用户</li>
<li>实现数据库计划</li>
<li>全库备份/增量备份</li>
<li>调整数据库性能</li>
</ul>
<p>数据仓库, 分析, 一般只做查询</p>
<p>归档, 如果在非归档模式下,
数据库是不能做联机备份的,
只能脱机备份, 定期压缩备份</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>arhive <span class="command">log</span> <span class="type">list</span>
</pre></td></tr></table></figure>

<p>数据库四个状态</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">shutdown</span>
unmount
mount
<span class="keyword">open</span>
</pre></td></tr></table></figure>

<h1 id="-flashback-">闪回(flashback)</h1>
<p>使用情景</p>
<ul>
<li>错误的删除了数据, 并且commit</li>
<li>错误地删除了表<code>drop table</code></li>
<li>如何获取表上的历史记录</li>
<li>如何撤销一个已经提交了的事务</li>
</ul>
<p>闪回类型</p>
<ul>
<li>闪回表, 将表会退到过去的一个时间上</li>
<li>闪回删除, 操作oracle回收站</li>
<li>闪回版本查询, 表上的历史记录</li>
<li>闪回事务查询, 回去一个 undo_sql</li>
<li>闪回数据库, 将数据库会退到过期的一个时间上</li>
<li>闪回归档日志</li>
</ul>
<p>传统的恢复技术缓慢, 闪回命令很容易</p>
<h2 id="-">闪回表</h2>
<p>将表中的数据快速恢复到过去的一个时间点, 使用到与撤销表空间相关的
undo信息</p>
<p>用户的表数据的修改操作, 都记录在撤销表空间中, 如某个操作在提交之后
被记录在撤销表空间中, 保留时间为900秒,  用户可以在900秒内对表进行闪回操纵</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">show</span> parameter undo;</span>
<span class="comment">-- 单位是秒</span>
<span class="comment">-- scope取值有三个:</span>
<span class="comment">-- memory(只改当前数据库, 重启恢复)</span>
<span class="comment">-- spfile(重启以后才生效)</span>
<span class="comment">-- both</span>

<span class="operator"><span class="keyword">alter</span> system <span class="keyword">set</span> undo_retention=<span class="number">1200</span> scope=<span class="keyword">both</span>;</span>


<span class="comment">-- 赋予权限</span>
<span class="operator"><span class="keyword">grant</span> flash <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 系统该变号 scn</span>
<span class="comment">-- 得到时间SCN 222222</span>
<span class="operator"><span class="keyword">select</span> to_char(sysdate, <span class="string">'yyyy-mm-dd hh24:mi:ss:mm'</span>) 时间,
timestamp_to_scn(sysdate) SCN <span class="keyword">from</span> dual;</span>


<span class="comment">-- do some insert</span>
<span class="operator"><span class="keyword">commit</span>;</span>

<span class="comment">-- 必须先打开表的行移动</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> flashback_table enable rowmovement;</span>

flashback table falshback_table to SCN 222222;
<span class="comment">-- 如何获取离该操作最近的一个时间点 或者 scn</span>
</pre></td></tr></table></figure>

<ul>
<li>系统表不能被闪回</li>
<li>不能跨越 DDL操作(如<code>create table</code>)</li>
<li>会被写入警告日志</li>
<li>产生撤销和重做的数据</li>
</ul>
<h2 id="-">闪回删除</h2>
<p>实际上从系统的回收站将已经删除的对象, 恢复到删除之前的状态.
只对普通用户有效</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">-- 回收站</span>
show recyclebin;
<span class="comment">-- 清空回收站</span>
purge recyclebin;

<span class="comment">-- 彻底删除表, 不经过回收站</span>
drop table testtable purge;

<span class="comment">-- 闪回删除</span>
flashback table test1 <span class="keyword">to</span> <span class="keyword">before</span> drop;
<span class="comment">-- 通过回收站中的名字闪回删除</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop;

<span class="comment">-- 如果如果存在重名的表, 会先闪回后删除的</span>

<span class="comment">-- 如果已经存在重复命名的表</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop rename <span class="keyword">to</span> test1new;
<span class="comment">-- 放到回收站时, 默认会禁掉 触发器</span>
flash <span class="keyword">back</span> table <span class="string">"BIN$a343=$xxx"</span> <span class="keyword">to</span> <span class="keyword">before</span> drop enable triggers;
</pre></td></tr></table></figure>

<h2 id="-">闪回版本查询</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- versions_xid 事务号</span>
<span class="operator"><span class="keyword">select</span> vid, vname, versions_operation, versions_starttime, versions_endtime,
versions_xid
<span class="keyword">from</span> versions_table
versions between <span class="keyword">timestamp</span> minvalue <span class="keyword">and</span> maxvalue;</span>
</pre></td></tr></table></figure>

<h2 id="-">闪回事务查询</h2>
<p>闪回事务查询实际上是闪回版本查询的一个补充,
通过它可以审计某个事务甚至撤销一个已经提交的事务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">-- 事务视图, 从该视图中可以获取事务的历史操作记录以及撤销语句</span>
desc flashback_transaction_query;

<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">transaction</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 通过闪回版本查询得到 versions_xid</span>
<span class="operator"><span class="keyword">select</span> operation, undo_sql <span class="keyword">from</span> flashback_transaction_query
<span class="keyword">where</span> xid=<span class="string">"xidxxxxx"</span>;</span>
<span class="comment">-- 执行 undo_sql, 就可以撤销这个事务</span>
</pre></td></tr></table></figure>

<h1 id="-">导入和导出</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">-- 表方式导出</span>
cmd &gt; <span class="built_in">exp</span> scott/tiger <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.lgo tables=dept,emp
<span class="comment">-- 用户方式导出</span>
cmd &gt; <span class="built_in">exp</span> scott/tiger <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.lgo
<span class="comment">-- 库方式导出</span>
<span class="built_in">exp</span> <span class="keyword">system</span>/password@localhost:<span class="number">1521</span>/orcl <span class="built_in">file</span>=d:/temp/full.dmp <span class="built_in">log</span>=d:/temp/<span class="built_in">log</span>.<span class="built_in">log</span> full=y

<span class="comment">-- 导入一张表</span>
cmd &gt; imp emi/password <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span> table=dept,emp
fromuser=scott touser=emi commit=y ignore=y
<span class="comment">-- 导入用户下的表</span>
cmd &gt; imp emi/password <span class="built_in">file</span>=d:/<span class="operator">a</span>.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span>
fromuser=scott touser=emi commit=y ignore=y
<span class="comment">-- 导入数据库</span>
cmd &gt; imp <span class="keyword">system</span>/passowrd@localhost <span class="built_in">file</span>=d:/cc.dmp <span class="built_in">log</span>=d:/<span class="built_in">log</span>.<span class="built_in">log</span> full=y ignore=y destroy=y
</pre></td></tr></table></figure>

<h1 id="-schema-">管理方案(Schema)</h1>
<p>启动 <code>OracleDBConsolord</code>, 访问 <code>http://locahost:1158</code>,
<code>grant select_catalog_role to scott</code></p>
<p>方案: 用户和方案是一一对应的关系, 表, 存储过程以及View等都是管理方案</p>
<p>通过网页管理数据库</p>
<p>临时表</p>
<h1 id="-">管理用户安全</h1>
<p>概览</p>
<ul>
<li>用户</li>
<li>角色</li>
<li>权限</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 创建用户 itcast0509/password</span>
conn / as sysdba
<span class="comment">-- 三种认证方式 password(密码验证)/external(以主机用户登陆)/global(生物认证,token方式)</span>
<span class="comment">-- 预定义账户: SYS账户(数据库拥有者), SYSTEM账户(DBA)</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> itcast0509 identified <span class="keyword">by</span> password;</span>
<span class="comment">-- 授予登陆权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> itcast0509;</span>

<span class="comment">-- 解锁</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> scott account unlock;</span>
<span class="comment">-- 改密码</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> scott identified <span class="keyword">by</span> newpassword;</span>
</pre></td></tr></table></figure>

<p>用户权限由两种</p>
<ul>
<li>系统权限, 允许用户执行对于数据库的特定操作, 如创建表, 创建用户等</li>
<li>对象权限, 允许用户访问和操作一个特定的对象, 如其他方案下的表的查询<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> employee <span class="keyword">to</span> scott;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">权限的级联</h2>
<p>ADMIN OPTION, 只对系统权限而言, 撤销权限不能级联撤销</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> jeff identified <span class="keyword">by</span> password;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> emi identified <span class="keyword">by</span> password;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> jeff;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> emi;</span>

<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> jeff quota unlimited <span class="keyword">on</span> users;</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">user</span> emi quota unlimited <span class="keyword">on</span> users;</span>

<span class="comment">-- 给予权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> jeff <span class="keyword">with</span> admin <span class="keyword">option</span>;</span>

<span class="comment">-- login as jeff, jeff 授权给emi</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> emi;</span>

<span class="comment">-- login as admin</span>
<span class="comment">-- 撤销了jeff的权限, 但是没有级联撤销emi的权限</span>
revoke <span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">from</span> jeff;</span>
</pre></td></tr></table></figure>

<p>GRANT OPTION, 只对对象权限而言, 会产生级联的效果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">-- login as scott</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">to</span> jeff <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>

<span class="comment">-- login as jeff</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> scott.emp <span class="keyword">to</span> emi;</span>

<span class="comment">-- login as scott, 级联撤销权限</span>
revoke <span class="operator"><span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">from</span> jeff;</span>
</pre></td></tr></table></figure>

<h2 id="-role-">角色 (Role)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">-- 角色</span>
<span class="operator"><span class="keyword">create</span> role hr_mgr;</span>
<span class="operator"><span class="keyword">create</span> role hr_clerk;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> hr_clerk;</span>

<span class="comment">-- 继承关系</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span>, hr_clerk <span class="keyword">to</span> hr_mgr;</span>

<span class="comment">-- 将角色赋予给用户</span>
<span class="operator"><span class="keyword">grant</span> hr_mgr <span class="keyword">to</span> jeff;</span>
</pre></td></tr></table></figure>

<p>数据库已经预定义了各种常用角色:</p>
<ul>
<li>CONNECT, 登陆</li>
<li>RESOURCE, 创建表, 触发器, 视图, 分配用户空间等权限</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">-- 创建新用户</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> testuser identified <span class="keyword">by</span> password;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">connect</span>, resource <span class="keyword">to</span> testuser;</span>
</pre></td></tr></table></figure>

<h1 id="-profile-">概要文件(profile)</h1>
<ul>
<li>定义用户创建规则, 如密码复杂度, 登陆失败处理, 密码修改策略,</li>
<li>以及对资源的使用控制</li>
</ul>
<h1 id="-">分布式数据库</h1>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="oracle" scheme="http://zhpooer.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day54-PL/SQL]]></title>
    <link href="http://zhpooer.github.io/2014/07/10/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day54-plsql/"/>
    <id>http://zhpooer.github.io/2014/07/10/传智播客day54-plsql/</id>
    <published>2014-07-10T01:02:36.000Z</published>
    <updated>2014-07-10T08:07:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>安装 SQL Developer</p>
<p>文档 books: pl/sql</p>
<p>PL/SQL(Procedure Language/SQL): SQL 语言的过程化扩展</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 给员工涨工资, 总裁1000, 经理800, 其他400</span>
<span class="comment">-- jdbc 代码效率不高, 所以要用 PLSQL</span>

<span class="comment">-- Hello world 程序</span>
declare
<span class="comment">-- 说明部分</span>
<span class="comment">-- 定义变量</span>
<span class="operator"><span class="keyword">begin</span>
    dbms_output.put_line(<span class="string">'hello world'</span>);</span>
<span class="operator"><span class="keyword">end</span>

<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span> <span class="comment">-- 打开程序输出开关</span>

desc dbms_output;  <span class="comment">-- 查看文档信息</span>
</pre></td></tr></table></figure>

<h2 id="-">说明变量</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>varl char(15)
married boolean := true;
psal number(7,2);
my_name emp.ename%type;  <span class="comment">-- 引用型变量, 与列变量类型一样</span>
emp_rec emp%rowtype;     <span class="comment">-- 记录型变量, 代表表中的一行, 数组</span>


<span class="comment">-- 查询并打印7839的姓名和薪水</span>
<span class="comment">-- 方式一: 使用引用型变量</span>
<span class="operator"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>
<span class="keyword">declare</span>
    pename  emp.ename%type;</span>
    psal    emp.sal%type;
<span class="operator"><span class="keyword">begin</span>
    -- 得到<span class="number">7839</span>的姓名和薪水
    -- 使用 <span class="keyword">select</span> 和 <span class="keyword">into</span>
    <span class="keyword">select</span> ename, sal <span class="keyword">into</span> pename, psal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7839</span>;</span>
    dbms_outpu.put_line(pname||'薪水是'||psal);
<span class="operator"><span class="keyword">end</span>
-- 方式二: 使用记录型变量
<span class="keyword">declare</span>
    emp_rec emp%rowtype;</span>
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">select</span> * <span class="keyword">into</span> emp_rec <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7839</span>;</span>
    dbms_output.put_line(emp_rec.ename||'薪水是'||emp.sal)
<span class="operator"><span class="keyword">end</span></span>
</pre></td></tr></table></figure>

<h2 id="-">流程控制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">-- 判断用户输入的数字</span>
set serveroutput on

<span class="comment">-- 接受键盘输入</span>
<span class="comment">-- 关键 num 表示的是一个内存地址值, 在该地址上保存了输入的值</span>
accept num prompt <span class="string">'请输入一个数字'</span>;

declare
    <span class="comment">-- 定义变量保存输入的数字</span>
    <span class="comment">-- 隐式转换</span>
    pnum number := &num;
begin
    <span class="keyword">if</span> pnum = <span class="number">9</span> <span class="keyword">then</span> dbms_output.put_line(<span class="string">'您输入的是0'</span>);
        elsif pnum = <span class="number">1</span> <span class="keyword">then</span> dbms_output.put_line(<span class="string">'您输入的是1'</span>);
        <span class="keyword">else</span> dbms_output.put_line(<span class="string">'您输入的是其他数字'</span>);
    <span class="keyword">end</span> <span class="keyword">if</span>;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-">循环控制</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>
<span class="keyword">while</span> [condition]
<span class="keyword">loop</span>
-- <span class="keyword">do</span> something
<span class="keyword">end</span> <span class="keyword">loop</span>;

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>
<span class="keyword">loop</span>
-- <span class="keyword">do</span> somethings
<span class="keyword">end</span> <span class="keyword">loop</span>


-- 打印 <span class="number">1</span>-<span class="number">10</span>

<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    pnum number := <span class="number">1</span>
begin
    <span class="keyword">loop</span>
        <span class="keyword">exit</span> <span class="keyword">when</span> pnum &gt; <span class="number">10</span>;
        dbms_output.put_line(pnum);
        pnum := pnum + <span class="number">1</span>;
    <span class="keyword">end</span> <span class="keyword">loop</span>;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-cursor-">光标(Cursor)</h2>
<p>光标的属性:</p>
<ul>
<li>%isopen, 是否打开</li>
<li>%rowcount, 返回的行数</li>
<li>%notfound</li>
<li>%found</li>
</ul>
<p>默认情况下, 一次性只能打开300个光标</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>conn sys/password@localhost:1521/orcl as sysdba
<span class="comment">-- 查询关于abcd的各种参数</span>
<span class="operator"><span class="keyword">show</span> parameter abcd;</span>
shwo parameter cursor;
<span class="comment">-- 修改</span>
<span class="operator"><span class="keyword">alter</span> system|<span class="keyword">session</span> <span class="keyword">set</span> open_cursors=<span class="number">300</span>;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre>cursor c1 is <span class="operator"><span class="keyword">select</span> ename <span class="keyword">from</span> emp;</span>
open c1;
fetch c1 into pename;   <span class="comment">-- 取一行到变量中</span>
close c1;

<span class="comment">-- 使用光标打印所有员工的工资和薪水</span>
<span class="operator"><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span>
declare
    cursor cemp is <span class="operator"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp;</span>
    pename emp.ename%type;
    psal emp.sal%type;
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">open</span> cemp;</span>
    loop
        <span class="comment">-- 取当前记录</span>
        fetch cemp into pename, psal;
        <span class="comment">-- 退出条件</span>
        exit when cemp%notfound
        dbms_output.put_line(pename||'的薪水是'||psal);
    <span class="operator"><span class="keyword">end</span> loop;</span>
    clse cemp;
<span class="operator"><span class="keyword">end</span>;</span>

<span class="comment">-- 涨工资 TODO ()</span>
<span class="operator"><span class="keyword">set</span> serveroutpu <span class="keyword">on</span>;</span>
declare
    cursor cemp is <span class="operator"><span class="keyword">select</span> empno, sal, job <span class="keyword">from</span> emp;</span>
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">rollback</span>;</span>
    open cemp;
    
    close cemp;
    <span class="operator"><span class="keyword">commit</span>;</span>
<span class="operator"><span class="keyword">end</span>

-- 带参数的光标
-- 查询某个部门中员工的姓名
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;</span>
declare
    cursor cemp(dno number) is <span class="operator"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=dno;</span>
    pename emp.ename%type;
<span class="operator"><span class="keyword">begin</span>
   <span class="keyword">open</span> cemp(<span class="number">10</span>);</span>
   loop
       fetch cemp into pename;
       exit when cemp%notfound;
       dbms_output.put_line(pename);
   <span class="operator"><span class="keyword">end</span> loop;</span>
   close cemp;
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h2 id="-exception-">异常(Exception)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>-- 被<span class="number">0</span>除处理
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    pnum number;
begin
    pnum := <span class="number">1</span>/<span class="number">0</span>
exception
    <span class="keyword">when</span> zero_divide <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'1:0b不能做被除数');</span>
    <span class="keyword">when</span> value_error <span class="keyword">then</span> dbms_ouput.put_line(<span class="comment">'算数或者转换错误');</span>
    <span class="keyword">when</span> others <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'其他例外');</span>
<span class="keyword">end</span>;

-- 自定义异常
-- 查询<span class="number">50</span>号部门的员工姓名
<span class="keyword">declare</span>
    cursor cemp <span class="keyword">is</span> seect ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">50</span>;
    pename emp.ename%type;
    -- 自定义异常
    no_emp_fount exception;
begin
    open cemp;
    fetch cemp <span class="keyword">into</span> pename;
    <span class="keyword">if</span> cemp%notfound <span class="keyword">then</span>
       raise no_emp_found;
    <span class="keyword">end</span> <span class="keyword">if</span>;
    close cemp;
exception
    <span class="keyword">when</span> no_emp_found <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'没有找到员工');</span>
    <span class="keyword">when</span> others <span class="keyword">then</span> dbms_output.put_line(<span class="comment">'其他例外');</span>
<span class="keyword">end</span>;
</pre></td></tr></table></figure>

<h1 id="-">案例</h1>
<p>瀑布模型</p>
<ul>
<li>需求分析</li>
<li>设计<ul>
<li>概要设计(High Level Design), 框架, 模块</li>
<li>详细设计(Low Level Design), 如何实现具体模块</li>
</ul>
</li>
<li>编码, 实现功能模块, 类</li>
<li>测试</li>
<li>部署运营</li>
</ul>
<h2 id="-">统计每年入职的员工个数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
declare
   cursor cemp <span class="keyword">is</span> <span class="keyword">select</span> to_char(hiredate, <span class="string">'YYYY'</span>) <span class="keyword">from</span> emp;
   phiredate varchar2(<span class="number">4</span>);
<span class="keyword">begin</span>
   open cursor;
   <span class="keyword">loop</span>
       fetch cemp <span class="keyword">into</span> phiredate;
       <span class="keyword">exit</span> when cemp%notfound;
       -- 判断入职年份
       <span class="keyword">if</span> phiredate = <span class="string">'1980'</span> <span class="keyword">then</span> count80:=count80+<span class="number">1</span>;
          elsif phiredate = <span class="string">'1981'</span> <span class="keyword">then</span> count81+<span class="number">1</span>;
       <span class="keyword">end</span> <span class="keyword">if</span>;
   <span class="keyword">end</span> <span class="keyword">loop</span>;
   close cursor;
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h2 id="-">涨工资</h2>
<p>涨工资, 没人涨10%, 但是总额不超过5万元,
计算涨工资的人数和涨工资后的工资总额, 并输出涨工资人数和工资总额</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>-- 有bug, 自己解决
<span class="keyword">set</span> serveroutput <span class="keyword">on</span>;
<span class="keyword">declare</span>
    cursor cemp <span class="keyword">is</span> <span class="keyword">select</span> empno, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;
    pempno emp.empno%type;
    psal emp.sal%type;
    countEmp number := <span class="number">0</span>;
    salTotal number;
begin
    -- 工资总额初识值
    <span class="keyword">select</span> sum(sal) <span class="keyword">into</span> salTotal <span class="keyword">from</span> emp;
    open cemp;
    <span class="keyword">loop</span>
        <span class="keyword">exit</span> <span class="keyword">when</span> salTotal &gt; <span class="number">50000</span>;
        fetch cemp <span class="keyword">into</span> pempno, psal;
        <span class="keyword">exit</span> <span class="keyword">when</span> cemp%notfound;
        update emp <span class="keyword">set</span> sal=sal*<span class="number">1.1</span> <span class="keyword">where</span> empno=pempno;
        countEmp := countEmp + <span class="number">1</span>;
        -- 涨后的工资总额
        salTotal := salTotal = psal*<span class="number">0.1</span>;
    <span class="keyword">end</span> <span class="keyword">loop</span>;
    close cemp;
    commit;
    dbms_ouput.put_line(<span class="comment">'人数:');</span>
<span class="keyword">end</span>;
</pre></td></tr></table></figure>

<h2 id="-">统计工资</h2>
<p>按部门分段(6000, 6000-3000, 3000)统计部门工资,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="keyword">declare</span>
    cursor cdept <span class="keyword">is</span> <span class="keyword">select</span> deptno <span class="keyword">from</span> dept;
    pdeptno dept.deptno%type;
    cursor cemp(dno number) <span class="keyword">is</span> <span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=dno;
    count1 number
    count2 number;
    count3 number;
    salTotal number;
begin
    open cdept;
    <span class="keyword">loop</span>
        fetch cdept <span class="keyword">into</span> pdeptno;
        <span class="keyword">exit</span> <span class="keyword">when</span> cdept%notfound;
        -- 初始化计数器
        count1:=<span class="number">0</span>; count2:=<span class="number">0</span>; count3:=<span class="number">0</span>;
        <span class="keyword">select</span> sum(sal) <span class="keyword">into</span> salTotal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=pdeptno;
        -- 得到部门中员工的薪水
        open cemp(cdept);
        <span class="keyword">loop</span>
            fetch cemp <span class="keyword">into</span> psal;
            <span class="keyword">exit</span> <span class="keyword">when</span> cemp%notfound;
            <span class="keyword">if</span> psal &lt; <span class="number">3000</span> <span class="keyword">then</span> count1 := count1 + <span class="number">1</span>;
              elsif psal &gt; <span class="number">6000</span> <span class="keyword">then</span> count3 := count3 + <span class="number">1</span>;
              <span class="keyword">else</span> count2 :- count2 + <span class="number">1</span>;
            <span class="keyword">end</span> <span class="keyword">if</span>;
        <span class="keyword">end</span> <span class="keyword">loop</span>;
        close cemp;
        insert <span class="keyword">into</span> msg values(pdeptno, count1, count2, count3, nvl(salTotal));
    <span class="keyword">end</span> <span class="keyword">loop</span>;
    close cdept;
    commit;
    dbms_outpu.put_line(<span class="string">""</span>);
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<h1 id="-">存储过程</h1>
<p>存储在数据库中供所有用户程序调用的子程序叫存储过程(无返回), 存储函数(有返回).</p>
<p>调用存储过程</p>
<ol>
<li><code>exec sayHelloWorld();</code></li>
<li><code>begin sayHelloWorld() end; /</code></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="title">sayHelloWorld</span>
<span class="title">as</span>
  -- 说明部分
<span class="title">begin</span>
    <span class="title">dbms_output</span>.<span class="title">put_line</span><span class="params">(<span class="string">'hello world'</span>)</span>;</span>
<span class="keyword">end</span>;

-- 带参数的存储过程
-- 如果存储过程带了参数, 需要指明是输入参数还是输出
<span class="keyword">create</span> <span class="keyword">or</span> repalce <span class="function"><span class="keyword">procedure</span> <span class="title">raiseSalary</span><span class="params">(eno <span class="keyword">in</span> number)</span>
<span class="title">as</span>
    -- 定义变量保存涨前的薪水
    <span class="title">psall</span> <span class="title">emp</span>.<span class="title">sal</span>%<span class="title">type</span>;</span>
<span class="keyword">begin</span>
    <span class="keyword">select</span> sal <span class="keyword">into</span> psal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=eno;
    -- 涨<span class="number">100</span>
    update emp <span class="keyword">set</span> sal=sal+<span class="number">100</span> <span class="keyword">where</span> empno=eno;
    -- 要不要commit??
    -- 不需要, 一般不在存储过程中提交; 要在调用者中提交
    dbms_output.put_line(<span class="string">'涨前'</span>||psal<span class="string">' 涨后:'</span>(psal+<span class="number">100</span>));
<span class="keyword">end</span>;

<span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="params">(pno <span class="keyword">in</span> number, addsal <span class="keyword">in</span> number)</span>
<span class="title">as</span>
    <span class="title">psal</span> <span class="title">emp</span>.<span class="title">sal</span>%<span class="title">type</span>
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">sal</span> <span class="title">into</span> <span class="title">psal</span> <span class="title">from</span> <span class="title">emp</span> <span class="title">where</span> <span class="title">empno</span>=<span class="title">pno</span>;</span>
    update emp <span class="keyword">set</span> sal=sal+sddsal <span class="keyword">where</span> empno=pno;
    dbms_output.put_line(<span class="string">'涨前:1'</span>||psal||<span class="string">' 涨后:'</span>||psal+addsal)
<span class="keyword">end</span>;

-- sum(a, b);可以这样调用
-- sum(a=&gt;<span class="number">2</span>, b=&gt;<span class="number">3</span>);

-- 运行调试 TODO
-- grant debug connect session, debug
</pre></td></tr></table></figure>

<h1 id="-">存储函数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 查询某个员工的年收入</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> function queryEmpIncome(eno <span class="keyword">in</span> <span class="keyword">number</span>)
    return <span class="keyword">number</span>
<span class="keyword">as</span>
    -- 月薪和奖金
    psal emp.sal%type;</span>
    pcomm emp.comm%type;
<span class="operator"><span class="keyword">begin</span>
    <span class="keyword">select</span> sal, comm <span class="keyword">into</span> psal, pcomm form emp <span class="keyword">where</span> empno=eno;</span>
    <span class="comment">-- 返回年收入</span>
    return psal*12+nvl(pcomm, 0);
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h1 id="in-out">in和out</h1>
<p>存储过程和存储函数可以通过out指定一个或者多个输出参数</p>
<p>如果只有一个返回值, 用存储函数；否则用存储过程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>-- 查询某个员工的姓名 月薪 和 职位
<span class="keyword">create</span> <span class="keyword">or</span> replace <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpInfo</span><span class="params">(eno <span class="keyword">in</span> number,
                                         pename <span class="keyword">out</span> varchar2,
                                         psal <span class="keyword">out</span> number,
                                         pjob <span class="keyword">out</span> varchar2)</span>
<span class="title">as</span>
<span class="title">begin</span>
    <span class="title">select</span> <span class="title">ename</span>, <span class="title">sal</span>, <span class="title">empjob</span> <span class="title">into</span> <span class="title">pename</span>, <span class="title">psal</span>, <span class="title">pjob</span> <span class="title">frmo</span> <span class="title">emp</span> <span class="title">whre</span> <span class="title">empno</span>=<span class="title">eno</span>;</span>
<span class="keyword">end</span>;

-- 思考
-- <span class="number">1</span>. 查询某个员工的所有信息(<span class="keyword">out</span>参数太多)
-- <span class="number">2</span>. 查询某个部门中所有员工的所有信息
-- 可以使用集合
</pre></td></tr></table></figure>

<h1 id="jdbc">JDBC</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> JDBCUtils {
    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="string">"oracle.jdbc.OracleDriver"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"soctt"</span>;
    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"tiger"</span>;
    <span class="keyword">static</span> {
        Class.forName(driver);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>(){
        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span>(Connection conn, Statement st, ResultSet rs) {
        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>) {
            <span class="keyword">try</span>{
                st.close(); 
            } <span class="keyword">catch</span>(SQLException e) {
            } finnally {
                rs = <span class="keyword">null</span>;
            }
        }
        <span class="comment">// TODO jta</span>
    }
}

<span class="keyword">public</span> <span class="keyword">class</span> TestOracle {
    <span class="comment">// 调用存储过程</span>
    @Test <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcedure</span>(){
        String sql = <span class="string">"{call queryEmpInfo(?,?,?,?)}"</span>;
        Connection conn = <span class="keyword">null</span>;
        CallableStatement call = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            conn = JDBCUtils.getConnection();
            call = conn.prepareCall(sql);
            <span class="comment">// 对于in参数, 赋值</span>
            call.setInt(<span class="number">1</span>, <span class="number">7839</span>);
            
            <span class="comment">// 对于out参数, 申明</span>
            <span class="comment">// 申明类型输出参数类型</span>
            call.registerOutParameter(<span class="number">2</span>, OracleTypes.VARCAR);
            call.registerOutParameter(<span class="number">3</span>, OracleTypes.NUMBER);
            call.registerOutParameter(<span class="number">4</span>, OracleTypes.VARCHAR);
            call.execute();
            <span class="comment">// 取出结果</span>
            String name = call.getString(<span class="number">2</span>);
            <span class="keyword">double</span> sal = call.getDouble(<span class="number">3</span>);
            String job = call.getString(<span class="number">4</span>);
            println(name + <span class="string">"\t"</span> + sal + <span class="string">"\t"</span> + job);
        } <span class="keyword">catch</span> (Exception e) {
        }
    }
    @Test <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span>(){
        String sql = <span class="string">"{?=call queryEmpIncom(?)}"</span>;
        Connection conn = <span class="keyword">null</span>;
        CallableStatement call = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            conn = JDBCUtils.getConnection();
            call = conn.prepareCall(sql);
            call.registerOutParameter(<span class="number">1</span>, OracleTypes.NUMBER);
            <span class="comment">// 对于in参数, 赋值</span>
            call.setInt(<span class="number">2</span>, <span class="number">7839</span>);
            call.execute();
            <span class="comment">// 取出结果</span>
            <span class="keyword">double</span> sal = call.getDouble(<span class="number">1</span>);
        } <span class="keyword">catch</span> (Exception e) {
        }
    }
}
</pre></td></tr></table></figure>

<h1 id="-out-cursor-">在 out 中 使用游标(cursor)</h1>
<p>申明包结构</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">create</span> <span class="keyword">or</span> replace
package MYPACKAGE <span class="keyword">as</span>
    <span class="keyword">type</span> empcursor <span class="keyword">is</span> ref cursor;
    <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpList</span><span class="params">(dno <span class="keyword">in</span> number, empList <span class="keyword">out</span> empcursor)</span>;</span>
    <span class="comment">// 可以定义多个存储函数</span>
<span class="keyword">end</span> MYPACKAGE;

<span class="keyword">create</span> <span class="keyword">or</span> replace
package body MYPACKAGE <span class="keyword">as</span>
    <span class="function"><span class="keyword">procedure</span> <span class="title">queryEmpList</span><span class="params">(dno <span class="keyword">in</span> number, empList <span class="keyword">out</span> empcursor)</span> <span class="title">as</span>
    <span class="title">begin</span>
        <span class="title">open</span> <span class="title">empList</span> <span class="title">for</span> <span class="title">select</span> * <span class="title">from</span> <span class="title">emp</span> <span class="title">where</span> <span class="title">deptno</span>=<span class="title">dno</span>;</span>
    <span class="keyword">end</span> queryEmpList;
<span class="keyword">end</span> MYPACKAGE;


<span class="keyword">desc</span> mypackage;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>@Test public void testCursor(){
    String sql = <span class="string">"{call MYPACKAGE.queryEmpList(?, ?)}"</span><span class="comment">;</span>
    Connection conn = null<span class="comment">;</span>
    ResultSet sr = null<span class="comment">;</span>
    CallableStatement <span class="keyword">call</span> = null<span class="comment">;</span>
    try {
        conn = JDBCUtils<span class="preprocessor">.getConnection</span>()<span class="comment">;</span>
        <span class="keyword">call</span> = conn<span class="preprocessor">.prepareCall</span>(sql)<span class="comment">;</span>
        
        // 对于<span class="keyword">in</span>参数, 赋值
        <span class="keyword">call</span><span class="preprocessor">.setInt</span>(<span class="number">1</span>, <span class="number">7839</span>)<span class="comment">;</span>
        <span class="keyword">call</span><span class="preprocessor">.registerOutParameter</span>(<span class="number">2</span>, OracleTypes<span class="preprocessor">.CURSOR</span>)<span class="comment">;</span>
        <span class="keyword">call</span><span class="preprocessor">.execute</span>()<span class="comment">;</span>
        // 取出结果
        rs = ((OracleCallableStatement) <span class="keyword">call</span>)<span class="preprocessor">.getCursor</span>(<span class="number">2</span>)<span class="comment">;</span>
        while(rs<span class="preprocessor">.next</span>()) {
            String name = rs<span class="preprocessor">.getString</span>(<span class="string">"ename"</span>)<span class="comment">;</span>
            double sal = rs<span class="preprocessor">.getDouble</span>(<span class="string">"sal"</span>)<span class="comment">;</span>
            String job = rs<span class="preprocessor">.getString</span>(<span class="string">"empjob"</span>)<span class="comment">;</span>
        }
    } catch (Exception e) {
        -- 关闭结果集, 会关闭光标
    }
    
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="oracle" scheme="http://zhpooer.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day53-oracle 2]]></title>
    <link href="http://zhpooer.github.io/2014/07/08/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day53-oracle-2/"/>
    <id>http://zhpooer.github.io/2014/07/08/传智播客day53-oracle-2/</id>
    <published>2014-07-08T11:06:52.000Z</published>
    <updated>2014-07-10T09:05:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">子查询</h1>
<p>解决不能一步求解的问题</p>
<p>注意问题</p>
<ol>
<li>括号</li>
<li>合理的书写风格</li>
<li>可以在主查询的 where select from having 后面放子查询</li>
<li>不可以在主查询的 group by后面放置子查询</li>
<li>强调from后面的子查询</li>
<li>主查询和子查询可以不是同一张表, 只要子查询返回结果</li>
<li>一般不在子查询中使用 order by, 但在 Top-N 分析问题中使用排序</li>
<li>一般先执行子查询, 在执行主查询；但相关子查询除外</li>
<li>单行子查询只能使用单行操作符, 多行子查询只能使用多行操作符</li>
<li>子查询中的null</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'scott'</span>);</span>

<span class="comment">-- 单行子查询, 只返回一条记录</span>
<span class="operator"><span class="keyword">select</span> ename, sal, (<span class="keyword">select</span> job <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7389</span>) <span class="keyword">from</span> emp;</span>

<span class="comment">-- 强调 from 后面的子查询</span>
<span class="comment">-- 查询员工的姓名和薪水</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp);</span>
<span class="comment">-- 查询员工的姓名和薪水,年薪</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> ename, sal, sal*<span class="number">12</span> annlsal <span class="keyword">from</span> emp);</span>

<span class="comment">-- 6. 主查询和子查询可以不是同一张表, 只要子查询返回结果</span>
<span class="comment">-- 查询部门名称为sales的员工信息</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno =
    (<span class="keyword">select</span> depton <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'sales'</span>);</span>
<span class="comment">-- 也可以使用多表查询</span>
<span class="comment">-- 优化5: 理论上, 尽量使用多表查询</span>

<span class="comment">-- 9. 单行子查询只能使用单行操作符, 多行子查询只能使用多行操作符</span>
<span class="comment">-- 单行操作符: &gt; = &lt;</span>
<span class="operator"><span class="keyword">select</span> department_id, <span class="aggregate">min</span>(salary)
<span class="keyword">from</span> employees
<span class="keyword">group</span> <span class="keyword">by</span> department_id
<span class="keyword">having</span> <span class="aggregate">min</span>(salary) &gt;
    (<span class="keyword">select</span> <span class="aggregate">min</span>(salary) <span class="keyword">from</span> employees <span class="keyword">where</span> department_id=<span class="number">50</span>);</span>

<span class="comment">-- 多行比较操作: in 在集合中</span>
<span class="comment">-- 查询部门名称是 sales 和 accounting 的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span>
    (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'sales'</span> <span class="keyword">or</span> dname=<span class="string">'accounting'</span>);</span>
    
<span class="comment">-- any: 在集合中的任意一个值比较</span>
<span class="comment">-- 查询工资比30号部门任意一个员工高的部门( &gt; ( min() ))</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="keyword">any</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>);</span>

<span class="comment">-- all: 和集合的所有值比较</span>
<span class="comment">-- 查询工资比30号部门所有工资高的员工信息( &gt; ( max() ))</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="keyword">all</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>);</span>


<span class="comment">-- 10. 子查询中的null</span>
<span class="comment">-- 多行中的null</span>

<span class="comment">-- 是老板的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">in</span> (<span class="keyword">select</span> mgr <span class="keyword">from</span> emp);</span>
<span class="comment">-- 不是老板的员工, not in (10, 20, null)</span>
<span class="comment">-- not in 意思是 不等于 所有, a!=null 永远为假</span>
<span class="comment">-- in 操作符 等同于 any</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span>
</pre></td></tr></table></figure>

<h1 id="-">集合运算</h1>
<p>操作两个或者多个集合</p>
<ul>
<li>并集: UNION/UNION ALL(相同的部分出现两次)</li>
<li>交集: INTERSECT</li>
<li>差集: MINUS</li>
</ul>
<p>注意问题</p>
<ol>
<li>参与运算的各个集合必须列数相同且类型一致</li>
<li>采用第一个集合的表头作为最后的表头</li>
<li>如果排序, 必须在每个排序后使用相同的 order by</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>
<span class="keyword">union</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span>;</span>

<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> rollup(deptno, job);</span>
<span class="comment">-- 等同于</span>
<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job
<span class="keyword">union</span>
<span class="keyword">select</span> deptno, to_char(<span class="keyword">null</span>), <span class="aggregate">sum</span>(sal) <span class="keyword">group</span> <span class="keyword">by</span> deptno
<span class="keyword">union</span>
<span class="keyword">select</span> to_number(<span class="keyword">null</span>), to_char(<span class="keyword">null</span>), <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> deptno;</span>

break on deptno skip 2;

<span class="comment">-- 优化6, 尽量不要使用集合运算 </span>

<span class="comment">-- 打开记录语句执行时间</span>
<span class="operator"><span class="keyword">set</span> timing <span class="keyword">on</span></span>
</pre></td></tr></table></figure>

<h1 id="-">课堂练习</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="comment">-- rownum 行号, 伪列</span>
<span class="comment">-- 1. 按照默认的顺序生成, 从小到达</span>
<span class="comment">-- 2. rownum 只能使用 &lt;=, &lt;, 不能使用 &gt;, &gt;=, 行号永远从1开始(像是 iterator )</span>
<span class="comment">-- 下面这条语句是错误的!!!!, 行号在 order by 后会乱序</span>
<span class="operator"><span class="keyword">select</span> rownum, empno, ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> rownum&lt;=<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span>

<span class="comment">-- 一: 找到员工表中工资最高的前三名, 分页显示可以这样用, 可以把里层的 rownum 取别名</span>
<span class="operator"><span class="keyword">select</span> rownum, empno, ename, sal
     (<span class="keyword">select</span> empno, ename, sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) <span class="keyword">where</span> rownum&lt;=<span class="number">3</span> ;</span>

<span class="comment">-- 二: 找到员工表中薪水大于本部门的薪水员工</span>
<span class="operator"><span class="keyword">select</span> e.empno, e.ename, e.sal, d.avgsal
<span class="keyword">from</span> emp e, (<span class="keyword">select</span> deptno, <span class="aggregate">avg</span>(sal) avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) d
<span class="keyword">where</span> e.deptno=d.deptno <span class="keyword">and</span> s.sal&gt;d.avgsal;</span>

<span class="comment">-- 相关子查询, 将主查询中的某个值, 作为参数传递给子查询</span>
<span class="operator"><span class="keyword">select</span> empno, ename, sal, (<span class="keyword">select</span> <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=e.deptno) avgsal
<span class="keyword">from</span> emp e
<span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=e.deptno);</span>

<span class="comment">-- 三, 统计每年入职的员工个数(不使用子查询)</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) Total, <span class="aggregate">sum</span>(decode(to_char(hiredate, <span class="string">'RR'</span>), <span class="string">'81'</span>),<span class="number">1</span>,<span class="number">0</span>),
<span class="aggregate">sum</span>(decode(to_char(hiredate, <span class="string">'RR'</span>), <span class="string">'82'</span>),<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">from</span> emp;</span>

<span class="comment">-- 四. 相关子查询</span>


<span class="comment">-- 五 1 =&gt; 1,2,3,4; 1 =&gt;张三, 2=&gt; 李四..; 1 =&gt; 张三, 李四</span>
<span class="comment">-- 组函数 wm_concat</span>
<span class="comment">-- select deptno, wm_concat(ename) names from emp group by deptno;</span>
<span class="operator"><span class="keyword">set</span> linesize <span class="number">200</span>;</span>

<span class="operator"><span class="keyword">select</span> ci_id, wm_concat(stu_name) <span class="keyword">names</span>
<span class="keyword">from</span> (
    <span class="keyword">select</span> ci_id, stu_name
    <span class="keyword">from</span> pm_stu s, pm_ci c
    <span class="keyword">where</span> instr(c.stu_ids, s.stu_id) &gt; <span class="number">0</span>
) <span class="keyword">group</span> <span class="keyword">by</span> ci_id;</span>
</pre></td></tr></table></figure>

<h1 id="-">处理数据</h1>
<p>SQL 的类型</p>
<ol>
<li>DML(数据操作语句) : insert update delete select</li>
<li>DDL(数据定义语句) : create alter drop truncate </li>
<li>DCL(数据控制语言) : grant revoke</li>
</ol>
<h2 id="insert">insert</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, sal, dptno) <span class="keyword">values</span> (<span class="number">100</span>, <span class="string">'finance'</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span>

<span class="comment">-- 地址符 &, PreparedStatement</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, sal, deptno) <span class="keyword">values</span> (&empno, &ename, &sal, &deptno);</span>

<span class="operator"><span class="keyword">select</span> empno, ename, &t <span class="keyword">from</span> emp;</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> &t;</span>

<span class="comment">-- 批处理</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> emp10 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span>
<span class="comment">-- 一次性将emp中所有10号部门的员工插入到emp10</span>
<span class="comment">-- 将insert中加入子查询</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp10
  <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>;</span>

<span class="comment">-- 如果插入海量数据, 如何</span>
<span class="comment">-- 1. 数据bang (data dump)</span>
<span class="comment">-- 2. SQL*LOADER</span>
<span class="comment">-- 3. 外部表(External table)</span>
</pre></td></tr></table></figure>

<h2 id="update">update</h2>
<h2 id="delete-truncate">delete &amp; truncate</h2>
<p>delete和truncate区别</p>
<ol>
<li>delete 逐条删除; truncate先摧毁表, 再重建</li>
<li>delete是DML(可以回滚), truncate是DDL(不可以回滚)</li>
<li>delete不会释放空间, truncate 会</li>
<li>delete会产生碎片, truncate不会; 碎片会影响查询数据<pre><code> 去掉碎片
 1. alter table &lt;表名&gt; move; -- 如果数据庞大, 会消耗大量时间
 2. 数据导入和导出
</code></pre></li>
<li>delete可以闪回(被提交了,反悔), truncate不可以</li>
</ol>
<p>Oracle 中 delete 比 truncate 快</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 导入外部数据</span>
<span class="operator"><span class="keyword">set</span> feedback off;</span> <span class="comment">-- 关闭回显</span>
@d:\test.sql      <span class="comment">-- 导入</span>
<span class="comment">-- 开启运行时间回显</span>
<span class="operator"><span class="keyword">set</span> timing <span class="keyword">on</span>;</span>
</pre></td></tr></table></figure>

<h1 id="oracle-">Oracle 中的事务</h1>
<ol>
<li>起始标志: 该事务中的第一条DML语句</li>
<li>结束标志<pre><code> 提交: 
   1. 显式, commit
   2. 隐式, 正常退出exit或DDL, DCL
 回滚:
   1. 显式, rollback
   2. 隐式, 非正常退出
</code></pre></li>
</ol>
<h2 id="-">控制事务</h2>
<p>保存点(savepoint)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> testsavepoint
(tid <span class="keyword">number</span>
tname varchar2(<span class="number">20</span>));</span>
<span class="operator"><span class="keyword">set</span> feedback <span class="keyword">on</span>;</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testsavepoint <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'tom'</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testsavepoint <span class="keyword">values</span>(<span class="number">2</span>, mary<span class="string">');
-- 定义保存点
savepoint a;
-- some operator
rollback to savepoint a;</span></span>
</pre></td></tr></table></figure>

<h2 id="-">数据的隔离级别</h2>
<p>Oracle 只支持四个隔离级别中的两个</p>
<ol>
<li>READ COMMITED, 读已经提交事务</li>
<li>SERIALIZABLE, 串行化</li>
</ol>
<p>额外提供级别: <code>READONLY</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">-- 设置只读</span>
<span class="operator"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span>
</pre></td></tr></table></figure>

<h1 id="ddl-">DDL 语句</h1>
<p>管理数据库的对象</p>
<p>必须条件:</p>
<ol>
<li><code>create table</code> 权限</li>
<li>存储空间</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test1(
    tid <span class="keyword">number</span>,
    tname varchar2(<span class="number">20</span>),
    hiredate <span class="keyword">date</span> <span class="keyword">default</span> sysdate
);</span>

<span class="comment">-- rowid 行地址, 伪列, 相当于指针(指向数据)</span>
<span class="operator"><span class="keyword">select</span> rowid, empno, ename <span class="keyword">from</span> emp;</span>

<span class="comment">-- 用子查询创建表</span>
<span class="comment">-- 用一个永远为假的条件创建一个新的空表</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> emp10
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span>

<span class="comment">-- 修改表</span>
<span class="comment">-- 追加新列</span>
<span class="operator"><span class="keyword">alter</span> talbe test1 <span class="keyword">add</span> photo blob;</span>
<span class="comment">-- 修改列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 modify tname varchar2(<span class="number">40</span>);</span>
<span class="comment">-- 删除列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">drop</span> <span class="keyword">column</span> tname;</span>
<span class="comment">-- 重命名列</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> test1 rename <span class="keyword">column</span> tname <span class="keyword">to</span> username;</span>

<span class="comment">-- 重命名表</span>
<span class="operator">rename test1 <span class="keyword">to</span> test2;</span>

<span class="comment">-- 删除表</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> tab;</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">table</span> test2;</span>  <span class="comment">-- 并不是真的删除, 只是放到回收站</span>

<span class="comment">-- oracle的回收站</span>
<span class="comment">-- 查看</span>
<span class="operator"><span class="keyword">show</span> recyclebin;</span>
<span class="comment">-- 清空</span>
purge recyclebin;

<span class="comment">-- 不是每个用户都由回收站, 管理员没有回收站</span>

<span class="comment">-- 以管理员方式登陆</span>
<span class="comment">-- 以密码认证登陆</span>
sqlpus sys/password as sysdba;
<span class="comment">-- 主机认证登陆</span>
sqlplus / as sysdba
</pre></td></tr></table></figure>

<h2 id="-">约束</h2>
<p>类型</p>
<ul>
<li><p>CHECK, 检查性约束</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> test3 (
tid <span class="keyword">number</span>,
tname varchar2(<span class="number">20</span>),
-- 给约束起名字
gender varchar2(<span class="number">2</span>)
    <span class="keyword">constraint</span> emp_gender 
    <span class="keyword">check</span> (gender <span class="keyword">in</span>(<span class="string">'男'</span>, 女)),
salary <span class="keyword">number</span> <span class="keyword">check</span> (salary &gt; <span class="number">0</span>) 
);</span>
</pre></td></tr></table></figure>
</li>
<li><p>NOT NULL,</p>
</li>
<li>UNIQUE,</li>
<li>PRIMARY KEY,</li>
<li>FOREIGN KEY, 主表的外键必须是附表的主键<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>on <span class="operator"><span class="keyword">delete</span> <span class="keyword">cascade</span>;</span> 删除父表时, 级联删除子表记录
on <span class="operator"><span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span> 删除父表时, 相关外键记录设子为 null
</pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> student(
    sid <span class="keyword">number</span> <span class="keyword">constraint</span> student_PK <span class="keyword">primary</span> <span class="keyword">key</span>,
    sname varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> studnet_namenotnull <span class="keyword">not</span> <span class="keyword">null</span>,
    gender varcher2(<span class="number">2</span>) <span class="keyword">constraint</span> student_gender_check (gender <span class="keyword">in</span>(<span class="string">'男'</span>, <span class="string">'女'</span>)),
    email varchar2(<span class="number">40</span>) <span class="keyword">constraint</span> student_email_unique <span class="keyword">unique</span>
                       <span class="keyword">constraint</span> student_email_notnull <span class="keyword">not</span> <span class="keyword">null</span>,
    deptno <span class="keyword">number</span> <span class="keyword">constraint</span> student_FK refereces dept(deptno) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span>
);
<span class="comment">-- 可以把约束和表的创建分开</span>
</pre></td></tr></table></figure>

<h2 id="-view-">视图(view)</h2>
<p>从表中抽出的逻辑上相关的数据集合,
视图是基于表创建, 理解为存储起来的 select 语句,
<em>为了简化复杂查询</em>, 但是不能提高性能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="comment">-- 需要 create view 权限</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">view</span> <span class="keyword">to</span> scott;</span>

<span class="comment">-- 创建视图</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">view</span> empinfo
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp

<span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span>  empinfo
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp
<span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span>

<span class="operator"><span class="keyword">create</span> <span class="keyword">view</span> view10
<span class="keyword">as</span>
<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>
<span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span>
<span class="comment">-- with check option 会使下面语句不成功</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> view10 <span class="keyword">values</span>(****, <span class="number">20</span>);</span>

<span class="comment">-- 不建议通过视图对表进行修改</span>
<span class="comment">-- 通过视图修改数据有限制!!!!</span>

<span class="comment">-- 删除视图, 只是删除视图的定义, 不会删除表的数据</span>
<span class="operator"><span class="keyword">drop</span> <span class="keyword">view</span> viewname;</span>
</pre></td></tr></table></figure>

<h2 id="-sequence-">序列(sequence)</h2>
<p>可供多个用户用来产生唯一数值的数据库对象
(内存中的数组,默认长度20), 可以提高访问效率</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> sequence myseq
increment <span class="keyword">by</span> <span class="number">2</span>
<span class="keyword">start</span> <span class="keyword">with</span> <span class="number">2</span>
maxvalue <span class="number">10000</span>
minvalue <span class="number">1</span>
[cycle|nocycle]
[cache <span class="number">20</span> | nocache];</span>

<span class="operator"><span class="keyword">create</span> sequence myseql increment <span class="keyword">by</span> <span class="number">5</span> nochace;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> testseq(
    tid <span class="keyword">number</span>,
    tname varchar2(<span class="number">20</span>)
);</span>
<span class="comment">-- nextval 必须在 currval 之前</span>
<span class="operator"><span class="keyword">select</span> myseql.nextval <span class="keyword">from</span> dual;</span>
<span class="operator"><span class="keyword">select</span> myseql.currval <span class="keyword">from</span> dual;</span>

<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> testseq <span class="keyword">values</span>(myseq.nextval, <span class="string">'aa'</span>);</span>

<span class="comment">-- 修改序列</span>
<span class="comment">-- alter sequence ....;</span>
</pre></td></tr></table></figure>

<p>序列在某些情况下会出现裂缝</p>
<ul>
<li>回滚</li>
<li>系统异常</li>
<li>多个表同时使用同一序列</li>
</ul>
<h2 id="-index-">索引(index)</h2>
<p>通过指针加速查询</p>
<p>Oracle中的索引</p>
<ol>
<li>B树索引, 默认</li>
<li>位图索引</li>
</ol>
<p>什么时候建立索引</p>
<ol>
<li>列中数据值分布范围很广</li>
<li>列经常在where子句或连接条件中出现</li>
<li>表经常被访问且数据量很大</li>
</ol>
<p>不适合建立索引</p>
<ol>
<li>经常更新</li>
<li>表非常小</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 基于部门号创建索引表, 存储 rowid</span>
<span class="operator"><span class="keyword">create</span> index myindex <span class="keyword">on</span> emp(deptno);</span>

<span class="comment">-- 删除</span>
<span class="operator"><span class="keyword">drop</span> index myindex;</span>
</pre></td></tr></table></figure>

<h2 id="-">同义词, 别名</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> hr.employees;</span>

<span class="operator"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> hr.employees <span class="keyword">to</span> scott;</span>

<span class="comment">-- 为 hr.employees 取别名</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">create</span> synonym <span class="keyword">to</span> scott;</span>
<span class="operator"><span class="keyword">create</span> synonym hremp <span class="keyword">for</span> hr.employees;</span>
<span class="comment">-- 共有同义词</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">public</span> synonym hremp <span class="keyword">for</span> hr.employees;</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> hremp;</span>
</pre></td></tr></table></figure>

<h1 id="-">触发器</h1>
<p>数据库触发器是一个表相关的, 存储的 PL/SQL程序,
每当一个特定你的数据操作语句(Insert, update, delete)在指定的表上发出时,
Oracle 在动地执行触发器中定义的语句序列</p>
<p>触发器可用于:</p>
<ul>
<li>数据确认</li>
<li>实施复杂的安全性检查</li>
<li>做审计(日志), 跟踪表上所作的数据操作等</li>
<li>数据的备份和同步</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 每当插入语句之后, 打印一条语句</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> sayNewEmp
<span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> emp
<span class="keyword">declare</span>
<span class="keyword">begin</span>
    dbms_output.put_line(<span class="string">'成功插入语句'</span>);</span>
<span class="operator"><span class="keyword">end</span>;</span>

<span class="operator"><span class="keyword">create</span> [<span class="keyword">or</span> <span class="keyword">replace</span>] <span class="keyword">trigger</span>
{<span class="keyword">before</span> | <span class="keyword">after</span>}
{<span class="keyword">delete</span> | <span class="keyword">insert</span> | <span class="keyword">update</span> [<span class="keyword">of</span> 列名]}
<span class="keyword">on</span> 表名
[<span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> [<span class="keyword">when</span> 条件]] -- 开始行级触发器
<span class="keyword">end</span></span>
</pre></td></tr></table></figure>

<p>触发器的类型</p>
<ul>
<li>语句级触发器, 针对的是表</li>
<li>行级触发器, 针对的是行, 提供伪列 :new :old</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">-- 语句级触发一次</span>
<span class="comment">-- 行级触发器触发n次</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> emp10 <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> emp=<span class="number">10</span>;</span>
</pre></td></tr></table></figure>

<h2 id="-">触发器应用</h2>
<p>实施复杂安全性检查:
禁止在非工作时间插入新员工</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">-- 周末: to_char(sysdate, 'day') in ('星期六', '星期日')</span>
<span class="comment">-- 上班前,  to_number(to_char(sysdate, 'hh24')) not between 9 and 18;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> securityemp
<span class="keyword">before</span> <span class="keyword">insert</span>
<span class="keyword">on</span> emp
<span class="keyword">begin</span>
    <span class="keyword">if</span> to_char(sysdate, <span class="string">'day'</span>) <span class="keyword">in</span> (<span class="string">'星期六'</span>, <span class="string">'星期日'</span>) <span class="keyword">or</span>
       to_number(to_char(sysdate, <span class="string">'hh24'</span>)) <span class="keyword">not</span> between <span class="number">9</span> <span class="keyword">and</span> <span class="number">18</span> <span class="keyword">then</span>
       -- 错误代码必须在 <span class="number">20000</span> - <span class="number">50000</span>
       raize_application_error(-<span class="number">20001</span>, <span class="string">'不能在非工作时间插入新员工'</span>)
    <span class="keyword">end</span> <span class="keyword">if</span>;</span>
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<p>数据确认: 涨后的工资不能少于涨前的工资</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> checksal
<span class="keyword">before</span> <span class="keyword">update</span>
<span class="keyword">on</span> emp
<span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> 
<span class="keyword">begin</span>
    <span class="keyword">if</span> :new.sal &lt; :old.sal <span class="keyword">then</span>
        raise_application_error(-<span class="number">20002</span>, <span class="string">' 涨后的工资不能少于涨前的工资'</span>);</span>
    <span class="operator"><span class="keyword">end</span> <span class="keyword">if</span>;</span>
<span class="operator"><span class="keyword">end</span>;</span>
</pre></td></tr></table></figure>

<h1 id="-">数据字典</h1>
<p>需要知道自己的权限, 自己的信息, 数据库本身的信息, 这些信息被放在 数据字典</p>
<ul>
<li>基本表: 描述数据库信息</li>
<li>用户表: 用户自定义信息</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> dictionary;</span> <span class="comment">-- 描述基本表的信息</span>

<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> user_tables;</span>
</pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数据字典的命名规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>用户自己的</td>
</tr>
<tr>
<td>ALL</td>
<td>用户可以访问到的</td>
</tr>
<tr>
<td>DBA</td>
<td>管理员视图</td>
</tr>
<tr>
<td>V$</td>
<td>性能相关数据</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">-- 加注释</span>
comment on table emp is '这是员工信息表'
<span class="comment">-- 查看注释</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> user_tab_comments <span class="keyword">where</span> table_name=<span class="string">'EMP'</span>;</span>
</pre></td></tr></table></figure>

<!-- 老师号码: 13488899975 -->
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day52-oracle]]></title>
    <link href="http://zhpooer.github.io/2014/07/08/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day52-oracle/"/>
    <id>http://zhpooer.github.io/2014/07/08/传智播客day52-oracle/</id>
    <published>2014-07-08T01:03:35.000Z</published>
    <updated>2014-07-08T11:03:11.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jdbc-">jdbc连接方式</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment"># 普通连接方式, 使用 sql develope</span>
<span class="symbol">jdbc:</span><span class="symbol">oracle:</span><span class="symbol">thin:</span><span class="variable">@localhost</span><span class="symbol">:</span><span class="number">1521</span><span class="symbol">:orcl</span>
<span class="comment"># 通过客户机, 连接oracle, 可用于用于集群</span>
<span class="comment"># 可以使用 pl/sql develope</span>
<span class="symbol">jdbc:</span><span class="symbol">oracle:</span><span class="symbol">oci:</span><span class="variable">@localhost</span><span class="symbol">:</span><span class="number">1521</span><span class="symbol">:orcl</span>

<span class="comment"># 网页管理员登陆 user: sys</span>
<span class="comment"># 从命令行登陆</span>
sqlplus scott/tiger<span class="variable">@localhost</span><span class="symbol">:</span><span class="number">1521</span>/orcl
</pre></td></tr></table></figure>

<h1 id="-">基本概念</h1>
<ul>
<li>一个 oracle 服务器是一个数据管理系统(RDBMS), 提供完整的信息管理</li>
<li>有一个 Oracle 数据库(物理存在于硬盘上的文件)和多个 Oracle 实例组成(通过内存实例操作物理数据库)</li>
<li>可以多个内存实例(不同机器上集群RAC)操作同一个物理数据库</li>
</ul>
<p>集群优点:</p>
<ul>
<li>负载均衡(load balance)</li>
<li>失败迁移(fail over)</li>
</ul>
<p>基本通行</p>
<ul>
<li>内存实例通过同时操作系统读,写进程与物理数据库通信</li>
<li>两阶段提交, 客户端提交到 PGA(内存实例中), PGA提交到SGA(system global area), SGA最终提交到物理数据库</li>
</ul>
<h1 id="oracle-">Oracle 三级考试</h1>
<ul>
<li>OCA:<ol>
<li>SQL</li>
<li>管理1</li>
</ol>
</li>
<li>OCP:<ol>
<li>管理2</li>
</ol>
</li>
<li>OCM</li>
</ul>
<h1 id="select-">select语句</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="comment">-- spool 保留操作步骤到文本文件</span>
spool d:\基本查询.txt
<span class="comment">-- 执行操作内容</span>
spool off   <span class="comment">-- 关闭操作</span>

<span class="operator"><span class="keyword">show</span> <span class="keyword">user</span>;</span>  <span class="comment">-- 当前用户</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> tab;</span> <span class="comment">-- 当前用户下的表</span>
desc emp; <span class="comment">-- 员工表的结构</span>

<span class="comment">-- 查询员工的所有记录</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">from</span> emp;</span>
<span class="comment">-- 设置行宽</span>
<span class="operator"><span class="keyword">set</span> linesize <span class="number">150</span>;</span>
<span class="comment">-- 设置列宽</span>
col ename format a8   <span class="comment">-- a字符串, 8代表8位</span>
cal sal for 9999  <span class="comment">-- 四个数字</span>
<span class="comment">-- 执行上一条语句</span>
/
<span class="comment">-- 清屏</span>
host cls

<span class="comment">-- 改变上一条语句中的错误</span>
change
2             <span class="comment">-- 选择第二行</span>
c /form/from  <span class="comment">-- 改变</span>
/             <span class="comment">-- 执行</span>

<span class="comment">/* sql 空值: 是无效的, 未指定的值都为空值, 不是0, 也不是空格
1. 包含空值的表达式都为空, 可以使用 `nvl(a, b)` 函数
2. 空值永远不等于空
*/</span>
<span class="comment">-- 查询 年工资, 奖金, 年收入</span>
<span class="comment">-- 如果奖金为空, 年收入为空</span>
<span class="operator"><span class="keyword">select</span> empno, sal*<span class="number">12</span>, comm, sal*<span class="number">12</span>+comm;</span>
<span class="comment">-- 应该这么写</span>
<span class="operator"><span class="keyword">select</span> empno, sal*<span class="number">12</span>, comm, sal*<span class="number">12</span>+nvl(comm,<span class="number">0</span>);</span>

<span class="comment">-- 空值永远不等于空</span>
<span class="comment">-- 这句话查询返回永远为空</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm=<span class="keyword">null</span>;</span>
<span class="comment">-- 应该这样</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">null</span>;</span>

<span class="comment">-- 导出上一条语句到文件</span>
ed

<span class="comment">-- 别名</span>
<span class="operator"><span class="keyword">select</span> empno <span class="keyword">as</span> <span class="string">"员工号"</span>, ename <span class="string">"姓名"</span>, sal 月薪 <span class="keyword">from</span> emp;</span>

<span class="comment">-- 去除重复, distinct 作用与后面所有的列</span>
<span class="operator"><span class="keyword">select</span> <span class="keyword">distinct</span> job form emp</span>
</pre></td></tr></table></figure>

<p>SQL优化</p>
<ol>
<li>尽量使用列名代替 <code>*</code></li>
</ol>
<h1 id="-">连接符</h1>
<p>连接符: <code>||</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">-- oracle 中 select 必须有 from 关键字</span>
<span class="comment">-- 所以为满足如下要求, dual 为 伪表, </span>
<span class="operator"><span class="keyword">select</span> concat(<span class="string">'hello'</span>, <span class="string">'world'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- 查询员工信息, ***的薪水是***</span>
<span class="operator"><span class="keyword">select</span> ename||<span class="string">'薪水是'</span>|| sal <span class="keyword">from</span> emp;</span>

<span class="comment">-- 字符串</span>
</pre></td></tr></table></figure>

<p>字符串: 表示一个字符, 数字, 日期</p>
<ul>
<li>日期 只能用单引号表示</li>
</ul>
<h1 id="sql-sql-plus">SQL 和 SQL*Plus</h1>
<p>SQL命令, 一种语言, 标准语句, 不能缩写</p>
<pre><code>insert
update
delete
select
</code></pre><p>plus: 一种环境, oracle特性, 能缩写</p>
<pre><code>edit        ed
change      c
description desc
</code></pre><p><code>iSQL*plus</code>: SQL*PLUS 命令行的网页版功能, 只在 9i 和 10g 提供,
使用 sql-develope 提供类似功能</p>
<ul>
<li><code>home1iSQL*Plus</code> 服务, 提供5560端口网页 <code>isql-plus</code> 服务</li>
<li><code>DBConsolerorcl</code>, 提供1158端口网页登陆</li>
</ul>
<ul>
<li>字符串大小写敏感</li>
<li>日期格式敏感<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">-- 不符合格式, 是字符串</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> hiredate=<span class="string">'1981-11-17'</span>;</span>
<span class="comment">-- 符合日期格式 DD-MON-RR</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> hiredate=<span class="string">'17-11月-81'</span>;</span>

<span class="comment">-- 在数据字典中, 查看日期格式</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> v$nls_parameters;</span>
<span class="comment">-- 改变日期格式</span>
<span class="operator"><span class="keyword">alter</span> <span class="keyword">session</span>|system <span class="keyword">set</span> NLS_DATE_FORMATE=<span class="string">'yyyy-mm-dd'</span>;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<p>赋值使用 <code>:=</code></p>
<p>比较运算符</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">-- 查询 薪水1000~2000的用户</span>
<span class="comment">-- between 2000 and 1000, 错误!!</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal between <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span>;</span>

<span class="comment">-- not in,如果集合含有 null, 不能使用 not in, 但是可以使用 in</span>

<span class="comment">-- like 模糊查询, 查询以S打头的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp wereh ename <span class="keyword">like</span> <span class="string">'S%'</span>;</span>
<span class="comment">-- 名字是四个空格</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp wereh ename <span class="keyword">like</span> <span class="string">'    '</span>;</span>

<span class="comment">-- 查询名字中含有下划线的员工</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%_%'</span>;</span> <span class="comment">-- 错误, 代表任意长度的任意字符串</span>
<span class="comment">-- 使用转义字符</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%\_%'</span> <span class="keyword">escape</span> <span class="string">'\';

-- Oracle 自动开始事务, 所有的操作都自动开启</span></span>
</pre></td></tr></table></figure>

<p>sql优化2, <code>where</code> 解析顺序, 从右往左, 尽量为假的放到右边</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">-- 先 condition2</span>
<span class="keyword">where</span> condition1 <span class="keyword">and</span> condition2
<span class="comment">-- 先 conditiong1</span>
<span class="keyword">where</span> condition2 <span class="keyword">and</span> condition1
</pre></td></tr></table></figure>

<h1 id="-">排序</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">-- order by + 列, 表达式, 别名, 序号(下标从1开始)</span>
<span class="comment">-- 查询员工信息, 按照月薪排序</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;</span>

<span class="operator"><span class="keyword">select</span> empno, ename, sal, sal*<span class="number">12</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="keyword">desc</span>;</span>

<span class="comment">-- 多个列的排序</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno , sal <span class="keyword">desc</span>;</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span>, sal <span class="keyword">desc</span>;</span>

<span class="comment">-- 查询员工信息, 按照奖金排序</span>
<span class="comment">-- null的排序, 升序 空值排在最后, 降序 控制排在前面</span>

<span class="comment">-- 指定所有的空值排在最后</span>
<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> comm <span class="keyword">desc</span> nulls <span class="keyword">last</span>;</span>
</pre></td></tr></table></figure>

<h1 id="-">单行函数</h1>
<p>函数接受输入, 产生输出分为单行函数和多行函数</p>
<p>单行函数, 只对一行进行变换, 产生结果</p>
<ul>
<li><p>字符</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">-- 字符函数</span>
<span class="operator"><span class="keyword">select</span> lower(<span class="string">'HELLO WORLD'</span>) 转小写, upper(<span class="string">'hello world'</span>) 大写, initcap(<span class="string">'hello'</span>) 首字母大写 <span class="keyword">from</span> dual;</span>

<span class="comment">-- substr(a,b),从a中 第b位开始取值</span>
<span class="operator"><span class="keyword">select</span> substr(<span class="string">'hello world'</span>, <span class="number">3</span>) <span class="keyword">from</span> dual;</span>
<span class="comment">-- 第三位开始取, 取四位</span>
<span class="operator"><span class="keyword">select</span> substr(<span class="string">'hello world'</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- length 字符数, lengthb 字节数</span>
<span class="operator"><span class="keyword">select</span> length(<span class="string">"上海"</span>) 字符, lengthb(<span class="string">"上海"</span>) 字节数 <span class="keyword">from</span> dual;</span>

<span class="comment">-- instr(a, b), 在 a 中, 查找b, 找到返回下标, 否则返回0</span>
<span class="operator"><span class="keyword">select</span> instr(<span class="string">'hello world'</span>, <span class="string">'11'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- lpad 左填充, rpad 右填充</span>
<span class="operator"><span class="keyword">select</span> lpad(<span class="string">'abcd'</span>, <span class="number">10</span>, <span class="string">'*'</span>), rpad(<span class="string">'abcd'</span> <span class="number">10</span>, <span class="string">'*'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- trim 去掉前后指定的字符</span>
<span class="operator"><span class="keyword">select</span> trim(<span class="string">'H'</span> <span class="keyword">from</span> <span class="string">'Hello WorldH'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- replace 替换</span>
<span class="operator"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="string">'hello world'</span>, <span class="string">'l'</span>, <span class="string">'*'</span>) <span class="keyword">from</span> dual;</span>
</pre></td></tr></table></figure>
</li>
<li><p>数值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">-- round 四舍五入</span>
<span class="operator"><span class="keyword">select</span> round(<span class="number">45.926</span>, <span class="number">2</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 45.93</span>
<span class="operator"><span class="keyword">select</span> round(<span class="number">45.926</span>, <span class="number">1</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 45.9</span>
<span class="operator"><span class="keyword">select</span> round(<span class="number">45.926</span>, <span class="number">0</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 46</span>
<span class="operator"><span class="keyword">select</span> round(<span class="number">45.926</span>, -<span class="number">1</span>) <span class="keyword">from</span> dual;</span> <span class="comment">-- 50</span>
<span class="operator"><span class="keyword">select</span> round(<span class="number">45.926</span>, -<span class="number">2</span>) <span class="keyword">from</span> dual;</span> <span class="comment">-- 0</span>
<span class="comment">-- trunc 截断</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="number">45.926</span>, <span class="number">2</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 45.92</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="number">45.926</span>, <span class="number">1</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 45.9</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="number">45.926</span>, <span class="number">0</span>) <span class="keyword">from</span> dual;</span>  <span class="comment">-- 45</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="number">45.926</span>, -<span class="number">1</span>) <span class="keyword">from</span> dual;</span> <span class="comment">-- ??</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="number">45.926</span>, -<span class="number">2</span>) <span class="keyword">from</span> dual;</span> <span class="comment">-- ??</span>
<span class="comment">-- mod 求余数</span>
</pre></td></tr></table></figure>
</li>
<li><p>日期, date = date + time</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">-- 系统时间 mysql:: select date();</span>
<span class="operator"><span class="keyword">select</span> sysdate <span class="keyword">from</span> dual;</span>

<span class="comment">-- 格式化显示时间</span>
<span class="operator"><span class="keyword">select</span> to_char(sysdate, <span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- 日期加上和减去一个数字结果仍然为数字, 但日期加日期没有意义</span>
<span class="operator"><span class="keyword">select</span> (sysdate-<span class="number">1</span>) 昨天, sysdate 今天, (sysdate+<span class="number">1</span>) 明天 <span class="keyword">from</span> dual;</span>

<span class="comment">-- 计算员工工龄, 天, 星期, 月, 年</span>
<span class="operator"><span class="keyword">select</span> ename, hiredate, (sysdate-hiredate) 天, (sysdate-hiredate)/<span class="number">7</span> 星期, (sysdate-hiredate)/<span class="number">30</span> 月 <span class="keyword">from</span> emp;</span>

<span class="comment">-- months_between</span>
<span class="operator"><span class="keyword">select</span> months_between(sysdate, hiredate) <span class="keyword">from</span> emp;</span>
<span class="comment">-- add_months</span>
<span class="operator"><span class="keyword">select</span> months_between(sysdate, <span class="number">78</span>) <span class="keyword">from</span> dual;</span>
<span class="comment">-- last_day, 日期所在月份的最后一天</span>
<span class="operator"><span class="keyword">select</span> last_day(sysdate) <span class="keyword">from</span> dual;</span>
<span class="comment">-- next_day, 指定日期的下一个日期</span>
<span class="operator"><span class="keyword">select</span> next_day(sysdate,<span class="string">'星期二'</span>) <span class="keyword">from</span> dual;</span> <span class="comment">-- 下个星期二</span>
<span class="comment">-- 可以使用 next_day 每个星期一自动备份数据</span>

<span class="comment">-- 四舍五入和截断</span>
<span class="operator"><span class="keyword">select</span> round(<span class="string">'25-JUL-95'</span>, <span class="string">'MONTH'</span>) <span class="keyword">from</span> dual;</span> 
<span class="operator"><span class="keyword">select</span> round(<span class="string">'25-JUL-95'</span>, <span class="string">'YEAR'</span>) <span class="keyword">from</span> dual;</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="string">'25-JUL-95'</span>, <span class="string">'MONTH'</span>) <span class="keyword">from</span> dual;</span>
<span class="operator"><span class="keyword">select</span> trunc(<span class="string">'25-JUL-95'</span>, <span class="string">'YEAR'</span>) <span class="keyword">from</span> dual;</span>
</pre></td></tr></table></figure>
</li>
<li><p>转换, 分为隐私(oracle自己完成)和显示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno=<span class="string">'5'</span>;</span> <span class="comment">-- 隐式转换, ok</span>

<span class="comment">-- 转换函数</span>
<span class="comment">-- TO_CHAR</span>
<span class="comment">-- TO_NUMBER 反过来</span>
<span class="comment">-- TO_DATE</span>

<span class="operator"><span class="keyword">select</span> to_char(sysdate, <span class="string">'yyyy-mm-dd hh24:mi:ss"今天是"day'</span>) <span class="keyword">from</span> dual;</span>

<span class="comment">-- 查询员工函数</span>
<span class="operator"><span class="keyword">select</span> to_char(sal,<span class="string">'L9999.99'</span>) <span class="keyword">from</span> emp;</span>
</pre></td></tr></table></figure>
</li>
<li><p>通用函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>-- NVL(expr1, expr2), 当为空时, 返回被圈
select nvl(ename, <span class="string">'no name'</span>) from dual; 
-- NVL2(a, b, c);  a 为空时, 返回c, 否则返回b
-- NULLIF(a, b)  当a=b时, 返回null, 否则返回a
-- coalesce(expr1, expr2, <span class="keyword">...</span>, exprn), 从左往右返回不为空的值
</pre></td></tr></table></figure>
</li>
<li><p>条件表达式, <code>case</code>和<code>decode</code>(ORACLE)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">-- 给员工涨工资, 总裁 1000, 经理800, 其他 400</span>
<span class="operator"><span class="keyword">select</span> ename, job, sal 涨前,
    <span class="keyword">case</span> job <span class="keyword">when</span> <span class="string">'prresident'</span> <span class="keyword">then</span> sal + <span class="number">1000</span>
             <span class="keyword">when</span> <span class="string">'manager'</span> <span class="keyword">then</span> sal + <span class="number">800</span>
             <span class="keyword">else</span> sal + <span class="number">400</span>
    <span class="keyword">end</span> 涨后
<span class="keyword">from</span> emp;</span>
<span class="operator"><span class="keyword">select</span> ename, job, sal 涨前,
    decode(job, <span class="string">'president'</span>, sal+<span class="number">1000</span>
                 <span class="string">'manager'</span>, sal + <span class="number">800</span>
                 sal+<span class="number">400</span>)
    涨后
<span class="keyword">from</span> emp;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<table>
<thead>
<tr>
<th>日期的格式化</th>
</tr>
</thead>
<tbody>
<tr>
<td>YYYY</td>
<td>数字年</td>
<td>2001</td>
</tr>
<tr>
<td>YEAR</td>
<td>年的全称</td>
<td>two Thousand year</td>
</tr>
<tr>
<td>MM</td>
<td>两位数字</td>
<td>08</td>
</tr>
<tr>
<td>MONTH</td>
<td>月的全称</td>
<td>JULY</td>
</tr>
<tr>
<td>DY</td>
<td>三个字符串表示</td>
<td>星期二</td>
</tr>
<tr>
<td>DAY</td>
<td>天气的全称</td>
<td>星期二</td>
</tr>
<tr>
<td>DD</td>
<td>数字</td>
<td>02</td>
</tr>
</tbody>
</table>
<p></br></p>
<table>
<thead>
<tr>
<th>数字格式化</th>
</tr>
</thead>
<tbody>
<tr>
<td>9</td>
<td>一位数字</td>
</tr>
<tr>
<td>0</td>
<td>零</td>
</tr>
<tr>
<td>$</td>
<td>美元符</td>
</tr>
<tr>
<td>L</td>
<td>本地货币福</td>
</tr>
<tr>
<td>.</td>
<td>小数点</td>
</tr>
<tr>
<td>,</td>
<td>千位符</td>
</tr>
</tbody>
</table>
<p>oracle 数据备份演示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>rman target /
<span class="blockquote">&gt; backup database;</span>
<span class="blockquote">&gt; recover database;</span>
</pre></td></tr></table></figure>

<h1 id="-">多行函数</h1>
<p>组函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp;</span>
<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(*) <span class="keyword">from</span> emp;</span>

<span class="comment">-- 两条语句效果一样</span>
<span class="comment">-- 平均工资</span>
<span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(sav)/<span class="aggregate">count</span>(*) , <span class="aggregate">avg</span>(sav)<span class="keyword">from</span> emp;</span>

<span class="comment">-- 平均奖金, 第一个函数 和 后面两个结果不一样</span>
<span class="comment">-- count(comm) 奖金不为空</span>
<span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(comm)/<span class="aggregate">count</span>(*), <span class="aggregate">sum</span>(comm)/<span class="aggregate">count</span>(comm), <span class="aggregate">avg</span>(comm) form emp;</span>

<span class="comment">-- 组函数自动滤空;可以嵌套虑空函数, 屏蔽过滤</span>
<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(nvl(comm,<span class="number">0</span>)) <span class="keyword">from</span> emp;</span>

<span class="operator"><span class="keyword">select</span> <span class="aggregate">count</span>(<span class="keyword">distinct</span> comm) <span class="keyword">from</span> emp
-- <span class="aggregate">max</span>
-- <span class="aggregate">min</span></span>
</pre></td></tr></table></figure>

<p>分组数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">-- 每个部门的平均工资</span>
<span class="operator"><span class="keyword">select</span> deptno, <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span>

<span class="comment">-- 在select 列表中, 所有未包含在组函数的列必须包含在 group by 中</span>
<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job;</span>

<span class="comment">-- 求平均工资大于</span>
<span class="comment">-- where 和 having 最大的区别是 where 不能存在组函数</span>
<span class="operator"><span class="keyword">select</span> deptno, <span class="aggregate">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="aggregate">avg</span> &gt; <span class="number">1000</span>;</span>

<span class="comment">-- group by 语句增强</span>
<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) emp <span class="keyword">group</span> <span class="keyword">by</span> deptno, job;</span>
<span class="operator"><span class="keyword">select</span> deptno, <span class="aggregate">sum</span>(sal) emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span>
<span class="operator"><span class="keyword">select</span> <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> dept;</span>
<span class="comment">-- 合成这三句, 分类汇总</span>
<span class="operator"><span class="keyword">select</span> deptno, job, <span class="aggregate">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> rollup(deptno, jo)
-- <span class="keyword">group</span> rollup(a, b) == <span class="keyword">group</span> <span class="keyword">by</span> a, b + <span class="keyword">group</span> <span class="keyword">by</span> a , <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">null</span>
-- 对上面的语句, 设置显示模式
break <span class="keyword">on</span> deptno skip <span class="number">2</span>;</span>
break on null;
</pre></td></tr></table></figure>

<h1 id="-">多表查询</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">-- 等值连接</span>
<span class="comment">-- 查询员工信息, 员工号, 姓名, 月薪, 部门名称</span>
<span class="operator"><span class="keyword">select</span> e.empno, e.ename, e.sal, e.dname <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.deptno=d.deptno;</span>
<span class="comment">-- 不等值连接, 查询员工的级别</span>
<span class="operator"><span class="keyword">select</span> e.empno, e.ename, e.sal, e.salgrade <span class="keyword">from</span> emp e, salgrade s <span class="keyword">where</span> s.sal beween s.losal <span class="keyword">and</span> s.hisal;</span>

<span class="comment">-- 外连接</span>
<span class="comment">-- 按部门统计员工信息: 部门号, 部门名称, 人数</span>

<span class="comment">-- 错误查询语句,</span>
<span class="operator"><span class="keyword">select</span> d.deptno, d.dname, <span class="aggregate">count</span>(e.empno) 
<span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.deptno=d.deptno
<span class="keyword">group</span> <span class="keyword">by</span> d.deptno, d.dname;</span>
<span class="comment">-- 正确查询语句</span>
<span class="comment">-- 左外连接: where e.deptno=d.deptno(+)</span>
<span class="comment">-- 右外连接: where e.deptno(+)=d.deptno   (上面的语句要这这个语句)</span>

<span class="comment">-- 自连接</span>
<span class="comment">-- 查询员工信息: 员工姓名, 老板姓名</span>
<span class="operator"><span class="keyword">select</span> e.ename 员工, b.emane 老板
<span class="keyword">from</span> emp e, emp b
<span class="keyword">where</span> e.mgr=b.empno;</span>

<span class="comment">-- 只要是多表查询, 就会产生笛卡尔积</span>
<span class="comment">-- 自连接不适合操作大表</span>

<span class="comment">-- 层次查询, 只有一张表, 是一个单表查询</span>
<span class="comment">-- 当我们查询数据满足一颗树, 可以用层次查询</span>
<span class="comment">-- prior: 上一层, start:从这个节点遍历子节点, 可以设置任意节点, 如果是全部节点, 选根节点</span>
<span class="comment">-- start with mgr is null; 层次提供 level 伪列</span>
<span class="operator"><span class="keyword">select</span> <span class="keyword">level</span>, empno, ename, sal, mgr <span class="keyword">from</span> emp <span class="keyword">connect</span> <span class="keyword">by</span> <span class="keyword">prior</span> empno=mgr <span class="keyword">start</span> <span class="keyword">with</span> empno=<span class="number">7566</span>;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="oracle" scheme="http://zhpooer.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-更多Monad]]></title>
    <link href="http://zhpooer.github.io/2014/07/05/haskell%E8%B6%A3%E5%AD%A6-%E6%9B%B4%E5%A4%9Amonad/"/>
    <id>http://zhpooer.github.io/2014/07/05/haskell趣学-更多monad/</id>
    <published>2014-07-05T13:54:04.000Z</published>
    <updated>2014-07-09T06:51:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="writer">Writer</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">-- 定义在 Control.Monad.Writer</span>
<span class="typedef"><span class="keyword">newtype</span> <span class="type">Writer</span> w a = <span class="type">Writer</span> <span class="container">{ <span class="title">runWriter</span> :: (<span class="title">a</span>, <span class="title">w</span>) }</span></span>
<span class="class">
<span class="keyword">instance</span> <span class="container">(<span class="type">Monoid</span> <span class="title">w</span>)</span> =&gt; <span class="type">Monad</span> <span class="container">(<span class="type">Writer</span> <span class="title">w</span>)</span> <span class="keyword">where</span></span>   
    return x = <span class="type">Writer</span> (x, mempty)   
    (<span class="type">Writer</span> (x,v)) &gt;&gt;= f = <span class="keyword">let</span> (<span class="type">Writer</span> (y, v')) = f x <span class="keyword">in</span> <span class="type">Writer</span> (y, v `mappend` v')

<span class="title">ghci</span>&gt; runWriter (return <span class="number">3</span> :: <span class="type">Writer</span> <span class="type">String</span> <span class="type">Int</span>)   
(<span class="number">3</span>,<span class="string">""</span>)   
<span class="title">ghci</span>&gt; runWriter (return <span class="number">3</span> :: <span class="type">Writer</span> (<span class="type">Sum</span> <span class="type">Int</span>) <span class="type">Int</span>)   
(<span class="number">3</span>,<span class="type">Sum</span> {getSum = <span class="number">0</span>})

<span class="comment">-- 使用 do 表达式</span>
<span class="import"><span class="keyword">import</span> Control.Monad.Writer   </span>
<span class="title">logNumber</span> :: <span class="type">Int</span> -&gt; <span class="type">Writer</span> [<span class="type">String</span>] <span class="type">Int</span>   
<span class="title">logNumber</span> x = <span class="type">Writer</span> (x, [<span class="string">"Got number: "</span> ++ show x])   
   
<span class="title">multWithLog</span> :: <span class="type">Writer</span> [<span class="type">String</span>] <span class="type">Int</span>   
<span class="title">multWithLog</span> = <span class="keyword">do</span>   
    a &lt;- logNumber <span class="number">3</span>   
    b &lt;- logNumber <span class="number">5</span>   
    return (a*b)

<span class="title">ghci</span>&gt; runWriter multWithLog   
(<span class="number">15</span>,[<span class="string">"Got number: 3"</span>,<span class="string">"Got number: 5"</span>])

<span class="comment">-- 使用 tell函数, 它的类型是 MonadWriter</span>
<span class="title">multWithLog</span> :: <span class="type">Writer</span> [<span class="type">String</span>] <span class="type">Int</span>   
<span class="title">multWithLog</span> = <span class="keyword">do</span>   
    a &lt;- logNumber <span class="number">3</span>   
    b &lt;- logNumber <span class="number">5</span>   
    tell [<span class="string">"Gonna multiply these two"</span>]   
    return (a*b)
</pre></td></tr></table></figure>

<h1 id="-writer-">使用Writer记录日志</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="label">gcd' ::</span> Int -&gt; Int -&gt; Int   
gcd' <span class="literal">a</span> b    
    | b == <span class="number">0</span>    = <span class="literal">a</span>   
    | otherwise = gcd' b (<span class="literal">a</span> <span class="escape">`m</span>od<span class="escape">` </span>b)

-- 记录log
<span class="label">gcd' ::</span> Int -&gt; Int -&gt; Writer [String] Int   
gcd' <span class="literal">a</span> b   
  | b == <span class="number">0</span> = do   
      tell [<span class="string">"Finished with "</span> ++ show <span class="literal">a</span>]   
      <span class="keyword">return</span> <span class="literal">a</span>   
  | otherwise = do   
      tell [show <span class="literal">a</span> ++ <span class="string">" mod "</span> ++ show b ++ <span class="string">" = "</span> ++ show (<span class="literal">a</span> <span class="escape">`m</span>od<span class="escape">` </span>b)]   
      gcd' b (<span class="literal">a</span> <span class="escape">`m</span>od<span class="escape">` </span>b)

ghci&gt; mapM_ putStrLn $ snd $ runWriter (gcd' <span class="number">8</span> <span class="number">3</span>)   
<span class="number">8</span> mod <span class="number">3</span> = <span class="number">2</span>   
<span class="number">3</span> mod <span class="number">2</span> = <span class="number">1</span>   
<span class="number">2</span> mod <span class="number">1</span> = <span class="number">0</span>   
Finished with <span class="number">1</span>
</pre></td></tr></table></figure>

<p>在上面的例子中使用<code>Writer</code>时, list append动作实际是这样的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="operator">a</span> ++ (b ++ (c ++ (d ++ (e ++ f))))
<span class="comment">-- 如果我们不小心使用使他变成下面这样的话, 效率不太高</span>
((((<span class="operator">a</span> ++ b) ++ c) ++ d) ++ e) ++ f

import Control.Monad.Writer   
gcdReverse :: Int -&gt; Int -&gt; Writer [String] Int   
gcdReverse <span class="operator">a</span> b   
    | b == <span class="number">0</span> = <span class="built_in">do</span>   
      tell [<span class="string">"Finished with "</span> ++ show <span class="operator">a</span>]   
      <span class="constant">return</span> <span class="operator">a</span>   
    | otherwise = <span class="built_in">do</span>   
      <span class="built_in">result</span> &lt;- gcdReverse b (<span class="operator">a</span> `<span class="operator">mod</span>` b)   
      tell [show <span class="operator">a</span> ++ <span class="string">" mod "</span> ++ show b ++ <span class="string">" = "</span> ++ show (<span class="operator">a</span> `<span class="operator">mod</span>` b)]   
      <span class="constant">return</span> <span class="built_in">result</span>
</pre></td></tr></table></figure>

<h1 id="difference-lists">Difference lists</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="label">newtype DiffList a = DiffList { getDiffList ::</span> [<span class="literal">a</span>] -&gt; [<span class="literal">a</span>] }
<span class="label">toDiffList ::</span> [<span class="literal">a</span>] -&gt; DiffList <span class="literal">a</span>   
toDiffList xs = DiffList (xs++)   
   
<span class="label">fromDiffList ::</span> DiffList <span class="literal">a</span> -&gt; [<span class="literal">a</span>]   
fromDiffList (DiffList f) = f []

instance Monoid (DiffList <span class="literal">a</span>) where   
    mempty = DiffList (\xs -&gt; [] ++ xs)   
    (DiffList f) <span class="escape">`m</span>append<span class="escape">` </span>(DiffList g) = DiffList (\xs -&gt; f (g xs))

ghci&gt; fromDiffList (toDiffList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="escape">`m</span>append<span class="escape">` </span>toDiffList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]

-- 用 difference list 来加速gcdReverse
import Control.Monad.Writer   
<span class="label">gcd' ::</span> Int -&gt; Int -&gt; Writer (DiffList String) Int   
gcd' <span class="literal">a</span> b   
  | b == <span class="number">0</span> = do   
      tell (toDiffList [<span class="string">"Finished with "</span> ++ show <span class="literal">a</span>])   
      <span class="keyword">return</span> <span class="literal">a</span>   
  | otherwise = do   
      result &lt;- gcd' b (<span class="literal">a</span> <span class="escape">`m</span>od<span class="escape">` </span>b)   
      tell (toDiffList [show <span class="literal">a</span> ++ <span class="string">" mod "</span> ++ show b ++ <span class="string">" = "</span> ++ show (<span class="literal">a</span> <span class="escape">`m</span>od<span class="escape">` </span>b)])   
      <span class="keyword">return</span> result
</pre></td></tr></table></figure>

<h1 id="reader-monad">Reader Monad</h1>
<p>TODO</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="comment">-- Functors</span>
<span class="title">ghci</span>&gt; <span class="keyword">let</span> f = (*<span class="number">5</span>)   
<span class="title">ghci</span>&gt; <span class="keyword">let</span> g = (+<span class="number">3</span>) 
<span class="title">ghci</span>&gt; (fmap f g) <span class="number">8</span>

<span class="comment">-- Functors 是 applictive</span>
<span class="title">ghci</span>&gt; <span class="keyword">let</span> f = (+) &lt;$&gt; (*<span class="number">2</span>) &lt;*&gt; (+<span class="number">10</span>) 
<span class="title">ghci</span>&gt; f <span class="number">3</span> 
<span class="number">19</span>

<span class="comment">-- Functors 是 Monad</span>
<span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="container">((-&gt;)</span> r) <span class="keyword">where</span></span>   
    return x = \_ -&gt; x   
    h &gt;&gt;= f = \w -&gt; f (h w) w <span class="comment">-- ???????</span>

<span class="import"><span class="keyword">import</span> Control.Monad.Instances   </span>
<span class="title">addStuff</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span>   
<span class="title">addStuff</span> = <span class="keyword">do</span>   
  a &lt;- (*<span class="number">2</span>)   
  b &lt;- (+<span class="number">10</span>)   
  return (a+b)
  
<span class="comment">-- 这样更清楚</span>
<span class="title">addStuff</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span>   
<span class="title">addStuff</span> x = <span class="keyword">let</span>   
    a = (*<span class="number">2</span>) x   
    b = (+<span class="number">10</span>) x   
    <span class="keyword">in</span> a+b
</pre></td></tr></table></figure>

<h1 id="state-monad">State Monad</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">type</span> <span class="type">Stack</span> = [<span class="type">Int</span>]   </span>
   
<span class="title">pop</span> :: <span class="type">Stack</span> -&gt; (<span class="type">Int</span>,<span class="type">Stack</span>)   
<span class="title">pop</span> (x:xs) = (x,xs)   
 
<span class="title">push</span> :: <span class="type">Int</span> -&gt; <span class="type">Stack</span> -&gt; ((),<span class="type">Stack</span>)   
<span class="title">push</span> a xs = ((),a:xs)

<span class="comment">-- 实际操作</span>
<span class="title">stackManip</span> :: <span class="type">Stack</span> -&gt; (<span class="type">Int</span>, <span class="type">Stack</span>)   
<span class="title">stackManip</span> stack = <span class="keyword">let</span>   
    ((),newStack1) = push <span class="number">3</span> stack   
    (a ,newStack2) = pop newStack1   
    <span class="keyword">in</span> pop newStack2
</pre></td></tr></table></figure>

<p>使用State Monad 来简化操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">newtype</span> <span class="type">State</span> s a = <span class="type">State</span> <span class="container">{ <span class="title">runState</span> :: <span class="title">s</span> -&gt; (<span class="title">a</span>,<span class="title">s</span>) }</span></span>
<span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="container">(<span class="type">State</span> <span class="title">s</span>)</span> <span class="keyword">where</span></span>   
    return x = <span class="type">State</span> $ \s -&gt; (x,s)   
    (<span class="type">State</span> h) &gt;&gt;= f = <span class="type">State</span> $ \s -&gt; <span class="keyword">let</span> (a, newState) = h s   
                                        (<span class="type">State</span> g) = f a   
                                    <span class="keyword">in</span>  g newState

<span class="comment">-- 在这里 一个操作被抽象出 State</span>
<span class="import"><span class="keyword">import</span> Control.Monad.State   </span>
<span class="title">pop</span> :: <span class="type">State</span> <span class="type">Stack</span> <span class="type">Int</span>   
<span class="title">pop</span> = <span class="type">State</span> $ \(x:xs) -&gt; (x,xs)

<span class="title">push</span> :: <span class="type">Int</span> -&gt; <span class="type">State</span> <span class="type">Stack</span> ()   
<span class="title">push</span> a = <span class="type">State</span> $ \xs -&gt; ((),a:xs)

<span class="comment">-- 最终可以这样使用   </span>
<span class="title">stackManip</span> :: <span class="type">State</span> <span class="type">Stack</span> <span class="type">Int</span>   
<span class="title">stackManip</span> = <span class="keyword">do</span>   
  push <span class="number">3</span>   
  a &lt;- pop   
  pop
</pre></td></tr></table></figure>

<h1 id="random-state">Random State</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="label">random ::</span> (RandomGen g, Random <span class="literal">a</span>) =&gt; g -&gt; (<span class="literal">a</span>, g)

import System.Random   
import Control.Monad.State   
<span class="label">randomSt ::</span> (RandomGen g, Random <span class="literal">a</span>) =&gt; State g <span class="literal">a</span>   
randomSt = State random

import System.Random   
import Control.Monad.State   
   
<span class="label">threeCoins ::</span> State StdGen (Bool,Bool,Bool)   
threeCoins = do   
  <span class="literal">a</span> &lt;- randomSt   
  b &lt;- randomSt   
  c &lt;- randomSt   
  <span class="keyword">return</span> (<span class="literal">a</span>,b,c)

ghci&gt; runState threeCoins (mkStdGen <span class="number">33</span>)   
((<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>),<span class="number">680029187</span> <span class="number">2103410263</span>)
</pre></td></tr></table></figure>

<h1 id="error-monad">Error Monad</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>instance (<span class="keyword">Error</span> e) =&gt; Monad (Either e) where   
    return x = <span class="built_in">Right</span> x    
    <span class="built_in">Right</span> x &gt;&gt;= f = f x   
    <span class="built_in">Left</span> <span class="built_in">err</span> &gt;&gt;= f = <span class="built_in">Left</span> <span class="built_in">err</span>   
    fail msg = <span class="built_in">Left</span> (strMsg msg)

ghci&gt; <span class="built_in">Left</span> <span class="string">"boom"</span> &gt;&gt;= \x -&gt; return (x+<span class="number">1</span>)   
<span class="built_in">Left</span> <span class="string">"boom"</span>   
ghci&gt; <span class="built_in">Right</span> <span class="number">100</span> &gt;&gt;= \x -&gt; <span class="built_in">Left</span> <span class="string">"no way!"</span>   
<span class="built_in">Left</span> <span class="string">"no way!"</span>
</pre></td></tr></table></figure>

<h1 id="functor-monad">functor 和 monad</h1>
<p>fucntors 是可以 map over的事务</p>
<p>applicative functors: 把一般的值放到一个缺省的 context中 (pure + map)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>liftM :: <span class="function"><span class="params">(Monad m)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> m a<span class="function"> -&gt;</span> m b
-- liftM函数, 接受 monadic value 然后 map over
fmap :: <span class="function"><span class="params">(Functor f)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> f a<span class="function"> -&gt;</span> f b

ghci&gt; liftM (*<span class="number">3</span>) (Just <span class="number">8</span>)   
Just <span class="number">24</span>   
ghci&gt; fmap (*<span class="number">3</span>) (Just <span class="number">8</span>)   
Just <span class="number">24</span>   
ghci&gt; runWriter $ liftM <span class="keyword">not</span> $ Writer (True, <span class="string">"chickpeas"</span>)   
(False,<span class="string">"chickpeas"</span>)   
ghci&gt; runWriter $ fmap <span class="keyword">not</span> $ Writer (True, <span class="string">"chickpeas"</span>)   
(False,<span class="string">"chickpeas"</span>)   
ghci&gt; runState (liftM (+<span class="number">100</span>) pop) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
(<span class="number">101</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])   
ghci&gt; runState (fmap (+<span class="number">100</span>) pop) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
(<span class="number">101</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])

-- liftM 具体实现, monad 包含 functor 和 applicative 的特性
liftM :: <span class="function"><span class="params">(Monad m)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> m a<span class="function"> -&gt;</span> m b   
liftM f m = m &gt;&gt;= (\x<span class="function"> -&gt;</span> <span class="keyword">return</span> (f x))

liftM :: <span class="function"><span class="params">(Monad m)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> m a<span class="function"> -&gt;</span> m b   
liftM f m = <span class="keyword">do</span>   
    x &lt;- m   
    <span class="keyword">return</span> (f x)
</pre></td></tr></table></figure>

<p>monad 和 applicative</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-- ap 相当于 applicative 中的 &lt;*&gt;, 
ap :: <span class="function"><span class="params">(Monad m)</span> =&gt;</span> m <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> m a<span class="function"> -&gt;</span> m b   
ap mf m = <span class="keyword">do</span>   
    f &lt;- mf   
    x &lt;- m   
    <span class="keyword">return</span> (f x)

-- liftM2 也做了相同的事情
liftA2 :: <span class="function"><span class="params">(Applicative f)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b -&gt; c)</span> -&gt;</span> f a<span class="function"> -&gt;</span> f b<span class="function"> -&gt;</span> f c   
liftA2 f x y = f &lt;$&gt; x &lt;*&gt; y
</pre></td></tr></table></figure>

<h1 id="join-function">join function</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="built_in">join</span> :: (Monad m) =&gt; m (m a) -&gt; m a

ghci&gt; <span class="built_in">join</span> (Just (Just <span class="number">9</span>))   
Just <span class="number">9</span>   
ghci&gt; <span class="built_in">join</span> (Just <span class="literal">Nothing</span>)   
<span class="literal">Nothing</span>   
ghci&gt; <span class="built_in">join</span> <span class="literal">Nothing</span>   
<span class="literal">Nothing</span>

ghci&gt; <span class="built_in">join</span> [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]
ghci&gt; runWriter $ <span class="built_in">join</span> (Writer (Writer (<span class="number">1</span>,<span class="string">"aaa"</span>),<span class="string">"bbb"</span>))   
(<span class="number">1</span>,<span class="string">"bbbaaa"</span>)
ghci&gt; <span class="built_in">join</span> (<span class="built_in">Right</span> (<span class="built_in">Right</span> <span class="number">9</span>)) :: Either <span class="built_in">String</span> <span class="built_in">Int</span>   
<span class="built_in">Right</span> <span class="number">9</span>   
ghci&gt; <span class="built_in">join</span> (<span class="built_in">Right</span> (<span class="built_in">Left</span> <span class="string">"error"</span>)) :: Either <span class="built_in">String</span> <span class="built_in">Int</span>   
<span class="built_in">Left</span> <span class="string">"error"</span>   
ghci&gt; <span class="built_in">join</span> (<span class="built_in">Left</span> <span class="string">"error"</span>) :: Either <span class="built_in">String</span> <span class="built_in">Int</span>   
<span class="built_in">Left</span> <span class="string">"error"</span>

-- 事实上 m &gt;&gt;= f 永远等价于 <span class="built_in">join</span> (fmap f m)
-- (Writer (x,v)) &gt;&gt;= f = <span class="keyword">let</span> (Writer (y, v<span class="comment">')) = f x in Writer (y, v `mappend` v')</span>
-- <span class="built_in">join</span> 的具体实现
<span class="built_in">join</span> :: (Monad m) =&gt; m (m a) -&gt; m a   
<span class="built_in">join</span> mm = <span class="keyword">do</span>   
    m &lt;- mm   
    m
</pre></td></tr></table></figure>

<h1 id="filterm">filterM</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>filterM :: (Monad m) =&gt; (a -&gt; m Bool) -&gt; [a] -&gt; m [a]

keepSmall :: Int -&gt; Writer [String] Bool   
keepSmall x   
    | x &lt; <span class="number">4</span> = <span class="keyword">do</span>   
        tell [<span class="string">"Keeping "</span> ++ show x]   
        <span class="keyword">return</span> True   
    | otherwise = <span class="keyword">do</span>   
        tell [show x ++ <span class="string">" is too large, throwing it away"</span>]   
        <span class="keyword">return</span> False

ghci&gt; fst $ runWriter $ filterM keepSmall [<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]

ghci&gt; mapM_ putStrLn $ snd $ runWriter $ filterM keepSmall [<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>]   
<span class="number">9</span> is too large, throwing it away   
Keeping <span class="number">1</span>

<span class="comment">-- 这个函数想不通!!</span>
<span class="comment">--  list 其实就是 non-deterministic value 如何理解?</span>
powerset :: [a] -&gt; <span class="string">[[a]]</span>   
powerset xs = filterM (\x -&gt; [True, False]) xs

ghci&gt; powerset [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   
<span class="string">[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]</span>
</pre></td></tr></table></figure>

<h1 id="foldm">foldM</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>foldM :: <span class="function"><span class="params">(Monad m)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b -&gt; m a)</span> -&gt;</span> a<span class="function"> -&gt;</span> [b]<span class="function"> -&gt;</span> m a
binSmalls :: Int<span class="function"> -&gt;</span> Int<span class="function"> -&gt;</span> Maybe Int   
binSmalls acc x   
    | x &gt; <span class="number">9</span>     = Nothing   
    | otherwise = Just (acc + x)

ghci&gt; foldM binSmalls <span class="number">0</span> [<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>]   
Just <span class="number">14</span>   
ghci&gt; foldM binSmalls <span class="number">0</span> [<span class="number">2</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">1</span>]   
Nothing
</pre></td></tr></table></figure>

<h1 id="rpn-">RPN计算机</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="reserved">import</span> Data.List   
   
readMaybe :: <span class="function"><span class="params">(Read a)</span> =&gt;</span> String<span class="function"> -&gt;</span> Maybe a   
readMaybe st = <span class="reserved">case</span> reads st <span class="keyword">of</span> [(x,<span class="string">""</span>)]<span class="function"> -&gt;</span> Just x   
                                _<span class="function"> -&gt;</span> Nothing
                                
foldingFunction :: [Double]<span class="function"> -&gt;</span> String<span class="function"> -&gt;</span> Maybe [Double]   
foldingFunction (<span class="attribute">x</span>:<span class="attribute">y</span>:ys) <span class="string">"*"</span> = <span class="keyword">return</span> ((x * y):ys)   
foldingFunction (<span class="attribute">x</span>:<span class="attribute">y</span>:ys) <span class="string">"+"</span> = <span class="keyword">return</span> ((x + y):ys)   
foldingFunction (<span class="attribute">x</span>:<span class="attribute">y</span>:ys) <span class="string">"-"</span> = <span class="keyword">return</span> ((y - x):ys)   
foldingFunction xs numberString = liftM (:xs) (readMaybe numberString)

<span class="reserved">import</span> Data.List   
solveRPN :: String<span class="function"> -&gt;</span> Maybe Double   
solveRPN st = <span class="keyword">do</span>   
  [result] &lt;- foldM foldingFunction [] (words st)   
  <span class="keyword">return</span> result

ghci&gt; solveRPN <span class="string">"1 2 * 4 +"</span>   
Just <span class="number">6.0</span>   
ghci&gt; solveRPN <span class="string">"1 2 * 4 + 5 *"</span>   
Just <span class="number">30.0</span>   
ghci&gt; solveRPN <span class="string">"1 2 * 4"</span>   
Nothing   
ghci&gt; solveRPN <span class="string">"1 8 wharglbllargh"</span>   
Nothing
</pre></td></tr></table></figure>

<p><code>&gt;=&gt;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>ghci&gt; <span class="reserved">let</span> f = (+<span class="number">1</span>) . (*<span class="number">100</span>)
ghci&gt; f <span class="number">4</span>
<span class="number">401</span>
ghci&gt; <span class="reserved">let</span> g = (\x<span class="function"> -&gt;</span> <span class="keyword">return</span> (x+<span class="number">1</span>)) &lt;=&lt; (\x<span class="function"> -&gt;</span> <span class="keyword">return</span> (x*<span class="number">100</span>))   
ghci&gt; Just <span class="number">4</span> &gt;&gt;= g
Just <span class="number">401</span>

ghci&gt; <span class="reserved">let</span> f = foldr (.) id [(+<span class="number">1</span>),(*<span class="number">100</span>),(+<span class="number">1</span>)]   
ghci&gt; f <span class="number">1</span>   
jt
</pre></td></tr></table></figure>

<p>tK  1201t</p>
]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day52-Activiti项目实例]]></title>
    <link href="http://zhpooer.github.io/2014/07/05/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day52-activiti%E9%A1%B9%E7%9B%AE%E5%AE%9E%E4%BE%8B/"/>
    <id>http://zhpooer.github.io/2014/07/05/传智播客day52-activiti项目实例/</id>
    <published>2014-07-05T01:11:56.000Z</published>
    <updated>2014-07-07T02:16:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">实现步骤</h1>
<ol>
<li>绘制流程图(eclipse插件)</li>
<li>准备业务模型, 只要保证模块CRUD基础功能都能使用</li>
<li>流程部署部署管理<ol>
<li>发布新流程(文件上传)</li>
<li>部署管理(删除部署)</li>
<li>流程定义管理(查看规则流程图, 历史查看)</li>
</ol>
</li>
<li>任务查看(私有/共有任务查看)<ol>
<li>查看任务(办理任务, 接受任务)</li>
<li>查看当前流程图</li>
</ol>
</li>
<li>任务办理</li>
<li>监听器, 完成业务动态办理</li>
</ol>
<p>扩展任务</p>
<ol>
<li>多出口任务</li>
<li>批注的添加和查看</li>
</ol>
<h1 id="activiti-ssh-">Activiti和SSH集成</h1>
<p>集成的核心, 把对应框架的核心类交给Spring管理
(如果有事务或者数据源, 也得交给Spring管理)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"processEngineConfiguration"</span> <span class="attribute">class</span>=<span class="value">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span>
    <span class="comment">&lt;!-- 数据源  --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 建表策略 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"databaseSchemaUpdate"</span> <span class="attribute">value</span>=<span class="value">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="comment">&lt;!-- 事务 --&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"transactionManager"</span> <span class="attribute">ref</span>=<span class="value">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"processEngine"</span> <span class="attribute">class</span>=<span class="value">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"processEngineConfiguration"</span> <span class="attribute">ref</span>=<span class="value">"processEngineConfiguration"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"repositoryService"</span> <span class="attribute">factory-bean</span>=<span class="value">"processEngine"</span> <span class="attribute">factory-method</span>=<span class="value">"getRepositoryService"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"taskService"</span> <span class="attribute">factory-bean</span>=<span class="value">"processEngine"</span> <span class="attribute">factory-method</span>=<span class="value">"getTaskService"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"runtimeService"</span> <span class="attribute">factory-bean</span>=<span class="value">"processEngine"</span> <span class="attribute">factory-method</span>=<span class="value">"getRuntimeService"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"historyService"</span> <span class="attribute">factory-bean</span>=<span class="value">"processEngine"</span> <span class="attribute">factory-method</span>=<span class="value">"getHistoryService"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- action --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"workflowAction"</span> <span class="attribute">class</span>=<span class="value">"WorkFlowAction"</span> <span class="attribute">scope</span>=<span class="value">"prototype"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"workflowService"</span> <span class="attribute">ref</span>=<span class="value">"workflowService"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
<span class="comment">&lt;!-- service --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"workflowService"</span> <span class="attribute">class</span>=<span class="value">"WorkFlowServiceImpl"</span> &gt;</span>
    
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>

<p>activiti具有额外功能,定时器</p>
<p>控制器 action 功能,获取页面取得的参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkFlowServiceImpl</span> <span class="keyword">implements</span> <span class="title">IWorkFlowService</span> {</span>
    <span class="annotation">@Resource</span> <span class="keyword">private</span> RepositoryService repositoryService;
    
    <span class="keyword">public</span> String <span class="title">newDeployment</span>(String processName, File processFile){
        DeploymentBuilder builder = repositoryService.createDepoyment();
        InputStream in = <span class="keyword">new</span> FileinputStream(processFile);
        ZipInputStream zipInputStream = <span class="keyword">new</span> ZipinputStream(in);
        builder.name(processName)
               .addZipInputStream(zipInputStream);
        builder.deploy();
    }
    <span class="keyword">public</span> List&lt;Deployment&gt; <span class="title">getAllDeployments</span>(){
        <span class="keyword">return</span> repositoryService.createDeploymentQeury()
                     .orderbyDeploymentTime()
                     .desc().list()
    }
    <span class="keyword">public</span> List&lt;&gt; <span class="title">getAllDeploymentDefinitions</span>(){
        <span class="keyword">return</span> repositoryService.createProcessDefinitionQuery().orderbyKey().asc().orderbyversion.dsc().list()
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkFlowAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>{</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIST = <span class="string">"list"</span>;
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIN = <span class="string">"main"</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEPLOY_SUCCESS = <span class="string">"deploy_success"</span>;
    
    <span class="keyword">private</span> IWorkFlowService workFlowService;    
    <span class="keyword">public</span> String <span class="title">execute</span>(){
        List&lt;Depoyment&gt; ds = workFlowservice.getAllDeployments();
        putContext(<span class="string">"ds"</span>, ds);

        List&lt;ProcessDefinition&gt; pds = workFlowservice.getAllProcessDefinitions();
        putContext(<span class="string">"pds"</span>, pds);
        
        <span class="keyword">return</span> SUCCESS;
    }
    privatge String name;
    <span class="keyword">private</span> File file;
    <span class="keyword">public</span> String <span class="title">newDeplyment</span>(){
        workflowService.newDeployment(name, file);
        <span class="keyword">return</span> ;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>&lt;action <span class="property">name</span>=<span class="string">"workflow_*"</span> <span class="type">class</span>=<span class="string">"workflowAction"</span> method=<span class="string">"{1}"</span>&gt;
    &lt;<span class="constant">result</span>&gt; /WEB-INF/views/workflow/deployment.jsp &lt;/<span class="constant">result</span>&gt;
    &lt;<span class="constant">result</span> <span class="property">name</span>=<span class="string">"deploy_success"</span> type=<span class="string">"redirectAction"</span>&gt;
        workflow.action
    &lt;/<span class="constant">result</span>&gt;
&lt;/action&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">&lt;!-- deployment.jsp --&gt;</span>
<span class="comment">&lt;!-- 部署信息查看 --&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>发布时间<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"#ds"</span> &gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"id"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"name"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>
<span class="tag">&lt;<span class="title">s:date</span> <span class="attribute">name</span>=<span class="value">"deploymentTime"</span> <span class="attribute">format</span>=<span class="value">"yyyy-MM-dd"</span> <span class="attribute">hh:mm:ss</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">s:date</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 删除 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

<span class="comment">&lt;!-- 流程定义信息查看 --&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>Key<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>版本<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>部署id<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>规则文件名<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>规则图片名<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"#pds"</span> &gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"id"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"name"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"key"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"version"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"deploymentId"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"resourceName"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> <span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"diagramResourceName"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:property</span>&gt;</span> <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> 查看规则流程图 查看历史 <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
<span class="comment">&lt;!-- 上传流程图 --&gt;</span>

<span class="tag">&lt;<span class="title">s:form</span> <span class="attribute">action</span>=<span class="value">"workflow_newDeployment"</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span>
    流程名称:
    <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:textfield</span>&gt;</span>
    文件文件:
    <span class="tag">&lt;<span class="title">s:file</span> <span class="attribute">name</span>=<span class="value">"file"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:file</span>&gt;</span>
    <span class="tag">&lt;<span class="title">s:submit</span> <span class="attribute">value</span>=<span class="value">"上传流程"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:submit</span>&gt;</span>
<span class="tag">&lt;/<span class="title">s:form</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">启动流程</h1>
<p>需要思考的问题</p>
<ol>
<li>如何通过业务对象启动对应的流程<pre><code> 让业务对象的特性和流程的Key有一定关系
 可以以业务类的类名作为流程的key
</code></pre></li>
<li>流程运行过程中需要些什么(流程变量)</li>
<li>如何根据流程找到业务对象<pre><code> 根据id和类名
</code></pre></li>
<li><p>如何根据业务对象找到流程(流程实例), 根据 &quot;businessKey&quot;, 业务键</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// businessKey = classname + id</span>
<span class="comment">// processDefinitionKey 和 businessKey 是唯一约束</span>
runtimeService.startProcessInstanceByKey(processDefinitionKey, businessKey, variables);
runtimeService.createProcessInstanceQuery()
</pre></td></tr></table></figure>
</li>
<li><p>面对流程修改的解决方案</p>
<pre><code> 不严重: 老流程按照老规则流转, 新流程按照新规则流转
 严重: 冻结老流程, 不允许老流程再进行审批, 所有的类似流程都按照新规则进行流转
</code></pre></li>
</ol>
<h1 id="-">请假流程启动</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// LeaveBillAction, 启动请假业务流程</span>
<span class="keyword">public</span> String <span class="title">startProcess</span>(){
    <span class="comment">// 获取业务对象ID</span>
    <span class="comment">// 调用业务逻辑</span>
    leaveBillService.startProcess(id);
}

<span class="keyword">public</span> LeaveBillServiceImpl extends ILeaveBillService{
    <span class="comment">// 启动流程</span>
    <span class="comment">//   修改业务对象状态</span>
    <span class="comment">//   封装流程需要参数</span>
    <span class="comment">//   启动流程</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span>(Long id){
        LeaveBill bill = <span class="keyword">get</span>(id);
        <span class="keyword">if</span>(bill!=<span class="keyword">null</span>) {
            bill.setState(<span class="number">1</span>);
            update(bill);

            Map&lt;String, Object&gt; vars = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();
            vars.put(<span class="string">"inputUser"</span>, bill.getUser());
            vars.put(<span class="string">"days"</span>, bill.getDays());
            vars.put(<span class="string">"id"</span>, bill.getId());
            vars.put(<span class="string">"class"</span>, bill.getClass().getSimpleName());
            
            <span class="comment">// 启动流程</span>
            String processKey = bill.getClass().getSimpleName();
            workflowService.startProcess(processKey, vars);
        }
    }
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span>(String processKey, Map vars){
    String businessKey = processKey + <span class="string">"."</span> + <span class="keyword">var</span>.<span class="keyword">get</span>(<span class="string">"id"</span>);
    runtimeService.startProcessInstanceByKey(processKey, businessKey, vars);
}
</pre></td></tr></table></figure>

<h1 id="-">任务管理</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// WorkFlowAction</span>
<span class="keyword">public</span> String <span class="title">listTask</span>(){
    Employee currentUser = session.<span class="keyword">get</span>(<span class="string">"loginUser"</span>);
    <span class="keyword">if</span>(currentUser != <span class="keyword">null</span>) {
        <span class="comment">// 私有任务查看</span>
        List&lt;Task&gt; pTasks = workflowService.getPersonalTask(currentUser.getName());
    }
    <span class="comment">// 公有任务查看</span>
    <span class="keyword">return</span> LIST_TASK; <span class="comment">// task.jsp, 办理, 查看当前流程图</span>
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> List <span class="title">getPersonalTask</span>(String assinee) {
    taskService.createTaskQuery()...;
}
</pre></td></tr></table></figure>

<h2 id="-">查看当前流程图</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="code"><pre><span class="comment">// workflowAction</span>
<span class="keyword">public</span> Strinig <span class="title">viewCurrentImage</span>(){ <span class="comment">// type=stream</span>
    ProcessDefinition pd = workflowService.getProcessDefinitionByTaskId(taskId);
    resourceName = pd.getDiagramName();
    deploymentId = pd.getDeploymentId();
    
    <span class="comment">// 获取坐标, x: activity.x; y: activity.y; width & height</span>
    Map&lt;String, Object&gt; currentActivityCoordinates =
        workflowService.getCurrentActivityCoordinates(taskId);
    putContext(asc, currentActivityCoordinates);
    <span class="keyword">return</span> CURRENT_IMAGE;  <span class="comment">// return current.jsp &lt;img src=resource.../&gt;</span>
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> ProcessDefinition <span class="title">getProcessDefinitionByTaskId</span>(String taskId){
    Task task = getTask(taskId);
    String processDefinitionId = task.getProcessDefinitionId();
    <span class="keyword">return</span> repositoryService.createProcessDefinitionQuery()
             .processDefinitionId(processDefinitionId);
}

<span class="keyword">public</span> ActivityImpl <span class="title">getActivity</span>(String taskId){
    
    Task task = getTask(taskId);
    <span class="comment">// 通过taskId 获取 Execution</span>
    Execution execution = getExecution(task.getExcutionId());
    String activityId = execution.getActivityId();

    <span class="comment">// 由与活动对象访问特别频繁, 所以设计者就把Activity信息放入了缓存中</span>
    <span class="comment">// 而创建XXQuery对象, 只是进行了sql拼装, 只能到数据库汇总查询 获取不到缓存中的内容</span>
    <span class="comment">// 所以下面这一句不行</span>
    <span class="comment">// ProcessDefinitionEntity pd = getProcessDefinitionByTaskId(taskId);</span>
    ProcessDefinitionEntity pd = repositoryService.getProcessDefinition(task.getProcessDefinitionId);
    ActivityImpl activity = pd.findActivity(activityId)
    <span class="keyword">return</span> ActivityImpl;
}

<span class="keyword">public</span> Execution <span class="title">getExecution</span>(String executionId) {
    <span class="keyword">return</span> runtimeService.createExecutionQeury().excutionId(executionId);
}
<span class="keyword">public</span> Task <span class="title">getTask</span>(String taskId){
    <span class="keyword">return</span> taskService.createTaskQeury()...;
}
</pre></td></tr></table></figure>

<p><img src="/img/activiti_api.png" alt="关系图"></p>
<h1 id="-">办理任务</h1>
<p>在任务列表中, 提供一个 &quot;办理任务&quot; 按钮, 打开后打开任务表单,
同时, 在表单的最下方提供&quot;办理任务&quot;操作</p>
<p>在办理任务过程中, 如何找到业务表单?</p>
<ul>
<li>解决方案一(动态): 在task节点上, 制定&quot;表单属性&quot;, 存入规则, 在办理当前任务时,
可以根据预先制定的表单项, 通过HTML DOM动态生成任务表单</li>
<li>解决方案二(静态): 预先制定好任务表单(HTML或者JSP页面), 通过form key 属性,
和这个表单建立关联<pre><code>  taskForm.jsp, 这个表单需要业务数据
  **.audit.action 在每一个业务控制器中, 提供audit方法,
  由此方法加载业务数据, 然后返回业务对象相关流程表单
</code></pre></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// formKey: leaveBillAudit.action</span>
<span class="comment">// workflowAction</span>
<span class="keyword">public</span> <span class="built_in">String</span> viewTaskForm(){
    <span class="comment">// 通过taskId获取 formKey</span>
    <span class="built_in">String</span> formKey <span class="subst">=</span> workflowService<span class="built_in">.</span>getTaskFormKey(taskId);
    putContext(<span class="string">"formUrl"</span>, formKey <span class="subst">+</span> <span class="string">"?id="</span> <span class="subst">+</span> objId <span class="subst">+</span> <span class="string">"&taskId="</span> <span class="subst">+</span> taskId);
    Long objId <span class="subst">=</span> workflowService<span class="built_in">.</span>getObjId(<span class="built_in">String</span> taskId);
    <span class="keyword">return</span> TASK_FORM; <span class="comment">// redirectAction ${formUrl}_audit.action</span>
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> <span class="built_in">String</span> getTaskFormKey(<span class="built_in">String</span> taskId) {
    Task task <span class="subst">=</span> getTask(taskId);
    <span class="built_in">String</span> processDefinitionId <span class="subst">=</span> task<span class="built_in">.</span>getProcessDefinitionId();
    <span class="built_in">String</span> taskDefinitionKey <span class="subst">=</span> task<span class="built_in">.</span>getTaskDefinitionKey();
    <span class="built_in">String</span> formKey <span class="subst">=</span> formSservice<span class="built_in">.</span>getTaskFormKey(processDefinitionId, taskDefinitionKey);
    <span class="comment">// 方式二:</span>
    <span class="comment">// formService.getTaskFormData(taskId);</span>
    <span class="comment">// formKey = formData.getFormKey();</span>
    <span class="keyword">return</span> formKey;
}

<span class="keyword">public</span> Long getObjId(<span class="built_in">String</span> taskId) {
    <span class="built_in">String</span> variableName <span class="subst">=</span> <span class="string">"objId"</span>;
    <span class="keyword">return</span> taskService<span class="built_in">.</span>getVariable(taskId, variableName);
    <span class="comment">// 方式二:</span>
    <span class="comment">// 通过task获取流程实例</span>
    <span class="comment">// 获取businessKey &gt;&gt; leabeBill.5, 截取</span>
}

<span class="comment">// leaveBillAction</span>
<span class="keyword">public</span> <span class="built_in">String</span> audit(){
    <span class="comment">// 获取需要加载业务对象的唯一标识</span>
    <span class="comment">// 加载业对象</span>
    <span class="comment">// 放入值栈</span>
}
</pre></td></tr></table></figure>

<h1 id="-">完成任务</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// workflowActioin</span>
<span class="keyword">public</span> String <span class="title">completeTask</span>(){
    workflowService.completeTask(String taskId);
    <span class="keyword">return</span> TASK; <span class="comment">// workflow_listtask.action</span>
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeTask</span>(String taskId) {
    taskService.complete(taskId);
}
</pre></td></tr></table></figure>

<h1 id="-">流程监听器完成业务操作</h1>
<p>任务监听器</p>
<ol>
<li>创建一个普通类来充当监听器, 需要实现TaskListener接口</li>
<li>实现notify方法的逻辑</li>
<li>需要把它们配置到流程中任务节点上</li>
</ol>
<p>执行监听器</p>
<ol>
<li>创建一个普通类充当监听器, 需要实现ExecutionListener接口</li>
<li>实现notify方法的逻辑</li>
<li>需要把它们配置到流程中的任意节点上</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// 自动安排审核者</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MangerTaskHandler</span> <span class="keyword">implements</span> <span class="title">TaskListener</span> {</span>
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span>(DelegateTask delegateTask) {
        <span class="comment">// 获取到任务申请人的唯一标识</span>
        String inputUser = delegateTask.getVariable(<span class="string">"inputUser"</span>);
        WebApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);
        IEmployService employeeService = ctx.getBean(<span class="string">"employeeService"</span>,IEmployeeService.class);
        <span class="comment">// 通过唯一标识获取相对应的对象</span>
        Employee emp = employeeService.getEmployeeByName(inputUser);
        <span class="comment">//通过员工对象获取,他的经理</span>
        Employee manager = emp.getManager();
        delegateTask.setAssignee(manager.getName());
    }
}

<span class="comment">// 请假流程结束时自动审批处理</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveBillAuditHandler</span> <span class="keyword">implements</span> <span class="title">ExcutionListener</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span>(){
        <span class="comment">// 获取请假单Id</span>
        Long objId = execution.getVariable(<span class="string">"objId"</span>);
        <span class="comment">// 获取需要请假服务对象</span>
        ILeaveBillService leaveBillService = get;
        <span class="comment">// 调用请假服务对象上的审核逻辑, 完成请假单状态的修改</span>
        leaveBillService.auditing(objId); 
    }
}

<span class="comment">// leaveBillService</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">auditing</span>(Long id) {
    LeaveBill bill = get(id);
    <span class="keyword">if</span>(bill!=<span class="keyword">null</span>) {
        bill.setState(<span class="number">2</span>);
        update(bill);
    }
}
</pre></td></tr></table></figure>

<h1 id="-">多出口任务</h1>
<ol>
<li>根据当前任务的出口集合<code>condition${outgoing==&quot;驳回&quot;}</code>, 动态生成按钮</li>
<li>根据选择的按钮, 执行需要的流程<ol>
<li>传入用户选择的决策信息</li>
<li>把决策的信息放入流程变量中</li>
<li>在规则流程中, 根据不同的流程出口, 指定流转条件</li>
</ol>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">// LeaveBillAction</span>
<span class="keyword">public</span> <span class="built_in">String</span> audit(){
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> transNames <span class="subst">=</span> leaveBillService<span class="built_in">.</span>getTasksTransNames(taskId);
    putContext(<span class="string">"transNames"</span>, transNames); <span class="comment">// &lt;submit value="${transname}" name="${tansname}"&gt;</span>
}

<span class="comment">// leaveBillService</span>
<span class="keyword">public</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> getTasksTransNames(taskId) {
    <span class="comment">// 业务对象职责单一</span>
    <span class="keyword">return</span> workflowService<span class="built_in">.</span>getTaskTransNames(taskId);
}

<span class="comment">// workflowservice</span>
<span class="keyword">public</span> <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> getTaskTransNames(taskId){
    <span class="built_in">List</span><span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> <span class="literal">new</span> ArrayList<span class="subst">&lt;&gt;</span>();
    <span class="comment">// 通过任务获取活动对象</span>
    ActivityImpl acitivy <span class="subst">=</span> this<span class="built_in">.</span>getActivityByTaskId(taskId);
    <span class="comment">// 通过活动获取所有的出口信息集合</span>
    <span class="built_in">List</span><span class="subst">&lt;</span>PvmProcessElement<span class="subst">&gt;</span> trans <span class="subst">=</span> acitvity<span class="built_in">.</span>getOutgoingTransition();
    <span class="comment">// 迭代所有出口信息集合, 获取出每个出口的name属性值</span>
    for(PvmTransition trans : trans) {
         <span class="built_in">String</span> name <span class="subst">=</span> (<span class="built_in">String</span>) trans<span class="built_in">.</span>getProperty(<span class="string">"name"</span>);
         <span class="keyword">if</span>(StringUtils<span class="built_in">.</span>isNotBlank(name)){
             <span class="built_in">list</span><span class="built_in">.</span>add(name);
         }
    }
    <span class="comment">// 兼容, 如果集合到这里长度还是为0, 那么说明,</span>
    <span class="comment">// 当前任务的出口只有一个, 并且这个出口是没有name属性值的</span>
    <span class="keyword">if</span>(<span class="built_in">list</span><span class="built_in">.</span>size()<span class="subst">==</span><span class="number">0</span>) {
        <span class="built_in">list</span><span class="built_in">.</span>add(<span class="string">"办理任务"</span>);
    }
    returnt <span class="built_in">list</span>;
}
</pre></td></tr></table></figure>

<h1 id="-">完成任务</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// workflowAction</span>
<span class="keyword">public</span> String <span class="title">completeTask</span>() {
    workflowService.completeTask(taskId, outGoing);
}

<span class="comment">// workflowService</span>
<span class="keyword">public</span> String <span class="title">completeTask</span>(String taskId, String outGoing){
    taskService.setVariable(taskId, <span class="string">"outGoing"</span>, outGoing);
    taskService.complete(taskId);
}
</pre></td></tr></table></figure>

<h1 id="-">批注添加</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addComment</span>() {
    String taskId = <span class="string">"608"</span>;
    Task task = taskService.createTaskQeury().taskId(taskId).singleResult();
    <span class="comment">// 设置用户上下文</span>
    Authentication.setAuthenticatedUserId(<span class="string">'张三'</span>);
    taskService.addComment(taskId, task.getProcessInstanceId(),<span class="string">"天气不错"</span>);
}
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getComment</span>() {
    String taskId = <span class="number">607</span>;
    List&lt;Comment&gt; taskComments = taskService.getTaskComments(taskId);
    <span class="comment">// TODO</span>
}
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="activiti" scheme="http://zhpooer.github.io/tags/activiti/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客day51-Activiti 工作流]]></title>
    <link href="http://zhpooer.github.io/2014/07/02/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2day51-activiti-%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>http://zhpooer.github.io/2014/07/02/传智播客day51-activiti-工作流/</id>
    <published>2014-07-02T01:17:28.000Z</published>
    <updated>2014-07-05T07:57:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">典型流程</h1>
<p>一个请假流程</p>
<ol>
<li>员工申请</li>
<li>部门经理审批</li>
<li>老板审批</li>
</ol>
<p>提取模型类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>{</span>
    <span class="keyword">int</span> role;  <span class="comment">// 普通员工 | 部门经理 | 老板</span>
}

<span class="class"><span class="keyword">class</span> <span class="title">LeaveBill</span> {</span> <span class="comment">// 请假单</span>
    <span class="comment">// 初始录入, 申请请假, 作废(-1),</span>
    <span class="comment">// 经理审批通过, 老板审批, 老板驳回, 经理驳回</span>
    <span class="keyword">int</span> state;
    Employee leaveUser;
    Date leaveDate;
    String reason;
    <span class="keyword">int</span> days;

    Employee auditManager;
    Date managerAuditTime;

    Employee auditBoss;
    Date bossAuditTime;
}
</pre></td></tr></table></figure>

<p>如果增加一个审批者, 那么业务流程会改变,
如果是手工编码, 那么就要做花费很大的时间,
所以要使用工作流系统</p>
<h2 id="-">传统设计的弊端</h2>
<p>业务模型相关的属性和流程相关的属性, 都放到业务对象中年</p>
<p>传统逻辑和流程相关的逻辑, 都放到业务逻辑中</p>
<h1 id="-">概念</h1>
<p>工作流(Workflow), 业务过程的部分或整体在计算机应用环境下的自动化,
主要解决的是&quot;使用多个参与者之间按照某种预定义的规则传递文档,
信息或任务的过程自动进行, 从而实现某个预期业务目标, 或者促使此目标的实现&quot;</p>
<p>工作流管理系统: 完成工作流的定义和管理,
按照系统中预定义的规则执行工作流实例,
为企业业务系统运行提供了一个软件支撑环境</p>
<p>工作流逻辑: 规则</p>
<p>工作流实例: 按照规则一次实际流转</p>
<p>工作流管理联盟</p>
<h1 id="activiti">Activiti</h1>
<p>Activiti5 是由 Alfresco 软件在 2010 年 5 月 17 日发布的业务流程管理(BPM)框架 ,它
是覆盖了业务流程管理、工作流、服务协作等领域的一个开源的、灵活的、易扩展的
可执行流程语言框架。</p>
<p>持久层是ibaits, 通过 webService, 提供服务</p>
<h2 id="-">工作流引擎</h2>
<p>这是 Activiti 工作的核心。负责生成流程运行时的各种实例及数据、监控和管理
流程的运行。</p>
<h2 id="bpm2-0">BPM2.0</h2>
<p>业务流程建模与标注(Business Process Model and Notation,BPMN) ,描述
流程的基本符号,包括这些图元如何组合成一个业务流程图(Business Process
Diagram)</p>
<p>流程图: 描述一系列先后顺序的图, 也叫活动图</p>
<h2 id="-activiti">使用 activiti</h2>
<ol>
<li>安装 activiti bpm designer eclipse 插件</li>
<li>导入 activiti jar包</li>
<li><p>搭建环境</p>
<ul>
<li><p>代码进行配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>// 使用
// 创建单机的流程引擎配置
ProcessEngineConfiguration config = ProcessEngineConfiguration
    <span class="preprocessor">.createStandaloneProcessEngineConfiguration</span>()
    <span class="preprocessor">.setJdbcUrl</span>(<span class="string">"jdbc:mysql://localhost:3306/activiti?createDatabaseIfNotExist=true"</span>)<span class="comment">;</span>
    <span class="preprocessor">.setJdbcDriver</span>(<span class="string">"com.mysql.jdbc.Driver"</span>)
    <span class="preprocessor">.setJdbcUsername</span>(<span class="string">"root"</span>)
    <span class="preprocessor">.setJdbcPassword</span>(<span class="string">"mikeesirius"</span>)
    // 自动建表
    <span class="preprocessor">.setDatabaseSchemaUpdate</span>(ProcessEngineConfiguration<span class="preprocessor">.DB</span>_SCHEMA_UPDATE_TRUE)<span class="comment">;</span>
    
// 创建流程引擎
ProcessEngine processEngine = config<span class="preprocessor">.buildProcessEngine</span>()<span class="comment">;</span>
</pre></td></tr></table></figure>
</li>
<li><p>配置文件方式, <code>activiti.cfg.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">&lt;!-- config = ProcessEngineConfiguration.createProcessEngineFromeResrouce("activiti.cfg.xml") --&gt;</span>
<span class="comment">&lt;!-- ProcessEngine processEngine = config.buildProcessEngine(); --&gt;</span>
<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"processEngineConfiguration"</span> <span class="attribute">class</span>=<span class="value">"StandaloneProcessConfiguration"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"databaseSchemaUpdate"</span> <span class="attribute">value</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcDriver"</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUsername"</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcPassword"</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用 Activiti API</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre>
<span class="comment">// 创建核心对象</span>
<span class="keyword">private</span> ProcessEngine processEngine = ProcessEngines.getDefalutProcessEngine();

<span class="comment">// 基本流程: </span>
<span class="comment">// 通过核心对象获取需要的服务</span>
<span class="comment">// 调用服务的方法完成操作</span>

<span class="comment">// 发布流程规则</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deploy</span>(){
    RepositoryService repotoryService =
        processEngine.getRepositoryService();
    <span class="comment">// 创建发布配置对象</span>
    DeploymentBuilder builder = repositoryService.createDeployment();
    <span class="comment">// 做配置</span>
    builder.addClasspathResource(<span class="string">"helloworld.bpmn"</span>)
           .addClasspathResource(<span class="string">"helloworld.png"</span>)
    <span class="comment">// 发布流程</span>
    buiilder.deploy();
}
<span class="comment">// 启动流程</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span>(){
    RuntimeService runtimeService = processEngine.getRuntimeService();
    String processDefinitionId = <span class="string">"myProcess:1:4"</span>;
    runtimeService.startProcessInstanceById(processDefinitionId);
}
<span class="comment">// 查看任务</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryTask</span>(){
    <span class="comment">// 找到对应的服务</span>
    TaskService taskService = processEngine.getTaskService();
    <span class="comment">// 通过服务, 创建查询对象(XXQuery)</span>
    TaskQeury query  = taskService.createTaskQuery();

    <span class="comment">// 添加查询条件</span>
    String assignee = <span class="string">"张三"</span>;
    query.taskAssignee(assignee)
         .orderByTaskCreateTime().desc();
         
    <span class="comment">// 执行查询</span>
    List&lt;Task&gt; list = query.list();
    <span class="keyword">for</span>(Task task : list) {
        println(task);
    }
}

<span class="comment">// 办理任务</span>
<span class="keyword">public</span> <span class="keyword">void</span> complete {
    TaskService taskService = processEngine.getTaskService();
    String taskId = <span class="string">"104"</span>;
    taskService.complete(taskId);
}
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-api">核心API</h2>
<table>
<thead>
<tr>
<th>核心 API</th>
<th>介绍</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>ProcessEngineConfiguration</td>
<td>流程引擎配置对象</td>
<td>添加数据库连接配置和数据库建表策略</td>
</tr>
<tr>
<td>ProcessEngine</td>
<td>核心对象, 流程引擎对象</td>
<td>大管家, 管理各种服务</td>
</tr>
<tr>
<td>ProcessDefinition</td>
<td>流程定义对象</td>
<td>规定了流程包含了哪些活动, 以及各种活动的执行顺序</td>
</tr>
<tr>
<td>ProcessInsctance</td>
<td>流程实例对象</td>
<td>按照规则实际的一次执行</td>
</tr>
</tbody>
</table>
<h2 id="activiti-">activiti 各个服务</h2>
<table>
<thead>
<tr>
<th>Activiti 各个服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>RepositoryService</td>
<td>管理流程的定义</td>
</tr>
<tr>
<td>RuntimeService</td>
<td>执行管理, 启动, 推进, 删除流程实例</td>
</tr>
<tr>
<td>TaskService</td>
<td>任务管理, 管理任务的查看和办理等操作</td>
</tr>
<tr>
<td>HistoryService</td>
<td>历史记录管理</td>
</tr>
<tr>
<td>IdentityService</td>
<td>组织机构管理</td>
</tr>
<tr>
<td>FormService</td>
<td>可选, 任务表单管理</td>
</tr>
<tr>
<td>ManagerService</td>
</tr>
</tbody>
</table>
<h2 id="-processdefinition-">流程规则管理(ProcessDefinition)</h2>
<ol>
<li>发布规则</li>
<li>查看流程定义信息</li>
<li>删除流程</li>
<li>查看流程图</li>
</ol>
<p>没有修改流程</p>
<ol>
<li>如果老流程问题不大, 按照老流程</li>
<li>如果老流程有问题, 按照新流程重写开始</li>
</ol>
<p>流程很多, 可以由多个流程系统管理器(processeEngine)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre><span class="comment">// 发布规则</span>
<span class="comment">//  会在数据库三张表中产生数据</span>
<span class="comment">// act_ge_bytearray 2条记录, 原始记录文件</span>
<span class="comment">// act_ge_procdef 1条记录, 流程记录表, 存放流程定义的属性信息, name key version deploymentid</span>
<span class="comment">// act_ge_deployment 1条记录, 存放流程定义的显示名和部署时间</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deploy</span>(){
    RepositoryService repositoryService = processEngine.getRepositoryService();
    DeploymentBuilder builder = repositoryService.createDeployment();
    <span class="comment">// 做配置</span>
    builder.name(<span class="string">"请假v1"</span>)
           .addClasspathResource(<span class="string">"leaveflow.bpmn"</span>)
           .addClasspathResource(<span class="string">"leaveflow.png"</span>); <span class="comment">//如果不设置, 会自动生成, 会有中文问题</span>
    <span class="comment">// 发布流程</span>
    buiilder.deploy();
}

<span class="comment">// 流程定义</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryProcessDefinition</span>() {
    ProcessDefinition query = repositoryService.createProcessDefinitionQuery();
    query <span class="comment">// 过滤条件</span>
         .processDefinitionId(processDefinitionId)
         .deploymentId(deploymentId)
         .processDefinitionKeyLike()
         .orderByProcessDefinitionVersion.asc()
    <span class="comment">// 执行查询</span>
    List&lt;ProcessDefinition&gt; pds = query.list();
       <span class="comment">//.listPage(firstResult, maxResults)</span>
       <span class="comment">// .count();</span>
       <span class="comment">// .singleResult(); // 如果返回记过数目大于1, 那么直接报错</span>
    <span class="keyword">for</span>(ProcessDefinition pd : pds) {
        <span class="comment">// 由 {key}:{version}:{随机数}</span>
        pd.getId();
        pd.getName(); <span class="comment">// 流程定义文件 name 属性</span>
        pd.getKey();  <span class="comment">// 流程定义文件 id 属性</span>
        <span class="comment">// 如果发布流程和已存在流程的 key 相同, 会在当前key范围最高版本上加一</span>
        <span class="comment">// 如果是全新的流程 就是 1</span>
        pd.getVersion();
    }
}
<span class="comment">// 删除流程</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delProcess</span>() {
    <span class="comment">// 普通删除, 根据Id删除</span>
    String deploymentId = <span class="string">"***"</span>;
    <span class="comment">// 如果有流程正在进行, 就会报错, 不允许删除; 如果删除成功, 会保留历史</span>
    repositoryService.deleteDeployment(deploymentId);
    <span class="comment">// 级联删除</span>
    <span class="comment">// 会删除规则关联的所有信息, 以及历史, 比如正在进行的流程, 也会被删除</span>
    <span class="comment">// 推荐给管理员使用</span>
    repositoryService.deleteDeployment(depolymentId, <span class="keyword">true</span>);
}

<span class="comment">// 查看流程图</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewImage</span>() {
    <span class="comment">// 得到 *.bpmn, *.png</span>
    List&lt;String&gt; names = repositoryService.getDepoymentResourceNames(deploymentid);
    InputStream <span class="keyword">in</span> = repositoryService.getResourceAsStream(deploymentId, resourceName);
}
</pre></td></tr></table></figure>

<h2 id="-">流程执行(实例)</h2>
<p>步骤:</p>
<ol>
<li>启动流程</li>
<li>查看任务<ul>
<li>私有任务</li>
<li>公有任务</li>
</ul>
</li>
<li>接手(认领)任务, 针对共有任务</li>
<li>办理任务</li>
<li>查看流程状态(进度)</li>
</ol>
<p>任务和流程实例的关系: 任务是对流程实例的扩充, 如任务时间?,
一个 Task 节点和 Execution 节点是 1 对 1 的情况,在 task 对象中
使用 Execution_来标示他们之间的关系</p>
<p>流程实例, 特点:</p>
<ol>
<li>一个流程只有一个流程实例</li>
<li>流程实例ID不会变</li>
<li>流程实例永远指向当前活动的节点</li>
<li>如果在单线程流程中, 执行对象就是流程实例；
如果在并发流程中, 流程实例会在分支处产生一个执行对象(execution)
作为根(这个就是流程实例), 然后为每个分支下的活动节点创建execution对象,
统一把它们挂在根下面</li>
</ol>
<p>流程实例(instance)是一个特殊的执行对象(execution),
永远代表的是作为根的执行对象</p>
<p>执行对象(execution), 代表一次活动. 完成第一个节点,
或删除描述第一个活动的执行对象, 然后生成描述第二个执行对象</p>
<p>流程的开始, 就是从开始节点到第一个节点的过程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">// 启动流程, 会改变两张表 act_ru_task  act_ru_execution</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span>() {
    <span class="comment">// 通过规则id, 启动确定的一个流程</span>
    ProcessInstance pi =
        runtimeService.startProcessInstanceById(processDefinitionId);
    <span class="comment">// 通过key, 启动最新版本的流程</span>
    ProcessInstance pi =
        runtimeService.startProcessInstanceByKey(processDefinitionKey);
}

<span class="comment">// 私有任务查看</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryPersonalTask</span>(){
    <span class="comment">// 获取查询对象</span>
    TaskQuery query = taskService.createTaskQuery();
    <span class="comment">// 添加查询条件</span>
    query <span class="comment">// 过滤条件</span>
         .taskAssignee(assignee)
         <span class="comment">// 排序条件</span>
         .orderByTaskCreateTime().desc();
    <span class="comment">// 执行查询</span>
    List&lt;Task&gt; list = query.list();
    <span class="keyword">for</span>(Task task : list ) {
        task.getName();
        task.getAssignee();
        task.getCreateTime();
    }
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeTask</span>(){
    taskService.complete(taskId);
}

<span class="comment">// 公有任务, 配置流程图时, 去掉 assignee 加上 candidate</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewState</span>(){
   <span class="comment">// 查询流程实例</span>
   ProcessInstance pi = runtimeService.createProcessInstanceQuery()
                 .processInstanceId(processInstanceId).singleResult
   pi.getActivityId(); <span class="comment">// 当前流程状态</span>
}

<span class="comment">// 查询共有任务</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryCommonTask</span>() {
    <span class="comment">// 获取查询对象</span>
    TaskQuery query = taskService.createTaskQuery();
    <span class="comment">// 添加查询条件</span>
    query <span class="comment">// 过滤条件</span>
         .taskCandidateUser(assignee)
         <span class="comment">// 排序条件</span>
         .orderByTaskCreateTime().desc();
}
<span class="comment">// 接手任务</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">claim</span>() {
    <span class="comment">// 现在就可以获取 user的任务 query.taskAssignee(assignee)</span>
    taskService.claim(taskId, userId);
}
</pre></td></tr></table></figure>

<h2 id="-">流程变量</h2>
<p>如请假流程中的请假天数, 审批意见, 使用Map来存储</p>
<p>流程变量, task, 以及 Execution 都是直接和 流程实例相关的</p>
<p>主要步骤</p>
<ol>
<li>启动流程</li>
<li>设置流程变量</li>
<li>获取流程变量</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">// 启动时, 设置流程变量</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span>(){
    Map&lt;String, Object&gt; vars = <span class="keyword">new</span> HashMap&lt;&gt;();
    vars.put(<span class="string">"test"</span>, <span class="string">"测试流程变量"</span>);
    ProcessInsctance pi =
        runtimeService.startProcessInstanceByKey(key, vars);
}

<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVar</span>() {
    <span class="comment">// 获取包含流程变量的对象 -- 代办任务</span>
    Task task = taskService.createTaskQuery()
                 .taskAssignee(assignee).list().<span class="keyword">get</span>(<span class="number">0</span>);
    <span class="comment">//通过任务获取流程变量</span>
    taskService.getVariables(taskId); <span class="comment">// 获取多个流程变量</span>
    taskService.getVariable(taskId, variableName); 获取单个流程变量
}

<span class="comment">// 添加流程变量</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span>(){
    taskService.setVariable(taskId, varkey, varvalue);
    taskService.setVariables(taskId, variables);

    <span class="comment">// 在完成的时候, 创建</span>
    taskService.complete(taskId, variables);
    <span class="comment">// 需要序列化</span>
    taskService.setVariable(taskId, <span class="string">"附件"</span>, <span class="keyword">new</span> MyFile(<span class="string">"请假福建"</span>, <span class="keyword">new</span> File(<span class="string">""</span>)));
}
</pre></td></tr></table></figure>

<h2 id="-">历史</h2>
<p>Activiti 默认提供了4种历史级别</p>
<ul>
<li>none: 不保存任何历史记录, 提高系统性能</li>
<li>activiti:保存所有的流程实例, 任务, 获得信息</li>
<li>audit: 默认级别, 添加了表单属性的历史</li>
<li>full: 最完整的历史记录, 保存的流程变量信息</li>
</ul>
<p>历史管理只提供了查询功能</p>
<ul>
<li>查询历史流程实例</li>
<li>查询历史活动</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre>// 流程实例
public void queryHistoryProcessInstance(){
    // 创建查询对象
    HistoryProcessInstantceQuery query = historyService
                    <span class="preprocessor">.createHistorycProcessInstanceQuery</span>()<span class="comment">;</span>
    // 添加查询条件
    query
        <span class="preprocessor">.processDefinitionKey</span>(key)
        <span class="preprocessor">.finished</span>() // 已经结束的
        <span class="preprocessor">.orderbyProcessInstanceStartTime</span>()<span class="preprocessor">.desc</span>()<span class="comment">;</span>
    List list = query<span class="preprocessor">.list</span>()<span class="comment">;</span>
    // 执行查询
    for(HistoricInstance h : list){
        h<span class="preprocessor">.getStartTime</span>()<span class="comment">;</span>
        h<span class="preprocessor">.getDurationInMillis</span>()<span class="comment">;</span>
        h<span class="preprocessor">.getProcessVariables</span><span class="comment">;</span>
        h<span class="preprocessor">.getId</span>()<span class="comment">;</span>
        h<span class="preprocessor">.getProcessDefinitionId</span>()<span class="comment">;</span>
    }
}
// 历史活动
public void queryHistoryActivity(){
     HistoricActivityInstanceQuery query =
         historyService<span class="preprocessor">.createHistoricActivityInstanceQuery</span>()
     query<span class="preprocessor">.processInsctanceId</span>(processInstanceId)
          <span class="preprocessor">.list</span>()
      for(HistoricActivityInstance h : list) {
          h<span class="preprocessor">.getActivitId</span>()<span class="comment">;</span>
          h<span class="preprocessor">.getActivityName</span>()<span class="comment">;</span>
          h<span class="preprocessor">.getActivityType</span>()<span class="comment">;</span>
          h<span class="preprocessor">.getAssignee</span>()<span class="comment">;</span>
      }
}
</pre></td></tr></table></figure>

<h1 id="-">顺序流</h1>
<h1 id="-">节点</h1>
<ul>
<li>开始节点</li>
<li>结束节点</li>
<li>任务节点</li>
<li>网关节点</li>
<li>事件节点</li>
</ul>
<h1 id="-">测试流程</h1>
<p>步骤:</p>
<ul>
<li>发布流程</li>
<li>启动流程</li>
<li>检查流程状态</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> BPMNTestUtils {
    <span class="keyword">private</span> ProcessEngine processEngine = ProcessEngine.getDefalutProcessEngine();
    <span class="keyword">protected</span> RepositoryService repositoryService - processEngine.<span class="title">getRepositoryService</span>();
    <span class="keyword">protected</span> RuntimeService runtimeService = processEngine.getRuntimeService()

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deployProcess</span>(){
        DeploymentBuilder builder = repositoryService.createDeployment();
        InputStream inputStream = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(resourceName);
        InputStream inputStream = <span class="keyword">this</span>.getClass().getResourceAsStream(resourceName);
        InputStream inputStream = <span class="keyword">this</span>.getClass().getResourceAsStream(resourceName);
        builder.addInputStream(resourceName, inputStream);
        builder.deploy();
    }

    <span class="keyword">public</span> ProcessInsctance <span class="title">getProcessDefinitionById</span>(String pid) {
        <span class="keyword">return</span> runtimeServcie.createProcessInstanceQuery().processInstanceId(pid).singleResult();
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span>(){
        deployProcess(<span class="string">"start.bpmn"</span>);
        ProcessInstance pi = runtimeService.startProcessInstanceByKey(processDefinitionKey);
        pi.isEnded();
    }
    
    <span class="comment">// 机器任务节点的流程(recieve task)</span>
    publci <span class="keyword">void</span> testRecieveTask(){
        Exceution e1 = runtimeService
            .createExecutionQeury()
            .processInstanceId(pid)
            .activityId(<span class="string">"汇总当前销售额"</span>).singleResult();
        <span class="comment">/* 执行汇总任务 */</span>
        <span class="comment">// 因为是机器自动任务, 所以没有生成 Task</span>
        <span class="comment">// 完成任务</span>
        runtimeService.singal(e1.getId());
        
        <span class="comment">// 给老板发短信</span>
        Exceution e2 = runtimeService
            .createExecutionQeury()
            .processInstanceId(pid)
            .activityId(<span class="string">"给老板发短信"</span>).singleResult();
        <span class="comment">/* 执行给老板发短信 */</span>
        runtimeService.getVariable(e2.getId(), <span class="string">"money"</span>);
        runtimeService.signal(e2.getId());
        
        <span class="comment">// 判断流程状态</span>
        <span class="comment">// 通过启动时缓存的 "流程实例id", 使用 runtimeService取查询,</span>
        <span class="comment">// 如果得不到, 说明流程已经结束了</span>
        pi = runtimeService
                .createProcessInstanceQuery()
                .processInstanceId(pid)
                .singleResult();
    }
    
    <span class="comment">// 用户任务节点的流程(user task)</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserTask</span>(){
        <span class="comment">// 发布</span>
        deployProcess(<span class="string">"task1.bpmn"</span>);
        <span class="comment">// 启动</span>
        ProcessInstance pi = runtimeService.startProcessInstanceByKey(<span class="string">"task1"</span>);
        String pid = pi.getId();
        
        <span class="comment">//获取第一个节点</span>
        <span class="comment">// 如果一个节点是 UserTask,</span>
        <span class="comment">// 那么流程到达此节点时, 数据库会产生两个对象(Execution 和 Task)</span>
        <span class="comment">// 推动任务进行有两个种方式:</span>
        <span class="comment">//    runtimeService.signal(excutionId);</span>
        <span class="comment">//    taskService.complete(taskId); 删除 task对象 同时删除和task关联的 Execution 对象</span>
        String assignee = <span class="string">"员工"</span>;
        <span class="comment">// 查询当前启动流程中, 员工用户的任务</span>
        Task task = taskService.createTaskQuery().taskAsignee(assignee)
            .processInstanceId(pid).list().<span class="keyword">get</span>(<span class="number">0</span>);
        <span class="comment">// 完成任务</span>
        taskService.complete(taskId);
        assertNull(getProcessDefinitionById(pid));
    }
}
</pre></td></tr></table></figure>

<h1 id="-">动态任务分配</h1>
<ol>
<li>在 bpmn 图中, 设置 <code>assignee</code> 为 <code>${inputUser}</code></li>
<li>在启动流程时, 设置流程变量<code>inputUser</code></li>
<li>编写任务处理器, 在 bpmn 中注册任务管理器<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">// 任务处理器</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerTaskHandler</span> <span class="keyword">implements</span> <span class="title">TaskListener</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span>(DelegateTask delegateTask) {
        <span class="comment">// 设置任务办理者</span>
        delegateTask.setAssignee(assignee);
        <span class="comment">// 设置任务候选者</span>
        delegateTask.addCandidateUser(userId);
    }
}
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-gateway-">网关(gateWay)</h1>
<p>网关用来控制流程的流向</p>
<ul>
<li>排他网关(Exclusive), 设置分支流向(相当于if)<ul>
<li>在 bpmn 图中 设置condition, <code>${money&gt;1000}</code>,
如果没有覆盖全部条件, 抛错, 状态回归到上一级.
也可以设置 <code>default flow</code> 设置默认流程,
但默认出口上不能设置条件(condition)</li>
</ul>
</li>
<li>并行网关(parallelGateWay), 同时进行的两个任务<ul>
<li>当流程进入到并行网关, 会产生 n+1 个 execution,
一个父execution, n 个子 execution.
当子分支全部汇合, 进入到下一个流程</li>
</ul>
</li>
</ul>
<h1 id="tip">Tip</h1>
<p>发布文件名称, 必须以 <code>.bpmn</code> 结尾</p>
]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
      <category term="activiti" scheme="http://zhpooer.github.io/tags/activiti/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-Monad]]></title>
    <link href="http://zhpooer.github.io/2014/07/02/haskell%E8%B6%A3%E5%AD%A6-monad/"/>
    <id>http://zhpooer.github.io/2014/07/02/haskell趣学-monad/</id>
    <published>2014-07-02T00:43:39.000Z</published>
    <updated>2014-07-04T08:01:32.000Z</updated>
    <content type="html"><![CDATA[<p>Functor 是因为我们观察到有许多态态都可以被 function 给 map over，
了解到这个目的，便抽象化了 <code>Functor</code> 这个 typeclass 出来</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>-- &gt;&gt;= bind 操作, scala 中的 flatMap!!
<span class="function"><span class="params">(&gt;&gt;=)</span> :: <span class="params">(Monad m)</span> =&gt;</span> m a<span class="function"> -&gt;</span> <span class="function"><span class="params">(a -&gt; m b)</span> -&gt;</span> m b

-- 包装函数, 来调用实参
ghci&gt; (\x<span class="function"> -&gt;</span> Just (x+<span class="number">1</span>)) <span class="number">1</span>   
Just <span class="number">2</span>   
ghci&gt; (\x<span class="function"> -&gt;</span> Just (x+<span class="number">1</span>)) <span class="number">100</span>   
Just <span class="number">110</span>

-- Monad 是一个容器(盒子)
<span class="class"><span class="keyword">class</span> <span class="title">Monad</span> <span class="title">m</span> <span class="title">where</span>   </span>
    <span class="keyword">return</span> :: a<span class="function"> -&gt;</span> m a   
    <span class="function"><span class="params">(&gt;&gt;=)</span> :: <span class="title">m</span> <span class="title">a</span> -&gt;</span> <span class="function"><span class="params">(a -&gt; m b)</span> -&gt;</span> m b   
    (&gt;&gt;) :: m a<span class="function"> -&gt;</span> m b<span class="function"> -&gt;</span> m b   
    x &gt;&gt; y = x &gt;&gt;= \_<span class="function"> -&gt;</span> y
    fail :: String<span class="function"> -&gt;</span> m a
    fail msg = error msg

instance Monad Maybe where
    <span class="keyword">return</span> x = Just x
    Nothing &gt;&gt;= f = Nothing
    Just x &gt;&gt;= f = f x
    fail _ = Nothing

ghci&gt; <span class="keyword">return</span> <span class="string">"WHAT"</span> :: Maybe String   
Just <span class="string">"WHAT"</span>   
ghci&gt; Just <span class="number">9</span> &gt;&gt;= \x<span class="function"> -&gt;</span> <span class="keyword">return</span> (x*<span class="number">10</span>)   
Just <span class="number">90</span>   
ghci&gt; Nothing &gt;&gt;= \x<span class="function"> -&gt;</span> <span class="keyword">return</span> (x*<span class="number">10</span>)   
Nothing
</pre></td></tr></table></figure>

<h1 id="-">走钢丝案例</h1>
<p>有人走钢丝, 有小鸟会落在钢丝的左右两边,
如果两边的小鸟超过三只, 那么就会失败</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre>type Birds = <span class="built_in">Int</span>
type Pole = (Birds, Birds)

landLeft :: Birds -&gt; Pole -&gt; Pole
landLeft n (<span class="built_in">left</span>, <span class="built_in">right</span>) = (<span class="built_in">left</span> + n, <span class="built_in">right</span>)

ghci&gt; landLeft <span class="number">2</span> (landRight <span class="number">1</span> (landLeft <span class="number">1</span> (<span class="number">0</span>,<span class="number">0</span>)))   
(<span class="number">3</span>,<span class="number">1</span>)

-- 定义一个操作符
x -: f = f x

-- 这样的模拟bug, 如果在中间步骤已经失败了, 那会如何呢
ghci&gt; (<span class="number">0</span>,<span class="number">0</span>) -: landLeft <span class="number">1</span> -: landRight <span class="number">1</span> -: landLeft <span class="number">2</span>   
(<span class="number">3</span>,<span class="number">1</span>)

-- 使用 Maybe 重构
landLeft :: Birds -&gt; Pole -&gt; Maybe Pole
landLeft :: n (<span class="built_in">left</span>, <span class="built_in">right</span>)
    | <span class="built_in">abs</span> ((<span class="built_in">left</span> + n) - <span class="built_in">right</span>) &lt; <span class="number">4</span> = Just (<span class="built_in">left</span> + n, <span class="built_in">right</span>)
    | otherwise = <span class="literal">Nothing</span>
landRight :: Birds -&gt; Pole -&gt; Maybe Pole   
landRight n (<span class="built_in">left</span>,<span class="built_in">right</span>)   
    | <span class="built_in">abs</span> (<span class="built_in">left</span> - (<span class="built_in">right</span> + n)) &lt; <span class="number">4</span> = Just (<span class="built_in">left</span>, <span class="built_in">right</span> + n)   
    | otherwise                    = <span class="literal">Nothing</span>

ghci&gt; landRight <span class="number">1</span> (<span class="number">0</span>,<span class="number">0</span>) &gt;&gt;= landLeft <span class="number">2</span>   
Just (<span class="number">2</span>,<span class="number">1</span>)

ghci&gt; return (<span class="number">0</span>,<span class="number">0</span>) &gt;&gt;= landRight <span class="number">2</span> &gt;&gt;= landLeft <span class="number">2</span> &gt;&gt;= landRight <span class="number">2</span>   
Just (<span class="number">2</span>,<span class="number">4</span>)

-- 如果不用 Monad 
routine :: Maybe Pole   
routine = <span class="keyword">case</span> landLeft <span class="number">1</span> (<span class="number">0</span>,<span class="number">0</span>) of   
    <span class="literal">Nothing</span> -&gt; <span class="literal">Nothing</span>   
    Just pole1 -&gt; <span class="keyword">case</span> landRight <span class="number">4</span> pole1 of    
            <span class="literal">Nothing</span> -&gt; <span class="literal">Nothing</span>   
            Just pole2 -&gt; <span class="keyword">case</span> landLeft <span class="number">2</span> pole2 of   
                    <span class="literal">Nothing</span> -&gt; <span class="literal">Nothing</span>   
                    Just pole3 -&gt; landLeft <span class="number">1</span> pole3
</pre></td></tr></table></figure>

<h1 id="do-">do 用法</h1>
<p><code>do</code> 把 monadic value 串成一串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; <span class="type">Just</span> <span class="string">"!"</span> &gt;&gt;= (\y -&gt; <span class="type">Just</span> (show x ++ y)))   
<span class="type">Just</span> <span class="string">"3!"</span>

<span class="title">foo</span> :: <span class="type">Maybe</span> <span class="type">String</span>   
<span class="title">foo</span> = <span class="type">Just</span> <span class="number">3</span>   &gt;&gt;= (\x -&gt;  
      <span class="type">Just</span> <span class="string">"!"</span> &gt;&gt;= (\y -&gt;  
      <span class="type">Just</span> (show x ++ y)))

<span class="comment">-- 使用 do 表示法</span>
<span class="title">foo</span> :: <span class="type">Maybe</span> <span class="type">String</span>
<span class="title">foo</span> = <span class="keyword">do</span>
    x &lt;- <span class="type">Just</span> <span class="number">3</span>
    y &lt;- <span class="type">Just</span> <span class="string">"!"</span>
    <span class="type">Just</span> (show x ++ y)

<span class="comment">-- 简化上一步的代码</span>
<span class="comment">-- 他们只是代表串行而已，每一步的值都倚赖前一步的结果</span>
<span class="comment">-- 并带着他们的 context 继续下去</span>
<span class="title">foo</span> :: <span class="type">Maybe</span> <span class="type">String</span>   
<span class="title">foo</span> = <span class="keyword">do</span>   
    x &lt;- <span class="type">Just</span> <span class="number">3</span>   
    y &lt;- <span class="type">Just</span> <span class="string">"!"</span>   
    <span class="type">Just</span> (show x ++ y)

<span class="comment">-- 有用到 &lt;- 来绑定值的话，其实实际上就是用了 &gt;&gt;，他会忽略掉计算的结果</span>
<span class="title">routine</span> :: <span class="type">Maybe</span> <span class="type">Pole</span>   
<span class="title">routine</span> = <span class="keyword">do</span>   
    start &lt;- return (<span class="number">0</span>,<span class="number">0</span>)   
    first &lt;- landLeft <span class="number">2</span> start   
    <span class="type">Nothing</span>   
    second &lt;- landRight <span class="number">2</span> first   
    landLeft <span class="number">1</span> second
</pre></td></tr></table></figure>

<p>都用于模式匹配</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>justH :: Maybe <span class="built_in">Char</span>   
justH = <span class="keyword">do</span>   
    (x:xs) &lt;- Just <span class="string">"hello"</span>   
    <span class="keyword">return</span> x

-- 考虑到失败情形
fail :: (Monad m) =&gt; <span class="built_in">String</span> -&gt; m a   
fail _ = <span class="literal">Nothing</span>

wopwop :: Maybe <span class="built_in">Char</span>   
wopwop = <span class="keyword">do</span>   
    (x:xs) &lt;- Just <span class="string">""</span>   
    <span class="keyword">return</span> x
</pre></td></tr></table></figure>

<h1 id="list-monad">List Monad</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre>instance Monad [] where   
    <span class="keyword">return</span> x = [x]   
    xs &gt;&gt;= f = concat (map f xs)   
    fail _ = []

ghci&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &gt;&gt;= \x -&gt; [x,-x]   
[<span class="number">3</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">4</span>,<span class="number">5</span>,-<span class="number">5</span>]
ghci&gt; [] &gt;&gt;= \x -&gt; [<span class="string">"bad"</span>,<span class="string">"mad"</span>,<span class="string">"rad"</span>]   
[]   
ghci&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &gt;&gt;= \x -&gt; []   
[]

ghci&gt; [<span class="number">1</span>,<span class="number">2</span>] &gt;&gt;= \n -&gt; [<span class="string">'a'</span>,<span class="string">'b'</span>] &gt;&gt;= \ch -&gt; <span class="keyword">return</span> (n,ch)   
[(<span class="number">1</span>,<span class="string">'a'</span>),(<span class="number">1</span>,<span class="string">'b'</span>),(<span class="number">2</span>,<span class="string">'a'</span>),(<span class="number">2</span>,<span class="string">'b'</span>)]

<span class="comment">-- 用do重构</span>
listOfTuples :: [(Int,Char)]   
listOfTuples = <span class="keyword">do</span>   
    n &lt;- [<span class="number">1</span>,<span class="number">2</span>]   
    ch &lt;- [<span class="string">'a'</span>,<span class="string">'b'</span>]   
    <span class="keyword">return</span> (n,ch)
<span class="comment">-- 用 list comprehension 重构</span>
ghci&gt; [ (n,ch) | n &lt;- [<span class="number">1</span>,<span class="number">2</span>], ch &lt;- [<span class="string">'a'</span>,<span class="string">'b'</span>] ]   
[(<span class="number">1</span>,<span class="string">'a'</span>),(<span class="number">1</span>,<span class="string">'b'</span>),(<span class="number">2</span>,<span class="string">'a'</span>),(<span class="number">2</span>,<span class="string">'b'</span>)]

<span class="comment">-- 在 list comprehension 中使用 过滤条件</span>
ghci&gt; [ x | x &lt;- [<span class="number">1.</span><span class="number">.50</span>], <span class="string">'7'</span> `elem` show x ]   
[<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">37</span>,<span class="number">47</span>]

<span class="comment">-- 使用 MonadPlus 模拟 Monoid</span>
class Monad m =&gt; MonadPlus m where
    mzero :: m a
    mplus :: m a -&gt; m a -&gt; m a
instance MonadPlus [] where   
    mzero = []   
    mplus = (++)
<span class="comment">-- 定于 guard 方法</span>
guard :: (MonadPlus m) =&gt; Bool -&gt; m ()   
guard True = <span class="keyword">return</span> ()   
guard False = mzero

<span class="comment">-- guard 使用</span>
ghci&gt; [<span class="number">1.</span><span class="number">.50</span>] &gt;&gt;= (\x -&gt; guard (<span class="string">'7'</span> `elem` show x) &gt;&gt; <span class="keyword">return</span> x)   
[<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">37</span>,<span class="number">47</span>]
ghci&gt; guard (<span class="number">5</span> &gt; <span class="number">2</span>) &gt;&gt; <span class="keyword">return</span> <span class="string">"cool"</span> :: [String]   
[<span class="string">"cool"</span>]   
ghci&gt; guard (<span class="number">1</span> &gt; <span class="number">2</span>) &gt;&gt; <span class="keyword">return</span> <span class="string">"cool"</span> :: [String]   
[]

sevensOnly :: [Int]   
sevensOnly = <span class="keyword">do</span>   
    x &lt;- [<span class="number">1.</span><span class="number">.50</span>]   
    guard (<span class="string">'7'</span> `elem` show x)   
    <span class="keyword">return</span> x
<span class="comment">-- 语法糖如下</span>
ghci&gt; [ x | x &lt;- [<span class="number">1.</span><span class="number">.50</span>], <span class="string">'7'</span> `elem` show x ]   
[<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">37</span>,<span class="number">47</span>]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-Functors Applicative&Monoids]]></title>
    <link href="http://zhpooer.github.io/2014/07/01/haskell%E8%B6%A3%E5%AD%A6-functors-applicative&monoids/"/>
    <id>http://zhpooer.github.io/2014/07/01/haskell趣学-functors-applicative&monoids/</id>
    <published>2014-07-01T07:09:10.000Z</published>
    <updated>2014-07-01T14:20:06.000Z</updated>
    <content type="html"><![CDATA[<p>Functors 是可以被 map over 的对象，
像是 lists，Maybe，trees 等等。
在 Haskell 中用 Functor 这个 typeclass 来描述他。
这个 typeclass 只有一个 method，叫做 fmap，他的型态是
<code>fmap :: (a -&gt; b) -&gt; f a -&gt; f b</code></p>
<p>把盒子里的东西取出来, 调用函数 <code>f</code>, 并放回去.
至于如何取出来(List 是一个一个取出来, Maybe 取出可以取出的),
是看 Functors 的具体实现类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="reserved">import</span> Data.Char   
<span class="reserved">import</span> Data.List   
   
main = <span class="keyword">do</span> line &lt;- fmap (intersperse <span class="string">'-'</span> . reverse . map toUpper) getLine   
        putStrLn line

-- (<span class="function">-&gt;</span>) r a 也可以是一个 Functor
-- <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> <span class="function"><span class="params">(r -&gt; a)</span> -&gt;</span> (r<span class="function"> -&gt;</span> b)
-- 跟一个从 r 到 a 的 <span class="reserved">function</span>，并回传一个从 r 到 b 的 <span class="reserved">function</span>
instance Functor ((<span class="function">-&gt;</span>) r) where   
    fmap f g = (\x<span class="function"> -&gt;</span> f (g x))

-- fmap = (.)
ghci&gt; :t fmap (*<span class="number">3</span>) (+<span class="number">100</span>)   
fmap <span class="function"><span class="params">(*<span class="number">3</span>)</span> <span class="params">(+<span class="number">100</span>)</span> :: <span class="params">(Num a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a   
ghci&gt; fmap (*<span class="number">3</span>) (+<span class="number">100</span>) <span class="number">1</span>   
<span class="number">303</span>   
ghci&gt; (*<span class="number">3</span>) `<span class="javascript">fmap</span>` (+<span class="number">100</span>) $ <span class="number">1</span>   
<span class="number">303</span>   
ghci&gt; (*<span class="number">3</span>) . (+<span class="number">100</span>) $ <span class="number">1</span>   
<span class="number">303</span>   
ghci&gt; fmap (show . (*<span class="number">3</span>)) (*<span class="number">100</span>) <span class="number">1</span>   
<span class="string">"300"</span>
</pre></td></tr></table></figure>

<p>Haskell 的 function 实际上只接受一个参数。
一个型态是 <code>a -&gt; b -&gt; c</code> 的函数实际上是接受 a
然后回传 <code>b -&gt; c</code>，而 <code>b -&gt; c</code> 实际上接受一个 b 然后回传一个 c。
如果我们用比较少的参数调用一个函数，
他就会回传一个函数需要接受剩下的参数。
所以 <code>a -&gt; b -&gt; c</code> 可以写成 <code>a -&gt; (b -&gt; c)</code></p>
<p><code>fmap</code> 可以想象成 接受 function 并回传一个新的 function 的 function,
回传的 function 接受一个 functor 并回传一个 functor</p>
<p>他接受 <code>a -&gt; b</code> 并回传 <code>f a -&gt; f b</code>。这动作叫做 <em>lifting</em>, functor的柯里化</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">-- fmap (*2) 接受一个 functor f，并回传一个基于数字的 functor</span>
<span class="comment">-- 这个 functor 可以是 Maybe, Either String</span>
ghci&gt; :t fmap (*<span class="number">2</span>)   
fmap (*<span class="number">2</span>) :: (Num a, Functor f) =&gt; f a -&gt; f a
<span class="comment">-- fmap (replicate 3) 可以接受一个基于任何型态的 functor，</span>
<span class="comment">-- 并回传一个基于 list 的 functor</span>
ghci&gt; :t fmap (replicate <span class="number">3</span>)   
fmap (replicate <span class="number">3</span>) :: (Functor f) =&gt; f a -&gt; f [a]

<span class="comment">-- 理解为柯里化</span>

ghci&gt; fmap (replicate <span class="number">3</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
<span class="string">[[1,1,1],[2,2,2],[3,3,3],[4,4,4]]</span>   
ghci&gt; fmap (replicate <span class="number">3</span>) (Just <span class="number">4</span>)   
Just [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]   
ghci&gt; fmap (replicate <span class="number">3</span>) (Right <span class="string">"blah"</span>)   
Right [<span class="string">"blah"</span>,<span class="string">"blah"</span>,<span class="string">"blah"</span>]   
ghci&gt; fmap (replicate <span class="number">3</span>) Nothing   
Nothing   
ghci&gt; fmap (replicate <span class="number">3</span>) (Left <span class="string">"foo"</span>)   
Left <span class="string">"foo"</span>
</pre></td></tr></table></figure>

<p>functor law 的第一条说明，如果我们对 functor 做 map id，
那得到的新的 functor 应该要跟原来的一样。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>-- <span class="keyword">id</span> 只是 identity function，他只会把参数照原样丢出
ghci&gt; fmap <span class="keyword">id</span> (Just <span class="number">3</span>)   
Just <span class="number">3</span>   
ghci&gt; <span class="keyword">id</span> (Just <span class="number">3</span>)   
Just <span class="number">3</span>   
ghci&gt; fmap <span class="keyword">id</span> [<span class="number">1.</span><span class="number">.5</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]   
ghci&gt; <span class="keyword">id</span> [<span class="number">1.</span><span class="number">.5</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]   
ghci&gt; fmap <span class="keyword">id</span> []   
[]   
ghci&gt; fmap <span class="keyword">id</span> Nothing   
Nothing
</pre></td></tr></table></figure>

<p>functors的结合律(第二定律):
<code>fmap (f . g) = fmap f . fmap g</code>, 
<code>fmap (f . g) F = fmap f (fmap g F)</code></p>
<p>如果遵守了 functor laws，我们知道对他做 fmap 不会做多余的事情，
只是用一个函数做映射而已。
这让写出来的代码足够抽象也容易扩展。
因为我们可以用定律来推论类型的行为。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">-- 违反定律的案例</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">CMaybe</span> a = <span class="type">CNothing</span> | <span class="type">CJust</span> <span class="type">Int</span> a <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>
<span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">CMaybe</span> <span class="keyword">where</span></span>   
    fmap f <span class="type">CNothing</span> = <span class="type">CNothing</span>   
    fmap f (<span class="type">CJust</span> counter x) = <span class="type">CJust</span> (counter+<span class="number">1</span>) (f x)

<span class="title">ghci</span>&gt; fmap id (<span class="type">CJust</span> <span class="number">0</span> <span class="string">"haha"</span>)   
<span class="type">CJust</span> <span class="number">1</span> <span class="string">"haha"</span>   
<span class="title">ghci</span>&gt; id (<span class="type">CJust</span> <span class="number">0</span> <span class="string">"haha"</span>)   
<span class="type">CJust</span> <span class="number">0</span> <span class="string">"haha"</span>
</pre></td></tr></table></figure>

<h1 id="applicative-functors">Applicative functors</h1>
<p>它的核心是包装函数, 供盒子调用, 如何调用是盒子的具体实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="container">(<span class="type">Functor</span> <span class="title">f</span>)</span> =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span>
    <span class="comment">-- 包装成`盒子`, 主要用作包装 函数</span>
    pure :: a -&gt; f a
    <span class="comment">-- 装在盒子里的是 一个柯里化的函数</span>
    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b
<span class="class">
<span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>   
    pure = <span class="type">Just</span>   
    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span>   
    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something

<span class="title">ghci</span>&gt; <span class="type">Just</span> (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span>   
<span class="type">Just</span> <span class="number">12</span>   
<span class="title">ghci</span>&gt; pure (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">10</span>   
<span class="type">Just</span> <span class="number">13</span>   
<span class="title">ghci</span>&gt; pure (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span>   
<span class="type">Just</span> <span class="number">12</span>   
<span class="title">ghci</span>&gt; <span class="type">Just</span> (++<span class="string">"hahah"</span>) &lt;*&gt; <span class="type">Nothing</span>   
<span class="type">Nothing</span>   
<span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="string">"woot"</span>   
<span class="type">Nothing</span>

<span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span>   
<span class="type">Just</span> <span class="number">8</span>   
<span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Nothing</span>   
<span class="type">Nothing</span>   
<span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span>   
<span class="type">Nothing</span>
</pre></td></tr></table></figure>

<p><code>pure f &lt;*&gt; x</code> 等于 <code>fmap f x</code>, 中缀版的 <code>fmap</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="function"><span class="params">(&lt;$&gt;)</span> :: <span class="params">(Functor f)</span> =&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> f a<span class="function"> -&gt;</span> f b   
f &lt;$&gt; x = fmap f x

-- 如果三个 applicative functor, 可以写成 f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z。
-- 如果参数是普通值的话。我们则写成 f x y z

ghci&gt; (++) &lt;$&gt; Just <span class="string">"johntra"</span> &lt;*&gt; Just <span class="string">"volta"</span>   
Just <span class="string">"johntravolta"</span>
ghci&gt; (++) <span class="string">"johntra"</span> <span class="string">"volta"</span>   
<span class="string">"johntravolta"</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">ghci</span>&gt; <span class="tag">pure</span> "<span class="tag">Hey</span>" :: <span class="attr_selector">[String]</span>   
<span class="attr_selector">["Hey"]</span>   
<span class="tag">ghci</span>&gt; <span class="tag">pure</span> "<span class="tag">Hey</span>" :: <span class="tag">Maybe</span> <span class="tag">String</span>   
<span class="tag">Just</span> "<span class="tag">Hey</span>"

<span class="tag">--</span> <span class="tag">List</span> 可以当做一个容器
<span class="tag">--</span> <span class="tag">List</span> <span class="tag">instance</span>: (&lt;*&gt;) :: <span class="attr_selector">[a -&gt; b]</span> <span class="tag">-</span>&gt; <span class="attr_selector">[a]</span> <span class="tag">-</span>&gt; <span class="attr_selector">[b]</span>
<span class="tag">ghci</span>&gt; <span class="attr_selector">[(*0),(+100),(^2)]</span> &lt;*&gt; <span class="attr_selector">[1,2,3]</span>   
<span class="attr_selector">[0,0,0,101,102,103,1,4,9]</span>
<span class="tag">ghci</span>&gt; <span class="attr_selector">[(+),(*)]</span> &lt;*&gt; <span class="attr_selector">[1,2]</span> &lt;*&gt; <span class="attr_selector">[3,4]</span>   
<span class="attr_selector">[4,5,5,6,3,4,6,8]</span>

<span class="tag">ghci</span>&gt; <span class="attr_selector">[ x*y | x &lt;- [2,5,10]</span>, <span class="tag">y</span> &lt;<span class="tag">-</span> <span class="attr_selector">[8,10,11]</span>]      
<span class="attr_selector">[16,20,22,40,50,55,80,100,110]</span>
<span class="tag">--</span> 比较这两个方法
<span class="tag">ghci</span>&gt; (*) &lt;$&gt; <span class="attr_selector">[2,5,10]</span> &lt;*&gt; <span class="attr_selector">[8,10,11]</span>   
<span class="attr_selector">[16,20,22,40,50,55,80,100,110]</span>

<span class="tag">ghci</span>&gt; <span class="tag">filter</span> (&gt;50) $ (*) &lt;$&gt; <span class="attr_selector">[2,5,10]</span> &lt;*&gt; <span class="attr_selector">[8,10,11]</span>   
<span class="attr_selector">[55,80,100,110]</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>instance Applicative IO where   
    pure = <span class="constant">return</span>   
    <span class="operator">a</span> &lt;*&gt; b = <span class="built_in">do</span>   
        f &lt;- <span class="operator">a</span>   
        x &lt;- b   
        <span class="constant">return</span> (f x)

myAction :: IO String   
myAction = <span class="built_in">do</span>   
    <span class="operator">a</span> &lt;- getLine   
    b &lt;- getLine   
    <span class="constant">return</span> $ <span class="operator">a</span> ++ b
<span class="comment">-- 更加抽象了</span>
myAction :: IO String   
myAction = (++) &lt;$&gt; getLine &lt;*&gt; getLine

main = <span class="built_in">do</span>   
    <span class="operator">a</span> &lt;- (++) &lt;$&gt; getLine &lt;*&gt; getLine   
    putStrLn $ <span class="string">"The two lines concatenated turn out to be: "</span> ++ <span class="operator">a</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre>instance Applicative ((<span class="function">-&gt;</span>) r) where
    -- 包装函数, 永远返回这个函数(或值)
    pure x = (\_<span class="function"> -&gt;</span> x)
    -- 这里有点不理解!!, 这里的 f 应该是 a<span class="function"> -&gt;</span> a<span class="function"> -&gt;</span> a
    f &lt;*&gt; g = \x<span class="function"> -&gt;</span> f x (g x)

-- 当我们用 pure 将一个值包成 applicative functor 的时候，他产生的结果永远都会是那个值
ghci&gt; (pure <span class="number">3</span>) <span class="string">"blah"</span>
<span class="number">3</span>

ghci&gt; :t (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>)   
<span class="function"><span class="params">(+)</span> &lt;<span class="title">$</span>&gt; <span class="params">(+<span class="number">3</span>)</span> &lt;*&gt; <span class="params">(*<span class="number">100</span>)</span> :: <span class="params">(Num a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a
-- 原理是左结合, 直觉可以理解为(<span class="number">5</span>+<span class="number">3</span>) + (<span class="number">5</span>*<span class="number">100</span>)
ghci&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span>   
<span class="number">508</span>
ghci&gt; (\x y z<span class="function"> -&gt;</span> [x,y,z]) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">2</span>) &lt;*&gt; (/<span class="number">2</span>) $ <span class="number">5</span>   
[<span class="number">8.0</span>,<span class="number">10.0</span>,<span class="number">2.5</span>]

-- ZipList用法
instance Applicative ZipList where   
        pure x = ZipList (repeat x)   
        ZipList fs &lt;*&gt; ZipList xs = ZipList (zipWith (\f x<span class="function"> -&gt;</span> f x) fs xs)

-- 必须用 getZipList 函数来从 zip list 取出一个普通的 list
ghci&gt; getZipList $ (+) &lt;$&gt; ZipList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;*&gt; ZipList [<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>]   
[<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>]   
ghci&gt; getZipList $ (+) &lt;$&gt; ZipList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;*&gt; ZipList [<span class="number">100</span>,<span class="number">100.</span>.]   
[<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>]   
ghci&gt; getZipList $ max &lt;$&gt; ZipList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>] &lt;*&gt; ZipList [<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]   
[<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]   
ghci&gt; getZipList $ (,,) &lt;$&gt; ZipList <span class="string">"dog"</span> &lt;*&gt; ZipList <span class="string">"cat"</span> &lt;*&gt; ZipList <span class="string">"rat"</span>   
[(<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>),(<span class="string">'o'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>),(<span class="string">'g'</span>,<span class="string">'t'</span>,<span class="string">'t'</span>)]
</pre></td></tr></table></figure>

<p>除了 zipWith，标准函式库中也有 zipWith3, zipWith4 之类的函数，
最多支持到 7。
zipWith 接受一个接受两个参数的函数，
并把两个 list zip 起来。
zipWith3 则接受一个接受三个参数的函数，
然后把三个 list zip 起来。以此类推。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="comment">-- exist in Control.Applicative</span>
liftA2 :: (Applicative f) =&gt; (a -&gt; b -&gt; c) -&gt; f a -&gt; f b -&gt; f c   
liftA2 f a b = f &lt;$&gt; a &lt;*&gt; b

ghci&gt; liftA2 (:) (Just <span class="number">3</span>) (Just [<span class="number">4</span>])   
Just [<span class="number">3</span>,<span class="number">4</span>]   
ghci&gt; (:) &lt;$&gt; Just <span class="number">3</span> &lt;*&gt; Just [<span class="number">4</span>]   
Just [<span class="number">3</span>,<span class="number">4</span>]

sequenceA :: (Applicative f) =&gt; [f a] -&gt; f [a]   
sequenceA [] = pure []   
sequenceA (x:xs) = (:) &lt;$&gt; x &lt;*&gt; sequenceA xs

ghci&gt; sequenceA [Just <span class="number">1</span>, Just <span class="number">2</span>]
Just [<span class="number">1</span>,<span class="number">2</span>]

<span class="comment">-- 也可以这样定义</span>
sequenceA :: (Applicative f) =&gt; [f a] -&gt; f [a]   
sequenceA = foldr (liftA2 (:)) (pure [])

ghci&gt; sequenceA [Just <span class="number">3</span>, Just <span class="number">2</span>, Just <span class="number">1</span>]   
Just [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
ghci&gt; sequenceA [Just <span class="number">3</span>, Nothing, Just <span class="number">1</span>]   
Nothing   
ghci&gt; sequenceA [(+<span class="number">3</span>),(+<span class="number">2</span>),(+<span class="number">1</span>)] <span class="number">3</span>   
[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]   
ghci&gt; sequenceA <span class="string">[[1,2,3],[4,5,6]]</span>   
<span class="string">[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]</span>   
ghci&gt; sequenceA <span class="string">[[1,2,3],[4,5,6],[3,4,4],[]]</span>   
[]

ghci&gt; sequenceA [(&gt;<span class="number">4</span>),(&lt;<span class="number">10</span>),odd] <span class="number">7</span>   
[True,True,True]   
ghci&gt; <span class="keyword">and</span> $ sequenceA [(&gt;<span class="number">4</span>),(&lt;<span class="number">10</span>),odd] <span class="number">7</span>   
True

ghci&gt; sequenceA <span class="string">[[1,2,3],[4,5,6]]</span>   
<span class="string">[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]</span>   
ghci&gt; <span class="string">[[x,y] | x &lt;- [1,2,3], y &lt;- [4,5,6]]</span>   
<span class="string">[[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]</span>   
ghci&gt; sequenceA <span class="string">[[1,2],[3,4]]</span>   
<span class="string">[[1,3],[1,4],[2,3],[2,4]]</span>   
ghci&gt; <span class="string">[[x,y] | x &lt;- [1,2], y &lt;- [3,4]]</span>   
<span class="string">[[1,3],[1,4],[2,3],[2,4]]</span>   
ghci&gt; sequenceA <span class="string">[[1,2],[3,4],[5,6]]</span>   
<span class="string">[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]</span>   
ghci&gt; <span class="string">[[x,y,z] | x &lt;- [1,2], y &lt;- [3,4], z &lt;- [5,6]]</span>   
<span class="string">[[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]</span>

<span class="comment">-- 当使用在 I/O action 上的时候，sequenceA 跟 sequence 是等价的</span>
ghci&gt; sequenceA [getLine, getLine, getLine]   
heyh   
ho   
woo   
[<span class="string">"heyh"</span>,<span class="string">"ho"</span>,<span class="string">"woo"</span>]
</pre></td></tr></table></figure>

<p>applicative functor 应该遵守如下定律</p>
<pre><code>pure id &lt;*&gt; v = v
pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)
pure f &lt;*&gt; pure x = pure (f x)
u &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u
</code></pre><h1 id="-newtype">关键字 newtype</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">ZipList</span> a = <span class="type">ZipList</span> [a]</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">ZipList</span> a = <span class="type">ZipList</span> <span class="container">{ <span class="title">getZipList</span> :: [<span class="title">a</span>] }</span></span>
<span class="comment">-- 为了可以调用 getZipList $ ZipList [(+1),(*100),(*5)] &lt;*&gt; ZipList [1,2,3]  </span>

<span class="typedef"><span class="keyword">newtype</span> <span class="type">ZipList</span> a = <span class="type">ZipList</span> <span class="container">{ <span class="title">getZipList</span> :: [<span class="title">a</span>] }</span></span>
<span class="comment">-- newtype 比较快速, 用data解开来需要成本.</span>
<span class="comment">-- 用 newtype 的话，Haskell 会知道只是要将一个现有的类型包成一个新的类型</span>
<span class="comment">-- 内部运作完全一样但只是要一个全新的类型而已。</span>
</pre></td></tr></table></figure>

<p>newtype 来制作一个新的类型时，
只能定义单一一个值构造子，
而且那个构造子只能有一个字段</p>
<p>使用 data 的话，可以让那个类型有好几个值构造子，
并且每个构造子可以有零个或多个字段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Profession</span> = <span class="type">Fighter</span> | <span class="type">Archer</span> | <span class="type">Accountant</span>   </span>
   
<span class="typedef"><span class="keyword">data</span> <span class="type">Race</span> = <span class="type">Human</span> | <span class="type">Elf</span> | <span class="type">Orc</span> | <span class="type">Goblin</span></span>

<span class="typedef"><span class="keyword">newtype</span> <span class="type">CharList</span> = <span class="type">CharList</span> <span class="container">{ <span class="title">getCharList</span> :: [<span class="type">Char</span>] }</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Eq</span>, <span class="type">Show</span>)</span></span>
</pre></td></tr></table></figure>

<p>newtype 的 lazy 性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">CoolBool</span> = <span class="type">CoolBool</span> <span class="container">{ <span class="title">getCoolBool</span> :: <span class="type">Bool</span> }</span></span>
<span class="title">helloMe</span> :: <span class="type">CoolBool</span> -&gt; <span class="type">String</span>   
<span class="title">helloMe</span> (<span class="type">CoolBool</span> _) = <span class="string">"hello"</span>

<span class="comment">-- 不能运行</span>
<span class="title">ghci</span>&gt; helloMe undefined   
<span class="string">"*** Exception: Prelude.undefined  "</span>

<span class="comment">-- 使用 newtype 时，Haskell 内部可以将新的类型用旧的类型来表示</span>
<span class="comment">-- Haskell 会知道 newtype 定义的类型一定只会有一个构造子，</span>
<span class="comment">-- 不必计算喂给函数的值就能确定他是 (CoolBool _) 的形式，</span>
<span class="comment">-- 因为 newtype 只有一个可能的值跟单一字段</span>
<span class="typedef"><span class="keyword">newtype</span> <span class="type">CoolBool</span> = <span class="type">CoolBool</span> <span class="container">{ <span class="title">getCoolBool</span> :: <span class="type">Bool</span> }</span></span>
<span class="title">ghci</span>&gt; helloMe undefined   
<span class="string">"hello"</span>
</pre></td></tr></table></figure>

<p>对 newtype 做模式匹配并不是像从盒子中取出东西，
他比较像是将一个类型转换成另一个类型。</p>
<h2 id="type-vs-newtype-vs-data">type vs newtype vs data</h2>
<p><code>type</code> 关键字是让我们定义 type synonyms。
他代表我们只是要给一个现有的类型另一个名字</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">type</span> <span class="title">IntList</span> = [Int]

ghci&gt; ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: IntList) ++ ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: [Int])   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
</pre></td></tr></table></figure>

<p><code>newtype</code> 关键字将现有的类型包成一个新的类型，
大部分是为了要让他们可以是特定 typeclass 的 instance 而这样做.
使用 <code>newtype</code> 来包裹一个现有的类型时，这个类型跟原有的类型是分开的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">newtype</span> <span class="type">CharList</span> = <span class="type">CharList</span> <span class="container">{ <span class="title">getCharList</span> :: [<span class="type">Char</span>] }</span></span>
</pre></td></tr></table></figure>

<p>可以将 <code>newtype</code> 想成是只能定义一个构造子跟一个字段的 data 宣告</p>
<p>使用 <code>data</code> 关键字是为了定义自己的类型。</p>
<p>如果你只是希望你的 type signature 看起来比较干净，
你可以只需要 <code>type synonym</code>。
如果你想要将现有的类型包起来并定义成一个 <code>type class</code> 的 instance，
你可以尝试使用 <code>newtype</code>。
如果你想要定义完全新的类型，那你应该使用 data 关键字</p>
<h1 id="monoids">Monoids</h1>
<p>一个 monoid 是你有一个遵守结合律的二元函数还有
一个可以相对于那个函数作为 identity 的值。</p>
<p>monoid 可以是一个链式的抽取规则, 可以看 Ordering monoid</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">-- import Data.Monoid</span>
<span class="class"><span class="keyword">class</span> <span class="type">Monoid</span> m <span class="keyword">where</span></span>   
    mempty :: m   
    mappend :: m -&gt; m -&gt; m   
    mconcat :: [m] -&gt; m   
    mconcat = foldr mappend mempty
</pre></td></tr></table></figure>

<p>monoid 必须遵守结合律和交换律</p>
<pre><code>mempty `mappend` x = x
x `mappend` mempty = x
(x `mappend` y) `mappend` z = x `mappend` (y `mappend` z)
</code></pre><h2 id="list-monoid">List Monoid</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> [a] <span class="keyword">where</span></span>   
    mempty = []   
    mappend = (++)

<span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] `mappend` [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="title">ghci</span>&gt; (<span class="string">"one"</span> `mappend` <span class="string">"two"</span>) `mappend` <span class="string">"tree"</span>   
<span class="string">"onetwotree"</span>
<span class="title">ghci</span>&gt; mconcat [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">6</span>],[<span class="number">9</span>]]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>]   
<span class="title">ghci</span>&gt; mempty :: [a]   
[]

<span class="comment">-- 乘法的Monoid实现</span>
<span class="typedef"><span class="keyword">newtype</span> <span class="type">Product</span> a =  <span class="type">Product</span> <span class="container">{ <span class="title">getProduct</span> :: <span class="title">a</span> }</span>   </span>
    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>, <span class="type">Bounded</span>)
<span class="class">
<span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> <span class="container">(<span class="type">Product</span> <span class="title">a</span>)</span> <span class="keyword">where</span></span>   
    mempty = <span class="type">Product</span> <span class="number">1</span>   
    <span class="type">Product</span> x `mappend` <span class="type">Product</span> y = <span class="type">Product</span> (x * y)

<span class="comment">-- 或的Monoid实现</span>
<span class="typedef"><span class="keyword">newtype</span> <span class="type">Any</span> = <span class="type">Any</span> <span class="container">{ <span class="title">getAny</span> :: <span class="type">Bool</span> }</span>   </span>
    <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>, <span class="type">Bounded</span>)
<span class="class">
<span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Any</span> <span class="keyword">where</span></span>   
    mempty = <span class="type">Any</span> <span class="type">False</span>   
    <span class="type">Any</span> x `mappend` <span class="type">Any</span> y = <span class="type">Any</span> (x || y)

<span class="comment">-- 与的Monoid实现</span>
<span class="typedef"><span class="keyword">newtype</span> <span class="type">All</span> = <span class="type">All</span> <span class="container">{ <span class="title">getAll</span> :: <span class="type">Bool</span> }</span>   </span>
        <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>, <span class="type">Bounded</span>)
<span class="class">        
<span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">All</span> <span class="keyword">where</span></span>   
        mempty = <span class="type">All</span> <span class="type">True</span>   
        <span class="type">All</span> x `mappend` <span class="type">All</span> y = <span class="type">All</span> (x && y)


<span class="comment">-- Ordering monoid</span>
<span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Ordering</span> <span class="keyword">where</span></span>   
    mempty = <span class="type">EQ</span>   
    <span class="type">LT</span> `mappend` _ = <span class="type">LT</span>   
    <span class="type">EQ</span> `mappend` y = y   
    <span class="type">GT</span> `mappend` _ = <span class="type">GT</span>

<span class="comment">-- 使用</span>
<span class="title">lengthCompare</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Ordering</span>   
<span class="title">lengthCompare</span> x y = <span class="keyword">let</span> a = length x `compare` length y    
                        b = x `compare` y   
                    <span class="keyword">in</span>  <span class="keyword">if</span> a == <span class="type">EQ</span> <span class="keyword">then</span> b <span class="keyword">else</span> a

<span class="import"><span class="keyword">import</span> Data.Monoid</span>
<span class="title">lengthCompare</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Ordering</span>
<span class="title">lengthCompare</span> x y = (length x `compare` length y) `mappend`
                    (x `compare` y)
</pre></td></tr></table></figure>

<h2 id="maybe-monoid">Maybe monoid</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>instance Monoid <span class="literal">a</span> =&gt; Monoid (Maybe <span class="literal">a</span>) where   
    mempty = Nothing   
    Nothing <span class="escape">`m</span>append<span class="escape">` </span>m = m   
    m <span class="escape">`m</span>append<span class="escape">` </span>Nothing = m   
    Just m1 <span class="escape">`m</span>append<span class="escape">` </span>Just m2 = Just (m1 <span class="escape">`m</span>append<span class="escape">` </span>m2)

ghci&gt; Nothing <span class="escape">`m</span>append<span class="escape">` </span>Just <span class="string">"andy"</span>   
Just <span class="string">"andy"</span>   
ghci&gt; Just LT <span class="escape">`m</span>append<span class="escape">` </span>Nothing   
Just LT   
ghci&gt; Just (Sum <span class="number">3</span>) <span class="escape">`m</span>append<span class="escape">` </span>Just (Sum <span class="number">4</span>)   
Just (Sum {getSum = <span class="number">7</span>})


instance Monoid (First <span class="literal">a</span>) where   
    mempty = First Nothing   
    First (Just x) <span class="escape">`m</span>append<span class="escape">` </span>_ = First (Just x)   
    First Nothing <span class="escape">`m</span>append<span class="escape">` </span>x = x

ghci&gt; getFirst $ First (Just '<span class="literal">a</span>') <span class="escape">`m</span>append<span class="escape">` </span>First (Just 'b')   
Just '<span class="literal">a</span>'   
ghci&gt; getFirst $ First Nothing <span class="escape">`m</span>append<span class="escape">` </span>First (Just 'b')   
Just 'b'   
ghci&gt; getFirst $ First (Just '<span class="literal">a</span>') <span class="escape">`m</span>append<span class="escape">` </span>First Nothing   
Just '<span class="literal">a</span>'
</pre></td></tr></table></figure>

<h2 id="using-monoids-to-fold-data-structures">Using monoids to fold data structures</h2>
<p><code>import qualified Foldable as F</code></p>
<p><code>foldr</code> 接受一个 list 并将他 fold 起来，
<code>Data.Foldable</code> 中的 foldr 接受任何可以 fold 的类型。并不只是 list。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-- 结果相同
ghci&gt; foldr <span class="comment">(*) 1 [1,2,3]   
6   
ghci&gt; F.foldr (*)</span> <span class="number">1</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   
<span class="number">6</span>

ghci&gt; F.foldl (+) <span class="number">2</span> (Just <span class="number">9</span>)   
<span class="number">11</span>   
ghci&gt; F.foldr (||) <span class="keyword">False</span> (Just <span class="keyword">True</span>)   
<span class="keyword">True</span>
</pre></td></tr></table></figure>

<p>简化整棵树到只有单一一个 monoid</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre>
<span class="comment">-- 定义 foldMap :: (Monoid m, Foldable t) =&gt; (a -&gt; m) -&gt; t a -&gt; m</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Node</span> a <span class="container">(<span class="type">Tree</span> <span class="title">a</span>)</span> <span class="container">(<span class="type">Tree</span> <span class="title">a</span>)</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>)</span></span>
<span class="class"><span class="keyword">instance</span> <span class="type">F</span>.<span class="type">Foldable</span> <span class="type">Tree</span> <span class="keyword">where</span></span>   
    foldMap f <span class="type">Empty</span> = mempty   
    foldMap f (<span class="type">Node</span> x l r) = <span class="type">F</span>.foldMap f l `mappend`   
                                f x           `mappend`   
                                <span class="type">F</span>.foldMap f r

<span class="title">testTree</span> = <span class="type">Node</span> <span class="number">5</span>   
            (<span class="type">Node</span> <span class="number">3</span>   
             (<span class="type">Node</span> <span class="number">1</span> <span class="type">Empty</span> <span class="type">Empty</span>)   
             (<span class="type">Node</span> <span class="number">6</span> <span class="type">Empty</span> <span class="type">Empty</span>)   
            )   
            (<span class="type">Node</span> <span class="number">9</span>   
             (<span class="type">Node</span> <span class="number">8</span> <span class="type">Empty</span> <span class="type">Empty</span>)   
             (<span class="type">Node</span> <span class="number">10</span> <span class="type">Empty</span> <span class="type">Empty</span>)   
            )

<span class="title">ghci</span>&gt; <span class="type">F</span>.foldl (+) <span class="number">0</span> testTree   
<span class="number">42</span>   
<span class="title">ghci</span>&gt; <span class="type">F</span>.foldl (*) <span class="number">1</span> testTree   
<span class="number">64800</span>

<span class="comment">-- foldMap 对简化结构至单一 monoid 值有用</span>
<span class="comment">-- 树中有没有 3</span>
<span class="title">ghci</span>&gt; getAny $ <span class="type">F</span>.foldMap (\x -&gt; <span class="type">Any</span> $ x == <span class="number">3</span>) testTree   
<span class="type">True</span>
<span class="comment">-- 树中有没有大于15的数</span>
<span class="title">ghci</span>&gt; getAny $ <span class="type">F</span>.foldMap (\x -&gt; <span class="type">Any</span> $ x &gt; <span class="number">15</span>) testTree   
<span class="type">False</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-输入与输出]]></title>
    <link href="http://zhpooer.github.io/2014/06/30/haskell%E8%B6%A3%E5%AD%A6-%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>http://zhpooer.github.io/2014/06/30/haskell趣学-输入与输出/</id>
    <published>2014-06-30T07:12:13.000Z</published>
    <updated>2014-07-01T06:54:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="helloworld">HelloWorld</h1>
<p>函数式语言, 一个函数不能改变状态(改变变量的内容),
当一个函数会改变状态,  我们说这函数是由副作用的.
如果我们用同样的参数调用两次同一个函数，它会回传相同的结果.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre>main = putStrLn <span class="string">"hello, world"</span>

&gt; ghc --make helloworld
&gt; ./helloworld

-- putStrLn 接受一个字符串并回传一个<span class="keyword">I</span>/<span class="keyword">O</span> action,
-- 这<span class="keyword">I</span>/<span class="keyword">O</span> action包含了() 形态
-- 一个 <span class="keyword">I</span>/<span class="keyword">O</span> action 是一个会造成副作用的动作，
-- 常是指读取输入或输出到屏幕，同时也代表会回传某些值
-- 一个 <span class="keyword">I</span>/<span class="keyword">O</span> action 会在我们把它绑定到 main
-- 这个名字并且执行程序的时候触发。
ghci&gt; :t putStrLn 
putStrLn :: <span class="keyword">String</span> -&gt; IO () 
ghci&gt; :t putStrLn <span class="string">"hello, world"</span> 
putStrLn <span class="string">"hello, world"</span> :: IO ()

-- 用 do 并且接着一连串指令, 每一步都是一个 <span class="keyword">I</span>/<span class="keyword">O</span> action
-- 所有的<span class="keyword">I</span>/<span class="keyword">O</span> action 用 do 绑定在一起变成了一个大的<span class="keyword">I</span>/<span class="keyword">O</span> action
-- main 的型态永远都是 main :: IO something
main = do 
    putStrLn <span class="string">"Hello, what's your name?"</span> 
    name &lt;- getLine 
    putStrLn (<span class="string">"Hey "</span> ++ name ++ <span class="string">", you rock!"</span>)

-- main函数中执行一个 <span class="keyword">I</span>/<span class="keyword">O</span> action getLine 并将它的结果绑定到 name 这个名字
ghci&gt; :t getLine 
getLine :: IO <span class="keyword">String</span>
</pre></td></tr></table></figure>

<p>I/O action 就是一个盒子, 它会和真实世界交互(副作用),
一旦它带了某些数据给你，打开盒子的唯一办法就是用 <code>&lt;-</code>.
而且如果我们要从 I/O action 拿出某些数据，
就一定同时要在另一个 I/O action 中</p>
<p>getLine 在这样的意义下是不纯粹的,
因为执行两次的时候它没办法保证会回传一样的值,
所以它需要在一个<code>IO</code>的形态构建子中,
任何一段程序一旦依赖着 I/O 数据的话，
那段程序也会被视为 I/O code</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-- 错误用法, getLine 是<span class="keyword">I</span>/<span class="keyword">O</span> Action
nameTag = <span class="string">"Hello, my name is "</span> ++ getLine

-- 可以用 do 来串接 <span class="keyword">I</span>/<span class="keyword">O</span> actions，
-- 再用 do 来串接这些串接起来的 <span class="keyword">I</span>/<span class="keyword">O</span> actions。
-- 不过只有最外面的 <span class="keyword">I</span>/<span class="keyword">O</span> action 被指定给 main 才会触发执行。
main = do
    _ &lt;- putStrLn <span class="string">"hello, what's your name?"</span>
    name &lt;- getLine
    putStrLn(<span class="string">"Hey"</span> ++ name ++ <span class="string">", you rock"</span>)
</pre></td></tr></table></figure>

<h2 id="let-binding">let binding</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="title">main</span> = <span class="keyword">do</span> 
    putStrLn <span class="string">"What's your first name?"</span> 
    firstName &lt;- getLine 
    putStrLn <span class="string">"What's your last name?"</span> 
    lastName &lt;- getLine 
    <span class="keyword">let</span> bigFirstName = map toUpper firstName 
        bigLastName = map toUpper lastName 
    putStrLn $ <span class="string">"hey "</span> ++ bigFirstName ++ <span class="string">" "</span> ++ bigLastName ++ <span class="string">", how are you?"</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">-- return "haha" 的型态是 IO String</span>
main = <span class="built_in">do</span> 
    <span class="built_in">line</span> &lt;- getLine 
    <span class="keyword">if</span> <span class="constant">null</span> <span class="built_in">line</span> 
        <span class="keyword">then</span> <span class="constant">return</span> () 
        <span class="keyword">else</span> <span class="built_in">do</span> 
            putStrLn $ reverseWords <span class="built_in">line</span> 
            main  <span class="comment">-- 递归调用了main</span>
            
<span class="comment">-- reverseWords st = unwords (map reverse (words st)) </span>
reverseWords :: String -&gt; String 
reverseWords = unwords . map reverse . <span class="keyword">words</span>

<span class="comment">-- return 与 &lt;- 作用相反。return 把 value 装进盒子中，</span>
<span class="comment">-- 而 &lt;- 将 value 从盒子拿出来，并绑定一个名称</span>
main = <span class="built_in">do</span> 
    <span class="operator">a</span> &lt;- <span class="constant">return</span> <span class="string">"hell"</span> 
    b &lt;- <span class="constant">return</span> <span class="string">"yeah!"</span> 
    putStrLn $ <span class="operator">a</span> ++ <span class="string">" "</span> ++ b

<span class="comment">-- 另一个版本</span>
main = <span class="built_in">do</span> 
    let <span class="operator">a</span> = <span class="string">"hell"</span> 
        b = <span class="string">"yeah"</span> 
    putStrLn $ <span class="operator">a</span> ++ <span class="string">" "</span> ++ b

main = <span class="built_in">do</span> print True
          putChar <span class="string">'a'</span>
          c &lt;- getChar
</pre></td></tr></table></figure>

<h2 id="io-">io 语法糖</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre>main = <span class="keyword">do</span> 
    c &lt;- getChar 
    <span class="keyword">if</span> c /= <span class="string">' '</span> 
        <span class="keyword">then</span> <span class="keyword">do</span> 
            putChar c 
            main 
        <span class="keyword">else</span> <span class="keyword">return</span> ()

-- <span class="keyword">when</span> :: Monad m<span class="function"> =&gt;</span> Bool<span class="function"> -&gt;</span> m <span class="function"><span class="params">()</span> -&gt;</span> m ()
<span class="reserved">import</span> Control.Monad 
main = <span class="keyword">do</span> 
    c &lt;- getChar 
    <span class="keyword">when</span> (c /= <span class="string">' '</span>) $ <span class="keyword">do</span> 
        putChar c 
        main
        
-- sequence :: Monad m<span class="function"> =&gt;</span> [m a]<span class="function"> -&gt;</span> m [a]
main = <span class="keyword">do</span> 
    rs &lt;- sequence [getLine, getLine, getLine] 
    <span class="built_in">print</span> rs

ghci&gt; sequence (map <span class="built_in">print</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])  sequence (map <span class="built_in">print</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])
-- 同上
ghci&gt; mapM <span class="built_in">print</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]     
<span class="number">1</span> 
<span class="number">2</span> 
<span class="number">3</span> 
[(),(),()]
-- 同上, 把结果丢掉
ghci&gt; mapM_ <span class="built_in">print</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 
<span class="number">1</span> 
<span class="number">2</span> 
<span class="number">3</span>

-- forever :: Monad m<span class="function"> =&gt;</span> m a<span class="function"> -&gt;</span> m b, 不断的要用户输入东西
<span class="reserved">import</span> Control.Monad 
<span class="reserved">import</span> Data.Char 
 
main = forever $ <span class="keyword">do</span> 
    putStr <span class="string">"Give me some input: "</span> 
    l &lt;- getLine 
    putStrLn $ map toUpper l

-- forM
<span class="reserved">import</span> Control.Monad 
main = <span class="keyword">do</span>  
    colors &lt;- forM [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] (\a<span class="function"> -&gt;</span> <span class="keyword">do</span> 
        putStrLn $ <span class="string">"Which color do you associate with the number "</span> ++ show a ++ <span class="string">"?"</span> 
        color &lt;- getLine 
        <span class="keyword">return</span> color) 
    putStrLn <span class="string">"The colors that you associate with 1, 2, 3 and 4 are: "</span> 
    mapM putStrLn colors
</pre></td></tr></table></figure>

<h1 id="-">文件和字符流</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">-- cat haiku.txt | ./capslocker</span>
import Control.Monad
import Data.Char
main = <span class="keyword">forever</span> $ <span class="built_in">do</span>
    putStr <span class="string">"Give me some input: "</span>
    l &lt;- getLine
    putStrLn $ map <span class="built_in">toUpper</span> l

<span class="comment">-- 用 getContents 简单</span>
<span class="comment">-- getContents 也是惰性 I/O, 会一行一行读入并输出大写的版本</span>
import Data.Char
main = <span class="built_in">do</span>
    contents &lt;- getContents
    putStr (map <span class="built_in">toUpper</span> contents)
    
<span class="comment">-- 运行效果</span>
<span class="comment">-- &gt; $ ./capslocker </span>
<span class="comment">-- &gt; hey ho </span>
<span class="comment">-- &gt; HEY HO </span>
<span class="comment">-- &gt; lets go </span>
<span class="comment">-- &gt; LETS GO</span>

main = <span class="built_in">do</span> 
    contents &lt;- getContents 
    putStr (shortLinesOnly contents) 
shortLinesOnly :: String -&gt; String 
shortLinesOnly input =  
    let allLines = <span class="keyword">lines</span> input 
        shortLines = <span class="built_in">filter</span> (\<span class="built_in">line</span> -&gt; <span class="built_in">length</span> <span class="built_in">line</span> &lt; <span class="number">10</span>) allLines 
        <span class="built_in">result</span> = unlines shortLines 
    <span class="operator">in</span> <span class="built_in">result</span>
</pre></td></tr></table></figure>

<h2 id="interact">interact</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">-- interact :: (String -&gt; String) -&gt; IO ()</span>
<span class="comment">-- 从用户获取一行一行的输入，</span>
<span class="comment">-- 然后丢回根据那一行运算的结果，再拿取另一行</span>
<span class="comment">-- 这是基于 haskell 的惰性i/o</span>
main = interact shortLinesOnly 
 
shortLinesOnly :: String -&gt; String 
shortLinesOnly input =  
    let allLines = <span class="keyword">lines</span> input 
        shortLines = <span class="built_in">filter</span> (\<span class="built_in">line</span> -&gt; <span class="built_in">length</span> <span class="built_in">line</span> &lt; <span class="number">10</span>) allLines 
        <span class="built_in">result</span> = unlines shortLines 
    <span class="operator">in</span> <span class="built_in">result</span>

<span class="comment">-- 一行搞定</span>
main = interact $ unlines . <span class="built_in">filter</span> ((&lt;<span class="number">10</span>) . <span class="built_in">length</span>) . <span class="keyword">lines</span>
</pre></td></tr></table></figure>

<h2 id="-">文件读写</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="title">main</span> = <span class="keyword">do</span>    
    withFile <span class="string">"something.txt"</span> <span class="type">ReadMode</span> (\handle -&gt; <span class="keyword">do</span>   
        hSetBuffering handle $ <span class="type">BlockBuffering</span> (<span class="type">Just</span> <span class="number">2048</span>)   
        contents &lt;- hGetContents handle   
        putStr contents)

<span class="import"><span class="keyword">import</span> System.IO   </span>
<span class="import"><span class="keyword">import</span> System.Directory   </span>
<span class="import"><span class="keyword">import</span> Data.List   </span>
   
<span class="title">main</span> = <span class="keyword">do</span>         
    handle &lt;- openFile <span class="string">"todo.txt"</span> <span class="type">ReadMode</span>   
    (tempName, tempHandle) &lt;- openTempFile <span class="string">"."</span> <span class="string">"temp"</span>   
    contents &lt;- hGetContents handle   
    <span class="keyword">let</span> todoTasks = lines contents      
    numberedTasks = zipWith (\n line -&gt; show n ++ <span class="string">" - "</span> ++ line) [<span class="number">0.</span>.] todoTasks      
    putStrLn <span class="string">"These are your TO-DO items:"</span>   
    putStr $ unlines numberedTasks   
    putStrLn <span class="string">"Which one do you want to delete?"</span>      
    numberString &lt;- getLine      
    <span class="keyword">let</span> number = read numberString      
    newTodoItems = delete (todoTasks !! number) todoTasks      
    hPutStr tempHandle $ unlines newTodoItems   
    hClose handle   
    hClose tempHandle   
    removeFile <span class="string">"todo.txt"</span>   
    renameFile tempName <span class="string">"todo.txt"</span>
</pre></td></tr></table></figure>

<h1 id="-">命令行引数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre>import System.Environment    
import System.Directory   
import System.IO   
import Data.List   
   
<span class="built_in">dispatch</span> :: [(String, [String] -&gt; IO ())]   
<span class="built_in">dispatch</span> =  [ (<span class="string">"add"</span>, <span class="built_in">add</span>)   
            , (<span class="string">"view"</span>, view)   
            , (<span class="string">"remove"</span>, remove)   
            ]

main = <span class="built_in">do</span>   
    (<span class="command"><span class="keyword">command</span>:<span class="title">args</span>) &lt;- <span class="title">getArgs</span>   </span>
    let (Just action) = lookup <span class="command"><span class="keyword">command</span> <span class="title">dispatch</span>   </span>
    action args V

<span class="built_in">add</span> :: [String] -&gt; IO ()   
<span class="built_in">add</span> [fileName, todoItem] = appendFile fileName (todoItem ++ <span class="string">"\n"</span>)

view :: [String] -&gt; IO ()   
view [fileName] = <span class="built_in">do</span>   
    contents &lt;- readFile fileName   
    let todoTasks = <span class="keyword">lines</span> contents   
    numberedTasks = zipWith (\n <span class="built_in">line</span> -&gt; show n ++ <span class="string">" - "</span> ++ <span class="built_in">line</span>) [<span class="number">0.</span>.] todoTasks   
    putStr $ unlines numberedTasks

remove :: [String] -&gt; IO ()   
remove [fileName, numberString] = <span class="built_in">do</span>   
    handle &lt;- openFile fileName ReadMode   
    (<span class="built_in">tempName</span>, tempHandle) &lt;- openTempFile <span class="string">"."</span> <span class="string">"temp"</span>   
    contents &lt;- hGetContents handle   
    let <span class="built_in">number</span> = <span class="built_in">read</span> numberString   
        todoTasks = <span class="keyword">lines</span> contents   
        newTodoItems = <span class="built_in">delete</span> (todoTasks !! <span class="built_in">number</span>) todoTasks   
    hPutStr tempHandle $ unlines newTodoItems   
    hClose handle   
    hClose tempHandle   
    removeFile fileName   
    renameFile <span class="built_in">tempName</span> fileName
</pre></td></tr></table></figure>

<h1 id="-">乱数</h1>
<p>Haskell 是一个纯粹的函数式语言, 是引用透明的.
那代表你喂给一个函数相同的参数，不管怎么调用都是回传相同的结果.</p>
<p>所以说在 Haskell 中，假如我们能作一个函数，
他会接受一个具随机性的参数，然后根据那些信息还传一个数值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">import</span> System.Random
-- RandomGen <span class="keyword">type</span><span class="class"><span class="keyword">class</span> 是指那些可以当作乱源的型态。</span>
-- 而Random <span class="keyword">type</span><span class="class"><span class="keyword">class</span> 则是可以装乱数的型态</span>
random :: (RandomGen g, Random a) =&gt; g -&gt; (a, g)
</pre></td></tr></table></figure>

<p>在 System.Random 中有一个很酷的型态，叫做 StdGen，
他是 RandomGen 的一个 instance。
我们可以自己手动作一个 StdGen 也可以告诉系统给我们一个现成的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre>ghci&gt; random (mkStdGen <span class="number">949488</span>) :: (Float, StdGen)   
(<span class="number">0.8938442</span>,<span class="number">1597344447</span> <span class="number">1655838864</span>)   
ghci&gt; random (mkStdGen <span class="number">949488</span>) :: (Bool, StdGen)   
(<span class="literal">False</span>,<span class="number">1485632275</span> <span class="number">40692</span>)   
ghci&gt; random (mkStdGen <span class="number">949488</span>) :: (<span class="built_in">Integer</span>, StdGen)   
(<span class="number">1691547873</span>,<span class="number">1597344447</span> <span class="number">1655838864</span>)

threeCoins :: StdGen -&gt; (Bool, Bool, Bool)   
threeCoins gen =    
    <span class="keyword">let</span> (firstCoin, newGen) = random gen   
    (secondCoin, newGen<span class="comment">') = random newGen   </span>
    (thirdCoin, newGen<span class="comment">') = random newGen'   </span>
    <span class="keyword">in</span> (firstCoin, secondCoin, thirdCoin))

-- 返回n个随机数
ghci&gt; <span class="keyword">take</span> <span class="number">5</span> $ randoms (mkStdGen <span class="number">11</span>) :: [Int]   
[-<span class="number">1807975507</span>,<span class="number">545074951</span>,-<span class="number">1015194702</span>,-<span class="number">1622477312</span>,-<span class="number">502893664</span>]   
ghci&gt; <span class="keyword">take</span> <span class="number">5</span> $ randoms (mkStdGen <span class="number">11</span>) :: [Bool]   
[<span class="literal">True</span>,<span class="literal">True</span>,<span class="literal">True</span>,<span class="literal">True</span>,<span class="literal">False</span>]   
ghci&gt; <span class="keyword">take</span> <span class="number">5</span> $ randoms (mkStdGen <span class="number">11</span>) :: [Float]   
[<span class="number">7.904789e-2</span>,<span class="number">0.62691015</span>,<span class="number">0.26363158</span>,<span class="number">0.12223756</span>,<span class="number">0.38291094</span>]

-- 返回一定范围内的乱数
ghci&gt; randomR (<span class="number">1</span>,<span class="number">6</span>) (mkStdGen <span class="number">359353</span>)   
(<span class="number">6</span>,<span class="number">1494289578</span> <span class="number">40692</span>)   
ghci&gt; randomR (<span class="number">1</span>,<span class="number">6</span>) (mkStdGen <span class="number">35935335</span>)   
(<span class="number">3</span>,<span class="number">1250031057</span> <span class="number">40692</span>)

-- 他会产生一连串在给定范围内的乱数
ghci&gt; <span class="keyword">take</span> <span class="number">10</span> $ randomRs (<span class="comment">'a','z') (mkStdGen 3) :: [Char]</span>
</pre></td></tr></table></figure>

<p>以上, 程序永远都会回传同样的乱数, <code>getStdGen</code> 会生成一个真实的随机数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">import</span> System<span class="built_in">.</span>Random
<span class="subst">--</span> getStdGen 的 类型是 IO StdGen
main <span class="subst">=</span> <span class="keyword">do</span>   
    gen <span class="subst">&lt;-</span> getStdGen   
    putStr $ <span class="keyword">take</span> <span class="number">20</span> (randomRs (<span class="string">'a'</span>,<span class="string">'z'</span>) gen)

<span class="subst">--</span> 连续两次调用, 实际上会回传同样的 <span class="built_in">global</span> generator, 可以使用 newStdGen
main <span class="subst">=</span> <span class="keyword">do</span>   
    gen <span class="subst">&lt;-</span> getStdGen   
    putStrLn $ <span class="keyword">take</span> <span class="number">20</span> (randomRs (<span class="string">'a'</span>,<span class="string">'z'</span>) gen)   
    gen2 <span class="subst">&lt;-</span> getStdGen   
    putStr $ <span class="keyword">take</span> <span class="number">20</span> (randomRs (<span class="string">'a'</span>,<span class="string">'z'</span>) gen2)

<span class="subst">--</span> newStdGen 用法
main <span class="subst">=</span> <span class="keyword">do</span>      
    gen <span class="subst">&lt;-</span> getStdGen      
    putStrLn $ <span class="keyword">take</span> <span class="number">20</span> (randomRs (<span class="string">'a'</span>,<span class="string">'z'</span>) gen)      
    gen<span class="string">' &lt;- newStdGen   
    putStr $ take 20 (randomRs ('</span>a<span class="string">','</span>z<span class="string">') gen'</span>)
</pre></td></tr></table></figure>

<h1 id="bytstrings">Bytstrings</h1>
<p>List 是惰性的, 在读取大文件的时候会出现性能问题.
所以就有了 <code>bytestrings</code>, 他的每一个元素都是一个 byte(8 bits),
而且分为不同程度的惰性: strict 和 lazy.</p>
<p>strict: 放在 <code>Data.ByteString</code>, 完全没有惰性, 一个
strict bytesstring 代表一连串 bytes.</p>
<p>lazy: 放在 <code>Data.ByteString.Lazy</code>, 就有惰性, 但是没有 List 极端.
他是一个 chunk(64k) 一个 chunk 地去读取, 不会使用大量的记忆体.</p>
<p>lazy 和 strict 名字一样, 所以可以这么使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">-- lazy</span>
<span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.ByteString.Lazy <span class="keyword">as</span> B</span>
<span class="comment">-- strict</span>
<span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.ByteString <span class="keyword">as</span> S</span>


<span class="comment">-- pack :: [Word8] -&gt; ByteString</span>
<span class="title">ghci</span>&gt; <span class="type">B</span>.pack [<span class="number">99</span>,<span class="number">97</span>,<span class="number">110</span>]   
<span class="type">Chunk</span> <span class="string">"can"</span> <span class="type">Empty</span>   
<span class="title">ghci</span>&gt; <span class="type">B</span>.pack [<span class="number">98.</span><span class="number">.120</span>]   
<span class="type">Chunk</span> <span class="string">"bcdefghijklmnopqrstuvwx"</span> <span class="type">Empty</span>

<span class="comment">-- unpack 是 pack 的相反，他把一个 bytestring 变成一个 byte list。</span>
<span class="comment">-- fromChunks 接受一串 strict 的 bytestrings 并把他变成一串 lazy bytestring。</span>
<span class="comment">-- toChunks 接受一个 lazy bytestrings 并将他变成一串 strict bytestrings。</span>
<span class="title">ghci</span>&gt; <span class="type">B</span>.fromChunks [<span class="type">S</span>.pack [<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>], <span class="type">S</span>.pack [<span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>], <span class="type">S</span>.pack [<span class="number">46</span>,<span class="number">47</span>,<span class="number">48</span>]]   
<span class="type">Chunk</span> <span class="string">"()*"</span> (<span class="type">Chunk</span> <span class="string">"+,-"</span> (<span class="type">Chunk</span> <span class="string">"./0"</span> <span class="type">Empty</span>))

<span class="comment">-- cons 是 lazy 的操作，即使 bytestring 的第一个 chunk 不是满的，他也会新增一个 chunk</span>
<span class="comment">-- 当你要插入很多 bytes 可以使用 strict 版本的 cons，也就是 cons'</span>
<span class="title">ghci</span>&gt; <span class="type">B</span>.cons <span class="number">85</span> $ <span class="type">B</span>.pack [<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">84</span>]   
<span class="type">Chunk</span> <span class="string">"U"</span> (<span class="type">Chunk</span> <span class="string">"PQRT"</span> <span class="type">Empty</span>)   
<span class="title">ghci</span>&gt; <span class="type">B</span>.cons' <span class="number">85</span> $ <span class="type">B</span>.pack [<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">84</span>]   
<span class="type">Chunk</span> <span class="string">"UPQRT"</span> <span class="type">Empty</span>   
<span class="title">ghci</span>&gt; foldr <span class="type">B</span>.cons <span class="type">B</span>.empty [<span class="number">50.</span><span class="number">.60</span>]   
<span class="type">Chunk</span> <span class="string">"2"</span> (<span class="type">Chunk</span> <span class="string">"3"</span> (<span class="type">Chunk</span> <span class="string">"4"</span> (<span class="type">Chunk</span> <span class="string">"5"</span> (<span class="type">Chunk</span> <span class="string">"6"</span> (<span class="type">Chunk</span> <span class="string">"7"</span> (<span class="type">Chunk</span> <span class="string">"8"</span> (<span class="type">Chunk</span> <span class="string">"9"</span> (<span class="type">Chunk</span> <span class="string">":"</span> (<span class="type">Chunk</span> <span class="string">";"</span> (<span class="type">Chunk</span> <span class="string">"&lt;"</span>   
<span class="type">Empty</span>))))))))))   
<span class="title">ghci</span>&gt; foldr <span class="type">B</span>.cons' <span class="type">B</span>.empty [<span class="number">50.</span><span class="number">.60</span>]   
<span class="type">Chunk</span> <span class="string">"23456789:;&lt;"</span> <span class="type">Empty</span>
</pre></td></tr></table></figure>

<h2 id="readfile">ReadFile</h2>
<p>如果你用了 strict bytestring 来读取一个文件，
他会把文件内容都读进记忆体中。
而使用 lazy bytestring，他则会读取 chunks。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="import"><span class="keyword">import</span> System.Environment   </span>
<span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.ByteString.Lazy <span class="keyword">as</span> B   </span>
   
<span class="title">main</span> = <span class="keyword">do</span>   
    (fileName1:fileName2:_) &lt;- getArgs   
    copyFile fileName1 fileName2   
 
<span class="title">copyFile</span> :: <span class="type">FilePath</span> -&gt; <span class="type">FilePath</span> -&gt; <span class="type">IO</span> ()   
<span class="title">copyFile</span> source dest = <span class="keyword">do</span>   
    contents &lt;- <span class="type">B</span>.readFile source   
    <span class="type">B</span>.writeFile dest contents
</pre></td></tr></table></figure>

<h1 id="-">异常</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ghci&gt; <span class="number">4</span> `<span class="operator">div</span>` <span class="number">0</span>   
*** Exception: <span class="built_in">divide</span> <span class="keyword">by</span> <span class="constant">zero</span>   
ghci&gt; head []   
*** Exception: Prelude.head: <span class="constant">empty</span> list
</pre></td></tr></table></figure>

<p>pure code 能丢出 Exception，但 Exception 只能在 I/O section 中被接到
（也就是在 main 的 do block 中）
这是因为在 pure code 中你不知道什么东西什么时候会被 evaluate。
因为 lazy 特性的缘故，程序没有一个特定的执行顺序，但 I/O code 有。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="import"><span class="keyword">import</span> System.Environment   </span>
<span class="import"><span class="keyword">import</span> System.IO   </span>
<span class="import"><span class="keyword">import</span> System.IO.Error   </span>
   
<span class="title">main</span> = toTry `catch` handler   
 
<span class="title">toTry</span> :: <span class="type">IO</span> ()   
<span class="title">toTry</span> = <span class="keyword">do</span> (fileName:_) &lt;- getArgs   
            contents &lt;- readFile fileName   
            putStrLn $ <span class="string">"The file has "</span> ++ show (length (lines contents)) ++ <span class="string">" lines!"</span>
<span class="comment">-- 抛出用户错误            </span>
<span class="comment">-- ioError $ userError "remote computer unplugged!"</span>
<span class="title">handler</span> :: <span class="type">IOError</span> -&gt; <span class="type">IO</span> ()   
<span class="title">handler</span> e   
    | isDoesNotExistError e =
        <span class="keyword">case</span> ioeGetFileName e <span class="keyword">of</span> <span class="type">Just</span> path -&gt; putStrLn $ <span class="string">"Whoops! File does not exist at: "</span> ++ path   
                                 <span class="type">Nothing</span> -&gt; putStrLn <span class="string">"Whoops! File does not exist at unknown location!"</span> 
    | isFullError e = freeSomeSpace   
    | isIllegalOperation e = notifyCops   
    | otherwise = ioError e
</pre></td></tr></table></figure>

<p>程序里面有好几个运作在 IOError 上的 I/O action，当其中一个没有被 evaluate 成 True 时，就会掉到下一个 guard。
这些 predicate 分别为：</p>
<pre><code>isAlreadyExistsError

isDoesNotExistError

isFullError

isEOFError

isIllegalOperation

isPermissionError

isUserError
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>main = <span class="keyword">do</span> toTry `<span class="javascript"><span class="keyword">catch</span></span>` handler1   
          thenTryThis `<span class="javascript"><span class="keyword">catch</span></span>` handler2   
          launchRockets  -- 其他处理函数
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-构造Type和Typeclass]]></title>
    <link href="http://zhpooer.github.io/2014/06/29/haskell%E8%B6%A3%E5%AD%A6-%E6%9E%84%E9%80%A0type%E5%92%8Ctypeclass/"/>
    <id>http://zhpooer.github.io/2014/06/29/haskell趣学-构造type和typeclass/</id>
    <published>2014-06-29T07:02:14.000Z</published>
    <updated>2014-06-30T07:05:48.000Z</updated>
    <content type="html"><![CDATA[<p>使用<code>data</code>关键字定义自己的类型 <code>data Bool = False | True</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Retangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span></span>

<span class="comment">-- 值构造子的本质是个函数，可以返回一个类型的值</span>
<span class="comment">-- class Circle(x:Float, y:Float, radius:Float), 没有变量名吗?</span>
<span class="title">ghci</span>&gt; :t <span class="type">Circle</span> 
<span class="type">Circle</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Shape</span> 
<span class="title">ghci</span>&gt; :t <span class="type">Rectangle</span> 
<span class="type">Rectangle</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Shape</span>

<span class="title">surface</span> :: <span class="type">Shape</span> -&gt; <span class="type">Float</span> 
<span class="title">surface</span> (<span class="type">Circle</span> _ _ r) = pi * r ^ <span class="number">2</span> 
<span class="title">surface</span> (<span class="type">Rectangle</span> x1 y1 x2 y2) = (abs $ x2 - x1) * (abs $ y2 - y1)


<span class="comment">-- Shape类型成为 Show 类型类的成员</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Retangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>

<span class="comment">-- 获取一组不同半径的同心圆</span>
<span class="title">map</span> (<span class="type">Circle</span> <span class="number">10</span> <span class="number">20</span>) [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>]

<span class="comment">-- 增加加一个表示二维空间中点的类型，可以让我们的 Shape 更加容易理解</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Point</span> <span class="type">Float</span> | <span class="type">Retangle</span> <span class="type">Point</span> <span class="type">Point</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>

<span class="title">surface</span> :: <span class="type">Shape</span> -&gt; <span class="type">Float</span>
<span class="title">surface</span> (<span class="type">Circle</span> _ r) = pi * r^<span class="number">2</span>
<span class="title">surface</span> (<span class="type">Retangle</span> (<span class="type">Point</span> x1 y1) (<span class="type">Point</span> x2 y2)) = (abs $ x2 - x1) * (abs $ y2 - y1)
</pre></td></tr></table></figure>

<h1 id="-">类型记录</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Person</span> = <span class="type">Person</span> <span class="container">{
      <span class="title">firstName</span> :: <span class="type">String</span>
    , <span class="title">lastName</span> :: <span class="type">String</span>
    , <span class="title">age</span> :: <span class="type">Int</span>
    , <span class="title">height</span> :: <span class="type">Float</span>
    , <span class="title">phoneNumber</span> :: <span class="type">String</span>
    , <span class="title">flavor</span> :: <span class="type">String</span>
}</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>

<span class="title">ghci</span>&gt; :t flavor 
<span class="title">flavor</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span> 
<span class="title">ghci</span>&gt; :t firstName 
<span class="title">firstName</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span>
</pre></td></tr></table></figure>

<h1 id="-">类型参数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>-- <span class="literal">a</span> 相当于 泛型
data Maybe <span class="literal">a</span> = Nothing | Just <span class="literal">a</span>

ghci&gt; Just <span class="string">"Haha"</span> 
Just <span class="string">"Haha"</span> 
ghci&gt; Just <span class="number">84</span> 
Just <span class="number">84</span> 
<span class="label">ghci&gt; :</span>t Just <span class="string">"Haha"</span> 
Just <span class="string">"Haha"</span> :: Maybe [Char] 
<span class="label">ghci&gt; :</span>t Just <span class="number">84</span> 
<span class="label">Just 84 ::</span> (Num t) =&gt; Maybe t 
<span class="label">ghci&gt; :</span>t Nothing 
<span class="label">Nothing ::</span> Maybe <span class="literal">a</span>
</pre></td></tr></table></figure>

<h2 id="car-">Car的案例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Car</span> = <span class="type">Car</span> <span class="container">{ <span class="title">company</span> :: <span class="type">String</span> 
                 , <span class="title">model</span> :: <span class="type">String</span> 
                 , <span class="title">year</span> :: <span class="type">Int</span> 
                 }</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>
<span class="comment">-- 也可以改为这样, 但是可能没有用处</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Car</span> a b c = <span class="type">Car</span> <span class="container">{ <span class="title">company</span> :: <span class="title">a</span> 
                       , <span class="title">model</span> :: <span class="title">b</span> 
                       , <span class="title">year</span> :: <span class="title">c</span> 
                        }</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>

<span class="title">tellCar</span> :: <span class="type">Car</span> -&gt; <span class="type">String</span> 
<span class="title">tellCar</span> (<span class="type">Car</span> {company = c, model = m, year = y}) = <span class="string">"This "</span> ++ c ++ <span class="string">" "</span> ++ m ++ <span class="string">" was made in "</span> ++ show y
</pre></td></tr></table></figure>

<h2 id="vector-">Vector(三维矢量)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Vecotr</span> a = <span class="type">Vector</span> a a a <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>
<span class="title">vplus</span> :: (<span class="type">Num</span> t) =&gt; <span class="type">Vector</span> t -&gt; <span class="type">Vector</span> t -&gt; <span class="type">Vector</span> t
(<span class="type">Vector</span> i j k) `vplus` (<span class="type">Vector</span> l m n) = <span class="type">Vector</span> (i+l) (j+m) (k+n)
</pre></td></tr></table></figure>

<h1 id="derived-instances">Derived instances</h1>
<p><code>TypeClass</code>, 在 Java, C++ 等语言中, 类就像是蓝图,
我们可以根据它来创造对象保存对象并执行操作.
<code>TypeClass</code> 更像是接口, 我们不是靠它构造数据，而是给既有的数据类型描述行为.</p>
<p>什么东西若可以判定相等性，我们就可以让它成为 Eq 类型类的 instance。什么东西若可以比较大小，
那就可以让它成为 Ord 类型类的 instance。</p>
<p>在一个类型 derive 为 Eq 的 instance 后，
就可以直接使用 == 或 /= 来判断它们的相等性了。
Haskell 会先看下这两个值的值构造子是否一致(这里只是单值构造子)，
再用 == 来检查其中的所有数据(必须都是 Eq 的成员)是否一致。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">data</span> <span class="type">Person</span> = <span class="type">Person</span> <span class="container">{ <span class="title">firstName</span> :: <span class="type">String</span> 
                     , <span class="title">lastName</span> :: <span class="type">String</span> 
                     , <span class="title">age</span> :: <span class="type">Int</span> 
                     }</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Eq</span>, <span class="type">Show</span>, <span class="type">Read</span>)</span></span>

<span class="title">ghci</span>&gt; read <span class="string">"Person {firstName =\"Michael\", lastName =\"Diamond\", age = 43}"</span> :: <span class="type">Person</span>
<span class="comment">-- 如果我们 read 的结果会在后面用到参与计算，</span>
<span class="comment">-- Haskell 就可以推导出是一个 Person 的行为，不加注释也是可以的</span>
<span class="title">ghci</span>&gt; read <span class="string">"Person {firstName =\"Michael\", lastName =\"Diamond\", age = 43}"</span> == mikeD
<span class="type">True</span>

<span class="title">ghci</span>&gt; <span class="type">Nothing</span> 
<span class="type">True</span> 
<span class="title">ghci</span>&gt; <span class="type">Nothing</span> &gt; <span class="type">Just</span> (-<span class="number">49999</span>) 
<span class="type">False</span> 
<span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">100</span> &gt; <span class="type">Just</span> <span class="number">50</span> 
<span class="type">True</span>

<span class="comment">-- 使用 Enmu 和 Bounded 类型类, 做枚举</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Monday</span> | <span class="type">Tuesday</span> | <span class="type">Wednesday</span> | <span class="type">Thursday</span> | <span class="type">Friday</span> | <span class="type">Saturday</span> | <span class="type">Sunday</span></span>
           <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>, <span class="type">Enum</span>)

<span class="title">ghci</span>&gt; minBound :: <span class="type">Day</span> 
<span class="type">Monday</span> 
<span class="title">ghci</span>&gt; maxBound :: <span class="type">Day</span> 
<span class="type">Sunday</span>
</pre></td></tr></table></figure>

<h1 id="-type-synonyms-">类型别名(Type synonyms)</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="typedef"><span class="keyword">type</span> <span class="type">String</span> = [<span class="type">Char</span>]</span>
<span class="title">toUpperString</span> :: [<span class="type">Char</span>] -&gt; [<span class="type">Char</span>]
<span class="comment">-- 等同于</span>
<span class="title">toUpperString</span> :: <span class="type">String</span> -&gt; <span class="type">String</span>

<span class="typedef"><span class="keyword">type</span> <span class="type">PhoneNumber</span> = <span class="type">String</span> </span>
<span class="typedef"><span class="keyword">type</span> <span class="type">Name</span> = <span class="type">String</span> </span>
<span class="typedef"><span class="keyword">type</span> <span class="type">PhoneBook</span> = [<span class="container">(<span class="type">Name</span>,<span class="type">PhoneNumber</span>)</span>]</span>
<span class="comment">-- 可以这样使用, 更加易读</span>
<span class="title">inPhoneBook</span> :: <span class="type">Name</span> -&gt; <span class="type">PhoneNumber</span> -&gt; <span class="type">PhoneBook</span> -&gt; <span class="type">Bool</span> 
<span class="title">inPhoneBook</span> name pnumber pbook = (name,pnumber) `elem` pbook

<span class="comment">-- 类型别名的参数, 相当于泛型(类型构造子)</span>
<span class="typedef"><span class="keyword">type</span> <span class="type">AssocList</span> k v = [<span class="container">(<span class="title">k</span>, <span class="title">v</span>)</span>]</span>

<span class="type">AssocList</span> [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">9</span>)]   <span class="comment">-- 不能这么用</span>
[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">9</span>)] :: <span class="type">AssocList</span> <span class="type">Int</span> <span class="type">Int</span>  <span class="comment">-- 正确使用方法</span>

<span class="comment">-- 他有两个值构造子 Left 和 Right, 类型构造子是 Either</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Either</span> a b = <span class="type">Left</span> a | <span class="type">Right</span> b <span class="keyword">deriving</span> <span class="container">(<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>)</span></span>
</pre></td></tr></table></figure>

<h2 id="either-">Either 的使用</h2>
<p>学生向管理员索取储物箱, 保存物品, 每个储物箱都要密码.
如果学生想要用, 就要告诉管理员储物柜的号码.
如果已经被别人用了, 管理员就不能告诉它密码, 得换一个储物箱.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> Map</span>

<span class="typedef"><span class="keyword">data</span> <span class="type">LockerState</span> = <span class="type">Taken</span> | <span class="type">Free</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>, <span class="type">Eq</span>)</span></span>
<span class="typedef"><span class="keyword">type</span> <span class="type">Code</span> = <span class="type">String</span></span>
<span class="typedef"><span class="keyword">type</span> <span class="type">LockerMap</span> = <span class="type">Map</span>.<span class="type">Map</span> <span class="type">Int</span> <span class="container">(<span class="type">LockerState</span>, <span class="type">Code</span>)</span></span>

<span class="title">lockerLookup</span> :: <span class="type">Int</span> -&gt; <span class="type">LockerMap</span> -&gt; <span class="type">Either</span> <span class="type">String</span> <span class="type">Code</span>
<span class="title">lockerLookup</span> lockerNumber map =
     <span class="keyword">case</span> <span class="type">Map</span>.lookup lockerNumber map <span class="keyword">of</span>
         <span class="type">Nothing</span> -&gt; <span class="type">Left</span> $ <span class="string">"Locker number"</span> ++ show lockerNumber ++ <span class="string">"doesn't exist!"</span>
         <span class="type">Just</span> (state, code) -&gt; <span class="keyword">if</span> state /= <span class="type">Taken</span>
                                <span class="keyword">then</span> <span class="type">Right</span> code
                                <span class="keyword">else</span> <span class="type">Left</span> $ <span class="string">"Locker"</span> ++ show lockerNumber ++ <span class="string">" is already taken"</span>

<span class="comment">-- 我们完全可以用 Maybe a 来表示它的结果，但这样一来我们就对得不到密码的原因不得而知了。</span>
<span class="comment">-- 而在这里，我们的新类型可以告诉我们失败的原因。</span>
</pre></td></tr></table></figure>

<h1 id="-">递归地定义数据结构</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="label">-- cons 其实就是指 `:<span class="escape">`
</span></span>ghci&gt; Empty 
Empty 
ghci&gt; <span class="number">5</span> <span class="escape">`C</span>ons<span class="escape">` </span>Empty 
Cons <span class="number">5</span> Empty 
ghci&gt; <span class="number">4</span> <span class="escape">`C</span>ons<span class="escape">` </span>(<span class="number">5</span> <span class="escape">`C</span>ons<span class="escape">` </span>Empty) 
Cons <span class="number">4</span> (Cons <span class="number">5</span> Empty) 
ghci&gt; <span class="number">3</span> <span class="escape">`C</span>ons<span class="escape">` </span>(<span class="number">4</span> <span class="escape">`C</span>ons<span class="escape">` </span>(<span class="number">5</span> <span class="escape">`C</span>ons<span class="escape">` </span>Empty)) 
Cons <span class="number">3</span> (Cons <span class="number">4</span> (Cons <span class="number">5</span> Empty))

-- 定义List
data List <span class="literal">a</span> = Empty | Cons <span class="literal">a</span> (List <span class="literal">a</span>) deriving (Show, Read, Eq, Ord)
</pre></td></tr></table></figure>

<p><code>infixr</code>, <code>infixl</code> 优先级设置(左结合, 右结合)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 代表左结合</span>
<span class="comment">-- (4 * 3 * 2) 等于 ((4 * 3) * 2)。</span>
<span class="comment">-- * 拥有比 + 更高的优先级。所以 5 * 4 + 3 会是 (5 * 4) + 3。</span>
<span class="infix"><span class="keyword">infixl</span> <span class="number">7</span> *</span>
<span class="infix"><span class="keyword">infixl</span> <span class="number">6</span> +</span>
</pre></td></tr></table></figure>

<h2 id="-">二元搜索树构建</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>data Tree <span class="operator">a</span> = EmptyTree | Node <span class="operator">a</span> (Tree <span class="operator">a</span>) (Tree <span class="operator">a</span>) deriving (Show, Read, Eq)

<span class="comment">-- 定义单节点树</span>
single :: <span class="operator">a</span> -&gt; Tree <span class="operator">a</span>
singleton x = Node x EmptyTree EmptyTree
<span class="comment">-- 插入</span>
treeInsert :: (Ord <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; Tree <span class="operator">a</span> -&gt; Tree <span class="operator">a</span>
treeInsert x EmptyTree = singleton x
treeInsert x (Node x left <span class="constant">right</span>)
    | x == <span class="operator">a</span> = Node x left <span class="constant">right</span>
    | x &lt; <span class="operator">a</span> = Node <span class="operator">a</span> (treeInsert x left) <span class="constant">right</span>
    | x &gt; <span class="operator">a</span> = Node <span class="operator">a</span> left (treeInsert x <span class="constant">right</span>)

<span class="comment">-- 查找</span>
treeElem :: (Ord <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; Tree <span class="operator">a</span> -&gt; Bool 
treeElem x EmptyTree = False 
treeElem x (Node <span class="operator">a</span> left <span class="constant">right</span>) 
    | x == <span class="operator">a</span> = True 
    | x &lt; <span class="operator">a</span>  = treeElem x left 
    | x &gt; <span class="operator">a</span>  = treeElem x <span class="constant">right</span>
</pre></td></tr></table></figure>

<h1 id="typeclass">TypeClass</h1>
<p>ypeclass 就像是 interface。
一个 typeclass 定义了一些行为(像是比较相不相等，
比较大小顺序，能否穷举)
而我们会把希望满足这些性质的类型定义成这些 typeclass 的 instance。
typeclass 的行为是由定义的函数来描述。并写出对应的实作。
当我们把一个类型定义成某个 typeclass 的 instance，
就表示我们可以对那个类型使用 typeclass 中定义的函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre><span class="comment">-- Prelude 中 Eq 如何被定义</span>
<span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span>
   (==) :: a -&gt; a -&gt; <span class="type">Bool</span>
   (/=) :: a -&gt; a -&gt; <span class="type">Bool</span>
   x == y = not (x /= y)
   x /= y = not (x == y)


<span class="typedef"><span class="keyword">data</span> <span class="type">TrafficLight</span> = <span class="type">Red</span> | <span class="type">Yellow</span> | <span class="type">Green</span></span>
<span class="comment">-- 可以透过 derive 让他成为 Eq 的instance</span>
<span class="comment">-- 手动编写</span>
<span class="class">
<span class="keyword">instance</span> <span class="type">Eq</span> <span class="type">TrafficLight</span> <span class="keyword">where</span></span>
    <span class="type">Red</span> == <span class="type">Red</span> = <span class="type">True</span>
    <span class="type">Green</span> == <span class="type">Green</span> = <span class="type">True</span>
    <span class="type">Yellow</span> == <span class="type">Yellow</span> = <span class="type">True</span>
    _ == _ = <span class="type">False</span>
<span class="class">
<span class="keyword">instance</span> <span class="type">Show</span> <span class="type">TrafficLight</span> <span class="keyword">where</span></span> 
    show <span class="type">Red</span> = <span class="string">"Red light"</span> 
    show <span class="type">Yellow</span> = <span class="string">"Yellow light"</span> 
    show <span class="type">Green</span> = <span class="string">"Green light"</span>

<span class="comment">-- 类型约束, 定义一个类型为 Num 之前，必须先为他定义 Eq 的 instance</span>
<span class="class"><span class="keyword">class</span> <span class="container">(<span class="type">Eq</span> <span class="title">a</span>)</span> =&gt; <span class="type">Num</span> a <span class="keyword">where</span></span>

<span class="comment">-- instance Eq Maybe where, 错误用法</span>
<span class="comment">-- 是不是可以理解为类型 (Maybe a) 才是一个完整的类型</span>
<span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> <span class="container">(<span class="type">Maybe</span> <span class="title">m</span>)</span> <span class="keyword">where</span></span> 
    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y 
    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span> 
    _ == _ = <span class="type">False</span>

<span class="comment">-- 最终极版本</span>
<span class="class"><span class="keyword">instance</span> <span class="container">(<span class="type">Eq</span> <span class="title">m</span>)</span> =&gt; <span class="type">Eq</span> <span class="container">(<span class="type">Maybe</span> <span class="title">m</span>)</span> <span class="keyword">where</span></span>
    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y
    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span>
    _ == _ <span class="type">False</span>
</pre></td></tr></table></figure>

<p><code>:info</code> 也可以查询类型跟类型构造子的信息</p>
<h1 id="yes-no-typeclass">yes-no typeclass</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="type">YesNo</span> a <span class="keyword">where</span></span>
    yesno :: a -&gt; <span class="type">Bool</span>
<span class="class">
<span class="keyword">instance</span> <span class="type">YesNo</span> <span class="type">Int</span> <span class="keyword">where</span></span> 
    yesno <span class="number">0</span> = <span class="type">False</span> 
    yesno _ = <span class="type">True</span>
<span class="class">
<span class="keyword">instance</span> <span class="type">YesNo</span> [a] <span class="keyword">where</span></span>
    yesno [] = <span class="type">False</span>
    yesno _ = <span class="type">True</span>

<span class="comment">-- 标准函式库中的一个函数，他接受一个参数并回传相同的东西</span>
<span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> <span class="type">Bool</span> <span class="keyword">where</span></span>
    yesno = id

<span class="title">yesnoIf</span> :: (<span class="type">YesNo</span> y) =&gt; y -&gt; a -&gt; a -&gt; a
<span class="title">yesnoIf</span> yesnoVal yesResult noResult =
    <span class="keyword">if</span> yesno yesnoVal <span class="keyword">then</span> yesResult <span class="keyword">else</span> noResult

<span class="title">ghci</span>&gt; yesnoIf [] <span class="string">"YEAH!"</span> <span class="string">"NO!"</span> 
<span class="string">"NO!"</span> 
<span class="title">ghci</span>&gt; yesnoIf [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="string">"YEAH!"</span> <span class="string">"NO!"</span> 
<span class="string">"YEAH!"</span> 
<span class="title">ghci</span>&gt; yesnoIf <span class="type">True</span> <span class="string">"YEAH!"</span> <span class="string">"NO!"</span> 
<span class="string">"YEAH!"</span> 
<span class="title">ghci</span>&gt; yesnoIf (<span class="type">Just</span> <span class="number">500</span>) <span class="string">"YEAH!"</span> <span class="string">"NO!"</span> 
<span class="string">"YEAH!"</span> 
<span class="title">ghci</span>&gt; yesnoIf <span class="type">Nothing</span> <span class="string">"YEAH!"</span> <span class="string">"NO!"</span> 
<span class="string">"NO!"</span>
</pre></td></tr></table></figure>

<h1 id="functor-typeclass">Functor typeclass</h1>
<p><code>Functor</code> 这个 typeclass，基本上就代表可以被 map over 的事物</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">-- f 代表一个类型构造子 Maybe(不是 Maybe a), 不是具体类型</span>
<span class="comment">-- 可以当作盒子的类型可能就是一个 functor, 如 List, Maybe</span>
<span class="comment">-- 实例化后: (a -&gt; b) -&gt; Tree a -&gt; Tree b</span>
<span class="comment">-- (a -&gt; b) -&gt; Maybe a -&gt; Maybe b</span>
<span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span>
    fmap :: (a -&gt; b) -&gt; f a -&gt; f b

<span class="comment">-- map :: (a -&gt; ) -&gt; [a] -&gt; [b]</span>
<span class="comment">-- 注意这里没有写 [a]</span>
<span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> [] <span class="keyword">where</span></span>
    fmap = map
    
<span class="comment">-- 注意 这边没有写 Maybe a</span>
<span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span> 
    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x) 
    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span>
</pre></td></tr></table></figure>

<h1 id="kind">Kind</h1>
<p>类型构造子接受其他类型作为他的参数，来构造出一个具体类型.
我们可以在 ghci 中用 <code>:k</code> 来得知一个类型的 kind。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="comment">-- 一个 * 代表这个类型是具体类型</span>
<span class="title">ghci</span>&gt; :k <span class="type">Int</span> 
<span class="type">Int</span> :: *
<span class="comment">-- * -&gt; * 代表这个类型构造子接受一个具体类型并回传一个具体类型</span>
<span class="title">ghci</span>&gt; :k <span class="type">Maybe</span> 
<span class="type">Maybe</span> :: * -&gt; *
<span class="title">ghci</span>&gt; :k <span class="type">Maybe</span> <span class="type">Int</span> 
<span class="type">Maybe</span> <span class="type">Int</span> :: *

<span class="comment">-- f 必须是 * -&gt; * kind</span>
<span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span> 
    fmap :: (a -&gt; b) -&gt; f a -&gt; f b
    
<span class="comment">-- a 是 *</span>
<span class="comment">-- j 是 * -&gt; * </span>
<span class="comment">-- t 是 * -&gt; (* -&gt; *) -&gt; *</span>
<span class="class"><span class="keyword">class</span> <span class="type">Tofu</span> t <span class="keyword">where</span></span> 
    tofu :: j a -&gt; t a j

<span class="comment">-- a 是 *</span>
<span class="comment">-- b 是 * -&gt; *</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Frank</span> a b  = <span class="type">Frank</span> <span class="container">{<span class="title">frankField</span> :: <span class="title">b</span> <span class="title">a</span>}</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span>

<span class="comment">-- Barry 是 (* -&gt; *) -&gt; * -&gt; * -&gt; *</span>
<span class="typedef"><span class="keyword">data</span> <span class="type">Barry</span> t k p = <span class="type">Barry</span> <span class="container">{ <span class="title">yabba</span> :: <span class="title">p</span>, <span class="title">dabba</span> :: <span class="title">t</span> <span class="title">k</span> }</span></span>
<span class="class">
<span class="keyword">instance</span> <span class="type">Functor</span> <span class="container">(<span class="type">Barry</span> <span class="title">a</span> <span class="title">b</span>)</span> <span class="keyword">where</span></span>
    fmap :: (a -&gt; b) -&gt; <span class="type">Barry</span> c d a -&gt; <span class="type">Barry</span> c d b
<span class="class">
<span class="keyword">instance</span> <span class="type">Functor</span> <span class="container">(<span class="type">Barry</span> <span class="title">a</span> <span class="title">b</span>)</span> <span class="keyword">where</span></span>
    fmap f (<span class="type">Barry</span> {yabba = x, dabba =})
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-模块]]></title>
    <link href="http://zhpooer.github.io/2014/06/29/haskell%E8%B6%A3%E5%AD%A6-%E6%A8%A1%E5%9D%97/"/>
    <id>http://zhpooer.github.io/2014/06/29/haskell趣学-模块/</id>
    <published>2014-06-29T06:16:24.000Z</published>
    <updated>2014-06-29T06:37:53.000Z</updated>
    <content type="html"><![CDATA[<p>Haskell 中的模块是含有一组相关的函数，类型和类型类的组合.</p>
<p>Haskell 进程的本质便是从主模块中
引用其它模块并调用其中的函数来执行操作</p>
<p><code>Prelude</code> 模块包含一些基本函数,类型以及类型类，它缺省自动装载</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="reserved">import</span> Data.List   
-- nub 筛掉重复元素
numUniques :: <span class="function"><span class="params">(Eq a)</span> =&gt;</span> [a]<span class="function"> -&gt;</span> Int   
numUniques = length . nub
</pre></td></tr></table></figure>

<p>在 ghci 中装载模块</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ghci<span class="subst">&gt;</span> :m <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">List</span> <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">Map</span> <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">Set</span>
</pre></td></tr></table></figure>

<p>import 各种语法: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="subst">--</span> 仅装载 <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">List</span> 模块 nub 和 sort
<span class="keyword">import</span> <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">List</span> (nub, sort)

<span class="subst">--</span> 装载 <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">List</span> 除了 nub
<span class="keyword">import</span> <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">List</span> hiding (nub)

<span class="subst">--</span> 使用: <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">Map</span><span class="built_in">.</span>filter
<span class="keyword">import</span> qualified <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">Map</span>
<span class="subst">--</span> 更加简短: M<span class="built_in">.</span>filter
<span class="keyword">import</span> qualified <span class="built_in">Data</span><span class="built_in">.</span><span class="built_in">Map</span> as M
</pre></td></tr></table></figure>

<p><strong>翻阅标准库中的模块和函数是提升个人 Haskell 水平的重要途径</strong>
<a href="http://www.haskell.org/hoogle/" target="_blank">Hoogle</a></p>
<p><code>Data.List</code>, <code>Data.Char</code>, <code>Data.Map</code>, <code>Data.Set</code>使用详解: 
<a href="http://learnyouahaskell-zh-tw.csie.org/zh-cn/modules.html" target="_blank">http://learnyouahaskell-zh-tw.csie.org/zh-cn/modules.html</a></p>
<h1 id="-">建立自己的模块</h1>
<p>构造一个由计算机几何图形体积和编辑组成的模块 <code>Geometry.hs</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>module Geometry
( sphereVolumn
, sphereArea
, cubeVolume
, cubeArea
, cuboidArea
, cuboidVolume
) <span class="keyword">where</span>
shpereVolume <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float
sphereVolume <span class="subst">=</span> (<span class="number">4.0</span> <span class="subst">/</span> <span class="number">3.0</span>) <span class="subst">*</span> pi <span class="subst">*</span> (raius^<span class="number">3</span>)

sphereArea <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float   
sphereArea radius <span class="subst">=</span> <span class="number">4</span> <span class="subst">*</span> pi <span class="subst">*</span> (radius ^ <span class="number">2</span>)   
 
cubeVolume <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float   
cubeVolume side <span class="subst">=</span> cuboidVolume side side side   
 
cubeArea <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float   
cubeArea side <span class="subst">=</span> cuboidArea side side side   
 
cuboidVolume <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float <span class="subst">-&gt; </span>Float <span class="subst">-&gt; </span>Float   
cuboidVolume a b c <span class="subst">=</span> rectangleArea a b <span class="subst">*</span> c   
 
cuboidArea <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float <span class="subst">-&gt; </span>Float <span class="subst">-&gt; </span>Float   
cuboidArea a b c <span class="subst">=</span> rectangleArea a b <span class="subst">*</span> <span class="number">2</span> <span class="subst">+</span> rectangleArea a c <span class="subst">*</span> <span class="number">2</span> <span class="subst">+</span> rectangleArea c b <span class="subst">*</span> <span class="number">2</span>   
 
rectangleArea <span class="tag">:: Float</span> <span class="subst">-&gt; </span>Float <span class="subst">-&gt; </span>Float   
rectangleArea a b <span class="subst">=</span> a <span class="subst">*</span> b
</pre></td></tr></table></figure>

<p>可以把 <code>Geometry</code> 分成三个子模块
<code>sphere.hs</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>module Geometry.Sphere   
( <span class="shader"><span class="keyword">volume</span>   
，area   
) where   
 
<span class="keyword">volume</span> :: Float -&gt; Float   
<span class="keyword">volume</span> radius = (</span><span class="number">4.0</span> / <span class="number">3.0</span>) * pi * (radius ^ <span class="number">3</span>)   
 
<span class="built_in">area</span> :: Float -&gt; Float   
<span class="built_in">area</span> radius = <span class="number">4</span> * pi * (radius ^ <span class="number">2</span>)
</pre></td></tr></table></figure>

<p><code>cuboid.hs</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="module"><span class="keyword">module</span> Geometry.Cuboid   
<span class="container">( <span class="title">volume</span>   
，<span class="title">area</span>   
)</span> <span class="keyword">where</span></span>   
 
<span class="title">volume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>   
<span class="title">volume</span> a b c = rectangleArea a b * c
</pre></td></tr></table></figure>

<p>cube.hs</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="module"><span class="keyword">module</span> Geometry.Cube   
<span class="container">( <span class="title">volume</span>   
，<span class="title">area</span>   
)</span> <span class="keyword">where</span></span>   
 
<span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Geometry.Cuboid <span class="keyword">as</span> Cuboid   </span>
 
<span class="title">volume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>   
<span class="title">volume</span> side = <span class="type">Cuboid</span>.volume side side side   
 
<span class="title">area</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>   
<span class="title">area</span> side = <span class="type">Cuboid</span>.area side side side
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-高阶函数]]></title>
    <link href="http://zhpooer.github.io/2014/06/29/haskell%E8%B6%A3%E5%AD%A6-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://zhpooer.github.io/2014/06/29/haskell趣学-高阶函数/</id>
    <published>2014-06-29T01:40:54.000Z</published>
    <updated>2014-06-29T03:52:16.000Z</updated>
    <content type="html"><![CDATA[<p>函数可以作为参数和回传值传来传去，这样的函数就被称作高阶函数.
在haskell中拒绝循环与状态的改变而通过定义问题&quot;是什么&quot;来解决问题</p>
<h1 id="-curried-functions-">柯里化(Curried functions)</h1>
<p>柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，
并且返回接受余下的参数且返回结果的新函数的技术</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">-- 两个函数是等价的</span>
ghci&gt; <span class="built_in">max</span> <span class="number">4</span> <span class="number">5</span> 
<span class="number">5</span> 
ghci&gt; (<span class="built_in">max</span> <span class="number">4</span>) <span class="number">5</span> 
<span class="number">5</span>
</pre></td></tr></table></figure>

<p><code>max :: (Ord a) a -&gt; a -&gt; a</code> 也可以写作 <code>max :: (Ord a) a -&gt; (a -&gt; a)</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>multThree :: <span class="function"><span class="params">(Num a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a<span class="function"> -&gt;</span> a<span class="function"> -&gt;</span> a 
multThree x y z = x * y * z

ghci&gt; <span class="reserved">let</span> multTwoWithNine = multThree <span class="number">9</span> 
ghci&gt; multTwoWithNine <span class="number">2</span> <span class="number">3</span> 
<span class="number">54</span> 
ghci&gt; <span class="reserved">let</span> multWithEighteen = multTwoWithNine <span class="number">2</span> 
ghci&gt; multWithEighteen <span class="number">10</span> 
<span class="number">180</span>

-- 通过不全的调用创造新的函数
compareWithHundred :: <span class="function"><span class="params">(Num a，Ord a)</span> =&gt;</span> a<span class="function"> -&gt;</span> Ordering 
compareWithHundred x = compare <span class="number">100</span> x
-- 等价于, 不全调用
compareWithHundred :: <span class="function"><span class="params">(Num a, Ord a)</span> =&gt;</span> a<span class="function"> -&gt;</span> Ordering
compareWithHundred = compare <span class="number">100</span>

-- 中缀, 和括号组合
divideByTen :: <span class="function"><span class="params">(Floating a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a 
divideByTen = (/<span class="number">10</span>)
</pre></td></tr></table></figure>

<h1 id="-">高阶函数</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">-- 函数中取另一个函数做参数, 函数调用两次</span>
<span class="comment">-- -&gt; 符号是右结合</span>
<span class="title">applyTwice</span> :: (a -&gt; a) -&gt; a -&gt; a
<span class="title">applyTwice</span> f x = f (f x)

<span class="title">zipWith</span> :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]
<span class="title">zipWith</span> _ [] _ = []
<span class="title">zipWith</span> _ _ [] = []
<span class="title">zipWith</span> f (x:xs) (y:ys) = f x y :: zipWith f xs ys

<span class="comment">-- 传入一个函数 返回一个相似函数, 但是两个函数的参数位置调换</span>
<span class="title">filp</span> :: (a -&gt; b -&gt; c) -&gt; (b -&gt; a -&gt; c)
<span class="title">flip</span> f = g
     <span class="keyword">where</span> g x y = f y x
</pre></td></tr></table></figure>

<h2 id="map-filter">map 和 filter</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>map :: (<span class="operator">a</span> -&gt; b) -&gt; [<span class="operator">a</span>] -&gt; [b]
map _ [] = []
map f (x:xs) = f x : map f xs

<span class="built_in">filter</span> :: (<span class="operator">a</span> -&gt; Bool) -&gt; [<span class="operator">a</span>] -&gt; [<span class="operator">a</span>]
<span class="built_in">filter</span> _ [] = []
<span class="built_in">filter</span> p (x:xs)
    | p x = x : <span class="built_in">filter</span> p xs
    | otherwise = <span class="built_in">filter</span> p xs


ghci&gt; let listOfFuns = map (*) [<span class="number">0.</span>.]   
ghci&gt; (listOfFuns !! <span class="number">4</span>) <span class="number">5</span>   
<span class="number">20</span>
</pre></td></tr></table></figure>

<h1 id="lambda">lambda</h1>
<p>lambda 就是匿名函数。
有些时候我们需要传给高阶函数一个函数，而这函数我们只会用这一次，
这就弄个特定功能的 lambda.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="title">numLongChains</span> :: <span class="type">Int</span>   
<span class="title">numLongChains</span> = length (filter (\xs -&gt; length xs &gt; <span class="number">15</span>) (map chain [<span class="number">1.</span><span class="number">.100</span>]))

<span class="title">ghci</span>&gt; zipWith (\a b -&gt; (a * <span class="number">30</span> + <span class="number">3</span>) / b) [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]

<span class="title">flip</span> :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c
<span class="title">flip</span> = \x y -&gt; f y x
</pre></td></tr></table></figure>

<h1 id="fold">fold</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="label">sum ::</span> (Num <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; <span class="literal">a</span>
sum xs = foldl (\acc x -&gt; acc + x) <span class="number">0</span> xs
-- 等价于
<span class="label">sum ::</span> (Num <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; <span class="literal">a</span>
sum = foldl (+) <span class="number">0</span>

<span class="label">reverse ::</span> [<span class="literal">a</span>] -&gt; [<span class="literal">a</span>]
<span class="label">reverse = foldl (\acc x -&gt; x :</span> acc) []
-- 等价于
<span class="label">reverse = foldl1 (\acc x -&gt; x :</span> acc)

<span class="label">head' ::</span> [<span class="literal">a</span>] -&gt; <span class="literal">a</span>   
head' = foldr1 (\x _ -&gt; x)   
 
<span class="label">last' ::</span> [<span class="literal">a</span>] -&gt; <span class="literal">a</span>   
last' = foldl1 (\_ x -&gt; x)
</pre></td></tr></table></figure>

<p><code>scanl</code> 和 <code>scanr</code> 与 <code>foldl</code> 和 <code>foldr</code> 相似，
只是它们会记录下累加值的所有状态到一个 List。也有 <code>scanl1</code> 和 <code>scanr1</code></p>
<p><code>scan</code> 可以用来跟踪 <code>fold</code> 函数的执行过程</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>ghci&gt; scanl (+) <span class="number">0</span> [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span> <span class="number">1</span>]
[<span class="number">0</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]
ghci&gt; scanr (+) <span class="number">0</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>]
[<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>]   
ghci&gt; scanl1 (\acc x -&gt; <span class="keyword">if</span> x &gt; acc <span class="keyword">then</span> x <span class="keyword">else</span> acc) [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>]   
ghci&gt; scanl (flip (:)) [] [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
<span class="string">[[],[3],[2,3],[1,2,3]]</span>
</pre></td></tr></table></figure>

<h1 id="-"><code>$</code> 函数调用</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="params">($)</span> :: <span class="params">(a -&gt; b)</span> -&gt;</span> a<span class="function"> -&gt;</span> b
f $ x = f x
</pre></td></tr></table></figure>

<p>普通的函数调用符有最高的优先级，而 $ 的优先级则最低。
用空格的函数调用符是左结合的，如 <code>f a b c</code> 与 <code>((f a) b) c</code> 等价，
而 <code>$</code> 则是右结合的。<code>f (g (z x))</code> 与 <code>f $ g $ z x</code> 等价</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>&gt; <span class="built_in">sqrt</span> $ <span class="number">3</span>+<span class="number">4</span>+<span class="number">9</span>
&gt; <span class="built_in">sqrt</span> <span class="number">3</span> + <span class="number">4</span> + <span class="number">9</span>

&gt; <span class="built_in">sum</span> $ <span class="built_in">filter</span> (&gt; <span class="number">10</span>) $ map (*<span class="number">2</span>) [<span class="number">2.</span><span class="number">.10</span>]
</pre></td></tr></table></figure>

<h1 id="function-composition-">Function composition(函数组合)</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="params">(.)</span> :: <span class="params">(b -&gt; c)</span> -&gt;</span> <span class="function"><span class="params">(a -&gt; b)</span> -&gt;</span> a<span class="function"> -&gt;</span> c   
f . g = \x<span class="function"> -&gt;</span> f (g x)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>ghci&gt; <span class="keyword">map</span> (negate . <span class="keyword">abs</span>) [<span class="number">5</span>,-<span class="number">3</span>,-<span class="number">6</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>,-<span class="number">19</span>,<span class="number">24</span>]

oddSquareSum :: <span class="typename">Integer</span>   
oddSquareSum = sum . takeWhile (&lt;<span class="number">10000</span>) . filter odd . <span class="keyword">map</span> (^<span class="number">2</span>) $ [<span class="number">1.</span>.]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-常用的函数]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/haskell%E8%B6%A3%E5%AD%A6-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/06/28/haskell趣学-函数的语法/</id>
    <published>2014-06-28T11:19:17.000Z</published>
    <updated>2014-06-28T14:22:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">模式匹配</h1>
<p>模式匹配决定参数的组成形式, Guard 进行参数的细化管理(过滤)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>sayMe :: <span class="function"><span class="params">(Integral a)</span> =&gt;</span> a<span class="function"> -&gt;</span> String   
sayMe <span class="number">1</span> = <span class="string">"One!"</span>   
sayMe <span class="number">2</span> = <span class="string">"Two!"</span>   
sayMe <span class="number">3</span> = <span class="string">"Three!"</span>   
sayMe <span class="number">4</span> = <span class="string">"Four!"</span>   
sayMe <span class="number">5</span> = <span class="string">"Five!"</span>   
sayMe x = <span class="string">"Not between 1 and 5"</span>
-- 将不会执行到, 模式从上到下执行
sayMe <span class="number">6</span> = <span class="string">"six"</span>


factorial :: <span class="function"><span class="params">(Integral a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a   
factorial <span class="number">0</span> = <span class="number">1</span>   
factorial n = n * factorial (n - <span class="number">1</span>)
</pre></td></tr></table></figure>

<p>在定义模式时，一定要留一个万能匹配的模式，
这样我们的进程就不会为了不可预料的输入而崩溃了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="label">charName ::</span> Char -&gt; String   
charName '<span class="literal">a</span>' = <span class="string">"Albert"</span>   
charName 'b' = <span class="string">"Broseph"</span>   
charName 'c' = <span class="string">"Cecil"</span>
-- when called
charName 'h' -- throws Exception

<span class="label">addVectors ::</span> (Num <span class="literal">a</span>) =&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>)   
addVectors <span class="literal">a</span> b = (fst <span class="literal">a</span> + fst b, snd <span class="literal">a</span> + snd b)
-- 或者可以这样
<span class="label">addVectors ::</span> (Num <span class="literal">a</span>) =&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>) -&gt; (<span class="literal">a</span>, <span class="literal">a</span>)   
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

<span class="label">first ::</span> (<span class="literal">a</span>, b, c) -&gt; <span class="literal">a</span>   
first (x, _, _) = x   
 
<span class="label">second ::</span> (<span class="literal">a</span>, b, c) -&gt; b   
second (_, y, _) = y   
  
<span class="label">third ::</span> (<span class="literal">a</span>, b, c) -&gt; c   
third (_, _, z) = z

<span class="label">head' ::</span> [<span class="literal">a</span>] -&gt; <span class="literal">a</span>   
head' [] = error <span class="string">"Can't call head on an empty list, dummy!"</span>   
<span class="label">head' (x:</span>_) = x

<span class="label">tell ::</span> (Show <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; String   
tell [] = <span class="string">"The list is empty"</span>   
<span class="label">tell (x:</span>[]) = <span class="string">"The list has one element: "</span> ++ show x   
<span class="label">tell (x:y:</span>[]) = <span class="string">"The list has two elements: "</span> ++ show x ++ <span class="string">" and "</span> ++ show y   
<span class="label">tell (x:y:</span>_) = <span class="string">"This list is long. The first two elements are: "</span> ++ show x ++ <span class="string">" and "</span> ++ show y

<span class="label">capital ::</span> String -&gt; String   
capital <span class="string">""</span> = <span class="string">"Empty string, whoops!"</span>   
<span class="label">capital all@(x:</span>xs) = <span class="string">"The first letter of "</span> ++ all ++ <span class="string">" is "</span> ++ [x]
</pre></td></tr></table></figure>

<h2 id="guards">Guards</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="label">bmiTell ::</span> (RealFloat <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; String   
bmiTell bmi   
    | bmi &lt;= <span class="number">18.5</span> = <span class="string">"You're underweight, you emo, you!"</span>   
    | bmi &lt;= <span class="number">25.0</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>   
    | bmi &lt;= <span class="number">30.0</span> = <span class="string">"You're fat! Lose some weight, fatty!"</span>   
    | otherwise   = <span class="string">"You're a whale, congratulations!"</span>

-- 通过反单引号，我们不仅可以以中缀形式调用函数，
-- 也可以在定义函数的时候使用它。有时这样会更易读。
<span class="label">myCompare ::</span> (Ord <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span> -&gt; Ordering   
<span class="literal">a</span> <span class="escape">`m</span>yCompare<span class="escape">` </span>b   
    | <span class="literal">a</span> &gt; b     = GT   
    | <span class="literal">a</span> == b    = EQ   
    | otherwise = LT
</pre></td></tr></table></figure>

<h2 id="where-">where 关键字</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>bmiTell :: (RealFloat <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; <span class="operator">a</span> -&gt; String   
bmiTell weight height   
    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>   
    | bmi &lt;= <span class="keyword">normal</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>   
    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>   
    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>   
    where bmi = weight / height ^ <span class="number">2</span>   
          skinny = <span class="number">18.5</span>   
          <span class="keyword">normal</span> = <span class="number">25.0</span>   
          fat = <span class="number">30.0</span>
<span class="comment">-- 也可以这样</span>
     where bmi = weight / height ^ <span class="number">2</span>   
           (skinny, <span class="keyword">normal</span>, fat) = (<span class="number">18.5</span>, <span class="number">25.0</span>, <span class="number">30.0</span>)

<span class="comment">-- 在where里面定义函数</span>
calcBmis :: (RealFloat <span class="operator">a</span>) =&gt; [(<span class="operator">a</span>, <span class="operator">a</span>)] -&gt; [<span class="operator">a</span>]   
calcBmis xs = [bmi w h | (w, h) &lt;- xs]  
    where bmi weight height = weight / height ^ <span class="number">2</span>
</pre></td></tr></table></figure>

<h2 id="let-">Let 关键字</h2>
<p>let 绑定则是个表达式，允许你在任何位置定义局部变量，
而对不同的 guard 不可见。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>cylinder :: <span class="function"><span class="params">(RealFloat a)</span> =&gt;</span> a<span class="function"> -&gt;</span> a<span class="function"> -&gt;</span> a   
cylinder r h =  
    <span class="reserved">let</span> sideArea = <span class="number">2</span> * pi * r * h   
        topArea = pi * r ^<span class="number">2</span>   
    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea

[<span class="reserved">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]
(<span class="reserved">let</span> (a,b,c) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">in</span> a+b+c) * <span class="number">100</span>

-- 它做的不是过滤，而是绑定名字
calcBmis :: <span class="function"><span class="params">(RealFloat a)</span> =&gt;</span> [(a, a)]<span class="function"> -&gt;</span> [a]   
calcBmis xs = [bmi | (w, h) &lt;- xs, <span class="reserved">let</span> bmi = w / h ^ <span class="number">2</span>]
</pre></td></tr></table></figure>

<h2 id="case-">Case 表达</h2>
<p>模式匹配本质上不过就是 case 语句的语法糖而已。
这两段代码就是完全等价的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="title">head'</span> :: [a] -&gt; a   
<span class="title">head'</span> [] = error <span class="string">"No head for empty lists!"</span>   
<span class="title">head'</span> (x:_) = x

<span class="title">head'</span> :: [a] -&gt; a   
<span class="title">head'</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">"No head for empty lists!"</span>   
                      (x:_) -&gt; x
</pre></td></tr></table></figure>

<p>case表达式的语法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">case</span> expression <span class="operator">of</span> pattern -&gt; <span class="built_in">result</span>   
                   pattern -&gt; <span class="built_in">result</span>   
                   pattern -&gt; <span class="built_in">result</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>   
<span class="title">describeList</span> xs = <span class="string">"The list is "</span> ++ what xs   
    <span class="keyword">where</span> what [] = <span class="string">"empty."</span>   
          what [x] = <span class="string">"a singleton list."</span>   
          what xs = <span class="string">"a longer list."</span>
</pre></td></tr></table></figure>

<h1 id="-">递归</h1>
<p>递归实际上是定义函数以调用自身的方式,
在递归定义中声明的一两个非递归的值, 称作边界条件.</p>
<h2 id="max-">Max函数</h2>
<p><code>maximum</code> 函数取一组可排序的 List 做参数，并回传其中的最大值.</p>
<p>命令式:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(list:List)</span>:</span>Int = {
    var maxNum = <span class="number">0</span>
    <span class="keyword">for</span>(i &lt;- list) maxNum = maximum(i, maxNum)
    <span class="keyword">return</span> maxNum
}
</pre></td></tr></table></figure>

<p>函数式(递归):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>maximum :: (Ord <span class="operator">a</span>) =&gt; [<span class="operator">a</span>] -&gt; <span class="operator">a</span>
maximum [] = error <span class="string">"empty list"</span>
maximum [x] = x
maximum (x:xs) = <span class="built_in">max</span> x (maximum xs)
</pre></td></tr></table></figure>

<h2 id="-">其他案例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>take :: (Num i, Ord i) =&gt; i -&gt; [<span class="operator">a</span>] -&gt; [<span class="operator">a</span>]
take n _
    | n &lt;= <span class="number">0</span> = []
take _ []    = []
take n (x:xs) = x : take (n-<span class="number">1</span>) xs


reverse :: [<span class="operator">a</span>] -&gt; <span class="operator">a</span>
reverse [] = []
reverse [x:xs] = reverse xs ++ [x]


<span class="keyword">repeat</span> :: <span class="operator">a</span> -&gt; [<span class="operator">a</span>]
<span class="keyword">repeat</span> x = x : <span class="keyword">repeat</span> x

<span class="keyword">repeat</span> <span class="number">3</span>  <span class="comment">-- 会永远的执行下去</span>
take <span class="number">5</span> <span class="keyword">repeat</span> <span class="number">3</span>  <span class="comment">-- 得到3个</span>


zip :: [<span class="operator">a</span>] -&gt; [b] -&gt; [(<span class="operator">a</span>, b)]
zip [] _ = []
zip _ [] = []
zip (x:xs) (y:ys) = (x, y) : zip xs ys
</pre></td></tr></table></figure>

<h2 id="-">快速排序</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="label">quicksort ::</span> (Ord <span class="literal">a</span>) =&gt; [<span class="literal">a</span>] -&gt; <span class="literal">a</span>
quicksort [] = []
<span class="label">quicksort (x:</span>xs) = smallerSorted ++ [x] + biggerSorted
    where smallerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &lt;= x]
          biggerSorted = quicksort [<span class="literal">a</span> | <span class="literal">a</span> &lt;- xs, <span class="literal">a</span> &gt; x]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-TypeClass]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/haskell%E8%B6%A3%E5%AD%A6-typeclass/"/>
    <id>http://zhpooer.github.io/2014/06/28/haskell趣学-typeclass/</id>
    <published>2014-06-28T02:15:03.000Z</published>
    <updated>2014-06-28T12:09:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="type">Type</h1>
<p>Haskell 支持类型推导</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ghci&gt; <span class="symbol">:t</span> <span class="string">'a'</span>   
<span class="string">'a'</span> <span class="symbol">:</span><span class="symbol">:</span> <span class="constant">Char</span>   
ghci&gt; <span class="symbol">:t</span> <span class="constant">True</span>   
<span class="constant">True</span> <span class="symbol">:</span><span class="symbol">:</span> <span class="constant">Bool</span>   
ghci&gt; <span class="symbol">:t</span> <span class="string">"HELLO!"</span>   
<span class="string">"HELLO!"</span> <span class="symbol">:</span><span class="symbol">:</span> [<span class="constant">Char</span>]
</pre></td></tr></table></figure>

<p>函数也有类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="bullet">removeNonUppercase :: </span>[Char] -&gt; [Char]
removeNonUppercase st = [ c | c &lt;- st, c <span class="smartquote">`elem` ['</span>A'..<span class="emphasis">'Z'</span>]]

<span class="bullet">-- </span>Integer 也是整数，但它是无界的, Int 是有界的
<span class="bullet">factorial :: </span>Integer -&gt; Integer   
factorial n = product [1..n]

<span class="bullet">circumference :: </span>Float -&gt; Float   
circumference r = 2 * pi * r

<span class="bullet">circumference' :: </span>Double -&gt; Double   
circumference' r = 2 * pi * r

<span class="bullet">-- </span>Bool 表示布林值，它只有两种值：True 和 False
<span class="bullet">-- </span>Char 表示一个字符。一个字符由单引号括起，一组字符的 List 即为字串。
<span class="bullet">-- </span>Tuple 的类型取决于它的长度及其中项的类型。注意，空 Tuple 同样也是个类型，它只有一种值：()
</pre></td></tr></table></figure>

<h1 id="type-variables-">Type variables(类型变量?泛型?)</h1>
<p>类型变量, <code>head :: [a] -&gt; a</code>, 意味着 a 可以是任意的类型,
使用到类型变量的函数被称作&quot;多态函数 &quot;，
<code>head</code> 函数的类型声明里标明了它可以取任意类型的
<code>List</code> 并回传其中的第一个元素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>-- <span class="literal">a</span> 和 b 是不同的类型变量
<span class="label">fst ::</span> (<span class="literal">a</span>, b) -&gt; <span class="literal">a</span>
</pre></td></tr></table></figure>

<h1 id="typeclasses">Typeclasses</h1>
<p>类型定义行为的接口，如果一个类型属于某 Typeclass，
那它必实现了该 Typeclass 所描述的行为, 可以看做是 java 的 interface</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment">-- +-*/之类的运算符也是同样。在缺省条件下，它们多为中缀函数。</span>
<span class="comment">-- 若要检查它的类型，就必须得用括号括起使之作为另一个函数，或者说以首码函数的形式调用它。</span>
<span class="comment">-- =&gt; 符号, 它左边的部分叫做类型约束</span>
<span class="comment">-- "相等函数取两个相同类型的值作为参数并回传一个布林值，</span>
<span class="comment">-- 而这两个参数的类型同在 Eq 类之中(即类型约束)"</span>
ghci&gt; :t (==)
(==) :: (Eq <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; <span class="operator">a</span> -&gt; Bool

<span class="comment">-- Num 相当于泛型?</span>
addVectors :: (Num <span class="operator">a</span>) =&gt; (<span class="operator">a</span>, <span class="operator">a</span>) -&gt; (<span class="operator">a</span>, <span class="operator">a</span>) -&gt; (<span class="operator">a</span>, <span class="operator">a</span>)   
addVectors <span class="operator">a</span> b = (fst <span class="operator">a</span> + fst b, snd <span class="operator">a</span> + snd b)
</pre></td></tr></table></figure>

<h2 id="-typeclass">常用的 TypeClass</h2>
<p><code>Eq</code> 包含可判断相等性的类型, 提供实现的函数是 == 和 /=</p>
<p><code>Ord</code> 包含可比较大小的类型. 包含了&lt;, &gt;, &lt;=, &gt;= 之类用于比较大小的函数..</p>
<p><code>Show</code> 的成员为可用字串表示的类型, 可以取任一Show的成员类型并将其转为字串</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>ghci&gt; show <span class="number">3</span>   
<span class="string">"3"</span>   
ghci&gt; show <span class="number">5.334</span>   
<span class="string">"5.334"</span>   
ghci&gt; show <span class="keyword">True</span>   
<span class="string">"True"</span>
</pre></td></tr></table></figure>

<p><code>Read</code> 函数可以将一个字串转为 Read 的某成员类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>ghci&gt; <span class="built_in">read</span> <span class="string">"True"</span> || False   
True   
ghci&gt; <span class="built_in">read</span> <span class="string">"8.2"</span> + <span class="number">3.8</span>   
<span class="number">12.0</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> - <span class="number">2</span>   
<span class="number">3</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"[1,2,3,4]"</span> ++ [<span class="number">3</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]

-- 搞不清楚究竟该是 Int 还是 Float 了
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> :: Int   
<span class="number">5</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> :: Float   
<span class="number">5.0</span>   
ghci&gt; (<span class="built_in">read</span> <span class="string">"5"</span> :: Float) * <span class="number">4</span>   
<span class="number">20.0</span>   
ghci&gt; <span class="built_in">read</span> <span class="string">"[1,2,3,4]"</span> :: [Int]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
ghci&gt; <span class="built_in">read</span> <span class="string">"(3, 'a')"</span> :: (Int, Char)   
(<span class="number">3</span>, <span class="string">'a'</span>)
</pre></td></tr></table></figure>

<p><code>Bounded</code> 的成员都有一个上限和下限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>ghci<span class="subst">&gt;</span> minBound <span class="tag">:: Int</span>   
<span class="subst">-</span><span class="number">2147483648</span>   
ghci<span class="subst">&gt;</span> maxBound <span class="tag">:: Char</span>   
<span class="string">'\1114111'</span>   
ghci<span class="subst">&gt;</span> maxBound <span class="tag">:: Bool</span>   
<span class="literal">True</span>   
ghci<span class="subst">&gt;</span> minBound <span class="tag">:: Bool</span>   
<span class="literal">False</span>
</pre></td></tr></table></figure>

<p><code>Enum</code> 的成员都是连续的类型,
个值都有后继子 (successer) 和前置子 (predecesor)，
分别可以通过 succ 函数和 pred 函数得到</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>ghci<span class="subst">&gt;</span> <span class="preprocessor">[</span><span class="string">'a'</span><span class="built_in">..<span class="variable">'e'</span></span><span class="preprocessor">]</span><span class="markup">   
"abcde"   
ghci&gt; </span><span class="preprocessor">[</span><span class="literal">LT</span> <span class="built_in">..</span> <span class="literal">GT</span><span class="preprocessor">]</span><span class="markup">   
</span><span class="preprocessor">[</span><span class="literal">LT</span>,<span class="literal">EQ</span>,<span class="literal">GT</span><span class="preprocessor">]</span><span class="markup">   
ghci&gt; </span><span class="preprocessor">[</span><span class="number">3</span> <span class="built_in">..</span> <span class="number">5</span><span class="preprocessor">]</span><span class="markup">   
</span><span class="preprocessor">[</span><span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span><span class="preprocessor">]</span><span class="markup">   
ghci&gt; succ 'B'   
'C'</span>
</pre></td></tr></table></figure>

<p><code>Num</code> 是表示数字的 Typeclass，它的成员类型都具有数字的特征.
类型只有亲近 <code>Show</code> 和 <code>Eq</code>，才可以加入 Num</p>
<p><code>Integral</code> 同样是表示数字的 Typeclass。
Num 包含所有的数字：实数和整数。
而 Intgral 仅包含整数，其中的成员类型有 Int 和 Integer</p>
<p><code>Floating</code> 仅包含浮点类型：Float 和 Double</p>
]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala Implicits手记]]></title>
    <link href="http://zhpooer.github.io/2014/06/28/scala-implicits%E6%89%8B%E8%AE%B0/"/>
    <id>http://zhpooer.github.io/2014/06/28/scala-implicits手记/</id>
    <published>2014-06-28T01:57:30.000Z</published>
    <updated>2014-07-10T06:34:25.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://debasishg.blogspot.com/2010/06/scala-implicits-type-classes-here-i.html" target="_blank">详细说明</a></p>
<p>传统的代理模式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">Address</span><span class="params">(no: Int, street: String, city: String, 
  state: String, zip: String)</span></span>

<span class="class"><span class="keyword">trait</span> <span class="title">LabelMaker</span>[<span class="title">T</span>] {</span>
  <span class="keyword">def</span> toLabel(value: T): String
}


<span class="comment">// adapter class</span>
<span class="class"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title">AddressLabelMaker</span> <span class="keyword">extends</span> <span class="title">LabelMaker</span>[<span class="title">Address</span>] {</span>
  <span class="keyword">def</span> toLabel(address: Address) = {
    <span class="keyword">import</span> address._
    <span class="string">"%d %s, %s, %s - %s"</span>.format(no, street, city, state, zip)
  }
}

<span class="comment">// the adapter provides the interface of the LabelMaker on an Address</span>
AddressLabelMaker().toLabel(Address(<span class="number">100</span>, <span class="string">"Monroe Street"</span>, <span class="string">"Denver"</span>, <span class="string">"CO"</span>, <span class="string">"80231"</span>))
</pre></td></tr></table></figure>

<p>在scala中可以这样</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>object LabelMaker {
  implicit object AddressLabelMaker extends LabelMaker[Address] {
<span class="code">    def toLabel(address: Address): String = {</span>
<span class="code">      import address._</span>
<span class="code">      "%d %s, %s, %s - %s".format(no, street, city, state, zip)</span>
<span class="code">    }</span>
  }
}

def printLabel[<span class="link_label">T</span>](<span class="link_url">t: T</span>)(implicit lm: LabelMaker[T]) = lm.toLabel(t)
// 简化成这样, 可以理解 隐式捕获 和 T 相关的LabelMaker, 语法糖
def printLabel[<span class="link_label">T: LabelMaker</span>](<span class="link_url">t: T</span>) = implicitly[LabelMaker[T]].toLabel(t)
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[haskell趣学-入门]]></title>
    <link href="http://zhpooer.github.io/2014/06/25/haskell%E8%B6%A3%E5%AD%A6-%E5%85%A5%E9%97%A8/"/>
    <id>http://zhpooer.github.io/2014/06/25/haskell趣学-入门/</id>
    <published>2014-06-25T06:58:38.000Z</published>
    <updated>2014-06-25T08:12:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-heskell">什么是Heskell</h1>
<ul>
<li>纯函数式语言<ul>
<li>命令式编程, 变量在执行过后, 会发生变化(状态变化)</li>
<li>函数式, 函数唯一做的事是引用计数结果, 不产生副作用(如改变全局变量)</li>
<li>应用透明, 若以同样的参数调用同一个函数两次，得到的结果一定是相同.
编译器理解程序的行为, 容易验证函数的正确性, 使简单组合成复杂</li>
</ul>
</li>
<li>惰性(lazy), 若以同样的参数调用同一个函数两次, 得到的结果一定是相同值.<ul>
<li>结合引用透明, 可以把程序仅看作是数据的一系列变形</li>
</ul>
</li>
<li>静态类型, 编译器检查错误, 自动类型推导</li>
</ul>
<h2 id="-haskell">使用Haskell</h2>
<p>编译器 GHC, <code>apt-get install Haskell-platform</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ghci&gt; <span class="symbol">:l</span> myfunction.hs
</pre></td></tr></table></figure>

<h1 id="-">入门</h1>
<pre><code>ghci&gt; 2 + 15 
17 
ghci&gt; 5 / 2 
2.5
ghci&gt; False || True 
True 
ghci&gt; not False
True
ghci&gt; 1 == 0 
False 
ghci&gt; 5 /= 5 
False


ghci&gt; 5+&quot;llama&quot; -- 运算符要求两端都是数值
ghci&gt; 5==True  -- 报错, `==`对两个可比较的值可用, 橘子和苹果没法比较
</code></pre><p>中缀函数: <code>*</code>, <code>+</code>, 大多数命令式编程语言中的函数调用形式通常就是函数名,括号,
由逗号分隔的参数表.
在Haskell 中,函数调用的形式是函数名,空格,空格分隔的参数表</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>succ <span class="number">8</span>  <span class="comment">-- successor, 返回一个数的后继</span>
<span class="built_in">min</span> <span class="number">8</span> <span class="number">9</span>

<span class="comment">-- 函数调用拥有最高的优先级</span>
succ <span class="number">9</span> + <span class="built_in">max</span> <span class="number">5</span> <span class="number">4</span> + <span class="number">1</span>      <span class="comment">-- (succ 9) + (max 5 4) + 1</span>
succ <span class="number">9</span>*<span class="number">10</span>                 <span class="comment">-- (succ 9)*10</span>

<span class="comment">-- 使用中缀是函数清晰</span>
<span class="operator">div</span> <span class="number">92</span> <span class="number">10</span>
<span class="number">92</span> `<span class="operator">div</span>` <span class="number">10</span>
</pre></td></tr></table></figure>

<h2 id="-">定义函数</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">-- 声明一个函数, 功能是一个数字乘2</span>
doubleMe x = x + x

doubleUs x y = x*<span class="number">2</span> + y*<span class="number">2</span>     <span class="comment">--  doubleUs x y = doubleMe x + doubleMe y</span>

<span class="comment">-- 首字母大写的函数是不允许</span>
doubleSmallNumber x = (<span class="keyword">if</span> x &gt; <span class="number">100</span> <span class="keyword">then</span> x <span class="keyword">else</span> x*<span class="number">2</span>) + <span class="number">1</span>
</pre></td></tr></table></figure>

<h2 id="list">List</h2>
<p>List 是一种单类型的数据结构,
可以用来存储多个类型相同的元素.
们可以在里面装一组数字或者一组字符, 但不能把字符和数字装在一起.</p>
<p>在 ghci 下，我们可以使用 <code>let</code> 关键字来定义一个常量.
在 ghci 下执行 <code>let a =1</code> 与在脚本中编写 <code>a=1</code> 是等价的.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre>ghci&gt; let lostNumbers = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">48</span>]   
ghci&gt; lostNumbers   
[<span class="number">4</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">48</span>]

-- 一个 <span class="keyword">List</span> 由方括号括起，其中的元素用逗号分隔开来
ghci&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ++ [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]

-- 字串实际上就是一组字符的 <span class="keyword">List</span>，<span class="string">"Hello"</span> 只是 [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>]
-- ++ 有效率问题
ghci&gt; <span class="string">"hello"</span> ++ <span class="string">" "</span> ++ <span class="string">"world"</span>   
<span class="string">"hello world"</span>   
ghci&gt; [<span class="string">'w'</span>,<span class="string">'o'</span>] ++ [<span class="string">'o'</span>,<span class="string">'t'</span>]   
<span class="string">"woot"</span>

-- 用 : 运算符往一个 <span class="keyword">List</span> 前端插入元素
-- [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 实际上是 <span class="number">1</span>:<span class="number">2</span>:<span class="number">3</span>:[] 的语法糖
ghci&gt; <span class="number">5</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  
[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]

-- 索引
ghci&gt; [<span class="number">9.4</span>,<span class="number">33.2</span>,<span class="number">96.2</span>,<span class="number">11.2</span>,<span class="number">23.25</span>] !! <span class="number">1</span>
<span class="number">33.2</span>

-- 常用函数
ghci&gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  
<span class="number">5</span>
ghci&gt; tail [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  
ghci&gt; last [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
<span class="number">1</span>
ghci&gt; init [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] 
[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]
ghci&gt; length [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
<span class="number">5</span>

ghci&gt; <span class="keyword">null</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   
<span class="keyword">False</span>   
ghci&gt; <span class="keyword">null</span> []   
<span class="keyword">True</span>

ghci&gt; reverse [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]
ghci&gt; take <span class="number">3</span> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]   
[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]   
ghci&gt; take <span class="number">1</span> [<span class="number">3</span>,<span class="number">9</span>,<span class="number">3</span>]   
[<span class="number">3</span>]
ghci&gt; drop <span class="number">3</span> [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]   
[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]

ghci&gt; minimum [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="number">1</span>   
ghci&gt; maximum [<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]   
<span class="number">9</span>

ghci&gt; sum [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]   
<span class="number">31</span>   
ghci&gt; product [<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]   -- 返回元素的积
<span class="number">24</span>

-- 判断一个元素是否在包含于一个 <span class="keyword">List</span>，通常以中缀函数的形式调用它
ghci&gt; <span class="number">4</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="keyword">True</span>   
ghci&gt; <span class="number">10</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]   
<span class="keyword">False</span>
</pre></td></tr></table></figure>

<h2 id="-range">使用 Range</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>ghci&gt; <span class="attr_selector">[1..20]</span> 
<span class="attr_selector">[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]</span> 
ghci&gt; <span class="attr_selector">['a'..'z']</span> 
"abcdefghijklmnopqrstuvwxyz"

-- 跨步
ghci&gt; <span class="attr_selector">[2,4..20]</span> 
<span class="attr_selector">[2,4,6,8,10,12,14,16,18,20]</span>

-- 由于是惰性的, 可以得到无限长度 List
ghci&gt; take 24 <span class="attr_selector">[13,26..]</span>
ghci&gt; take 10 (cycle <span class="attr_selector">[1,2,3]</span>)
ghci&gt; take 10 (<span class="value">repeat</span> 5)
</pre></td></tr></table></figure>

<h2 id="list-comprehension">List Comprehension</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>]] 
[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>] 
[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; boomBangs xs = [ <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">then</span> <span class="string">"BOOM!"</span> <span class="keyword">else</span> <span class="string">"BANG!"</span> | x &lt;- xs, odd x]

<span class="comment">-- 过滤若条件为 false, 则不被包含</span>
<span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">10.</span><span class="number">.20</span>], x /= <span class="number">13</span>, x /= <span class="number">15</span>, x /= <span class="number">19</span>] 
[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">20</span>]

<span class="title">ghci</span>&gt; [ x*y | x &lt;-[<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>], y &lt;- [<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>], x*y &gt; <span class="number">50</span>] 
[<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]

<span class="comment">-- 自己定义length</span>
<span class="comment">-- _ 表示我们并不关心从 List 中取什么值，与其弄个永远不用的变量，不如直接一个 _</span>
<span class="title">ghci</span>&gt; length' xs = sum [<span class="number">1</span> | _ &lt;- xs]

<span class="comment">-- 去除所有的奇数</span>
<span class="title">ghci</span>&gt; <span class="keyword">let</span> xxs = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]] 
<span class="title">ghci</span>&gt; [ [ x | x &lt;- xs, even x ] | xs &lt;- xxs] 
[[<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">6</span>]]
</pre></td></tr></table></figure>

<h2 id="-tuple-">元组(Tuple)</h2>
<p>Tuple (元组)很像 List, 都是将多个值存入一个个体的容器.
Tuple 则要求你对需要组合的数据的数目非常的明确，
它的类型取决于其中项的数目与其各自的类型.(可以装载不同类型的数据)</p>
<p><code>[(1,2),(8,11),(4,5)]</code> 相较 <code>[[1,2],[8,11,5],[4,5]]</code></p>
<p><code>[(1,2),(8,11,5),(4,5)]</code>，<code>[(1,2),(&quot;one&quot;,2)]</code> 都会报错</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>ghci&gt; fst (<span class="number">8</span>,<span class="number">11</span>) 
<span class="number">8</span> 
ghci&gt; fst (<span class="string">"Wow"</span>, <span class="literal">False</span>) 
<span class="string">"Wow"</span>

ghci&gt; snd (<span class="number">8</span>,<span class="number">11</span>) 
<span class="number">11</span> 
ghci&gt; snd (<span class="string">"Wow"</span>, <span class="literal">False</span>) 
<span class="literal">False</span>
-- 这两个函数仅对序对有效, 不能应用于三元组，四元组和五元组之上

ghci&gt; zip [<span class="number">1</span>..] [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"cherry"</span>, <span class="string">"mango"</span>] 
[(<span class="number">1</span>,<span class="string">"apple"</span>),(<span class="number">2</span>,<span class="string">"orange"</span>),(<span class="number">3</span>,<span class="string">"cherry"</span>),(<span class="number">4</span>,<span class="string">"mango"</span>)]

-- 告诉它只要周长为 <span class="number">24</span> 的直角三角形
-- 同时也考虑上 b 边要短于斜边，<span class="literal">a</span> 边要短于 b 边情况
ghci&gt; let rightTriangles' = [ (<span class="literal">a</span>,b,c) | c &lt;- [<span class="number">1</span>..<span class="number">10</span>], b &lt;- [<span class="number">1</span>..c], <span class="literal">a</span> &lt;- [<span class="number">1</span>..b], <span class="literal">a</span>^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>, <span class="literal">a</span>+b+c == <span class="number">24</span>] 
ghci&gt; rightTriangles' 
[(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)]
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="haskell" scheme="http://zhpooer.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[scala培训monad]]></title>
    <link href="http://zhpooer.github.io/2014/06/22/scala%E5%9F%B9%E8%AE%ADmonad/"/>
    <id>http://zhpooer.github.io/2014/06/22/scala培训monad/</id>
    <published>2014-06-22T02:14:17.000Z</published>
    <updated>2014-06-22T07:46:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="monad">monad</h1>
<ul>
<li>magic</li>
<li>category</li>
<li>theory</li>
<li>design pattern</li>
<li>api</li>
</ul>
<p>函数式争论, 可赋值和不可赋值(运输的隐喻, 货车(可以赋值)和石油管道(Monad))</p>
<h2 id="scala-monad">scala中的Monad</h2>
<p>可扩展, 可重用, 可测试</p>
<ul>
<li><p>Option, 实现 <code>map</code> 和 <code>flatmap</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">()</span>:</span> Option[Int];
<span class="function"><span class="keyword">def</span> <span class="title">getQuantities</span><span class="params">()</span>:</span>Option[Int];

<span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">()</span>:</span>Option[Int] =
    getPrice().flatMap(price =&gt; getQuantities().map(price * _));

<span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">()</span>:</span>Option[Int] = {
    <span class="keyword">for</span>{
        price &lt;- getPrice()
        quantities &lt;- getQuantities()
    } <span class="keyword">yield</span> price * quantities;
}
</pre></td></tr></table></figure>
</li>
<li><p>Try</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>// java, 命令式, 不可重用
<span class="keyword">try</span>{
   val conn = DriverManager.getConnection(url, user, password);
} catch {
   case e:* =&gt; 
}

<span class="function"><span class="keyword">def</span> <span class="title">getDriver</span><span class="params">()</span>:</span>Try[String];

<span class="keyword">for</span>(driver &lt;- getDriver()) <span class="keyword">yield</span> driver
</pre></td></tr></table></figure>
</li>
<li><p>Future</p>
</li>
<li>all collections<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">// 八皇后问题</span>
def queen(n:Int) = {
    def placeQueens(k: Int): <span class="keyword">List</span>[<span class="keyword">List</span>[(Int, Int)]] =
        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">List</span>(<span class="keyword">List</span>())
        <span class="keyword">else</span> <span class="keyword">for</span> {
            
        }
}
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="monad-">Monad是一个设计模式</h2>
<ul>
<li>不确定性技术</li>
<li>异常处理</li>
<li>并发</li>
<li>解析, <strong>scalaz</strong>, <code>ValidationNEL</code></li>
<li>持续计算</li>
<li><p>输入, 输出</p>
<figure class="highlight scala:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre>
def greet {
<span class="code">    println("请输入")</span>
<span class="code">    val key = readLine</span>
<span class="code">    println("您输入的是" + key)</span>
}

// Monad
cass class IO[<span class="link_label">A</span>](<span class="link_url">run: (</span>) =&gt; A) {
   def map[<span class="link_label">B</span>](<span class="link_url">f: A=&gt; B</span>): IO[B]= IO(() =&gt; f(run()))
   def flatMap[<span class="link_label">B</span>](<span class="link_url">f: A =&gt; IO[B]</span>) :IO[B] =&gt; f(run())
}

// 将调用包装成函数
def io[<span class="link_label">A</span>](<span class="link_url">a: =&gt; A</span>): IO[A] = IO(() =&gt; a)

def putLine(a: String): IO[Unit] = io(println(s))
def getLine: IO[String] = io(readLine)

// 函数的调用和传递, 返回一个函数
def greet: IO[Unit] = for {
<span class="code">    _ &lt;- putLine("")</span>
<span class="code">    name &lt;- getLine</span>
<span class="code">    result &lt;- putLine("")</span>
} yield ()

// 运行函数
greet.run();
</pre></td></tr></table></figure>
</li>
<li><p>可变性计算</p>
</li>
</ul>
<p><strong>sap</strong></p>
<h1 id="reactive-with-akka">Reactive with Akka</h1>
<p>可用:</p>
<ul>
<li>出错了还能用</li>
<li>高负荷, 高压力下</li>
</ul>
<p>可扩展, 可恢复, 可回应</p>
<p>actor:</p>
<ul>
<li>具有ID</li>
<li>具有行为</li>
<li>交流方式是异步(synchronous)</li>
<li>一个actor是单线程</li>
</ul>
<p>时间驱动(Event Driven)</p>
<ul>
<li>Event是头等函数</li>
<li>消息会回复</li>
<li>消息会被存到一个 Queue</li>
<li>消息可以分发</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Actor</span> {</span>
    <span class="keyword">var</span> greeting = <span class="string">""</span>
    <span class="keyword">def</span> receive = {
       <span class="keyword">case</span> Greet =&gt; sender ! Greeting(greeting) <span class="comment">// </span>
    }
}

<span class="keyword">val</span> system = ActorSystem(<span class="string">"helloakka"</span>)

system.actorOf()
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="scala" scheme="http://zhpooer.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传智播客-OA系统]]></title>
    <link href="http://zhpooer.github.io/2014/06/20/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2-oa%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhpooer.github.io/2014/06/20/传智播客-oa系统/</id>
    <published>2014-06-20T01:02:49.000Z</published>
    <updated>2014-06-30T13:38:57.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>OA: Office Automation, 办公自动化<br>CRM: 客户关系管理系统<br>ERP: 企业资源管理系统<br>BBS: 论坛系统<br>CMS: 内容管理系统</p>
<p>软件开发流程</p>
<ol>
<li>需求调研, 形成调研文档</li>
<li>分析需求, 形成需求分析文档</li>
<li>设计(概要设计, 详细设计), 形成设计文档</li>
<li>编码</li>
<li>测试, 测试用例, 测试计划, 测试报告, 性能测试, 压力测试(HP LoadRunner)</li>
<li>运维</li>
</ol>
<h2 id="-">整体设计</h2>
<p>分层: 表现层, 业务层, 持久层</p>
<p>技术: Struts + Spring3.2 + Hibernate3.6 + Jquery1.8 + Ajax</p>
<p>代码规范:</p>
<ul>
<li>常量字母都大写, 单词之间使用<code>_</code>隔开, 例如 <code>DEFAULT_PAGE_SIZE</code></li>
<li>注释, 在代码中加入适当注释, 说明步骤, 与说明非简单逻辑</li>
<li>空行, 在代码中加入适当空行, 增加可读性</li>
<li>要格式化代码, 一个Java文件中代码不要过多, 一个方法中的代码不要过多</li>
</ul>
<p>约定:</p>
<ul>
<li>文件中都采用 UTF-8 编码, JDK版本, 编译环境统一</li>
<li>实体的主键属性的类型使用<code>Long</code>类型</li>
</ul>
<h1 id="-">搭建开发环境</h1>
<ol>
<li>创建Web项目<code>itcastOA</code></li>
<li>导入jar包(struts2, spring3.2, hibernate3.6, 数据库驱动, c3p0)</li>
<li><p>配置 web.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>
<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> openSessionInView<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>OpenSessionInView<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span> struts<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>StrtusPrepareAndExcutorFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>openSessionInView <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> /* <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>

<span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span>
    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2 <span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span> /* <span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span>
<span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span>

<span class="comment">&lt;!-- spring监听器 --&gt;</span>
<span class="tag">&lt;<span class="title">listener</span>&gt;</span>
   <span class="tag">&lt;<span class="title">listener-class</span>&gt;</span> org.spring.web.context.ContextLoaderListener <span class="tag">&lt;/<span class="title">listener-class</span>&gt;</span>
<span class="tag">&lt;/<span class="title">listener</span>&gt;</span>
<span class="tag">&lt;<span class="title">context-param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span> contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:beans.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span>
<span class="tag">&lt;/<span class="title">context-param</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>加入 <code>struts.xml</code>, <code>beans.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">beans</span>&gt;</span>
    <span class="comment">&lt;!-- 读取属性文件的配置  --&gt;</span>
    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">locaction</span>=<span class="value">"classpath:jdbc.properties"</span>/&gt;</span>

    <span class="comment">&lt;!-- dataSource  --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dataSrouce"</span> <span class="attribute">class</span>=<span class="value">"com.mchange.ComboPooledDataSource"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"driverClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jdbcUrl"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"initialPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"minPoolSize"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 本地会话工厂bean, LocalSessonFactoryBean --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"sessionFactory"</span> <span class="attribute">class</span>=<span class="value">"org.spring.hibernate.LocalSessionFactory"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dataSource"</span> <span class="attribute">ref</span>=<span class="value">"dataSource"</span>&gt;</span> <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"hibernateProperties"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">props</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
                <span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">prop</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">props</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="comment">&lt;!-- hbm的映射文件 --&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"mappingDirectoryLocations"</span> &gt;</span>
            <span class="tag">&lt;<span class="title">list</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>classpath:cn/itcast/or/domain <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">list</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 事务管理器, HibernateTransactonManager --&gt;</span>
    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"transactionManager"</span> <span class="attribute">class</span>=<span class="value">"HibernateTransactionManager"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"sessionFactory"</span> <span class="attribute">ref</span>=<span class="value">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span>
    <span class="comment">&lt;!-- 事务通知, AOP切面, 事务注解驱动, 组件扫描 --&gt;</span>
    <span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"oaAdvice"</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span>
        <span class="comment">&lt;!-- 事务属性 --&gt;</span>
        <span class="tag">&lt;<span class="title">tx:attributes</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"save*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"update*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"delete*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIERD"</span> <span class="attribute">isolation</span>=<span class="value">"DEFAULT"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"find*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tx:method</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tx:attributes</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span>
    <span class="tag">&lt;<span class="title">aop:config</span>&gt;</span>
        <span class="comment">&lt;!-- 切点  --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">expression</span>=<span class="value">"execution(* cn.itcast.oa.service..*Service.*())"</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">aop:pointcut</span>&gt;</span>
        <span class="comment">&lt;!-- 切面 --&gt;</span>
        <span class="tag">&lt;<span class="title">aop:adviser</span> <span class="attribute">advice-ref</span>=<span class="value">"oaAdvice"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"oaPC"</span>&gt;</span><span class="tag">&lt;/<span class="title">aop:adviser</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span>
    <span class="comment">&lt;!-- 组建扫描--&gt;</span>
    <span class="tag">&lt;<span class="title">context:compoent-scan</span> <span class="attribute">bas-package</span>=<span class="value">"cn.itcast.oa"</span>&gt;</span><span class="tag">&lt;/<span class="title">context:compoent-scan</span>&gt;</span>
    <span class="comment">&lt;!-- 支持注解  --&gt;</span>
    <span class="tag">&lt;<span class="title">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="title">context:annotation-config</span>&gt;</span>
    <span class="comment">&lt;!-- 事务注解驱动 --&gt;</span>
    <span class="tag">&lt;<span class="title">tx:annotation-driver</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="title">tx:annotation-driver</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> itcastOA <span class="keyword">default</span> <span class="keyword">character</span> <span class="keyword">set</span> utf8;</span>
<span class="operator"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'xiaoming'</span> identified <span class="keyword">by</span> <span class="string">'123'</span>;</span>  <span class="comment">-- 创建一个普通用户</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast_oa.* <span class="keyword">to</span> itcast@localhost identified <span class="keyword">by</span> <span class="string">"123"</span>;</span>
</pre></td></tr></table></figure>
</li>
<li><p>数据连接参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>;; TODO
<span class="constant">driverClass</span>=
<span class="constant">jdbcUrl</span>=
<span class="constant">user</span>=
<span class="constant">password</span>=
<span class="constant">initPoolSize</span>=
<span class="constant">maxPoolSize</span>=
minPoolSize
</pre></td></tr></table></figure>
</li>
<li><p>创建包结构</p>
<pre><code> cn.itcast.oa.domain
 cn.itcast.oa.dao
 cn.itcast.oa.service
 cn.itcast.oa.web
 cn.itcast.oa.web.action
 cn.itcast.oa.web.filter
 cn.itcast.oa.web.interceptor
 cn.itcast.oa.web.listener
 cn.itcast.oa.utils
 cn.itcast.oa.base
</code></pre></li>
<li><p>抽取通用DAO</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre>package cn.itcast.oa.<span class="keyword">base</span>;
<span class="comment">// 抽取通用DAO</span>
<span class="keyword">public</span> <span class="keyword">interface</span> IBaseDao&lt;T&gt; {
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(T entity);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(Long id);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(T entity)
    <span class="keyword">public</span> T <span class="title">findById</span>(Long id);
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findAll</span>();
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findByIds</span>(Long[] ids);
}
<span class="comment">// class UserDaoImpl extends BaseDaoImpl&lt;User&gt; implements IUserDao</span>
<span class="keyword">public</span> <span class="keyword">class</span> BaseDaoImpl&lt;T&gt; implements IBaseDao&lt;T&gt; {
    <span class="comment">// 在执行过程中, 获得实体类类型</span>
    Class&lt;T&gt; clazz;
    
    <span class="keyword">public</span> <span class="title">BaseDaoImpl</span>(){
        <span class="comment">// 获得父类类型的泛型</span>
        ParameterziedType genericSuperclass = <span class="keyword">this</span>.getClass().getGenericSuperclass();
        Type[] types = genericSuperclass.getActualTypedArguments();
        <span class="comment">// 获得实体类类型</span>
        clazz = (Class&lt;T&gt;)types[<span class="number">0</span>];
    }

    @Resource
    <span class="keyword">private</span> SessionFactory sessoinFactory;

    <span class="keyword">public</span> Session <span class="title">getSession</span>(){
        <span class="keyword">return</span> sessionFactory.getCurrentSession();
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(T entity){
        getSessoin().save(entity);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span>(Long id){
        <span class="comment">//先查询, 再删除</span>
        getSession().delete(<span class="keyword">this</span>.findById(id));
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(T entity){
        getSessoin().update(entity);
    }
    <span class="keyword">public</span> T <span class="title">findById</span>(Long id){
       <span class="keyword">return</span> <span class="keyword">this</span>.getSession().<span class="keyword">get</span>(clazz, id)
    }
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findAll</span>(){
        String hql = <span class="string">"from "</span> + clazz.getSimpleName();
        getSession().createQeury(query);
        <span class="keyword">return</span> query.list();
    }
    <span class="keyword">public</span> List&lt;T&gt; <span class="title">findByIds</span>(Long[] ids){
        <span class="keyword">if</span>(ids!=<span class="keyword">null</span> && ids.length &gt;<span class="number">0</span> ){
        String hql = <span class="string">"From "</span> + clazz.getSimpleName() + <span class="string">" where id in (:ids)"</span>;
        Qeury query = getSession().createQuery(hql);
        query.setParameterList(<span class="string">"ids"</span>, ids); <span class="comment">// 为命名参数赋值</span>
        <span class="keyword">return</span> query.list();
        }
        Collections.EMPTY_LIST;
    }
}
</pre></td></tr></table></figure>
</li>
<li><p>抽取通用 Action</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span>&lt;<span class="title">T</span>&gt; <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">ActionSupport</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">ModelDriver</span>&lt;<span class="title">T</span>&gt; {</span>
    <span class="keyword">protected</span> T model;
    <span class="keyword">public</span> BaseAction(){
        <span class="comment">// 构造方法中实例化模型对象</span>
        ParameterzedTypes superclass = <span class="keyword">this</span>.getClass().getGernericSuperclass();
        Type[] types = superclass.getActualTypedArguments();
        <span class="comment">// 获得实体类类型</span>
        Class&lt;T&gt; clazz = (Class&lt;T&gt;)types[<span class="number">0</span>];
        model = clazz.newInstance();
    }
    <span class="keyword">public</span> T getModel(){
        <span class="keyword">return</span> model;
    }
    <span class="comment">// 将集合属性压入值栈</span>
    <span class="keyword">protected</span> <span class="keyword">void</span> set(String key, List&lt;?&gt; value) {
        ActionContext.getContext().getValueStack().set(key, value);
    }
    <span class="comment">// 将单个属性压入值栈</span>
    <span class="keyword">protected</span> <span class="keyword">void</span> push(Ojbect obj) {
        ActionContext.getContext().push(obj);
    }
}
</pre></td></tr></table></figure>

</li>
</ol>
<h1 id="-3-">系统管理(3)</h1>
<p>抽取实体类: 岗位(Role), 部门(Department), 用户(User)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Role {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet();
}
<span class="keyword">public</span> <span class="keyword">class</span> Department {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String description;
    <span class="keyword">private</span> Department parent;
    <span class="keyword">private</span> Set&lt;Department&gt; children = <span class="keyword">new</span> HashSet();
    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet();
}
<span class="keyword">public</span> <span class="keyword">class</span> User {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> loginName:String
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String password;
    <span class="keyword">private</span> String email;
    <span class="keyword">private</span> <span class="keyword">int</span> gender;
    <span class="keyword">private</span> String phoneNumber
    <span class="keyword">private</span> Department department;
    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet();
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="code"><pre>&lt;hibernate-mapping&gt;
    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"Role"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;gernerator <span class="type">class</span>=<span class="string">"native"</span>&gt;
            &lt;/gernerator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"description"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"user"</span> table=<span class="string">"itcast_user_role"</span>&gt;
            &lt;key column=<span class="string">"roleId"</span>&gt;&lt;/key&gt;
            &lt;many-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"user"</span> column=<span class="string">"userId"</span>&gt;&lt;/many-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;

    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"Department"</span> table=<span class="string">"itcast_department"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;gernerator <span class="type">class</span>=<span class="string">"native"</span>&gt;
            &lt;/gernerator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"description"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        
        &lt;many-<span class="keyword">to</span>-one <span class="property">name</span>=<span class="string">"parent"</span> <span class="type">class</span>=<span class="string">"Department"</span> column=<span class="string">"parentId"</span>&gt;&lt;/many-<span class="keyword">to</span>-one&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"children"</span>&gt;
            &lt;key column=<span class="string">"parentId"</span>&gt;
            &lt;/key&gt;
            &lt;one-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"Department"</span>/&gt;
        &lt;/<span class="keyword">set</span>&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"users"</span>&gt;
            &lt;key column=<span class="string">"department"</span>&gt;
            &lt;/key&gt;
            &lt;one-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"User"</span>&gt;&lt;/one-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;
    &lt;<span class="type">class</span> <span class="property">name</span>=<span class="string">"User"</span> table=<span class="string">"itcast_user"</span>&gt;
        &lt;<span class="property">id</span> <span class="property">name</span>=<span class="string">"id"</span>&gt;
            &lt;generator <span class="type">class</span>=<span class="string">"native"</span>&gt; &lt;/generator&gt;
        &lt;/<span class="property">id</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"loginName"</span> <span class="property">length</span>=<span class="string">"32"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"name"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"descrption"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"gender"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"email"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"phoneNumber"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span>&gt;&lt;/<span class="keyword">property</span>&gt;
        &lt;many-<span class="keyword">to</span>-one <span class="property">name</span>=<span class="string">"department"</span> <span class="type">class</span>=<span class="string">"Department"</span>&gt;&lt;/many-<span class="keyword">to</span>-one&gt;
        &lt;<span class="keyword">set</span> <span class="property">name</span>=<span class="string">"roles"</span> table=<span class="string">"itcast_user_rols"</span>&gt;
            &lt;key column=<span class="string">"userId"</span>&gt;
            &lt;/key&gt;
            &lt;many-<span class="keyword">to</span>-many <span class="type">class</span>=<span class="string">"Role"</span> column=<span class="string">"roleId"</span>&gt;&lt;/many-<span class="keyword">to</span>-many&gt;
        &lt;/<span class="keyword">set</span>&gt;
    &lt;/<span class="type">class</span>&gt;
&lt;/hibernate-mapping&gt;
</pre></td></tr></table></figure>

<h2 id="-">岗位管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre>@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">Role</span>&gt; {</span>
    @Resource
    <span class="keyword">private</span> IRoleService roleService;
    <span class="comment">// 查询所有岗位列表</span>
    @Action(value=<span class="string">"role_List"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"rolsList.jsp"</span>)})
    <span class="keyword">public</span> String <span class="keyword">list</span>(){
        <span class="keyword">List</span>&lt;Role&gt; roleList = roleService.findAll();
        set(<span class="string">"roleList"</span>, roleList);
        <span class="keyword">return</span> <span class="string">"list"</span>;
    }
    
    @Action(value=<span class="string">"role_delete"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"roleList"</span>, type=<span class="string">"redirectAction"</span>)})
    <span class="keyword">public</span> String delete(){
        <span class="keyword">return</span> <span class="string">"toList"</span>;
    }
    
    @Action(value=<span class="string">"role_save"</span> results = {@Results(name=<span class="string">"list"</span>, location=<span class="string">"roleList"</span>, type=<span class="string">"redirectAction"</span>)})
    <span class="keyword">public</span> String save(){
        <span class="keyword">return</span> <span class="string">"toList"</span>;
    }

    <span class="comment">// 跳转到updateUI页面</span>
    <span class="keyword">public</span> String updateUI(){
        Role role = roleService.findById(model.getId);
        push(role);
        <span class="keyword">return</span> <span class="string">"updateUI"</span>;
    }

}

@Service
@Transaction
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">IRoleService</span> {</span>
    @Resource
    <span class="keyword">private</span> IRoleDao roleDao;
    <span class="comment">// 查询岗位列表</span>
    @Transactional(readOnly=<span class="keyword">true</span>)
    <span class="keyword">public</span> <span class="keyword">List</span>&lt;Role&gt; findAll(){
        roleDao.findAll();
    }
}

<span class="comment">// 岗位管理</span>
@Repository
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Role</span>&gt; <span class="keyword">implements</span> <span class="title">IRoleDao</span> {</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment">&lt;!-- RoleAction-role_save-validation.xml --&gt;</span>
<span class="tag">&lt;<span class="title">validators</span>&gt;</span>
    <span class="tag">&lt;<span class="title">field</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">field-validator</span> <span class="attribute">type</span>=<span class="value">"requiedstring"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">message</span> <span class="attribute">key</span>=<span class="value">"roleNameNotNull"</span>&gt;</span><span class="tag">&lt;/<span class="title">message</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">field-validator</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">field</span>&gt;</span>
<span class="tag">&lt;/<span class="title">validators</span>&gt;</span>
<span class="comment">&lt;!-- messages.properties --&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>岗位名称<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
        <span class="tag">&lt;<span class="title">th</span>&gt;</span>相关操作<span class="tag">&lt;/<span class="title">th</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"roleList"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${name} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span> ${description} <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;<span class="title">td</span>&gt;</span>  <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">部门管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre>@Controller
@Scope(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">Departemnt</span>&gt;{</span>
    <span class="comment">// 注意返回上一级时的设计</span>
    <span class="keyword">private</span> Long parentId; <span class="comment">// 属性驱动, 上级部门的Id</span>
    
    <span class="comment">// 查询部门列表功能</span>
    <span class="keyword">public</span> String <span class="keyword">list</span>(){
        <span class="keyword">if</span>(parentId == <span class="keyword">null</span>) {
            <span class="comment">// 查询顶级部门列表</span>
            <span class="comment">// hql: from department where parent is null</span>
            <span class="keyword">List</span> <span class="keyword">list</span> = departmentService.findTopTist();
        } <span class="keyword">else</span> {
            <span class="comment">// 查询下级部门</span>
            <span class="comment">// hql: from department where parent.id=:parentId;</span>
            <span class="keyword">list</span> = departmentService.findChildren(parentId);
        }
        
        set(<span class="string">"list"</span>, <span class="keyword">list</span>);
        <span class="keyword">return</span> <span class="keyword">LIST</span>;
    }
    <span class="comment">// 删除上级部门同时删除下级部门, 配置cascade</span>
    <span class="keyword">public</span> String delete(){
        <span class="keyword">if</span>(getParent().getId()!=<span class="keyword">null</span>)parentId = model.getParent().getId();
        <span class="keyword">return</span> TOLIST;
    }
    <span class="comment">// 新建 删除时,要注意传过来 parentId</span>
    <span class="keyword">public</span> String saveUI(){
        <span class="comment">// 准备部门列表数据, 用户填充下拉框</span>
        <span class="comment">// 使用递归, 包装成树形结构, 使用缩进</span>
        <span class="comment">// 空格 替换成 &nbsp;</span>
    }
    <span class="keyword">public</span> String save(){}
    <span class="keyword">public</span> String updateUI(){
        <span class="comment">// 准备部门列表数据, 用户填充下拉框</span>
        <span class="comment">// 使用递归, 包装成树形结构名字</span>
        <span class="comment">// 空格 替换成 &nbsp;</span>
        <span class="comment">// 在修改时展示的不应该是全的树</span>
    }
    <span class="keyword">public</span> String update(){}
}
</pre></td></tr></table></figure>

<h2 id="-">用户管理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="annotation">@Scope</span>(<span class="string">"prototype"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> {</span>
    <span class="keyword">private</span> Long departmentId;
    <span class="keyword">private</span> Long[] roleIds ;
    
    <span class="keyword">public</span> String <span class="title">updateUI</span>(){
        <span class="comment">// 准备部门列表, 可以使用 json-lib和ajax, 异步获得</span>
        <span class="comment">// 准备岗位列表</span>
    }
    <span class="keyword">public</span> String <span class="title">save</span>(){
        <span class="comment">// 根据departmentid 和 roleids手动配置;</span>

        <span class="comment">// 某人密码是"1234"</span>
        <span class="comment">// 使用 md5 加密</span>
    }

    <span class="comment">// 初始化密码</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPassword</span>(){
    }
}
</pre></td></tr></table></figure>

<h3 id="-">用户名重复客户端校验</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="comment">// 绑定离焦时间</span>
        $(<span class="string">"#loginName"</span>).blur(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="keyword">var</span> v = <span class="keyword">this</span>.value;
            $.post(${contextPath/user_checkLoginName}, {<span class="string">'loginName'</span>: v}, <span class="function"><span class="keyword">function</span><span class="params">(data)</span>{</span>
                <span class="keyword">if</span>(data==<span class="number">1</span>) {
                    <span class="comment">// 当前登陆名字已经存在</span>
                    $(<span class="string">"#showMsg"</span>).html(<span class="string">"当前登陆名已经存在"</span>);
                    $(<span class="string">"#saveBtn"</span>).hide();
                } <span class="keyword">else</span> {
                    $(<span class="string">"#showMsg"</span>).html(<span class="string">"当前输入名可以使用"</span>);
                    $(<span class="string">"#saveBtn"</span>).show();
                }
            })
        });
    })
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// UserAction</span>
<span class="keyword">public</span> <span class="built_in">String</span> checkLoginName(){
    <span class="built_in">String</span> loginName <span class="subst">=</span> model<span class="built_in">.</span>getLoginName()<span class="built_in">.</span>trim();
    <span class="built_in">List</span><span class="subst">&lt;</span>User<span class="subst">&gt;</span> <span class="built_in">list</span> <span class="subst">=</span> userService<span class="built_in">.</span>findByLoginName(loginName);
    response<span class="built_in">.</span>setContentType(<span class="string">"text/html;charset=utf-8"</span>);
    <span class="built_in">String</span> flag <span class="subst">=</span> <span class="number">0</span>;
    <span class="keyword">if</span>(<span class="built_in">list</span><span class="subst">!=</span><span class="built_in">null</span> <span class="subst">&&</span> <span class="built_in">list</span><span class="built_in">.</span>size()<span class="subst">&gt;</span><span class="number">0</span>) {
        <span class="comment">// 当前登录名已经存在</span>
        flag <span class="subst">=</span> <span class="string">"1"</span>
    }
    out<span class="built_in">.</span>print(flag);
    <span class="keyword">return</span> <span class="literal">NONE</span>;
}
</pre></td></tr></table></figure>

<h1 id="-">权限管理</h1>
<p>角色就是权限的集合, 角色关联权限.
在进行任何一个操作之前, 先判断用户是否有权限</p>
<h2 id="-">权限实体</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> Privilege {
    <span class="keyword">private</span> Long id;
    <span class="keyword">private</span> String name;
    <span class="keyword">private</span> String url;        <span class="comment">//权限对应的访问url地址</span>
    <span class="keyword">private</span> Privilege parent;  <span class="comment">// 对应的上级权限</span>
    <span class="keyword">private</span> Set&lt;Privilege&gt; children = <span class="keyword">new</span> HashSet();
    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet();
}

<span class="keyword">public</span> <span class="keyword">class</span> Role {
    <span class="keyword">private</span> Set&lt;Privilege&gt; privileges = <span class="keyword">new</span> HashSet();
}
</pre></td></tr></table></figure>

<h3 id="-">初始化数据</h3>
<figure class="highlight sql:"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>&gt; source privilege<span class="class">.sql</span>; -- 导入初始化数据
&gt; insert into <span class="function">user(loginName, name, password)</span> <span class="function">values(<span class="string">"admin"</span>, <span class="string">"超级用户"</span>, <span class="function">md5(admin)</span>)</span>;
</pre></td></tr></table></figure>

<h3 id="-">显示层</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">class</span> RoleAction {
    <span class="keyword">public</span> String <span class="title">setPrivilegeUI</span>() {
        <span class="comment">// 根据id 查询当前设置权限的角色</span>
        Role role = roleService.findById();
        push(role);

        <span class="comment">// 准备权限列表数据</span>
        <span class="comment">// 使用 ul li 可以来展示树形结构</span>
        <span class="comment">// 配合使用 jquery TreeView 插件</span>
        List privileges = privilegeService.findTopPrivilege();

        <span class="comment">// 设置privilegesIds属性驱动的值, 用于页面回显</span>
        <span class="keyword">return</span> <span class="string">"setPrivilegeUI"</span>;
    }
    
    <span class="keyword">private</span> Long[] privilegeIds;
    <span class="keyword">public</span> String <span class="title">setPrivilege</span>(){
        Role role = roleService.findById();
        <span class="keyword">if</span>(privilegeIds != <span class="keyword">null</span> && privilegeIds.length&gt;<span class="number">0</span>) {
            List privilegeList = priprivilegeService.findByIds(privilegeIds);
        } <span class="keyword">else</span> {
            
        }
        
        <span class="keyword">return</span> TOLIST;
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">&lt;!-- set order-by=id 设置权限树有序  --&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    $(<span class="string">"#root"</span>).treeview();
    <span class="comment">//为复选框绑定事件</span>
    <span class="comment">// 当选中或取消某个权限时, 同时选中或者取消下级权限</span>
    $(<span class="string">"input[name=privilegeIds]"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        $(<span class="keyword">this</span>).siblings(<span class="string">"ul"</span>).find(<span class="string">"input"</span>).attr(<span class="string">'checked'</span>, <span class="keyword">this</span>.checked);
    });
    <span class="comment">// 当选中某个权限时, 同时选中上级选项</span>
    <span class="keyword">if</span>(<span class="keyword">this</span>.checked){
        $(<span class="keyword">this</span>).parents(<span class="string">"li"</span>).children(<span class="string">"input"</span>).attr(<span class="string">'checked'</span>, <span class="literal">true</span>);
    } <span class="keyword">else</span> {
        <span class="keyword">if</span>($(<span class="keyword">this</span>).parent(<span class="string">'li'</span>).siblings(<span class="string">'li'</span>).children(<span class="string">'input:checked'</span>).size()==<span class="number">0</span>){
            $(<span class="keyword">this</span>).parent().parent().siblings(<span class="string">"input"</span>).attr(<span class="string">"checked"</span>, <span class="literal">false</span>);
        }
    }
    <span class="comment">// 当取消某个权限时, 如果兄弟权限没有选中, 取消上级选项</span>
}
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"root"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"children"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"abc"</span>/&gt;</span>
            <span class="comment">&lt;!--  label的案件效果和input绑定--&gt;</span>
            <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">应用主页面</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="annotation">@Controller</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> {</span>
    <span class="keyword">public</span> String <span class="title">index</span>(){
        <span class="keyword">return</span> <span class="string">"index"</span>;
    }
    <span class="keyword">public</span> String <span class="title">top</span>(){}
    <span class="keyword">public</span> String <span class="title">left</span>(){}
    <span class="keyword">public</span> String <span class="title">right</span>(){}
    <span class="keyword">public</span> String <span class="title">bottom</span>(){}
}
</pre></td></tr></table></figure>

<h1 id="-">用户登陆和注销</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">// UserAction</span>
<span class="keyword">public</span> String <span class="title">login</span>(){
    User user = userService.login(model);
    <span class="keyword">if</span>(user != <span class="keyword">null</span>) {
        session().put(key, <span class="keyword">value</span>);
    } <span class="keyword">else</span> {
        <span class="keyword">this</span>.addActionError(<span class="string">"用户名或者密码不正确"</span>);
        <span class="keyword">return</span> <span class="string">"loginUI"</span>;
    }
    <span class="keyword">return</span> <span class="string">"home"</span>;
}

<span class="keyword">public</span> String <span class="title">logout</span>(){
    session.remove(<span class="string">"loginUser"</span>);
    <span class="keyword">return</span> <span class="string">"loginUI"</span>;
}

<span class="comment">// UserService</span>
<span class="keyword">public</span> User <span class="title">login</span>(){
    model.setPassword(md5(model.getPassword()));
    <span class="comment">// 根据用户名和密码查询用户</span>
    <span class="keyword">return</span> userDao.findUserByLoginNameAndPassword()
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>&lt;<span class="keyword">global</span>-<span class="constant">result</span>&gt;
    &lt;<span class="constant">result</span> <span class="property">name</span>=<span class="string">"loginUI"</span>&gt;
        index.jsp
    &lt;/<span class="constant">result</span>&gt;
&lt;/<span class="keyword">global</span>-<span class="constant">result</span>&gt;
</pre></td></tr></table></figure>

<h1 id="-">使用权限</h1>
<p>左侧菜单数据从数据库中获取，编写监听器, 当项目启动时加载权限数据, 将权限数据放入 <code>application</code> 作用域</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">// 在web.xml配置监听器</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAIniitListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span>(ServletContextEvent sce) {
        <span class="comment">// 获得 spring 工厂对象</span>
        <span class="comment">// 方式一: application.getAttribute(WebApplicationContextUtil.ROOT_WEB_APPLICATION_CONTEXT);</span>
        WebApplicationContext cxt =
            WebApplicationContextUtil.getWebApplicationContext(sce.getServletContext());
        IPrivilegeService ps = cxt.getBean(<span class="string">"privilegeService"</span>);
        <span class="comment">// 从工厂中获得一个权限的Service对象</span>
        List&lt;Privilege&gt; privilegeTopList = ps.findTopList();
        <span class="comment">// 将权限数据放入作用域, lazy要设置为 false</span>
        sce.getServletContext().setAttribute(<span class="string">"privilegeTopList"</span>, privilegeTopList);

        <span class="comment">//需要全部权限对应的url</span>
        List&lt;String&gt; allUrls = ps.findAllUrls();
        sce.getServletContext().setAttribute(<span class="string">"allUrls"</span>, allUrls);        
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span>(ServletContextEvent sce){}
}

<span class="comment">// User.class, role privileges都要立即加载</span>
<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPrivilegeByName</span>(String privilegeName){
    <span class="keyword">if</span>(isAdmin()) <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">for</span>(Role r: roles) {
       Set&lt;Privilege&gt; privileges = r.getPrivileges();
       <span class="keyword">for</span>(Privilege privilege : privileges) {
           <span class="keyword">if</span>(privilegeName.equals(privilege.getName())) {
               <span class="keyword">return</span> <span class="keyword">true</span>;
           }
       }
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
}

<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdmin</span>(){
    <span class="keyword">return</span> <span class="string">"admin"</span>.equals(loginName);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 侧边栏根据权限显示 --&gt;</span>
<span class="tag">&lt;<span class="title">s:iterator</span> <span class="attribute">value</span>=<span class="value">"#application.privilegeTopList"</span>&gt;</span>
     <span class="comment">&lt;!-- 使用 ongl表达式调用对象方法 --&gt;</span>
     <span class="tag">&lt;<span class="title">s:if</span> <span class="attribute">test</span>=<span class="value">"#session.loginUser.checkPrivilegeByName(name)"</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">s:if</span>&gt;</span>
<span class="tag">&lt;/<span class="title">s:iterator</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">权限拦截器</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="xml"><span class="php"><span class="comment">// 在struts中注册 interceptor</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPrivilegeInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> {</span>
    <span class="keyword">public</span> String intercept(ActionInvocation ai) {
        ActionProxy actionProxy = ai.getProxy();  <span class="comment">// 获得当前 Action的代理对象</span>
        
        String <span class="keyword">namespace</span> = <span class="title">actionProxy</span>.<span class="title">getNamespace</span>();
        String actionName = actionProxy.getActionName();
        
        String url = <span class="keyword">namespace</span> + <span class="title">actionName</span>;
        <span class="comment">// 如果有UI结尾的去掉</span>
        <span class="keyword">if</span>(url.endsWith(<span class="string">"UI"</span>)) {
            url.subString(<span class="number">0</span>, url.length()-<span class="number">2</span>);
        }
        
        User user = ActionContext.getSession().get(<span class="string">"loginUser"</span>);
        <span class="comment">//如果用户没有登陆</span>
        <span class="keyword">if</span>(user == <span class="keyword">null</span>) {
            <span class="comment">// 如果用户访问的是登陆页面,方向</span>
            <span class="keyword">if</span>(<span class="string">"user_login"</span>.equals(url)) {
                <span class="keyword">return</span> ai.invoke();
            } 
            <span class="comment">// 如果用户访问的不是登陆, 跳转到登陆页面</span>
            <span class="keyword">return</span> <span class="string">"loginUI"</span>;
        } <span class="keyword">else</span> {
            <span class="comment">// 如果用户已经登陆</span>
            <span class="keyword">List</span>&lt;String&gt; allUrls = servletContext().getAttribute(<span class="string">"allUrls"</span>);
            <span class="comment">// 如果当前访问的功能不需要控制</span>
            <span class="keyword">if</span>(!allUrls.contains(url)) <span class="keyword">return</span> ai.invoke();
            
            boolean hasPrivilege = usesr.checkPrivilegeByUrl(url);
            <span class="comment">// 如果用户有权限</span>
            <span class="keyword">if</span>(hasPrivilege) <span class="keyword">return</span> ai.invoke();
            <span class="comment">// 如果用户没有,掉转到没有权限的提示页面</span>
            <span class="keyword">return</span> <span class="string">"noPrivilege"</span>;
        }

        <span class="keyword">return</span> <span class="keyword">null</span>;
    }
}</span></span>
</pre></td></tr></table></figure>

<h2 id="-">页面嵌套显示</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// index.jsp</span>
<span class="keyword">if</span>(<span class="keyword">window</span>.<span class="keyword">parent</span> != <span class="keyword">window</span>) {
    <span class="keyword">window</span>.<span class="keyword">parent</span>.location.href = <span class="string">"index.jsp"</span>
}
</pre></td></tr></table></figure>

<h1 id="-">个人信息</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> itcast_privilege (<span class="number">21</span>, <span class="string">"个人设置"</span>, <span class="keyword">null</span>);</span>
<span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> itcast_privilege (<span class="number">22</span>, <span class="string">"个人信息"</span>, <span class="number">21</span>);</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment">// userAction</span>
<span class="comment">// 设置个人信息</span>
<span class="keyword">private</span> File resource;
<span class="keyword">private</span> String resourceFileName;
<span class="keyword">private</span> resourceContentType;

<span class="keyword">public</span> String <span class="title">setUserInfo</span>(){
    <span class="keyword">if</span>(model.getId()==<span class="keyword">null</span>) {
        <span class="comment">// 跳转的设置页面</span>
        <span class="comment">// 在是视图层, user 中的集合还没有初始化, opensessionInview,</span>
        <span class="comment">// 在一次请求中才生效</span>
        User user = session.<span class="keyword">get</span>(<span class="string">"loginUser"</span>);
        push( userService.findById(user.getId()) );
        <span class="keyword">return</span> <span class="string">"SetUserInfo"</span>
    } <span class="keyword">else</span> {
        <span class="comment">// 设置信息</span>
        User user = userService.findById(model.getId());
        <span class="comment">// 可以抽到 BaseAction, 文件夹按日期存储文件</span>
        <span class="comment">// 获得uploadFiles的绝对磁盘路径</span>
        String realPath = servletContext.getRealPath(<span class="string">"uploadFiles"</span>);
        <span class="keyword">int</span> position = resourceFileName.lastIndexOf(<span class="string">"."</span>);
        String suffix = resourceFileName.subString(position);

        String filename = UUID.randomUUID().toString() + suffix;

        File destFile = <span class="keyword">new</span> File(realPath + File.separator+ filename);
        resource.renameto(destFile);
        user.setSavePath(filename);
        userService.update(user);
        <span class="keyword">return</span> <span class="string">"toSetUserInfoUI"</span>;
    }
}
<span class="comment">// User</span>
class User {
    <span class="keyword">private</span> String savePath;
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 文件上传 --&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">enctype</span>=<span class="value">"multipart/form-data"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">name</span>=<span class="value">"resource"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="struts-">struts文件下载</h2>
<ul>
<li>Action中提供 <code>InputStream inputName</code></li>
<li>配置结果集<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">result</span> <span class="attribute">name</span>=<span class="value">"stream"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"inputName"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"contentType"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"contentDisposition"</span>&gt;</span><span class="tag">&lt;/<span class="title">param</span>&gt;</span>
<span class="tag">&lt;/<span class="title">result</span>&gt;</span>
</pre></td></tr></table></figure>

</li>
</ul>
<h1 id="-">论坛管理</h1>
<ol>
<li>提取实体, 版块(form), 主题(Topic), 回复(Reply);
帖子类型, 普通帖子, 精华帖, 置顶帖, 热门帖;
不同类型的帖子会影响列表排序<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="comment">// FormManagerAction, 重写Dao, findAll按position排序</span>
<span class="keyword">public</span> <span class="keyword">class</span> Form {
    Long id;
    String name;
    String description;
    <span class="keyword">int</span> position = <span class="number">0</span>; <span class="comment">// 默认为0, 在新建时等于id的值</span>
    Set&lt;Topic&gt; topics;
    <span class="comment">// 提高检索效率</span>
    Int topicCount; <span class="comment">// 主题数量</span>
    Int articleCount; <span class="comment">// 文章数量(回复数)</span>
    Topic lastTopic;   <span class="comment">// 最后发表主题</span>
}

<span class="keyword">public</span> <span class="keyword">class</span> Topic {
    Long id;
    String title;
    String content;
    <span class="keyword">int</span> type;
    User author;  <span class="comment">// 多对一</span>
    Date postTime;
    String ip;
    Date lastUpdateTime; <span class="comment">// 针对主题最后回复时间</span>
    Set&lt;Reply&gt; replies;
    <span class="comment">// 提高检索效率</span>
    Int replyCount;
    Reply lastReply;
}

<span class="keyword">public</span> <span class="keyword">class</span> Reply {
    Long id;
    String content;
    Date postTime;
    User author;
    String ip;
    Int deleted;
    Topic topic;
}
</pre></td></tr></table></figure>

</li>
</ol>
<h2 id="-">论坛管理模块</h2>
<p>论坛版块管理, 添加, 删除, 上移下移</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>class FormManagerAction{}
<span class="comment">// 上移</span>

<span class="comment">// Service</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveUp</span>(Long id) {
    <span class="comment">// select * from form where position &lt; :up desc limit 0,1</span>
    <span class="comment">// 相互交换位置信息</span>
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>&lt;s:<span class="keyword">if</span> test=<span class="string">"#s.first"</span>&gt; 上移 &lt;/s:<span class="keyword">if</span>&gt;
</pre></td></tr></table></figure>

<h2 id="-">论坛模块</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>
class FormAction {
    <span class="comment">// 排序按照 position</span>
    <span class="comment">// `form/list.jsp`</span>
    <span class="comment">// 版块列表</span>
    <span class="keyword">public</span> String <span class="title">list</span>(){}

    <span class="comment">// 主题列表</span>
    <span class="comment">// 需要排序: 置顶帖在最上方, 剩下的按时间降序排序</span>
    <span class="comment">// select * from itcast_topic order by (case type when 2 then 2 else 1 end) desc, postTime desc;</span>
    <span class="comment">// 注意 order by type desc, postTime desc 区别</span>
    <span class="keyword">public</span> String <span class="title">show</span>(){
        <span class="comment">// 根据版块id查询版块信息</span>
        Form form = formManagerService.findById(model.getId);
        <span class="comment">// 根据 版块id查询主题列表</span>
        List topicList = topicService.findTopicListByForum(model);
        <span class="keyword">set</span>(<span class="string">"topicList"</span>, topicList);
        <span class="keyword">return</span> <span class="string">"formShow"</span>;
    }
}
</pre></td></tr></table></figure>

<h2 id="-">发表主题</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>{</span>
    <span class="keyword">private</span> Long forumId;
    
    <span class="keyword">public</span> String <span class="title">saveUI</span>(){
        Forum form = findById(forumId);
        push(form);
    }

    <span class="keyword">public</span> String <span class="title">save</span>(){
        Forum form = findById(forumId);
        model.setForum(forum);
        model.setAuthor(getCurrentUser());
        model.setIp(getIpAddress()); <span class="comment">//request.getRemoteAddress();</span>
        model.setPostTime(<span class="keyword">new</span> Date());
        model.setLastUpdateTime(model.getPostTime());
        model.setReplyCount(<span class="number">0</span>);
        model.setType(<span class="number">0</span>);
        
        topicService.save(model);
        <span class="keyword">return</span> <span class="string">"toTopicList"</span>;
    }
}

<span class="comment">// topicService</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(Topic model) {
    topicDao.save(model);
    Forum forum = model.getforum();
    <span class="comment">// 版块主题</span>
    forum.setTopicCount(forum.getTopicCount() + <span class="number">1</span>);
    <span class="comment">// 版块文章 </span>
    forum.setArticleCount(forum.getArticleCount() + <span class="number">1</span>);
    forum.setLastTopic(model);
}
</pre></td></tr></table></figure>

<h3 id="ckeditor-">CKEditor编辑内容</h3>
<p>使用 ckEditor 插件内容编辑器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;textarea id='editor&gt;</span>
<span class="tag">&lt;/textarea&gt;</span>
<span class="tag">&lt;script&gt;</span>
<span class="keyword">CKEDITOR</span>.repalce('editor', {});
<span class="tag">&lt;/script&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">显示单个主题(回复列表)</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// TopicAction</span>
<span class="keyword">public</span> String <span class="title">show</span>(){
    Topic topic = topicService.findById(model.getId);
    push(topic);
    <span class="comment">// 根据主题查询回复列表, order by postTime asc</span>
    List replyList = findReplyListByTopic(model.getId());
    <span class="keyword">set</span>(<span class="string">"replyList"</span>, replyList);
    
    <span class="keyword">return</span> <span class="string">"topicshow"</span>;
}
</pre></td></tr></table></figure>

<h2 id="-">回复功能</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="comment">// ### 快速回复功能 ###</span>
<span class="keyword">public</span> <span class="keyword">class</span> ReplyAction {
    <span class="keyword">private</span> Long topicId;
    <span class="comment">// 针对某个主题, 快速回复</span>
    <span class="keyword">public</span> String <span class="title">save</span>(){
        Topic topic = topicService.findById(topicId);
        model.setTopic(topic);
        model.setAuthor(getCurrentUser());
        model.setDeleted(<span class="number">0</span>);
        model.setIp(getIpAddress());
        model.setPostTime(<span class="keyword">new</span> Date());

        replyService.save(model);
        <span class="keyword">return</span> <span class="string">"toTopicShow"</span>;
    }
    <span class="comment">//普通回复(单页)</span>
    <span class="keyword">public</span> String <span class="title">saveUI</span>(){
        Topic topic = topicService.findById(model.getId());
        push(topic);
        <span class="keyword">return</span> <span class="string">"SAVEUI"</span>;
    }
}
<span class="comment">// replyService</span>
<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span>(Reply mode) {
    replyDao.save(model);
    Topic topic = model.getTopic();
    Forum forum = topic.getForum();
    topic.setLastUpdateTime(model.getPostTime());
    topic.getReplyCount(topic.setReplyCount() + <span class="number">1</span>);
    topic.setLastReply(model);
    <span class="comment">// 文章数+1</span>
    forum.setArticleCount(aticalAcount + <span class="number">1</span>);
}
</pre></td></tr></table></figure>

<h2 id="-">分页</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="comment">// 封装分页信息</span>
<span class="keyword">public</span> <span class="keyword">class</span> PageBean {
   <span class="comment">// 页面传递参数</span>
   <span class="keyword">private</span> <span class="keyword">int</span> currentPage; <span class="comment">// 当前页码 </span>
   <span class="keyword">private</span> <span class="keyword">int</span> pageSize;  <span class="comment">// 每页显示记录数</span>
   <span class="comment">// 查询数据库获得</span>
   <span class="keyword">private</span> <span class="keyword">int</span> recordCount; <span class="comment">// 总记录数</span>
   <span class="keyword">private</span> List recorderList;

   <span class="keyword">private</span> <span class="keyword">int</span> pageCount;  <span class="comment">// 总页数</span>
   <span class="keyword">private</span> <span class="keyword">int</span> beginPageIndex; 
   <span class="keyword">private</span> <span class="keyword">int</span> endPageIndex;

    <span class="keyword">public</span> <span class="title">PageBean</span>(){}
    <span class="keyword">public</span> <span class="title">PageBean</span>(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> recordCount, List recorderList){
        <span class="comment">// 计算总页数</span>
        <span class="keyword">this</span>.pageCount = (<span class="keyword">this</span>.recordCount + <span class="keyword">this</span>.pageSize - <span class="number">1</span>)/pageSize;
        <span class="comment">// 计算开始索引和结束索引</span>
        <span class="keyword">if</span>(tihs.pageCount &lt;= <span class="number">10</span>) {
            <span class="keyword">this</span>.beginPageIndex = <span class="number">1</span>;
            <span class="keyword">this</span>.endPageIndex = <span class="keyword">this</span>.pageCount
        } <span class="keyword">else</span> {
            <span class="keyword">this</span>.beginPageIndex = <span class="keyword">this</span>.currentPage - <span class="number">4</span>;
            <span class="keyword">this</span>.endPageIndex = <span class="keyword">this</span>.currentPage + <span class="number">5</span>;
            <span class="keyword">if</span>(<span class="keyword">this</span>.beginPageIndex &lt; <span class="number">1</span>) {
                beginPageIndex = <span class="number">1</span>;
                endPageIndex = <span class="number">10</span>
            }
            <span class="keyword">if</span>(endPageIndex &gt; pageCount) {
                endPageIndex = pageCount;
                beginPageIndex = endPageIndex - <span class="number">9</span>;
            }
        }
    }
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="comment">// topicAction</span>
<span class="comment">// BaseAction{ private int currentPage } // 属性驱动当前页码</span>
<span class="comment">// 使用 form 表单提交分页信息(因为表单还有其他信息, 如排序条件, 过滤条件)</span>
<span class="keyword">public</span> String <span class="title">show</span>(){
    push(topic);

    PageBean pb = replyService.findReplyListByTopic(model, currentPage);
    push(pb);
    <span class="keyword">return</span> <span class="string">"topicShow"</span>;
}
<span class="comment">// 手动配置 配置 pagesize</span>
<span class="comment">// &lt;context:property-palceholder loacation="classpath:jdbc.properties,classpath:pageSize.properties"&gt;</span>
<span class="comment">// &lt;/context:property-palceholder&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
      <category term="传智播客" scheme="http://zhpooer.github.io/tags/%E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[photoshop钢笔工具]]></title>
    <link href="http://zhpooer.github.io/2014/06/18/photoshop%E9%92%A2%E7%AC%94%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhpooer.github.io/2014/06/18/photoshop钢笔工具/</id>
    <published>2014-06-18T06:17:51.000Z</published>
    <updated>2014-07-09T09:19:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">画出虚线</h1>
<ul>
<li>矩形选框工具, 填充黑色, 不取消选框</li>
<li>编辑, 预设画笔</li>
<li>画笔控制栏, 调整间距, 形状动态, 控制选方向</li>
</ul>
<h1 id="-p-">钢笔工具(P)</h1>
<p>实现复杂图像的抠图</p>
<p>贝塞尔曲线 转化为 选区: <code>ctrl + 回车</code></p>
<p>贝塞尔曲线组成:</p>
<ol>
<li>锚点</li>
<li>连接锚点之间的曲线, 路径</li>
</ol>
<p>删除锚点</p>
<ul>
<li>方式一: 选择点, 安装 <code>del</code>, 删除之后要在最新锚点上单机(续上)</li>
<li>方式二: 历史回退</li>
</ul>
<p>移动锚点</p>
<ul>
<li>使用路径选择工具(A)(黑), 针对整体进行调节</li>
<li>使用路径选择工具(A)(白), 针对细节, 路径进行调节</li>
</ul>
<p>杠杆, 调节路径的造型, 拖拽描点</p>
<ul>
<li>杠杆的长度, 弧度的大小</li>
<li>杠杆的方向, 弧度的方向</li>
</ul>
<p>alt : 暂时切换到转换点工具</p>
<ul>
<li>移动到转换点, 可调节转换点</li>
</ul>
<p>用尽量少的锚点, 绘制尽量准确的曲线</p>
<p>吸管工具(I)</p>
<p>三种点的类型:(相互转换按住<code>alt</code>)</p>
<ol>
<li>尖角点, 没有杠杆</li>
<li>平滑点, 两条杠杆保持在同一条直线上</li>
<li>贝塞尔点, 两条杠杆, 不在同一条直线上</li>
</ol>
<h1 id="-">四把锁头</h1>
<ol>
<li>锁定透明像素, 像素分为: 普通像素和透明像素. 只能对普通像素进行操作</li>
<li>锁定像素, 锁定普通像素和透明像素, 不能用画笔工具进行任何操作</li>
<li>锁定位置, 不能使用 v 移动工具进行拖动, 但是在有选区情况下是可以拖动的</li>
<li>锁定全部</li>
</ol>
<p><code>alt + shift + 退格</code> 填充前景色到有普通像素的区域</p>
<p><code>ctrl + shift + 退格</code> 填充背景色到有普通像素的区域</p>
<h1 id="-">图层蒙版</h1>
<p>控制画面的显示和隐藏, 从而实现图像合成等操作</p>
<ol>
<li>选择图层</li>
<li>点击<code>图像蒙版</code>按钮</li>
<li>选择蒙版的白板</li>
<li>使用画笔操作, 黑色代表隐藏, 白色代表显示</li>
</ol>
<p><code>shift+click</code>暂时关闭蒙版</p>
<p><code>alt+click</code>在画面内显示蒙版上的黑白关系</p>
<p>应用蒙版</p>
<p>可以用蒙版的方式进行, 无损抠图, 保留了图片的所有像素</p>
<p>可以使用双蒙版, 使用钢笔工具进行操作</p>
<p><code>ctrl + g</code> 选中的图层形成组</p>
<p>可以在组上添加蒙版进行控制</p>
<p>图像的分辨率(像素每英寸ppi):</p>
<ul>
<li>72, 屏幕显示的分辨率</li>
<li>300, 印刷品的分辨率</li>
</ul>
<p>图层样式斜面和浮雕</p>
<ol>
<li>外斜面, 自身不动, 外面动</li>
<li>内斜面, 自身动, 外面不动</li>
<li>斜面浮雕, 外斜面 + 内斜面</li>
<li>枕状浮雕, 向下凹陷</li>
<li>描边浮雕, 结合图层像是下的描边效果</li>
</ol>
<p>复制图层样式, <code>alt + l + y + c</code> , <code>alt + l + y + p</code></p>
<p>清除图层样式, <code>alt + l + y + a</code> </p>
<h1 id="-">通道</h1>
<p>RGB颜色模式下: 4个通道层</p>
<ul>
<li>RGB,专色通道: 用来承载专色通道上的颜色信息, 用黑白显示相应的颜色信息<ul>
<li>黑色不显示, 白色显示</li>
</ul>
</li>
<li>综合通道: 显示最终画面信息</li>
</ul>
]]></content>
    
    
      <category term="photoshop" scheme="http://zhpooer.github.io/tags/photoshop/"/>
    
  </entry>
  
</feed>
