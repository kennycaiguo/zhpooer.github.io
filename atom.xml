<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Poe's World]]></title>
  <subtitle><![CDATA[竹杖芒鞋轻胜马，一蓑烟雨任平生]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhpooer.github.io/"/>
  <updated>2015-01-07T00:22:46.650Z</updated>
  <id>http://zhpooer.github.io/</id>
  
  <author>
    <name><![CDATA[zhpooer]]></name>
    <email><![CDATA[zhpooer@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[angularjs End-to-End Testing & Guidelines]]></title>
    <link href="http://zhpooer.github.io/2014/12/27/angularjs-6/"/>
    <id>http://zhpooer.github.io/2014/12/27/angularjs-6/</id>
    <published>2014-12-27T10:14:01.000Z</published>
    <updated>2014-12-27T11:14:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="protractor">Protractor</h1>
<p>We need to write end-to-end tests, which open the browser, navigate to
a live running version of our web application, and click around using the application as
a real-world user would. To accomplish this, we use Protractor.</p>
<p>TODO</p>
<h1 id="guildlines-and-best-practices">Guildlines and Best Practices</h1>
<p>Directory Structure</p>
<ul>
<li><code>app</code> The app folder houses all the JavaScript code that you develop. We’ll talk about this
in more detail next.</li>
<li><code>tests</code> Houses all your unit tests and possibly the end-to-end scenario tests as well.
data Any</li>
<li><code>data</code> that is common but not dynamic in your application can be stored here.</li>
<li><code>scripts</code> Build scripts and other common utility scripts can be stored in this folder.</li>
<li><code>Other files</code> The <code>package.json</code>, <code>bower.json</code>, and other files that don’t really need a directory can
be in the main folder.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre>— app<span class="preprocessor">.css</span>
— app<span class="preprocessor">.js</span>
— index<span class="preprocessor">.html</span>
— components // Reusable common components
  — datepicker
    — datepicker-directive<span class="preprocessor">.js</span>
    — datepicker-directive_test<span class="preprocessor">.js</span>
  — authorization
    — authorization<span class="preprocessor">.js</span>
    — authorization-service<span class="preprocessor">.js</span>
    — authorization-service_test<span class="preprocessor">.js</span>
  — ui-widgets
    — ui-widgets<span class="preprocessor">.js</span>
    — grid
      — grid<span class="preprocessor">.html</span>
      — grid-directive<span class="preprocessor">.js</span>
      — grid-directive_test<span class="preprocessor">.js</span>
    — dialog
      — dialog-service<span class="preprocessor">.js</span>
      — dialog-service_test<span class="preprocessor">.js</span>
    — list
      — list<span class="preprocessor">.html</span>
      — list<span class="preprocessor">.css</span>
      — list-controller<span class="preprocessor">.js</span>
      — list-controller_test<span class="preprocessor">.js</span>
    — login
      — login<span class="preprocessor">.html</span>
      — login-controller<span class="preprocessor">.js</span>
    — search
      — search<span class="preprocessor">.html</span>
      — search<span class="preprocessor">.css</span>
      — search-controller<span class="preprocessor">.js</span>
      — search-controller_test<span class="preprocessor">.js</span>
    — detail
      — detail<span class="preprocessor">.html</span>
      — detail-controller<span class="preprocessor">.js</span>
      — detail-controller_test<span class="preprocessor">.js</span>
    — admin
      — create
        — create<span class="preprocessor">.html</span>
        — create-controller<span class="preprocessor">.js</span>
        — create-controller_test<span class="preprocessor">.js</span>
      — update
        — update<span class="preprocessor">.html</span>
— vendors // third-party dependencies go here
  — underscore
  — jquery
  — bootstrap
— e2e // end-to-end scenario tests
  — runner<span class="preprocessor">.html</span>
  — login_scenario<span class="preprocessor">.js</span>
  — list_scenario<span class="preprocessor">.js</span>
  — search_scenario<span class="preprocessor">.js</span>
  — detail_scenario<span class="preprocessor">.js</span>
  — admin
    — admin_create_scenario<span class="preprocessor">.js</span>
    — admin_update_scenario<span class="preprocessor">.js</span>
</pre></td></tr></table></figure>

<h2 id="starting-point">Starting Point</h2>
<ul>
<li><code>Yeoman</code>, Yeoman is a workflow management tool that automates a lot of the routine,
chore-like tasks that are necessary in any project.</li>
<li>Angular seed projects, <code>ng-boilerplate</code> and <code>angular-seed</code></li>
<li>Mean.io</li>
</ul>
<p>A grunt task that is available for online use is <code>ng-templates</code>,
which allows you to preload all the HTML templates that you use in
your application instead of making an XHR request for them when it is needed.</p>
<p>But if you have a large number of templates, you can consider preloading
the most common templates and views in your application, and let
the others load asynchronously as needed.</p>
<p>General</p>
<ul>
<li>Prefer small files to large files.</li>
<li>Use the AngularJS version of setTimeout, which is the <code>$timeout</code> service, and the
AngularJS version of <code>setInterval</code>, which is the <code>$interval</code> service.</li>
<li>If it adds <code>$timeout</code> or <code>$interval</code>, should remember to
clean it up or cancel it when it is destroyed, to prevent it
from unnecessarily executing in the background.</li>
<li>If you are adding listeners outside of AngularJS, ensure that it is cleaned up correctly.</li>
<li>Let the services and controllers take care of specific error handling only.</li>
<li>Controllers can <code>$broadcast</code> or <code>$emit</code> events on their own scope, or inject the
$rootScope and fire events on <code>$rootScope</code>.</li>
</ul>
<p><code>Batarang</code>, a Chrome extension to help debug and work with AngularJS projects</p>
<p>Optional Modules: <code>ngCookies</code> <code>ngSanitieze</code> <code>ngResource</code> <code>ngTouch</code> <code>ngAnimate</code></p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs-Directives]]></title>
    <link href="http://zhpooer.github.io/2014/12/24/angularjs-5/"/>
    <id>http://zhpooer.github.io/2014/12/24/angularjs-5/</id>
    <published>2014-12-24T07:34:42.000Z</published>
    <updated>2014-12-27T10:13:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="what-are-directives">What Are Directives</h1>
<p>Directives are of two major types in AngularJS</p>
<ul>
<li>Behavior modifiers: These types of directives work on existing UI and HTML snippets, and just add or
modify the existing behavior of what the UI does.</li>
<li>Reusable components: These types of directives are the more common variety, in which the directive cre‐
ates a whole new HTML structure. </li>
</ul>
<h1 id="ng-include">ng-include</h1>
<p>The <code>ng-include</code> directive takes an AngularJS expression
and treats its value as the path to an HTML file.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="code"><pre><span class="comment">&lt;!-- File: chapter11/ng-include/stock.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"stock-dash"</span>&gt;</span>
  Name:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-name"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"stock.name"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Price:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-price"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"stock.price | currency"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Percentage Change:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-change"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"mainCtrl.getChange(stock) + '%'"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"stockMarketApp"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h3</span>&gt;</span>List of Stocks<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"stock in mainCtrl.stocks"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-include</span>=<span class="value">"mainCtrl.stockTemplate"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="comment">// File: chapter11/ng-include/app.js</span>
angular.module(<span class="string">'stockMarketApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> self = <span class="keyword">this</span>;
  self.stocks = [
    {name: <span class="string">'First Stock'</span>, price: <span class="number">100</span>, previous: <span class="number">220</span>},
    {name: <span class="string">'Second Stock'</span>, price: <span class="number">140</span>, previous: <span class="number">120</span>},
    {name: <span class="string">'Third Stock'</span>, price: <span class="number">110</span>, previous: <span class="number">110</span>},
    {name: <span class="string">'Fourth Stock'</span>, price: <span class="number">400</span>, previous: <span class="number">420</span>}
  ];
  self.stockTemplate = <span class="string">'stock.html'</span>;
  self.getChange = <span class="function"><span class="keyword">function</span><span class="params">(stock)</span> {</span>
    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil((
      (stock.price - stock.previous) / stock.previous) * <span class="number">100</span>);
  };
}]);

</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>We can also do it like this <code>&lt;div ng-include=&quot;&#39;views/stock.html&#39;&quot;&gt;&lt;/div&gt;</code></p>
<h2 id="limitations-of-ng-include">Limitations of ng-include</h2>
<p>Although we changed the name of the variable in the
main <code>index.html</code> file, the <code>stock.html</code> file still
expects a variable calledb stock for it to display.</p>
<h1 id="ng-switch">ng-switch</h1>
<p>The ng-switch is another directive that allows us to add some functionality to the UI
for selectively displaying certain snippets of HTML. It gives us a way of conditionally
including HTML snippets by behaving like a switch case directly in the HTML. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h3</span>&gt;</span>Conditional Elements in HTML<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"mainCtrl.currentTab = 'tab1'"</span>&gt;</span>
    Tab 1
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"mainCtrl.currentTab = 'tab2'"</span>&gt;</span>
    Tab 2
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"mainCtrl.currentTab = 'tab3'"</span>&gt;</span>
    Tab 3
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"mainCtrl.currentTab = 'something'"</span>&gt;</span>
    Trigger Default
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch</span>=<span class="value">"mainCtrl.currentTab"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"tab1"</span>&gt;</span>
      Tab 1 is selected
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"tab2"</span>&gt;</span>
      Tab 2 is selected
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"tab3"</span>&gt;</span>
      Tab 3 is selected
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-default</span>&gt;</span>
      No known tab selected
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<p><code>ng-switch-when</code> does not understand AngularJS
expressions.</p>
<h1 id="creating-a-directive">Creating a Directive</h1>
<p>AngularJS converts dashes to camelCase.
Thus, stock-widget (or STOCK-WIDGET or
even Stock-Widget) in HTML becomes stockWidget in JavaScript.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h3</span>&gt;</span>List of Stocks<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"stock in mainCtrl.stocks"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">stock-widget</span>&gt;</span> <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span> <span class="comment">// template: &lt;...&gt;</span>
  };
}]);

</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="restrict">Restrict</h2>
<p>The restrict keyword defines how someone using the directive in their code might
use it. The default way of using directives is via attributes of
existing element</p>
<ul>
<li><code>A</code>, The letter A in the value for restrict specifies that the directive can be used as an
attribute on existing HTML elements (such as <code>&lt;div stock-widget&gt;&lt;/div&gt;</code>).</li>
<li><code>E</code>, The letter E in the value for restrict specifies that the directive can be used as a
new HTML element (such as <code>&lt;stock-widget&gt;&lt;/stock-widget&gt;</code>).</li>
<li><code>C</code>, The letter C in the value for restrict specifies that the directive can be used as a
class name in existing HTML elements (such as <code>&lt;div class=&quot;stock-widget&quot;&gt;&lt;/div&gt;</code>).</li>
<li><code>M</code>, The letter M in the value for restrict specifies that the directive can be used as
HTML comments </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>angular.<span class="built_in">module</span>(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span></span> {
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span>,
    restrict: <span class="string">'AE'</span>
  };
}]);
</pre></td></tr></table></figure>

<p>Best Practice</p>
<ul>
<li>Internet Explorer 8 and below do not like custom HTML elements.
AngularJS, with version 1.3 onwards, has dropped support for
(or rather, testing on) Internet Explorer 8.</li>
<li>Class-based directives are ideal for rendering-related work, like the ng-cloak</li>
<li>Element directives are recommended if we are creating entirely new HTML content.</li>
<li>Attribute directives are usually preferred for behavior modifiers.
(like <code>ng-show</code>, <code>ng-class</code>, and so on)</li>
</ul>
<h2 id="the-link-function">The link Function</h2>
<p>The link function does for a directive what a controller does
for a view—it defines APIs and functions that are necessary for the directive, in addition
to manipulating and working with the DOM.</p>
<p>AngularJS executes the link function for each instance of the directive, so each instance
can get its own, fully contained business logic while not affecting any other instance of
the directive. <code>link: function($scope, $element, $attr){}</code></p>
<p>If we need to add functionality to our instance of the directive, we can add it
to the scope of the element we’re working with.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// File: chapter11/directive-with-link/directive.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span>,
    restrict: <span class="string">'AE'</span>,
    link: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> {</span>
      <span class="variable">$scope</span>.getChange = <span class="function"><span class="keyword">function</span><span class="params">(stock)</span> {</span>
      <span class="keyword">return</span> Math.ceil(((stock.price - stock.previous) /
        stock.previous) * <span class="number">100</span>);
      };
    }
  };
}]);
</pre></td></tr></table></figure>

<h2 id="scope">Scope</h2>
<p>By default, each directive inherits its parent’s scope, which is passed to it in the link
function. This can lead to the following problems:</p>
<ul>
<li>Adding variables/functions to the scope modifies the parent as well, which suddenly
gets access to more variables and functions.</li>
<li>The directive might unintentionally override an existing function or variable with
the same name.</li>
<li>The directive can implicitly start using variables and functions from the parent.
This might cause issues if we start renaming properties in the parent and forget to
do it in the directive.</li>
</ul>
<p>AngularJS gives us the scope key in the directive definition object to have complete
control over the scope of the directive element.</p>
<ul>
<li><code>false</code> This is the default value, which basically tells AngularJS that the directive scope is
the same as the parent scope, whichever one it is. So the directive gets access to all
the variables and functions that are defined on the parent scope, and any
modifications it makes are immediately reflected in the parent as well.</li>
<li><code>true</code> This tells AngularJS that the directive scope inherits the parent
scope, but creates a child scope of its own. The directive thus gets
access to all the variables and functions from the parent scope.</li>
<li><code>object</code> We can also pass an object with keys and values to the scope. This tells AngularJS
to create what we call an isolated scope.</li>
</ul>
<p>In particular, we can specify three types of values that can be passed in,
which AngularJS will directly put on the scope of the directive:</p>
<ul>
<li><code>=</code>,   the value of the attribute in HTML to be treated as a
JSON object, which will be bound to the scope of the directive so that any changes
done in the parent scope will be automatically available in the directive.</li>
<li><code>@</code>, the value of the attribute in HTML is to be treated as a
string, which may or may not have AngularJS binding expressions (<code>{\{ }}</code>).</li>
<li><code>&amp;</code>,  the value of the attribute in HTML is a function in some
controller whose reference needs to be available to the directive.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h3</span>&gt;</span>List of Stocks<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"s in mainCtrl.stocks"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">stock-widget</span> <span class="attribute">stock-data</span>=<span class="value">"s"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="comment">// File: chapter11/directive-with-scope/directive.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span>,
    restrict: <span class="string">'A'</span>,
    scope: {
      stockData: <span class="string">'='</span>
    },
    link: <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attrs)</span> {</span>
      $scope.getChange = <span class="function"><span class="keyword">function</span><span class="params">(stock)</span> {</span>
        <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(((stock.price - stock.previous) /
        stock.previous) * <span class="number">100</span>);
      };
    }
  };
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="comment">&lt;!-- File: chapter11/directive-with-scope/stock.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"stock-dash"</span>&gt;</span>
  Name:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-name"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"stockData.name"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Price:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-price"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"stockData.price | currency"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Percentage Change:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-change"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"getChange(stockData) + '%'"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="replace">Replace</h2>
<p>For such cases, AngularJS offers the replace key as part of the directive definition object.
The replace key takes a Boolean, and it defaults to false. If we specify it to true,
AngularJS removes the element that the directive is declared on, and replaces it with
the HTML template from the directive definition object.</p>
<p>With AngularJS version 1.3 forward, the replace keyword in the
directive definition object has been deprecated.</p>
<h1 id="unit-testing-dirctives">Unit Testing Dirctives</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// File: chapter12/stockDirective.js</span>
angular.module(<span class="string">'stockMarketApp'</span>, [])
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span>,
    restrict: <span class="string">'A'</span>,
    scope: {
      stockData: <span class="string">'='</span>,
      stockTitle: <span class="string">'@'</span>,
      whenSelect: <span class="string">'&'</span>
    },
    link: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> {</span>
      <span class="variable">$scope</span>.getChange = <span class="function"><span class="keyword">function</span><span class="params">(stock)</span> {</span>
      <span class="keyword">return</span> Math.ceil(((stock.price - stock.previous) /
        stock.previous) * <span class="number">100</span>);
      };
      <span class="variable">$scope</span>.onSelect = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="variable">$scope</span>.whenSelect({
        stockName: <span class="variable">$scope</span>.stockData.name,
        stockPrice: <span class="variable">$scope</span>.stockData.price,
        stockPrevious: <span class="variable">$scope</span>.stockData.previous
      });
    };
  }
};
}]);
</pre></td></tr></table></figure>

<ol>
<li>Get the <code>$compile</code> service injected into our test.</li>
<li>Set up our directive instance HTML.</li>
<li>Create and set up our scope with the necessary variables.</li>
<li>Determine the template to load because our server is mocked out.</li>
<li>Instantiate an instance of our directive using the <code>$compile</code> service.</li>
<li>Write our expectations for rendering and behavior.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="comment">// File: chapter12/stockDirectiveRenderSpec.js</span>
describe(<span class="string">'Stock Widget Directive Rendering'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  beforeEach(module(<span class="string">'stockMarketApp'</span>));
  <span class="keyword">var</span> compile, mockBackend, rootScope;
  <span class="comment">// Step 1</span>
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$compile</span>, <span class="variable">$httpBackend</span>, <span class="variable">$rootScope</span>)</span> {</span>
    compile = <span class="variable">$compile</span>;
    mockBackend = <span class="variable">$httpBackend</span>;
    rootScope = <span class="variable">$rootScope</span>;
  }));
  it(<span class="string">'should render HTML based on scope correctly'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// Step 2</span>
    <span class="keyword">var</span> scope = rootScope.<span class="variable">$new</span>();
    scope.myStock = {
      name: <span class="string">'Best Stock'</span>,
      price: <span class="number">100</span>,
      previous: <span class="number">200</span>
    };
    scope.title = <span class="string">'the best'</span>;
    <span class="comment">// Step 3</span>
    mockBackend.expectGET(<span class="string">'stock.html'</span>).respond(
      <span class="string">'&lt;div ng-bind="stockTitle"&gt;&lt;/div&gt;'</span> +
      <span class="string">'&lt;div ng-bind="stockData.price"&gt;&lt;/div&gt;'</span>);
    <span class="comment">// Step 4</span>
    <span class="keyword">var</span> element = compile(<span class="string">'&lt;div stock-widget'</span> +
      <span class="string">' stock-data="myStock"'</span> +
      <span class="string">' stock-title="This is {\{title}}"&gt;&lt;/div&gt;'</span>)(scope);
    <span class="comment">// Step 5</span>
    scope.<span class="variable">$digest</span>();
    mockBackend.flush();
    <span class="comment">// Step 6</span>
    expect(element.html()).toEqual(
      <span class="string">'&lt;div ng-bind="stockTitle" class="ng-binding"&gt;'</span> +
      <span class="string">'This is the best'</span> +
      <span class="string">'&lt;/div&gt;'</span> +
      <span class="string">'&lt;div ng-bind="stockData.price" class="ng-binding"&gt;'</span> +
      <span class="string">'100'</span> +
      <span class="string">'&lt;/div&gt;'</span>);


    <span class="comment">// Step 6</span>
    <span class="keyword">var</span> compiledElementScope = element.isolateScope();
    expect(compiledElementScope.stockData)
      .toEqual(scope.myStock);
    expect(compiledElementScope.getChange(
      compiledElementScope.stockData)).toEqual(-<span class="number">50</span>);
    <span class="comment">// Step 7</span>
    expect(scopeClickCalled).toEqual(<span class="string">''</span>);
    compiledElementScope.onSelect();
    expect(scopeClickCalled).toEqual(<span class="string">'100;200;Best Stock'</span>);
  });
});
</pre></td></tr></table></figure>

<h1 id="angularjs-life-cycle">AngularJS Life Cycle</h1>
<p>When an AngularJS application is loaded in our browser window, the following events
are executed in order:</p>
<ol>
<li>The HTML page is loaded:<ul>
<li>The HTML page loads the AngularJS source code (with jQuery optionally loaded before).</li>
<li>The HTML page loads the application’s JavaScript code.</li>
</ul>
</li>
<li>The HTML page finishes loading.</li>
<li>When the document ready event is fired, AngularJS bootstraps and searches for
any and all instances of the ng-app attribute in the HTML:</li>
<li>Within the context of each (there could be more than one) ng-app, AngularJS starts
its magic by running the HTML content inside ng-app through what is known as
the compile step:<ul>
<li>The compile step goes through each line of HTML and looks for AngularJS
directives.</li>
<li>For each directive, it executes the necessary code as defined by that directive’s
definition object.</li>
<li>At the end of the compile step, a link function is generated for each directive
that has a handle on all the elements and attributes that need to be controlled by
AngularJS.</li>
</ul>
</li>
<li>AngularJS takes the link function and combines it with scope.</li>
<li>At the end of this, we have a live, interactive view with the content filled in for the
user.</li>
</ol>
<p>AngularJS adds watchers for all its bindings and ng-model. And whenever one
of the aforementioned events happens, AngularJS checks its watchers
and bindings to see if anything has changed.</p>
<h2 id="the-digest-cycle">The Digest Cycle</h2>
<p>The digest cycle in AngularJS is responsible for keeping the UI up to date in an AngularJS
application. The AngularJS UI update cycle happens as follows:</p>
<ol>
<li>When the application loads, or when any HTML is loaded within AngularJS,
AngularJS runs its compilations step, and keeps track of all the watchers and listeners
that are needed for the HTML</li>
<li>AngularJS also keeps track of all the elements that are bound to the HTML for each
scope.</li>
<li>When one of the events mentioned in the previous section
happens, AngularJS triggers the digest cycle.</li>
<li>In the digest cycle, AngularJS starts from $rootScope and checks each watcher in
the scope to see if the current value differs from the value it’s displaying in the UI.</li>
<li>If nothing has changed, it recurses to all the parent scopes and so on until all the
scopes are verified.</li>
<li>If AngularJS finds a watcher at any scope that reports a change in state, AngularJS
stops right there, and reruns the digest cycle.</li>
<li>The digest cycle is rerun because a change in a watcher might have an implication
on a watcher that was already evaluated beforehand. To ensure that no data change
is missed, the digest cycle is rerun.</li>
<li>AngularJS reruns the digest cycle every time it encounters a change until the digest
cycle stabilizes.</li>
<li>When the digest stabilizes, AngularJS accumulates all the UI updates and triggers
them at once.</li>
</ol>
<h2 id="directive-life-cycle">Directive Life Cycle</h2>
<ol>
<li>When the application loads, the directive definition object is triggered. This hap‐
pens only once.</li>
<li>Next, when the directive is encountered in the HTML the very first time, the tem‐
plate for the directive is loaded.</li>
<li>This template is then compiled and AngularJS handles the other directives present
in the HTML. This generates a link function that can be used to link the directive
to a scope.</li>
<li>The scope for the directive instance is created or acquired. This could be the parent
scope, a child of the parent scope, or an isolated scope as the case might be </li>
<li>The link function (and the controller) execute for the directive.</li>
</ol>
<h1 id="transclusions">Transclusions</h1>
<p>AngularJS directives have a concept of transclusions to allow us to create
reusable directives where each implementation might need to render a
certain section of the UI differently. </p>
<ol>
<li>First, we tell the directive that we are going to use transclusion as part of this di‐
rective.</li>
<li>Second, we need to tell AngularJS where to put the content that was stored in the
template.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="comment">// File: chapter13/directive-transclusion/directive.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'stockWidget'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    templateUrl: <span class="string">'stock.html'</span>,
    restrict: <span class="string">'A'</span>,
    transclude: <span class="literal">true</span>,
    scope: {
      stockData: <span class="string">'='</span>
    },
    link: <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attrs)</span> {</span>
      $scope.getChange = <span class="function"><span class="keyword">function</span><span class="params">(stock)</span> {</span>
        <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(((stock.price - stock.previous) /
          stock.previous) * <span class="number">100</span>);
      };
    }
  };
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="comment">&lt;!-- File: chapter13/directive-transclusion/stock.html --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"stock-dash"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Price:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-price"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"stockData.price | currency"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  Percentage Change:
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"stock-change"</span>
        <span class="attribute">ng-bind</span>=<span class="value">"getChange(stockData) + '%'"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<p>The <code>ng-transclude</code> content explicitly refers to something that
is available in the scope of ng-repeat,
but not inside the directive’s scope.</p>
<p>Thus, the transcluded content and the directive content form a
sibling relationship but do not share the same scope.</p>
<h2 id="advanced-transclusion">Advanced Transclusion</h2>
<p>We try to create a trivial replacement for the <code>ng-repeat</code> that will pick up
some variables from our outer scope, and add some variables for each instance.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="code"><pre>&lt;script&gt;
<span class="comment">// File: chapter13/directive-advanced-transclusion/app.js</span>
angular.module(<span class="string">'stockMarketApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.stocks = [
    {name: <span class="string">'First Stock'</span>, price: <span class="number">100</span>, previous: <span class="number">220</span>},
    {name: <span class="string">'Second Stock'</span>, price: <span class="number">140</span>, previous: <span class="number">120</span>},
    {name: <span class="string">'Third Stock'</span>, price: <span class="number">110</span>, previous: <span class="number">110</span>},
    {name: <span class="string">'Fourth Stock'</span>, price: <span class="number">400</span>, previous: <span class="number">420</span>}
  ];
}]);


<span class="comment">// File: chapter13/directive-advanced-transclusion/directive.js</span>
angular.module(<span class="string">'stockMarketApp'</span>).directive(<span class="string">'simpleStockRepeat'</span>,
  [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> {
      restrict: <span class="string">'A'</span>,
      <span class="comment">// Capture and replace the entire element</span>
      <span class="comment">// instead of just its content</span>
      transclude: <span class="string">'element'</span>,
      <span class="comment">// A $transclude is passed in as the fifth</span>
      <span class="comment">// argument to the link function</span>
      link: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>, ctrl, <span class="variable">$transclude</span>)</span> {</span>
        <span class="keyword">var</span> myArray = <span class="variable">$scope</span>.<span class="variable">$eval</span>(<span class="variable">$attrs</span>.simpleStockRepeat);
        <span class="keyword">var</span> container = angular.element(
          <span class="string">'&lt;div class="container"&gt;&lt;/div&gt;'</span>);
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; i++) {
          <span class="comment">// Create an element instance with a new child</span>
          <span class="comment">// scope using the clone linking function</span>
          <span class="keyword">var</span> instance = <span class="variable">$transclude</span>(<span class="variable">$scope</span>.<span class="variable">$new</span>(),
            <span class="function"><span class="keyword">function</span><span class="params">(clonedElement, newScope)</span> {</span>
              <span class="comment">// Expose custom variables for the instance</span>
              newScope.currentIndex = i;
              newScope.stock = myArray[i];
            });
          <span class="comment">// Add it to our container</span>
          container.append(instance);
        }
        <span class="comment">// With transclude: 'element', the element gets replaced</span>
        <span class="comment">// with a comment. Add our generated content</span>
        <span class="comment">// after the comment</span>
        <span class="variable">$element</span>.after(container);
      }
    };
}]);
&lt;/script&gt;

&lt;div ng-controller=<span class="string">"MainCtrl as mainCtrl"</span>&gt;
  &lt;h3&gt;<span class="keyword">List</span> of Stocks&lt;/h3&gt;
  &lt;div simple-stock-repeat=<span class="string">"mainCtrl.stocks"</span>&gt;
    We found {\{stock.name}} at {\{currentIndex}}
  &lt;/div&gt;
&lt;/div&gt;
</pre></td></tr></table></figure>

<p> Because transclude <code>element</code> copies the entire element, it also removes the element
from the HTML</p>
<h1 id="directive-controllers-and-require">Directive Controllers and require</h1>
<p>Directive controllers are used in AngularJS for inter-directive communication, while
link functions are fully contained and specific to the directive instance. </p>
<p>By inter-directive communication, we mean when one directive on
an element wants to communicate with another directive on its
parent or on the same element.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'stockMarketApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> self = <span class="keyword">this</span>;
  self.startedTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
  self.stocks = [
    {name: <span class="string">'First Stock'</span>, price: <span class="number">100</span>, previous: <span class="number">220</span>},
    {name: <span class="string">'Second Stock'</span>, price: <span class="number">140</span>, previous: <span class="number">120</span>},
    {name: <span class="string">'Third Stock'</span>, price: <span class="number">110</span>, previous: <span class="number">110</span>},
    {name: <span class="string">'Fourth Stock'</span>, price: <span class="number">400</span>, previous: <span class="number">420</span>}
  ];
}]);

<span class="comment">// File: chapter13/directive-controllers/tabs.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'tabs'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    restrict: <span class="string">'E'</span>,
    transclude: <span class="literal">true</span>,
    scope: <span class="literal">true</span>,
    template: <span class="string">'&lt;div class="tab-headers"&gt;'</span> +
      <span class="string">' &lt;div ng-repeat="tab in tabs"'</span> +
      <span class="string">'ng-click="selectTab($index)"'</span> +
      <span class="string">'ng-class="{selected: isSelectedTab($index)}"&gt;'</span> +
      <span class="string">'&lt;span ng-bind="tab.title"&gt;&lt;/span&gt;'</span> +
      <span class="string">' &lt;/div&gt;'</span> +
      <span class="string">'&lt;/div&gt;'</span> +
      <span class="string">'&lt;div ng-transclude&gt;&lt;/div&gt; '</span>,
    controller: <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> {</span>
      <span class="keyword">var</span> currentIndex = <span class="number">0</span>;
      $scope.tabs = [];
      <span class="keyword">this</span>.registerTab = <span class="function"><span class="keyword">function</span><span class="params">(title, scope)</span> {</span>
        <span class="keyword">if</span> ($scope.tabs.length === <span class="number">0</span>) {
          scope.selected = <span class="literal">true</span>;
        } <span class="keyword">else</span> {
          scope.selected = <span class="literal">false</span>;
        }
        $scope.tabs.push({title: title, scope: scope});
      };
      $scope.selectTab = <span class="function"><span class="keyword">function</span><span class="params">(index)</span> {</span>
        currentIndex = index;
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $scope.tabs.length; i++) {
          $scope.tabs[i].scope.selected = currentIndex === i;
        }
      };
      $scope.isSelectedTab = <span class="function"><span class="keyword">function</span><span class="params">(index)</span> {</span>
        <span class="keyword">return</span> currentIndex === index;
      };
    }
  };
}]);

<span class="comment">// File: chapter13/directive-controllers/tab.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
.directive(<span class="string">'tab'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    restrict: <span class="string">'E'</span>,
    transclude: <span class="literal">true</span>,
    template: <span class="string">'&lt;div ng-show="selected" ng-transclude&gt;&lt;/div&gt;'</span>,
    <span class="built_in">require</span>: <span class="string">'^tabs'</span>,
    scope: <span class="literal">true</span>,
    link: <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attr, tabCtrl)</span> {</span>
      tabCtrl.registerTab($attr.title, $scope);
    }
  };
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">tabs</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tab</span> <span class="attribute">title</span>=<span class="value">"First Tab"</span>&gt;</span>
      This is the first tab.
      The app started at {\{mainCtrl.startedTime | date}}
    <span class="tag">&lt;/<span class="title">tab</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tab</span> <span class="attribute">title</span>=<span class="value">"Second Tab"</span>&gt;</span>
      This is the second tab
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"stock in mainCtrl.stocks"</span>&gt;</span>
           Stock Name: {\{stock.name}}
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tab</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">tabs</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<p>A directive controller is a function that gets
the scope and element injected in.</p>
<p>The controller can define functions that are specific to the directive instance
by defining them on <code>$scope</code> as we have been doing so far, and define the API
or accessible functions and variables by defining them on this or the
controller’s instance.</p>
<h1 id="require-options">require Options</h1>
<p>The require keyword in the directive definition object either takes a string or an array
of strings, each of which is the name of the directive that must be used in conjunction
with the current directive.</p>
<ul>
<li><code>require: &#39;tabs&#39;</code>,tells AngularJS to look for a directive called tabs, which exposes a controller on the
same element the directive is on. Implies that AngularJS should locate the directive tabs on the same element, and throw
an error if it’s not found:</li>
<li><code>require: [&#39;tabs&#39;, &#39;ngModel&#39;]</code>, tells AngularJS that both the tabs and ng-model directives must be present on the ele‐
ment our directive is used on. When used as an array, the link function gets an array
of controllers as the fourth argument, instead of just one controller.</li>
<li><code>require: &#39;?tabs&#39;</code> tells AngularJS to treat the directive as an optional dependency.</li>
<li><code>require: &#39;^tabs&#39;</code> tells AngularJS that the tabs directive must be present on one of the parent elements.</li>
<li><code>require: &#39;?^tabs&#39;</code></li>
</ul>
<h1 id="input-directives-with-ng-model">Input Directives with ng-model</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="code"><pre><span class="subst">&lt;</span>div ng<span class="attribute">-controller</span><span class="subst">=</span><span class="string">"MainCtrl as mainCtrl"</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>div<span class="subst">&gt;</span>
  The current value of the slider is 
  <span class="subst">&lt;</span>/div<span class="subst">&gt;</span>
  <span class="subst">&lt;</span>no<span class="attribute">-ui</span><span class="attribute">-slider</span> class<span class="subst">=</span><span class="string">"slider"</span>
                ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"mainCtrl.selectedValue"</span>
                range<span class="attribute">-min</span><span class="subst">=</span><span class="string">"500"</span>
                range<span class="attribute">-max</span><span class="subst">=</span><span class="string">"5000"</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>/no<span class="attribute">-ui</span><span class="attribute">-slider</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>div<span class="subst">&gt;</span>
    <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"number"</span>
           ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"mainCtrl.textValue"</span>
           <span class="keyword">min</span><span class="subst">=</span><span class="string">"500"</span>
           <span class="keyword">max</span><span class="subst">=</span><span class="string">"5000"</span>
           placeholder<span class="subst">=</span><span class="string">"Set a value"</span><span class="subst">&gt;</span>
    <span class="subst">&lt;</span>button ng<span class="attribute">-click</span><span class="subst">=</span><span class="string">"mainCtrl.setSelectedValue()"</span><span class="subst">&gt;</span>
      <span class="built_in">Set</span> slider value
    <span class="subst">&lt;</span>/button<span class="subst">&gt;</span>
  <span class="subst">&lt;</span>/div<span class="subst">&gt;</span>
<span class="subst">&lt;</span>/div<span class="subst">&gt;</span>


<span class="subst">&lt;</span>scirpt<span class="subst">&gt;</span>
<span class="comment">// File: chapter13/directive-slider/app.js</span>
angular<span class="built_in">.</span>module(<span class="string">'sliderApp'</span>, <span class="preprocessor">[</span><span class="preprocessor">]</span><span class="markup">)
  .controller('MainCtrl', </span><span class="preprocessor">[</span>function() {
    <span class="built_in">var</span> <span class="built_in">self</span> <span class="subst">=</span> this;
    <span class="built_in">self</span><span class="built_in">.</span>selectedValue <span class="subst">=</span> <span class="number">2000</span>;
    <span class="built_in">self</span><span class="built_in">.</span>textValue <span class="subst">=</span> <span class="number">4000</span>;
    <span class="built_in">self</span><span class="built_in">.</span>setSelectedValue <span class="subst">=</span> function() {
    <span class="built_in">self</span><span class="built_in">.</span>selectedValue <span class="subst">=</span> <span class="built_in">self</span><span class="built_in">.</span>textValue;
  };
}<span class="preprocessor">]</span><span class="markup">);



// File: chapter13/directive-slider/noui-slider.js
angular.module('sliderApp')
.directive('noUiSlider', </span><span class="preprocessor">[</span>function() {
  <span class="keyword">return</span> {
    restrict: <span class="string">'E'</span>,
    <span class="keyword">require</span>: <span class="string">'ngModel'</span>,
    <span class="keyword">link</span>: function(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attr</span>, ngModelCtrl) {
      <span class="variable">$element.noUiSlider</span>({
        <span class="comment">// We might not have the initial value in ngModelCtrl yet</span>
        start: <span class="number">0</span>,
        range: {
          <span class="comment">// $attrs by default gives us string values</span>
          <span class="comment">// nouiSlider expects numbers, so convert</span>
          <span class="keyword">min</span>: Number(<span class="variable">$attr.rangeMin</span>),
          <span class="keyword">max</span>: Number(<span class="variable">$attr.rangeMax</span>)
        }
      });
      <span class="comment">// When data changes inside AngularJS</span>
      <span class="comment">// Notify the third party directive of the change</span>
      ngModelCtrl<span class="built_in">.</span><span class="variable">$render</span> <span class="subst">=</span> function() {
        <span class="variable">$element.val</span>(ngModelCtrl<span class="built_in">.</span><span class="variable">$viewValue</span>);
      };
      <span class="comment">// When data changes outside of AngularJS</span>
      <span class="variable">$element.on</span>(<span class="string">'set'</span>, function(args) {
        <span class="comment">// Also tell AngularJS that it needs to update the UI</span>
        <span class="variable">$scope.</span><span class="variable">$apply</span>(function() {
          <span class="comment">// Set the data within AngularJS</span>
          ngModelCtrl<span class="built_in">.</span><span class="variable">$setViewValue</span>(<span class="variable">$element.val</span>());
        });
      });
    }
  };
}<span class="preprocessor">]</span><span class="markup">);

&lt;/scirpt&gt;</span>
</pre></td></tr></table></figure>

<p>AngularJS calls the <code>$render</code> method whenever the model value
changes inside AngularJS (for example, when it is initialized to a value in our controller).</p>
<p>A third-party UI component is outside the AngularJS life cycle,
so we need to manually call <code>$scope.$apply()</code>
to ensure that AngularJS updates the UI.
The <code>$scope.$apply()</code> call takes an optional function as
an argument and ensures that the AngularJS digest cycle that’s
responsible for updating the UI with the latest values is triggered.</p>
<h1 id="custom-validators">Custom Validators</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as mainCtrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h3</span>&gt;</span>Zip Code Input<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
  <span class="tag">&lt;<span class="title">h5</span>&gt;</span>Zips are allowed in one of the following formats<span class="tag">&lt;/<span class="title">h5</span>&gt;</span>
  <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>12345<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>12345 1234<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>12345-1234<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">novalidate</span>=<span class="value">""</span>&gt;</span>
    Enter valid zip code:
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span>
           <span class="attribute">ng-model</span>=<span class="value">"mainCtrl.zip"</span>
           <span class="attribute">valid-zip</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>


<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="comment">// File: chapter13/directive-custom-validator/app.js</span>
angular.module(<span class="string">'stockMarketApp'</span>, [])
  .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">this</span>.zip = <span class="string">'1234'</span>;
}]);
<span class="comment">// File: chapter13/directive-custom-validator/directive.js</span>
angular.module(<span class="string">'stockMarketApp'</span>)
  .directive(<span class="string">'validZip'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> zipCodeRegex = <span class="regexp">/^\d{5}(?:[-\s]\d{4})?$/g</span>;
  <span class="keyword">return</span> {
    restrict: <span class="string">'A'</span>,
    <span class="built_in">require</span>: <span class="string">'ngModel'</span>,
    link: <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attrs, ngModelCtrl)</span> {</span>
      <span class="comment">// Handle DOM update --&gt; Model update</span>
      <span class="comment">// The parser function has to return the correct value (if the data is valid) or undefined (in case the data isn’t).</span>
      ngModelCtrl.$parsers.unshift(<span class="function"><span class="keyword">function</span><span class="params">(value)</span> {</span>
        <span class="keyword">var</span> valid = zipCodeRegex.test(value);
        ngModelCtrl.$setValidity(<span class="string">'validZip'</span>, valid);
        <span class="keyword">return</span> valid ? value : <span class="literal">undefined</span>;
      });
      <span class="comment">// Handle Model Update --&gt; DOM</span>
      <span class="comment">// We again check for validity here and return the value.</span>
      ngModelCtrl.$formatters.unshift(<span class="function"><span class="keyword">function</span><span class="params">(value)</span> {</span>
        ngModelCtrl.$setValidity(<span class="string">'validZip'</span>,
          zipCodeRegex.test(value));
        <span class="keyword">return</span> value;
      });
    }
  };
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="compile">Compile</h1>
<p>In the directive life cycle, we mentioned that a directive goes through two distinct phases:
a compile step and a link step. </p>
<p>The compile step in a directive is the correct place to do any sort of HTML template
manipulation and DOM transformation. We never use the link and compile functions
together, because when we use the compile key, we have to return a
linking function from within it instead.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">novalidate</span>=<span class="value">""</span> <span class="attribute">name</span>=<span class="value">"mainForm"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">form-element</span> <span class="attribute">type</span>=<span class="value">"text"</span>
                <span class="attribute">name</span>=<span class="value">"uname"</span>
                <span class="attribute">bind-to</span>=<span class="value">"mainCtrl.username"</span>
                <span class="attribute">label</span>=<span class="value">"Username"</span>
                <span class="attribute">required</span>
                <span class="attribute">ng-minlength</span>=<span class="value">"5"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span> <span class="attribute">key</span>=<span class="value">"required"</span>&gt;</span>
    Please enter a username
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span> <span class="attribute">key</span>=<span class="value">"minlength"</span>&gt;</span>
    Username must be at least 5 characters
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">form-element</span>&gt;</span>
    
  Username is 
  <span class="tag">&lt;<span class="title">form-element</span> <span class="attribute">type</span>=<span class="value">"password"</span>
                <span class="attribute">name</span>=<span class="value">"pwd"</span>
                <span class="attribute">bind-to</span>=<span class="value">"mainCtrl.password"</span>
                <span class="attribute">label</span>=<span class="value">"Password"</span>
                <span class="attribute">required</span>
                <span class="attribute">ng-pattern</span>=<span class="value">"/^[a-zA-Z0-9]+$/"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span> <span class="attribute">key</span>=<span class="value">"required"</span>&gt;</span>
      Please enter a password
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span> <span class="attribute">key</span>=<span class="value">"pattern"</span>&gt;</span>
      Password must only be alphanumeric characters
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">form-element</span>&gt;</span>
  Password is 
  <span class="tag">&lt;<span class="title">button</span>&gt;</span>Suubmit<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
<span class="comment">// File: chapter13/directive-compile/app.js</span>
angular.module(<span class="string">'dynamicFormApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> self = <span class="keyword">this</span>;
  self.username = <span class="string">''</span>;
  self.password = <span class="string">''</span>;
}]);

<span class="comment">// File: chapter13/directive-compile/directive.js</span>
angular.module(<span class="string">'dynamicFormApp'</span>)
.directive(<span class="string">'formElement'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    restrict: <span class="string">'E'</span>,
    <span class="built_in">require</span>: <span class="string">'^form'</span>,
    scope: <span class="literal">true</span>,
    compile: <span class="function"><span class="keyword">function</span><span class="params">($element, $attrs)</span> {</span>
      <span class="keyword">var</span> expectedInputAttrs = {
        <span class="string">'required'</span>: <span class="string">'required'</span>,
        <span class="string">'ng-minlength'</span>: <span class="string">'ngMinlength'</span>,
        <span class="string">'ng-pattern'</span>: <span class="string">'ngPattern'</span>
        <span class="comment">// More here to be implemented</span>
      };
      <span class="comment">// Start extracting content from the HTML</span>
      <span class="keyword">var</span> validationKeys = $element.find(<span class="string">'validation'</span>);
      <span class="keyword">var</span> presentValidationKeys = {};
      <span class="keyword">var</span> inputName = $attrs.name;
      angular.forEach(validationKeys, <span class="function"><span class="keyword">function</span><span class="params">(validationKey)</span> {</span>
        validationKey = angular.element(validationKey);
        presentValidationKeys[validationKey.attr(<span class="string">'key'</span>)] =
          validationKey.text();
      });
      <span class="comment">// Start generating final element HTML</span>
      <span class="keyword">var</span> elementHtml = <span class="string">'&lt;div&gt;'</span> +
        <span class="string">'&lt;label&gt;'</span> + $attrs.label + <span class="string">'&lt;/label&gt;'</span>;
      elementHtml += <span class="string">'&lt;input type="'</span> + $attrs.type +
        <span class="string">'" name="'</span> + inputName + <span class="string">'" ng-model="'</span> + $attrs.bindTo + <span class="string">'"'</span>;
      $element.removeAttr(<span class="string">'type'</span>);
      $element.removeAttr(<span class="string">'name'</span>);
      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> expectedInputAttrs) {
        <span class="keyword">if</span> ($attrs[expectedInputAttrs[i]] !== <span class="literal">undefined</span>) {
          elementHtml += <span class="string">' '</span> + i + <span class="string">'="'</span> + $attrs[expectedInputAttrs[i]] + <span class="string">'"'</span>;
        }
        $element.removeAttr(i);
      }
      elementHtml += <span class="string">'&gt;'</span>;
      elementHtml +=
        <span class="string">'&lt;span ng-repeat="(key, text) in validators" '</span> +
        <span class="string">' ng-show="hasError(key)"'</span> +
        <span class="string">' ng-bind="text"&gt;&lt;/span&gt;'</span>;
      elementHtml += <span class="string">'&lt;/div&gt;'</span>;
      $element.html(elementHtml);
      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attrs, formCtrl)</span> {</span>
        $scope.validators = angular.copy(presentValidationKeys);
        $scope.hasError = <span class="function"><span class="keyword">function</span><span class="params">(key)</span> {</span>
          <span class="keyword">return</span> !!formCtrl[inputName][<span class="string">'$error'</span>][key];
        };
      };
    }
  };
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>Finally, we return a postLink function (we cannot have a link keyword along with
compile; we need to return the link function from within compile instead), which
adds the validators array and a hasError function to show each of the validation
messages under the correct conditions.</p>
<p>As mentioned before, compile is only used in the rarest of cases, where you need to do
major DOM transformations at runtime.</p>
<h2 id="pre-and-post-linking">Pre- and Post- Linking</h2>
<p>When a <code>post-link</code> function executes, all children directives
have been compiled and linked at this point.</p>
<p>But in case we needed a hook to execute something before the children are linked, we
can add what is called <code>pre-link</code> function. At this point, the children directives aren’t
linked, and DOM transformations are not safe and can have weird effects.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>{
  link: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> {</span>}
}
{
  link: {
    pre: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> {</span>},
    post: <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> {</span>}
  }
}
</pre></td></tr></table></figure>

<h1 id="priority-and-terminal">Priority and Terminal</h1>
<p>The last two options we look at when creating directives are priority and terminal.</p>
<p><code>priority</code> is used to decide the order in which directives are evaluated when there are
multiple directives used on the same element. For example, when we use the <code>ngModel</code>
directive along with <code>ngPattern</code> or <code>ngMinlength</code>, we need to ensure that <code>ngPattern</code> or
<code>ngMinlength</code> executes only after <code>ngModel</code> has had a chance to execute.</p>
<p>By default, any directive we create has a priority of 0. </p>
<p>The <code>terminal</code> keyword in a directive is used to ensure that no other directives are
compiled or linked on an element after the current priority directives are finished. </p>
<h1 id="clean-up-and-destroy">Clean Up and Destroy</h1>
<p>AngularJS cannot clean up event listeners we add on elements outside of the
scope and HTML of the directive. When we add these listeners or watchers, it becomes
our responsibility to clean up when the directive gets destroyed. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="variable">$scope</span>.<span class="variable">$on</span>(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Do clean up here</span>
});
  
<span class="variable">$element</span>.<span class="variable">$on</span>(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Do clean-up here</span>
});
</pre></td></tr></table></figure>

<h1 id="watchers">Watchers</h1>
<p>These basically get triggered by AngularJS whenever the variable
under watch changes, and we get access to both the new and the old value in such a case.</p>
<ul>
<li><code>$watch</code>, whenever the value changes, then the function passed to it as the
second argument is triggered with the old and new value. Which takes:<ul>
<li>A string, which is the name of a variable on the scope</li>
<li>A function, whose return value is evaluated</li>
</ul>
</li>
<li>Deep <code>$watch</code>, The same as the standard watch, but takes a Boolean true as the third argument.
This forces AngularJS to recursively check each object and key inside the object or
variable and use angular.equals to check for equality for all objects.</li>
<li><code>$watchCollection</code>,  The function is triggered any time an
item is added, removed, or moved in the array. It does not watch for changes to
individual properties in an item in the array.</li>
</ul>
<h1 id="-apply-and-digest">$apply and $digest</h1>
<p>Whenever you’re working with third-party components, remember that there are two
distinct life cycles at play. The first is the AngularJS life cycle that is responsible for the
keeping the UI updated and the second is a third-party component’s life cycle. </p>
<p>And this is done by triggering <code>$scope.$apply()</code>,
which starts a digest cycle on the <code>$rootScope</code>.</p>
<p>Sometimes, another event in AngularJS will automatically trigger and take care of this,
but in any case if you are updating any scope variables in response to an external event,
make sure you manually trigger the <code>$scope.$apply()</code> or <code>$scope.$digest()</code>.</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs-Working with Filters & ngRoute]]></title>
    <link href="http://zhpooer.github.io/2014/12/23/angularjs-4/"/>
    <id>http://zhpooer.github.io/2014/12/23/angularjs-4/</id>
    <published>2014-12-23T07:12:14.000Z</published>
    <updated>2014-12-24T07:34:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="what-are-angularjs-filters">What Are AngularJS Filters</h1>
<p>AngularJS filters are used to process data and format
values to present to the user. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"FilterCtrl as ctrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
    Amount as a number: {\{ctrl.amount | number}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
    Total Cost as a currency: {\{ctrl.totalCost | currency}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
    Total Cost in INR: {\{ctrl.totalCost | currency:'INR '}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
    Shouting the name: {\{ctrl.name | uppercase}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
  Whispering the name: {\{ctrl.name | lowercase}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>
    Start Time: {\{ctrl.startTime | date:'medium'}}
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
  angular.module(<span class="string">'filtersApp'</span>, [])
  .controller(<span class="string">'FilterCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">this</span>.amount = <span class="number">1024</span>;
    <span class="keyword">this</span>.totalCost = <span class="number">4906</span>;
    <span class="keyword">this</span>.name = <span class="string">'Shyam Seshadri'</span>;
    <span class="keyword">this</span>.startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
  }]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>The filter will take the value of the expression (a string, number, or array) and convert
it into some other form.</p>
<p><code>{\{ctrl.name | lowercase | limitTo: 5}}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">ng-controller</span>=<span class="value">"FilterCtrl as ctrl"</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Amount - {\{ctrl.amount}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Amount - Default Currency: {\{ctrl.amount | currency}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
<span class="comment">&lt;!-- Using the English pound sign --&gt;</span>
Amount - INR Currency: {\{ctrl.amount | currency:'&#163 '}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Amount - Number: {\{ctrl.amount | number}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Amount - No. with 4 decimals: {\{ctrl.amount | number:4}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Name with no filters: {\{ctrl.name}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Name - lowercase filter: {\{ctrl.name | lowercase}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Name - uppercase filter: {\{ctrl.name | uppercase}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
<span class="comment">&lt;!--  printed as a string {"test": "value", "num": 123}  --&gt;</span>
The JSON Filter: {\{ctrl.obj | json}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Timestamp: {\{ctrl.startTime}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Default Date filter: {\{ctrl.startTime | date}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Medium Date filter: {\{ctrl.startTime | date:'medium'}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>
Custom Date filter: {\{ctrl.startTime | date:'M/dd, yyyy'}}
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'filtersApp'</span>, [])
.controller(<span class="string">'FilterCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">this</span>.amount = <span class="number">1024</span>;
  <span class="keyword">this</span>.name = <span class="string">'Shyam Seshadri'</span>;
  <span class="keyword">this</span>.obj = {test: <span class="string">'value'</span>, num: <span class="number">123</span>};
  <span class="keyword">this</span>.startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"FilterCtrl as ctrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.currentFilter = 'string'"</span>&gt;</span>
    Filter with String
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.currentFilter = 'object'"</span>&gt;</span>
    Filter with Object
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.currentFilter = 'function'"</span>&gt;</span>
    Filter Text
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span>
         <span class="attribute">ng-model</span>=<span class="value">"ctrl.filterOptions['string']"</span>&gt;</span>
  Show Done Only
  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>
         <span class="attribute">ng-model</span>=<span class="value">"ctrl.filterOptions['object'].done"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes |
                   filter:ctrl.filterOptions[ctrl.currentFilter] |
                   orderBy:ctrl.sortOrder |
                   limitTo:5"</span>&gt;</span>
      {\{note.label}} -  - 
    <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'filtersApp'</span>, [])
.controller(<span class="string">'FilterCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">this</span>.notes = [
    {label: <span class="string">'FC Todo'</span>, type: <span class="string">'chore'</span>, done: <span class="literal">false</span>},
    {label: <span class="string">'FT Todo'</span>, type: <span class="string">'task'</span>, done: <span class="literal">false</span>},
    {label: <span class="string">'FF Todo'</span>, type: <span class="string">'fun'</span>, done: <span class="literal">true</span>},
    {label: <span class="string">'SC Todo'</span>, type: <span class="string">'chore'</span>, done: <span class="literal">false</span>},
    {label: <span class="string">'ST Todo'</span>, type: <span class="string">'task'</span>, done: <span class="literal">true</span>},
    {label: <span class="string">'SF Todo'</span>, type: <span class="string">'fun'</span>, done: <span class="literal">true</span>},
    {label: <span class="string">'TC Todo'</span>, type: <span class="string">'chore'</span>, done: <span class="literal">false</span>},
    {label: <span class="string">'TT Todo'</span>, type: <span class="string">'task'</span>, done: <span class="literal">false</span>},
    {label: <span class="string">'TF Todo'</span>, type: <span class="string">'fun'</span>, done: <span class="literal">false</span>}
  ];
  <span class="keyword">this</span>.sortOrder = [<span class="string">'+type'</span>, <span class="string">'-label'</span>];
  <span class="keyword">this</span>.filterOptions = {
    <span class="string">"string"</span>: <span class="string">''</span>,
    <span class="string">"object"</span>: {done: <span class="literal">false</span>, label: <span class="string">'C'</span>},
    <span class="string">"function"</span>: <span class="function"><span class="keyword">function</span><span class="params">(note)</span> {</span>
      <span class="keyword">return</span> note.type === <span class="string">'task'</span> && note.done === <span class="literal">false</span>;
    }
  };
  <span class="keyword">this</span>.currentFilter = <span class="string">'string'</span>;
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<ul>
<li><code>string</code>, AngularJS will look for the string in the keys
of each object of the array, and if it is found, the element is included.</li>
<li><code>object</code>, AngularJS takes each key of the object and makes sure that its value
is present in the corresponding key of each object of the array. For example,
an object expression like <code>{size: &quot;M&quot;}</code>would check each item of
the array and ensure that the objects have a key called size
and that they contain the letter “M”</li>
<li><code>function</code>, return true or false</li>
</ul>
<h1 id="using-filters-in-controllers-and-services">Using Filters in Controllers and Services</h1>
<p>AngularJS allows us to use the
filters wherever we want or need
through the power of Dependency Injection. </p>
<p>Any filter, whether built-in or our own,
can be injected into any service or controller by
affixing the word “Filter” at the end of the name of the
filter, and asking it to be injected.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>// <span class="keyword">if</span> we need the currency filter <span class="keyword">in</span> our controller
angular.<span class="built_in">module</span>(<span class="string">'myModule'</span>, [])
.controller(<span class="string">'MyCtrl'</span>, [<span class="string">'currencyFilter'</span>,
  <span class="function"><span class="keyword">function</span><span class="params">(currencyFilter)</span></span> {
    self.filteredArray = filterFilter(self.notes, <span class="string">'ch'</span>);
}]);
</pre></td></tr></table></figure>

<h2 id="creating-angularjs-filters">Creating AngularJS Filters</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"FilterCtrl as ctrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span> Start Time (Timestamp): {\{ctrl.startTime}} <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span> Start Time (DateTime): {\{ctrl.startTime | date:'medium'}} <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span> Start Time (Our filter): {\{ctrl.startTime | timeAgo}} <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span> someTimeAgo : {\{ctrl.someTimeAgo | date:'short'}} <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span> someTimeAgo (Our filter): {\{ctrl.someTimeAgo | timeAgo}} <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'filtersApp'</span>, [])
.controller(<span class="string">'FilterCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">this</span>.startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
  <span class="keyword">this</span>.someTimeAgo = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>);
}])
.filter(<span class="string">'timeAgo'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> ONE_MINUTE = <span class="number">1000</span> * <span class="number">60</span>;
  <span class="keyword">var</span> ONE_HOUR = ONE_MINUTE * <span class="number">60</span>;
  <span class="keyword">var</span> ONE_DAY = ONE_HOUR * <span class="number">24</span>;
  <span class="keyword">var</span> ONE_MONTH = ONE_DAY * <span class="number">30</span>;
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(ts)</span> {</span>
    <span class="keyword">var</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
    <span class="keyword">var</span> diff = currentTime - ts;
    <span class="keyword">if</span> (diff &lt; ONE_MINUTE) {
      <span class="keyword">return</span> <span class="string">'seconds ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_HOUR) {
      <span class="keyword">return</span> <span class="string">'minutes ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_DAY) {
      <span class="keyword">return</span> <span class="string">'hours ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_MONTH) {
      <span class="keyword">return</span> <span class="string">'days ago'</span>;
    } <span class="keyword">else</span> {
      <span class="keyword">return</span> <span class="string">'months ago'</span>;
    }
  };
}]);
<span class="comment">//return function(ts, arg1, arg2, arg3) {</span>
<span class="comment">//{\{ctrl.startTime | timeAgo:arg1:arg2:arg3}}</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<ul>
<li>View filters are executed every digest cycle</li>
<li>Filters should be blazingly fast</li>
<li>Prefer filters in services and controllers for optimization</li>
</ul>
<h1 id="unit-testing-filters">Unit Testing Filters</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">// File: chapter9/timeAgoFilter.js</span>
angular.module(<span class="string">'filtersApp'</span>, [])
.filter(<span class="string">'timeAgo'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> ONE_MINUTE = <span class="number">1000</span> * <span class="number">60</span>;
  <span class="keyword">var</span> ONE_HOUR = ONE_MINUTE * <span class="number">60</span>;
  <span class="keyword">var</span> ONE_DAY = ONE_HOUR * <span class="number">24</span>;
  <span class="keyword">var</span> ONE_MONTH = ONE_DAY * <span class="number">30</span>;
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(ts, optShowSecondsMessage)</span> {</span>
    <span class="keyword">if</span> (optShowSecondsMessage !== <span class="literal">false</span>) {
      optShowSecondsMessage = <span class="literal">true</span>;
    }
    <span class="keyword">var</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();
    <span class="keyword">var</span> diff = currentTime - ts;
    <span class="keyword">if</span> (diff &lt; ONE_MINUTE && optShowSecondsMessage) {
      <span class="keyword">return</span> <span class="string">'seconds ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_HOUR) {
      <span class="keyword">return</span> <span class="string">'minutes ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_DAY) {
      <span class="keyword">return</span> <span class="string">'hours ago'</span>;
    } <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; ONE_MONTH) {
      <span class="keyword">return</span> <span class="string">'days ago'</span>;
    } <span class="keyword">else</span> {
      <span class="keyword">return</span> <span class="string">'months ago'</span>;
    }
  };
}]);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="comment">// File: chapter9/timeAgoFilterSpec.js</span>
<span class="function">describe(<span class="string">'timeAgo Filter'</span>, <span class="function">function()</span> {
  <span class="function">beforeEach(<span class="function">module(<span class="string">'filtersApp'</span>)</span>)</span>;
  var filter;
  <span class="function">beforeEach(<span class="function">inject(<span class="function">function(timeAgoFilter)</span> {
    filter = timeAgoFilter;
  })</span>)</span>;
  <span class="function">it(<span class="string">'should respond based on timestamp'</span>, <span class="function">function()</span> {
    // The presence of new <span class="function">Date()</span>.<span class="function">getTime()</span> makes it slightly
    // hard to unit test deterministicly.
    // Ideally, we would inject a dateProvider into the timeAgo
    // filter, but we are trying to keep it simple here.
    // So we will assume that our tests are fast enough to
    // execute in mere milliseconds.
    var currentTime = new <span class="function">Date()</span>.<span class="function">getTime()</span>;
    currentTime -= <span class="number">10000</span>;
    
    <span class="function">expect(<span class="function">filter(currentTime)</span>)</span>.<span class="function">toEqual(<span class="string">'seconds ago'</span>)</span>;
    var fewMinutesAgo = currentTime - <span class="number">1000</span> * <span class="number">60</span>;
    <span class="function">expect(<span class="function">filter(fewMinutesAgo)</span>)</span>.<span class="function">toEqual(<span class="string">'minutes ago'</span>)</span>;
    var fewHoursAgo = currentTime - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">68</span>;
    <span class="function">expect(<span class="function">filter(fewHoursAgo)</span>)</span>.<span class="function">toEqual(<span class="string">'hours ago'</span>)</span>;
    var fewDaysAgo = currentTime - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">26</span>;
    <span class="function">expect(<span class="function">filter(fewDaysAgo)</span>)</span>.<span class="function">toEqual(<span class="string">'days ago'</span>)</span>;
    var fewMonthsAgo = currentTime - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">32</span>;
    <span class="function">expect(<span class="function">filter(fewMonthsAgo)</span>)</span>.<span class="function">toEqual(<span class="string">'months ago'</span>)</span>;
  })</span>;
})</span>;
</pre></td></tr></table></figure>

<h1 id="routing-using-ngroute">Routing Using ngRoute</h1>
<p>AngularJS provides us with an optional module called
ngRoute, which can be used to do routing in an AngularJS
application.</p>
<p>We mark in our HTML where we want the routing to take
effect with the <code>ng-view</code> directive.</p>
<p>It takes care of the browser history, so you can actually
use back and forward buttons in your browser to navigate
within the application.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/path/to/angular-route.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#/"</span>&gt;</span>Default Route<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#/second"</span>&gt;</span>Second Route<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#/asdasdasd"</span>&gt;</span>Nonexistent Route<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'routingApp'</span>, [<span class="string">'ngRoute'</span>])
.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span> {</span>
  $routeProvider.when(<span class="string">'/'</span>, {
    template: <span class="string">'&lt;h5&gt;This is the default route&lt;/h5&gt;'</span>
  })
  .when(<span class="string">'/second'</span>, {
    template: <span class="string">'&lt;h5&gt;This is the second route&lt;/h5&gt;'</span>
  })
  .otherwise({redirectTo: <span class="string">'/'</span>});
}]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="routing-options">Routing Options</h2>
<p>The AngularJS route definition allows us to
define more complex templates.
The <code>$routeProvider.when</code> function takes a URL or
URL regular expression as the first argument, and the
route configuration object as the second. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>$routeProvider.<span class="keyword">when</span>(url, {
  template: <span class="built_in">string</span>,
  templateUrl: <span class="built_in">string</span>,
  controller: <span class="built_in">string</span>, <span class="keyword">function</span> <span class="keyword">or</span> <span class="built_in">array</span>,
  controllerAs: <span class="built_in">string</span>,
  resolve: <span class="keyword">object</span>&lt;key, <span class="keyword">function</span>&gt;
});
</pre></td></tr></table></figure>

<ul>
<li>url, <code>/list</code>, <code>/recipe/:recipeId</code></li>
<li>template, AngularJS directly inserts this template
HTML into the ng-view directive</li>
<li><p>tempateUrl</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$routeProvider</span>.<span class="keyword">when</span>(<span class="string">'/test'</span>, {
  <span class="symbol">templateUrl:</span> <span class="string">'views/test.html'</span>,
});
</pre></td></tr></table></figure>
</li>
<li><p>controller, if we have not directly defined the controller in
the HTML using the ng-controller directive, e we pass the con‐
troller function directly to the controller key.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="variable">$routeProvider</span>.when(<span class="string">'/test'</span>, {
  template: <span class="string">'&lt;h1&gt;Test Route&lt;/h1&gt;'</span>,
  controller: [<span class="string">'$window'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$window</span>)</span> {</span>
    <span class="variable">$window</span>.alert(<span class="string">'Test route has been loaded!'</span>);
  }]
});
</pre></td></tr></table></figure>
</li>
<li><p>controllerAs</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="variable">$routeProvider</span>.<span class="keyword">when</span>(<span class="string">'/test'</span>, {
  <span class="symbol">template:</span> <span class="string">'&lt;h1&gt;Test Route&lt;/h1&gt;'</span>,
  <span class="symbol">controller:</span> <span class="string">'MyCtrl as ctrl'</span>
});
<span class="variable">$routeProvider</span>.<span class="keyword">when</span>(<span class="string">'/test'</span>, {
  <span class="symbol">template:</span> <span class="string">'&lt;h1&gt;Test Route&lt;/h1&gt;'</span>,
  <span class="symbol">controller:</span> <span class="string">'MyCtrl'</span>,
  <span class="symbol">controllerAs:</span> <span class="string">'ctrl'</span>
});
</pre></td></tr></table></figure>
</li>
<li><p>redirectTo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="variable">$routeProvider</span>.<span class="keyword">when</span>(<span class="string">'/new'</span>, {
  <span class="symbol">template:</span> <span class="string">'&lt;h1&gt;New Route&lt;/h1&gt;'</span>
});
<span class="variable">$routeProvider</span>.<span class="keyword">when</span>(<span class="string">'/old'</span>, {
  <span class="symbol">redirectTo:</span> <span class="string">'/new'</span>
});
</pre></td></tr></table></figure>
</li>
<li><p>resolve, At a conceptual level, resolves are a way of executing
and finishing asynchronous tasks before a particular route is loaded.
This is a great way to check if the user is logged in and has
authorization and permissions, and even preload some
data before a controller and route are loaded into the view.</p>
</li>
</ul>
<h2 id="using-resolves-for-pre-route-checks">Using Resolves for Pre-Route Checks</h2>
<p>When we define a resolve, we can define a set of
asynchronous tasks to execute before the route is loaded.
A resolve is a set of keys and functions.
Each function can return a value or a promise.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre>angular.module(<span class="string">'resolveApp'</span>, [<span class="string">'ngRoute'</span>])
.value(<span class="string">'Constant'</span>, {MAGIC_NUMBER: <span class="number">42</span>})
.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$routeProvider</span>)</span> {</span>
  <span class="variable">$routeProvider</span>.when(<span class="string">'/'</span>, {
    template: <span class="string">'&lt;h1&gt;Main Page, no resolves&lt;/h1&gt;'</span>
})
.when(<span class="string">'/protected'</span>, {
  template: <span class="string">'&lt;h2&gt;Protected Page&lt;/h2&gt;'</span>,
  resolve: {
    immediate: [<span class="string">'Constant'</span>, <span class="function"><span class="keyword">function</span><span class="params">(Constant)</span> {</span>
      <span class="keyword">return</span> Constant.MAGIC_NUMBER * <span class="number">4</span>;
    }],
    async: [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$http</span>)</span> {</span>
      <span class="keyword">return</span> <span class="variable">$http</span>.get(<span class="string">'/api/hasAccess'</span>);
    }]
  },
  controller: [<span class="string">'$log'</span>, <span class="string">'immediate'</span>, <span class="string">'async'</span>,
    <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$log</span>, immediate, async)</span> {</span>
      <span class="variable">$log</span>.log(<span class="string">'Immediate is '</span>, immediate);
      <span class="variable">$log</span>.log(<span class="string">'Server returned for async'</span>, async);
    }]
  });
}]);
</pre></td></tr></table></figure>

<ul>
<li>If the resolve function returns a value, AngularJS immediately finishes executing
and treats it as a successful resolve.</li>
<li>If the resolve function returns a promise, AngularJS waits for the promise to return
and treats the resolve as successful if the promise is successful. If the promise is
rejected, the resolve is treated as a failure.</li>
<li>If there are multiple re
solve keys that make asynchronous calls, AngularJS executes all of them in parallel
and waits for all of them to finish executing before loading the page.</li>
<li>If any of the resolves encounter an error or any of the promises returned are rejected
(is a failure), AngularJS doesn’t load the route.</li>
</ul>
<h2 id="using-the-routeparams-service">Using the $routeParams Service</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>angular.module(<span class="string">'resolveApp'</span>, [<span class="string">'ngRoute'</span>])
.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$routeProvider</span>)</span> {</span>
  <span class="variable">$routeProvider</span>.when(<span class="string">'/'</span>, {
    template: <span class="string">'&lt;h1&gt;Main Page&lt;/h1&gt;'</span>
  }).when(<span class="string">'/detail/:detId'</span>, {
    template: <span class="string">'&lt;h2&gt;Loaded '</span> +
      <span class="string">' and query String is &lt;/h2&gt;'</span>,
    controller: [<span class="string">'$routeParams'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$routeParams</span>)</span> {</span>
      this.detailId = <span class="variable">$routeParams</span>.detId;
      this.qStr = <span class="variable">$routeParams</span>.q;
    }],
    controllerAs: <span class="string">'myCtrl'</span>
  });
}]);
<span class="comment">// /detail/123?q=MySearchParam</span>
</pre></td></tr></table></figure>

<p>For every AngularJS application that uses ngRoute, there can be one and only
one <code>ng-view</code> directive for that application. </p>
<h2 id="a-full-angularjs-routing-example">A Full AngularJS Routing Example</h2>
<ul>
<li>A landing page shows a list of teams. Anybody can access this page.</li>
<li>A login page allows users to log in to the application. Anybody can access this page.</li>
<li>Details pages for teams are access-controlled. Only logged-in users can access the
details page. This is true whether the user logged in right before accessing, or logged
in and then closed the window and came back at any later point. </li>
</ul>
<p>TODO</p>
<h2 id="html5-mode">HTML5 Mode</h2>
<p>A URL like <code>http://www.myawesomeapp.com/#/first/</code> page would look
like <code>http://www.myawesomeapp.com/first/page</code> with HTML5 mode enabled.</p>
<p>To support search engine crawling, it is expected
that the SPA will use hashbang URLs instead of
pure hash URLs (<code>#!</code> instead of <code>#</code>).</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>angular.module(<span class="string">'myHtml5App'</span>, [<span class="string">'ngRoute'</span>])
.config([<span class="string">'$locationProvider'</span>, <span class="string">'$routeProvider'</span>,
  <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$locationProvider</span>, <span class="variable">$routeProvider</span>)</span> {</span>
    <span class="variable">$locationProvider</span>.html5Mode(<span class="keyword">true</span>);
    <span class="comment">//Optional</span>
    <span class="variable">$locationProvider</span>.hashPrefix(<span class="string">'!'</span>);
    <span class="comment">// Route configuration here as normal</span>
    <span class="comment">// Route for /first/page</span>
    <span class="comment">// Route for /second/page</span>
}]);
</pre></td></tr></table></figure>

<p>This is to tell the browser where,
in relation to the URL, the static resources
are served from, so that if the application
requests an image or CSS file with a relative
path, it doesn’t take it from the current URL necessarily.</p>
<p>All relative paths would be resolved
relative to /app and not to some other URL. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"/app"</span> /&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="ui-router">ui-router</h2>
<p>But what if we had more complex requirements and wanted to change different parts
of our UI differently depending on the URL? use <code>ng-show</code> or <code>ng-hide</code> or <code>ng-switch</code></p>
<p><code>ui-router</code> is state-oriented, and by default does
not modify URLs. We need to specify the URL for
each state individually.</p>
<p>We should consider using ui-router
if our project needs or has the following requirements:</p>
<ul>
<li>We need different parts of the page to react differently to URL changes or user
interactions.</li>
<li>We have multiple different (nested) sections of the page that are conditionally
shown for various actions and events.</li>
<li>We don’t need the URL to change while the user navigates throughout our
application.</li>
<li>The entire UI layout needs to change completely across different pages.</li>
</ul>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[响应式网站]]></title>
    <link href="http://zhpooer.github.io/2014/12/22/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E7%AB%99/"/>
    <id>http://zhpooer.github.io/2014/12/22/响应式网站/</id>
    <published>2014-12-22T01:12:08.000Z</published>
    <updated>2015-01-05T15:04:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">入门</h1>
<p>响应式, 可以适应不同尺寸的屏幕,
自动响应变化自己的外观的网站.使用html5和css3</p>
<h1 id="html5">HTML5</h1>
<p>HTML5 由全球五大浏览器厂商共同指定</p>
<p><code>&lt;!doctype html&gt;</code>, 包含了以往所有版本的文档dtd功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="doctype">&lt;!doctype html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">'utf-8'</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">”renderer”</span> <span class="attribute">content</span>=<span class="value">”webkit|ie-comp|ie-stand”</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="comment">/* 禁用iPhone中Safari的字号自动调整 */</span>
<span class="tag">html</span> <span class="rules">{
  <span class="rule"><span class="attribute">-webkit-text-size-adjust</span>:<span class="value"> <span class="number">100</span>%</span></span>;   <span class="comment">/*让谷歌浏览器可以设定字体大小*/</span>
  <span class="rule"><span class="attribute">-ms-text-size-adjust</span>:<span class="value"> <span class="number">100</span>%</span></span>;
<span class="rule">}</span></span>
<span class="comment">/* 设置HTML5元素为块 */</span>
<span class="tag">article</span>,<span class="tag">aside</span>, <span class="tag">details</span>, <span class="tag">figcaption</span>,<span class="tag">figure</span>, <span class="tag">footer</span>, <span class="tag">header</span>, <span class="tag">hgroup</span>,<span class="tag">menu</span>, <span class="tag">nav</span>, <span class="tag">section</span> <span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;
<span class="rule">}</span></span>
<span class="comment">/* 设置图片视频等自适应调整 */</span>
<span class="tag">img</span> <span class="rules">{
  <span class="rule"><span class="attribute">max-widthL</span>:<span class="value"> <span class="number">100</span>%</span></span>;
  <span class="rule"><span class="attribute">height</span>:<span class="value">auto</span></span>;
  <span class="rule"><span class="attribute">width</span>:<span class="value">auto\<span class="number">9</span></span></span>; <span class="comment">/* ie8 */</span>
<span class="rule">}</span></span>
<span class="class">.video</span> <span class="tag">embed</span>, <span class="class">.video</span> <span class="tag">object</span>, <span class="class">.video</span> <span class="tag">iframe</span> <span class="rules">{
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>;
  <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>ie9+对html5支持, 检测浏览器支持html5. 任何浏览器对不能识别的标签,
都能显示里面的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">canvas</span>&gt;</span> 您的浏览器版本过低, 请更新浏览器 <span class="tag">&lt;/<span class="title">canvas</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">结构标签</h2>
<p>用来布局</p>
<ul>
<li><code>&lt;header&gt; &lt;/header&gt;</code></li>
<li><code>&lt;nav&gt;&lt;/nav&gt;</code></li>
<li><code>&lt;section&gt;&lt;/section&gt;</code>, 分区标签, 语义上大于 div<ul>
<li><code>&lt;aside&gt;&lt;/aside&gt;</code></li>
<li><code>&lt;article&gt;&lt;/article&gt;</code></li>
</ul>
</li>
<li><code>&lt;footer&gt;&lt;/footer&gt;</code></li>
<li><code>hgroup</code> 定义比标题标记的组</li>
<li><code>figure</code> 定义一组媒体内容及其标题</li>
<li><code>figcaption</code> 定义figure元素的标题</li>
</ul>
<p>h5新增的标签本质是div制作的, 最大的意义在于嵌套使用. 比如 <code>header</code>, <code>hgroup&gt;h2</code></p>
<h2 id="-">视频标签</h2>
<p>早在html4, 或者 xhtml1.0 是没有处理视频的能力的, 只能通过某些插件来实现.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">video</span> <span class="attribute">src</span>=<span class="value">""</span> <span class="attribute">controls</span>=<span class="value">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="title">video</span>&gt;</span>
<span class="tag">&lt;<span class="title">video</span> <span class="attribute">src</span>=<span class="value">""</span> <span class="attribute">autoplay</span> =<span class="value">"autoplay"</span>&gt;</span><span class="tag">&lt;/<span class="title">video</span>&gt;</span>
<span class="comment">&lt;!-- 设置视频循环播放 --&gt;</span>
<span class="tag">&lt;<span class="title">video</span> <span class="attribute">src</span>=<span class="value">""</span> <span class="attribute">loop</span>=<span class="value">"loop"</span>&gt;</span><span class="tag">&lt;/<span class="title">video</span>&gt;</span>
</pre></td></tr></table></figure>

<p>支持的格式, ogg, mpeg4, webm(w3c推荐格式), 但是不是所有浏览器都支持.
可以放两个视频来全部支持如 <code>ogg</code>组合<code>mp4</code>, <code>webm</code>组合<code>mp4</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>&lt;video width=<span class="string">""</span> height=<span class="string">""</span> controls=<span class="string">"controls"</span>&gt;
  &lt;<span class="built_in">source</span> src=<span class="string">""</span> <span class="built_in">type</span>=<span class="string">"video/ogg"</span>&gt;&lt;/<span class="built_in">source</span>&gt;
  &lt;<span class="built_in">source</span> src=<span class="string">""</span> <span class="built_in">type</span>=<span class="string">"video/mp4"</span>&gt;&lt;/<span class="built_in">source</span>&gt;
  Your browser dont support this tag
&lt;/video&gt;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>video.<span class="keyword">play</span>();
video.<span class="keyword">pause</span>();
<span class="comment">// 快进</span>
video.<span class="keyword">currentTime</span> += <span class="number">10</span>;
<span class="comment">// 加速</span>
video.playbackRate = <span class="number">2</span>;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">audio</span> <span class="attribute">src</span>=<span class="value">""</span> <span class="attribute">controls</span>=<span class="value">"controls"</span> <span class="attribute">autoplay</span> <span class="attribute">loop</span>&gt;</span> <span class="tag">&lt;/<span class="title">audio</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="-">其他标签</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 温度计标签 --&gt;</span>
<span class="tag">&lt;<span class="title">meter</span> <span class="attribute">low</span>=<span class="value">"15"</span> <span class="attribute">value</span>=<span class="value">"23"</span> <span class="attribute">hight</span>=<span class="value">""</span> <span class="attribute">min</span>=<span class="value">""</span> <span class="attribute">max</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">meter</span>&gt;</span>
<span class="comment">&lt;!-- 进度条 --&gt;</span>
<span class="tag">&lt;<span class="title">progress</span> <span class="attribute">max</span>=<span class="value">'100'</span> <span class="attribute">value</span>=<span class="value">'0'</span>&gt;</span> <span class="tag">&lt;/<span class="title">progress</span>&gt;</span>

<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">list</span>=<span class="value">"car"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">datalist</span> <span class="attribute">id</span>=<span class="value">'car'</span>&gt;</span>
  <span class="tag">&lt;<span class="title">option</span>&gt;</span> one <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
  <span class="tag">&lt;<span class="title">option</span>&gt;</span> two <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
  <span class="tag">&lt;<span class="title">option</span>&gt;</span> three<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
<span class="tag">&lt;/<span class="title">datalist</span>&gt;</span>

<span class="tag">&lt;<span class="title">details</span>&gt;</span>
  <span class="tag">&lt;<span class="title">summary</span>&gt;</span>概要<span class="tag">&lt;/<span class="title">summary</span>&gt;</span>
  详情内容
<span class="tag">&lt;/<span class="title">details</span>&gt;</span>

<span class="comment">&lt;!-- 新增表单元素 --&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"email"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"color"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"range"</span> <span class="attribute">min</span>=<span class="value">"0"</span> <span class="attribute">max</span>=<span class="value">"100"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"search"</span>/&gt;</span>

<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
$().change(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>})
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="css3">CSS3</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="comment">// 新增了选择器 nth-of-type 等同于 eq(), 从 1 开始</span>
<span class="tag">ul</span> <span class="tag">li</span><span class="pseudo">:nth-of-type</span>(1) {
  <span class="attribute">border-radius</span><span class="value">: <span class="number">10</span>px;</span>
  <span class="attribute">border-radius</span><span class="value">: <span class="number">5</span>  <span class="number">0</span>%;</span>
  <span class="comment">/**上右下左**/</span>
  <span class="attribute">border-radius</span><span class="value">: <span class="number">10</span>px <span class="number">10</span>px <span class="number">10</span>px <span class="number">10</span>px;</span>
}

<span class="tag">div</span> {
  <span class="comment">/*水平偏移 纵向偏移 羽化程度*/</span>
  <span class="attribute">box-shadow</span><span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="hexcolor">#000</span>;</span>
  <span class="comment">/*内阴影*/</span>
  <span class="attribute">box-shadow</span><span class="value">: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="hexcolor">#000</span> inset;</span>
  <span class="comment">/*透明*/</span>
  <span class="attribute">background</span><span class="value">: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>)
  /*文字投影*/
  text-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="hexcolor">#000</span>;</span>
}
<span class="comment">/*转换为内联级元素*/</span>
<span class="tag">section</span> {
  <span class="attribute">display</span><span class="value">: box;</span>
  <span class="attribute">display</span><span class="value">: -webkit-box;</span>
}
<span class="tag">article</span> {-webkit-box-<span class="attribute">flex</span><span class="value">: <span class="number">3</span>;</span>} <span class="comment">/* 3/8 */</span>
<span class="tag">article</span> {-webkit-box-<span class="attribute">flex</span><span class="value">: <span class="number">5</span>;</span>} <span class="comment">/* 5/8 */</span>
</pre></td></tr></table></figure>

<h2 id="-">选择器</h2>
<ul>
<li><code>:nth-child</code>, 表示过滤当前容器中的第几个</li>
<li><code>:nth-of-type</code> 表示过滤当前容器中同类型的第几个, 相当于 <code>eq()</code></li>
<li><code>:first-child</code>, <code>:last-child</code></li>
<li><code>:not()</code> 排除指定的元素</li>
<li><code>:empty</code> 空元素</li>
<li><code>[key=value]</code>, 过滤拥有指定属性值的元素, 例如 <code>input[type=button]</code></li>
<li><code>:before</code> <code>:after</code><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">div</span><span class="pseudo">:before</span> <span class="rules">{ <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'你好'</span></span></span>; <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;<span class="rule">}</span></span>
<span class="tag">div</span><span class="pseudo">:after</span> <span class="rules">{<span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">''</span></span></span>;<span class="rule">}</span></span>
</pre></td></tr></table></figure>

</li>
</ul>
<h2 id="-">浏览器私有前缀</h2>
<ul>
<li>IE: <code>-ms-</code></li>
<li>Firefox: <code>-moz-</code></li>
<li>Chrome, Safari: <code>-webkit-</code></li>
<li>Opera: <code>-0-</code></li>
</ul>
<h2 id="2d-">2D 转换</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">div</span><span class="rules">{
  <span class="comment">/* 顺时针旋转, 旋转的是整个坐标系 */</span>
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate(<span class="number">45</span>deg)</span></span></span>;
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scale(<span class="number">0.5</span>, <span class="number">2</span>)</span></span></span>;
  <span class="comment">/* 移动横向, 纵向 */</span>
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate(<span class="number">100</span>px, <span class="number">0</span>)</span> <span class="function">scale(<span class="number">2</span>, <span class="number">2</span>)</span></span></span>;
  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0</span>, <span class="number">10</span>px</span></span>; <span class="comment">/*设置旋转原点*/</span>
  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">50</span>%, top</span></span>;
  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> left, center</span></span>;
  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> right, bottom</span></span>;
  <span class="comment">/*沿着y轴转*/</span>
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateY(<span class="number">45</span>deg)</span></span></span>;
  <span class="comment">/*沿着X轴转*/</span>
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateX(<span class="number">45</span>deg)</span></span></span>;
  <span class="comment">/*沿着Z轴转*/</span>
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate(<span class="number">45</span>deg)</span></span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h2 id="-">动画</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">/*方式一*/</span>
<span class="tag">div</span> <span class="rules">{<span class="rule"><span class="attribute">transition</span>:<span class="value"> width <span class="number">1</span>s, height <span class="number">2</span>s</span></span>;<span class="rule">}</span></span> <span class="comment">/*默认样式*/</span>
<span class="tag">div</span><span class="pseudo">:hover</span> <span class="rules">{<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">400</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300</span>px</span></span>;<span class="rule">}</span></span>

<span class="comment">/*方式二 linear */</span>
<span class="tag">div</span><span class="rules">{<span class="rule"><span class="attribute">transition</span>:<span class="value"> all <span class="number">2</span>s ease <span class="number">2</span>s</span></span>;<span class="rule">}</span></span>
<span class="comment">/*transition-timing-function transition-delay*/</span>
</pre></td></tr></table></figure>

<ul>
<li><code>linear</code> 匀速度</li>
<li><code>ease</code> 逐渐慢下来</li>
<li><code>ease-in</code> 加速</li>
<li><code>ease-out</code> 减速</li>
<li><code>ease-in-out</code> 先加后减</li>
</ul>
<h2 id="-">渐变背景色</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">div</span> <span class="rules">{
  <span class="comment">/*角度*/</span>
  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient(<span class="number">180</span>deg, red, green <span class="number">30</span>%, blue)</span></span></span>;
  <span class="rule"><span class="attribute">background-size</span>:<span class="value"> cover</span></span>; <span class="comment">/*拉申*/</span>
  <span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">100</span>% <span class="number">100</span>%</span></span>; <span class="comment">/* 背景盒子永远一样大*/</span>
  <span class="rule"><span class="attribute">background-size</span>:<span class="value"> contain</span></span>; <span class="comment">/* 等比例拉申*/</span>
  <span class="rule"><span class="attribute">background-image</span>:<span class="value"><span class="function">url()</span>, <span class="function">url()</span></span></span>; <span class="comment">/*设置两张背景图片*/</span>
<span class="rule">}</span></span>

<span class="comment">/*精灵图的缩放*/</span>
<span class="tag">div</span> <span class="rules">{
  <span class="comment">/*使用背景缩放*/</span>
  <span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">80</span>px <span class="number">283</span>px</span></span>; 
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h2 id="-">内减属性</h2>
<p>排除 border和padding 对宽高的影响</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">box-sizing</span>: <span class="string">border-box;</span>
</pre></td></tr></table></figure>



<h2 id="-">自定义动画</h2>
<p>animation, 让指定的元素实现自动运行的动画</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="tag">div</span> <span class="rules">{
  <span class="comment">/*linear ease-in*/</span>
  <span class="comment">/*正常播放, 轮流反向播放*/</span>
  <span class="rule"><span class="attribute">-webkit-animation</span>:<span class="value"> sport <span class="number">2</span>s ease-out <span class="number">4</span>s infinite|n normal|alternate running|paused</span></span>;
<span class="rule">}</span></span>
<span class="tag">div</span><span class="pseudo">:hover</span> <span class="rules">{<span class="rule"><span class="attribute">animation-play-state</span>:<span class="value"> paused</span></span>;<span class="rule">}</span></span>
<span class="at_rule">@<span class="keyword">-webkit-keyframes</span> sport </span>{
  %0<span class="rules">{<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span></span>}
  %100<span class="rules">{<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">500</span></span></span></span>}
}
</pre></td></tr></table></figure>

<h2 id="-">跳转链接</h2>
<p>通过跳转域名的方式来制作手机, 使用<code>device.js</code>判断手记设备</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">window</span>.location = <span class="string">''</span>;
<span class="built_in">window</span>.location.href = <span class="string">''</span>;
</pre></td></tr></table></figure>

<h2 id="-">图标字体</h2>
<p><code>icomoon.io</code> <code>iconfont.cn2</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">/* 声明字体 */</span>
<span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">{<span class="rule">}</span></span>
<span class="comment">/* 引用 */</span>
<span class="tag">div</span><span class="rules">{ <span class="rule"><span class="attribute">font-family</span>:<span class="value"> </span></span>; <span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h2 id="-3d">构建3D</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
<span class="tag">body</span><span class="rules">{
  <span class="comment">/*设置透视效果*/</span>
  <span class="rule"><span class="attribute">perspective</span>:<span class="value"> <span class="number">1000</span>px</span></span>;
  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate3d(<span class="number">100</span>%, <span class="number">100</span>%, <span class="number">100</span>%)</span></span></span>;
<span class="rule">}</span></span>

<span class="comment">/*transform-style:preserve-3d|flat*/</span>
<span class="tag">ul</span><span class="rules">{
  <span class="rule"><span class="attribute">transform-style</span>:<span class="value"> preserve-<span class="number">3</span>d</span></span>;
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200</span>px</span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">200</span>px</span></span>;
  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1</span>px dashed</span></span>;
  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
  <span class="rule"><span class="attribute">transition</span>:<span class="value"> all <span class="number">4</span>s</span></span>;

<span class="rule">}</span></span>
<span class="tag">ul</span><span class="pseudo">:hover</span> <span class="rules">{
  <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotateX(<span class="number">360</span>deg)</span> <span class="function">rotateY(<span class="number">360</span>deg)</span></span></span>;
<span class="rule">}</span></span>  
<span class="tag">ul</span> <span class="tag">li</span><span class="rules">{
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200</span>px</span></span>;
  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1</span>px</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
<span class="rule">}</span></span>
<span class="comment">/*可以通过设置 scale 来设置成长方体*/</span>  
<span class="tag">li</span><span class="pseudo">:nth-of-type(1)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateY(<span class="number">90</span>deg)</span> <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span> 
<span class="tag">li</span><span class="pseudo">:nth-of-type(2)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> green</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateY(<span class="number">270</span>deg)</span>  <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span>
<span class="tag">li</span><span class="pseudo">:nth-of-type(3)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> gold</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateX(<span class="number">0</span>deg)</span>  <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span>
<span class="tag">li</span><span class="pseudo">:nth-of-type(4)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> blue</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateX(<span class="number">90</span>deg)</span>  <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span>
<span class="tag">li</span><span class="pseudo">:nth-of-type(5)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> purple</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotateX(<span class="number">180</span>deg)</span> <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span>
<span class="tag">li</span><span class="pseudo">:nth-of-type(6)</span><span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> pink</span></span>; <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotateX(<span class="number">270</span>deg)</span> <span class="function">translateZ(<span class="number">100</span>px)</span></span></span>;<span class="rule">}</span></span>

</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">响应布局</h1>
<p>响应式布局实现基本上是通过百分比来完成的, 必须了解设备的长 宽.</p>
<h2 id="-">百分比</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="attribute">min-height</span><span class="value">: <span class="number">300</span>px;</span>
<span class="attribute">width</span><span class="value">: <span class="number">70</span>%;</span> <span class="attribute">min-width</span><span class="value">: <span class="number">20</span>px;</span>
<span class="attribute">box-sizing</span><span class="value">: border-box;</span>
</pre></td></tr></table></figure>

<h2 id="-">设备长宽</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">/* 内嵌 */</span>
@media (<span class="keyword">max</span><span class="attribute">-width</span>: <span class="number">620</span>px) {<span class="comment">/* mobile css */</span>}
@media (<span class="keyword">min</span><span class="attribute">-width</span>:<span class="number">621</span>px) <span class="literal">and</span> (<span class="keyword">max</span><span class="attribute">-width</span>: <span class="number">980</span>px) {<span class="comment">/* pad css */</span>}
@media (<span class="keyword">min</span><span class="attribute">-width</span>:<span class="number">981</span>px) {<span class="comment">/* desktop css */</span>}

<span class="comment">/* 链接式 */</span>
<span class="subst">&lt;</span><span class="keyword">link</span> rel<span class="subst">=</span><span class="string">"stylesheet"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">"text/css"</span> href<span class="subst">=</span><span class="string">"css/phone.css"</span> media<span class="subst">=</span><span class="string">"all"</span><span class="subst">/</span><span class="subst">&gt;</span>
<span class="subst">&lt;</span><span class="keyword">link</span> rel<span class="subst">=</span><span class="string">"stylesheet"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">"text/css"</span> href<span class="subst">=</span><span class="string">"css/phone.css"</span> media<span class="subst">=</span><span class="string">" screen and (max-width:620px)"</span><span class="subst">/</span><span class="subst">&gt;</span><span class="number">1</span>
<span class="subst">&lt;</span><span class="keyword">link</span> rel<span class="subst">=</span><span class="string">"stylesheet"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">"text/css"</span> href<span class="subst">=</span><span class="string">"css/pad.css"</span> media<span class="subst">=</span><span class="string">"(min-width:621px) and (max-width:980px)"</span><span class="subst">/</span><span class="subst">&gt;</span>
<span class="subst">&lt;</span><span class="keyword">link</span> rel<span class="subst">=</span><span class="string">"stylesheet"</span> <span class="keyword">type</span><span class="subst">=</span><span class="string">"text/css"</span> href<span class="subst">=</span><span class="string">"css/pc.css"</span> media<span class="subst">=</span><span class="string">"(min-width:981px)"</span><span class="subst">/</span><span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<p>pad和手机 正文文字一般都是 14 加粗.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="attribute">body&gt;*{min-width</span>: <span class="string">400px}</span>

<span class="xml"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span>
      <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span>
</pre></td></tr></table></figure>

<h1 id="phonegap">Phonegap</h1>
<p>将制作的网页封装成手机app, 可以安装到手机里面</p>
<h1 id="swipe-">Swipe 手机滑动轮播图</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>

</pre></td></tr></table></figure>

<h1 id="rem-and-em">rem and em</h1>
<p>root em 就是以根 html</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">height</span>: <span class="string">2rem;</span>
</pre></td></tr></table></figure>

<p><code>em</code> 默认以父级大小</p>
<h1 id="jquery-mobile">Jquery-mobile</h1>
<p>需要导入CSS样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"page"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"header"</span>&gt;</span>
     <span class="comment">&lt;!-- 添加图标， 在image中找 arrow-l-black  --&gt;</span>
     <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-icon</span>=<span class="value">"arrow-l"</span>&gt;</span>后退<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
     <span class="tag">&lt;<span class="title">h1</span>&gt;</span>我的手机网站<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
     <span class="comment">&lt;!-- 设置图片的位置 top （notext没有文字））--&gt;</span>
     <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-icon</span>=<span class="value">"arrow-r"</span> <span class="attribute">data-iconpos</span>=<span class="value">"right"</span>&gt;</span>后退<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span>
     <span class="comment">&lt;!-- 内部连接 #ID --&gt;</span>
     <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#page1"</span> <span class="attribute">data-role</span>=<span class="value">'button'</span>&gt;</span>订阅<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
     <span class="comment">&lt;!-- 外部链接 --&gt;</span>
     <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"out.html"</span> <span class="attribute">rel</span>=<span class="value">'external'</span> &gt;</span>订阅<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
     <span class="comment">&lt;!-- 转产效果 flip slide fade Slidedown Slideup  --&gt;</span>
     <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"out.html"</span> <span class="attribute">data-role</span>=<span class="value">'button'</span> <span class="attribute">data-transition</span>=<span class="value">'pop'</span>&gt;</span>订阅<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
 <span class="comment">&lt;!-- .ui-control-group{100%;}; a{width:25%; border-sizing: boder-box; } --&gt;</span>
     <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"footer"</span>
          <span class="attribute">data-role</span>=<span class="value">"controlgroup"</span>
          <span class="attribute">data-type</span>=<span class="value">"horizontal"</span>
          <span class="attribute">data-position</span>=<span class="value">'fixed'</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-role</span>=<span class="value">"button"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-role</span>=<span class="value">"button"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-role</span>=<span class="value">"button"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-role</span>=<span class="value">"button"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"page"</span> <span class="attribute">id</span>=<span class="value">’page1‘</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"header"</span>&gt;</span>
     <span class="tag">&lt;<span class="title">h1</span>&gt;</span>我的手机网站<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span>
    这里是第二部分内容
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"''"</span> <span class="attribute">id</span>=<span class="value">"''"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">option</span>&gt;</span> 选择 <span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"footer"</span> <span class="attribute">data-position</span>=<span class="value">'fixed'</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h4</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  
<span class="comment">&lt;!-- 弹出对话框 --&gt;</span>
<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#page2"</span> <span class="attribute">data-rel</span>=<span class="value">"dialog"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"page"</span> <span class="attribute">id</span>=<span class="value">"page2"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"header"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>您确定要退出吗？<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span>
    确定 返回
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>  
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"page"</span> <span class="attribute">id</span>=<span class="value">"page2"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"header"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>您确定要退出吗？<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">data-role</span>=<span class="value">"button"</span>&gt;</span>重启<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>静音<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>  
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>  

<span class="comment">&lt;!-- 列表 --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">dat-role</span>=<span class="value">"content"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">data-role</span>=<span class="value">"listview"</span>
      <span class="attribute">data-inset</span>=<span class="value">"true"</span>
      <span class="attribute">data-filter</span>=<span class="value">"true"</span>
      <span class="attribute">data-filter-placeholder</span>=<span class="value">"请输入名字"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span>&gt;</span>
          <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">""</span>/&gt;</span>
          <span class="tag">&lt;<span class="title">h3</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
          <span class="tag">&lt;<span class="title">p</span>&gt;</span>简介<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span>&gt;</span>张学友<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-role</span>=<span class="value">"content"</span>&gt;</span>
  <span class="comment">&lt;!-- ui-grid-a 两个子盒子排列
       ui-grid-b 三个子盒子排列 以此类推--&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ui-grid-a"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ui-block-a"</span>&gt;</span> <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ui-block-b"</span>&gt;</span> <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[angularJS - Unit Testing Services and XHRs]]></title>
    <link href="http://zhpooer.github.io/2014/12/21/angularjs-3/"/>
    <id>http://zhpooer.github.io/2014/12/21/angularjs-3/</id>
    <published>2014-12-21T14:33:20.000Z</published>
    <updated>2014-12-23T01:54:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="startup">Startup</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/karma.conf.js</span>
<span class="comment">// Karma configuration</span>
module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> {</span>
  config.set({
    basePath: <span class="string">''</span>,
    frameworks: [<span class="string">'jasmine'</span>],
    files: [
      <span class="string">'angular.min.js'</span>,
      <span class="string">'angular-mocks.js'</span>,
      <span class="string">'*.js'</span>
    ],
    exclude: [],
    port: <span class="number">8080</span>,
    logLevel: config.LOG_INFO,
    autoWatch: <span class="keyword">true</span>,
    browsers: [<span class="string">'Chrome'</span>],
    singleRun: <span class="keyword">false</span>
  });
};
<span class="comment">// File: chapter7/simpleCtrl2.js</span>
angular.module(<span class="string">'simpleCtrl2App'</span>, [])
.controller(<span class="string">'SimpleCtrl2'</span>, [<span class="string">'$location'</span>, <span class="string">'$window'</span>,
  <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$location</span>, <span class="variable">$window</span>)</span> {</span>
    <span class="keyword">var</span> <span class="keyword">self</span> = this;
    <span class="keyword">self</span>.navigate1 = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="variable">$location</span>.path(<span class="string">'/some/where'</span>);
    };
    <span class="keyword">self</span>.navigate2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="variable">$location</span>.path(<span class="string">'/some/where/else'</span>);
  };
}]);
<span class="comment">// File: chapter7/simpleCtrl2Spec.js</span>
describe(<span class="string">'SimpleCtrl2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  beforeEach(module(<span class="string">'simpleCtrl2App'</span>));
  <span class="keyword">var</span> ctrl, <span class="variable">$loc</span>;
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$controller</span>, <span class="variable">$location</span>)</span> {</span>
    ctrl = <span class="variable">$controller</span>(<span class="string">'SimpleCtrl2'</span>);
    <span class="variable">$loc</span> = <span class="variable">$location</span>;
  }));
  it(<span class="string">'should navigate away from the current page'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(<span class="variable">$loc</span>.path()).toEqual(<span class="string">''</span>);
    <span class="variable">$loc</span>.path(<span class="string">'/here'</span>);
    ctrl.navigate1();
    expect(<span class="variable">$loc</span>.path()).toEqual(<span class="string">'/some/where'</span>);
  });
  it(<span class="string">'should navigate away from the current page'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(<span class="variable">$loc</span>.path()).toEqual(<span class="string">''</span>);
    <span class="variable">$loc</span>.path(<span class="string">'/there'</span>);
    ctrl.navigate2();
    expect(<span class="variable">$loc</span>.path()).toEqual(<span class="string">'/some/where/else'</span>);
  });
});
</pre></td></tr></table></figure>

<h1 id="mocking-out-services">Mocking Out Services</h1>
<p>Now for the purpose of our unit test,
we want to mock out ItemService.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/notesApp1.js</span>
angular.module(<span class="string">'notesApp1'</span>, [])
.factory(<span class="string">'ItemService'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> items = [
    {id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>},
    {id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>}
  ];
  <span class="keyword">return</span> {
    <span class="keyword">list</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">return</span> items;
    },
    add: <span class="function"><span class="keyword">function</span><span class="params">(item)</span> {</span>
      items.push(item);
    }
  };
}])
.controller(<span class="string">'ItemCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span><span class="params">(ItemService)</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.items = ItemService.<span class="keyword">list</span>();
}]);
</pre></td></tr></table></figure>

<p>This provider shares its namespace with the modules loaded before. So now we create our
mockService and tell the provider that when any controller or service asks for ItemSer
vice, give it our value. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/notesApp1Spec.js</span>
describe(<span class="string">'ItemCtrl with inline mock'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  beforeEach(module(<span class="string">'notesApp1'</span>));
  <span class="keyword">var</span> ctrl, mockService;
  beforeEach(module(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$provide</span>)</span> {</span>
    mockService = {
      <span class="keyword">list</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> [{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}];
      }
    };
    <span class="variable">$provide</span>.value(<span class="string">'ItemService'</span>,mockService);
  }));
    
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$controller</span>)</span> {</span>
    ctrl = <span class="variable">$controller</span>(<span class="string">'ItemCtrl'</span>);
  }));
  it(<span class="string">'should load mocked out items'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(ctrl.items).toEqual([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}]);
  });
});
</pre></td></tr></table></figure>

<h2 id="-">方式二</h2>
<p>To change the preceding to be a more reusable, general-purpose mock of the ItemSer
vice, we could do the following:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/notesApp1-mocks.js</span>
angular.module(<span class="string">'notesApp1Mocks'</span>, [])
.factory(<span class="string">'ItemService'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> {
    <span class="keyword">list</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> [{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}];
  }
};

<span class="comment">// File: chapter7/notesApp1SpecWithMock.js</span>
describe(<span class="string">'ItemCtrl With global mock'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> ctrl;
  beforeEach(module(<span class="string">'notesApp1'</span>));
  beforeEach(module(<span class="string">'notesApp1Mocks'</span>));
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$controller</span>)</span> {</span>
    ctrl = <span class="variable">$controller</span>(<span class="string">'ItemCtrl'</span>);
  }));
  it(<span class="string">'should load mocked out items'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(ctrl.items).toEqual([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}]);
  });
});
</pre></td></tr></table></figure>

<h1 id="spies">Spies</h1>
<p> Spies allow us to hook into certain functions, and check whether they were called,
how many times they were called, what arguments they were called with, and so on.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="function">describee(<span class="string">'ItemCtrl with spies'</span>, <span class="function">function()</span> {
  <span class="function">beforeEach(<span class="function">module(<span class="string">'notesApp1'</span>)</span>)</span>;
  var ctrl, itemService;
  
  <span class="function">beforeEach(<span class="function">inject(<span class="function">function($controller, ItemService)</span> {
  // tell it to continue calling the actual service underneath by
  // calling andCallThrough on the spy.
    <span class="function">spyOn(ItemService, <span class="string">'list'</span>)</span>.<span class="function">andCallThrough()</span>;
    itemService = ItemService;
    ctrl = $<span class="function">controller(<span class="string">'ItemCtrl'</span>)</span>;
  })</span>)</span>;
    
  <span class="function">it(<span class="string">'should load mocked out items'</span>, <span class="function">function()</span> {
    <span class="function">expect(itemService.list)</span>.<span class="function">toHaveBeenCalled()</span>;
    <span class="function">expect(itemService.list.callCount)</span>.<span class="function">toEqual(<span class="number">1</span>)</span>;
    <span class="function">expect(ctrl.items)</span>.<span class="function">toEqual([
      {id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>},
      {id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>}
    ])</span>;
  })</span>;
})</span>;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/notesApp1SpecWithSpyReturn.js</span>
<span class="function">describe(<span class="string">'ItemCtrl with SpyReturn'</span>, <span class="function">function()</span> {
  <span class="function">beforeEach(<span class="function">module(<span class="string">'notesApp1'</span>)</span>)</span>;
    var ctrl, itemService;
    <span class="function">beforeEach(<span class="function">inject(<span class="function">function($controller, ItemService)</span> {
      <span class="function">spyOn(ItemService, <span class="string">'list'</span>)</span>
      .<span class="function">andReturn([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}])</span>;
      itemService = ItemService;
      ctrl = $<span class="function">controller(<span class="string">'ItemCtrl'</span>)</span>;
    })</span>)</span>;
    <span class="function">it(<span class="string">'should load mocked out items'</span>, <span class="function">function()</span> {
      <span class="function">expect(itemService.list)</span>.<span class="function">toHaveBeenCalled()</span>;
      <span class="function">expect(itemService.list.callCount)</span>.<span class="function">toEqual(<span class="number">1</span>)</span>;
      <span class="function">expect(ctrl.items)</span>.<span class="function">toEqual([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}])</span>;
    })</span>;
})</span>;
</pre></td></tr></table></figure>

<h1 id="unit-testing-server-calls">Unit Testing Server Calls</h1>
<p>With AngularJS, as long as we include the angular-mocks.js file as part of the Karma
configuration, AngularJS takes care of ensuring that when we use the $http service, it
doesn’t actually make server calls. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/serverApp.js</span>
angular.module(<span class="string">'serverApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$http</span>)</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.items = [];
  <span class="keyword">self</span>.errorMessage = <span class="string">''</span>;
  <span class="variable">$http</span>.get(<span class="string">'/api/note'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
    <span class="keyword">self</span>.items = response.data;
  }, <span class="function"><span class="keyword">function</span><span class="params">(errResponse)</span> {</span>
    <span class="keyword">self</span>.errorMessage = errResponse.data.msg;
  });
}]);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="code"><pre><span class="comment">// File: chapter7/serverAppSpec.js</span>
describe(<span class="string">'MainCtrl Server Calls'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  beforeEach(module(<span class="string">'serverApp'</span>));
  <span class="keyword">var</span> ctrl, mockBackend;
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$controller</span>, <span class="variable">$httpBackend</span>)</span> {</span>
    mockBackend = <span class="variable">$httpBackend</span>;
    mockBackend.expectGET(<span class="string">'/api/note'</span>)
    .respond([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}]);
    ctrl = <span class="variable">$controller</span>(<span class="string">'MainCtrl'</span>);
    <span class="comment">// At this point, a server request will have been made</span>
  }));
    
  it(<span class="string">'should load items from server'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// Initially, before the server responds,</span>
    <span class="comment">// the items should be empty</span>
    expect(ctrl.items).toEqual([]);
    <span class="comment">// Simulate a server response</span>
    <span class="comment">// $httpBackend.flush(3) flush three request</span>
    mockBackend.flush();
    expect(ctrl.items).toEqual([{id: <span class="number">1</span>, label: <span class="string">'Mock'</span>}]);
  });
  afterEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// Ensure that all expects set on the $httpBackend</span>
    <span class="comment">// were actually called</span>
    mockBackend.verifyNoOutstandingExpectation();
    <span class="comment">// Ensure that all requests to the server</span>
    <span class="comment">// have actually responded (using flush())</span>
    mockBackend.verifyNoOutstandingRequest();
  });
});
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs - Forms, Inputs, and Services]]></title>
    <link href="http://zhpooer.github.io/2014/12/18/angularjs-2/"/>
    <id>http://zhpooer.github.io/2014/12/18/angularjs-2/</id>
    <published>2014-12-18T03:42:38.000Z</published>
    <updated>2014-12-20T12:09:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ng-model">ng-model</h1>
<p>AngularJS provides the <code>ng-model</code> directive for us to deal with
inputs and two-way data-binding</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as ctrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"ctrl.username"</span>/&gt;</span>
  You typed 
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.change()"</span>&gt;</span>Change Values<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
  angular.module(<span class="string">'notesApp'</span>, [])
    .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">this</span>.username = <span class="string">'nothing'</span>;
    self.change = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      self.username = <span class="string">'changed'</span>;
      self.password = <span class="string">'password'</span>;
    };
  }]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="forms">Forms</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>&lt;form ng-submit=<span class="string">"ctrl.submit()"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span> ng-model=<span class="string">"ctrl.user.username"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"password"</span> ng-model=<span class="string">"ctrl.user.password"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"submit"</span> <span class="keyword">value</span>=<span class="string">"Submit"</span>&gt;
&lt;/form&gt;

&lt;form ng-submit=<span class="string">"ctrl.submit()"</span> name=<span class="string">"myForm"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span>
         ng-model=<span class="string">"ctrl.user.username"</span>
         required
         ng-minlength=<span class="string">"4"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"password"</span>
         ng-model=<span class="string">"ctrl.user.password"</span>
         required&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"submit"</span>
         <span class="keyword">value</span>=<span class="string">"Submit"</span>
         ng-disabled=<span class="string">"myForm.$invalid"</span>&gt;
&lt;/form&gt;
</pre></td></tr></table></figure>

<p>Form states in AngularJS</p>
<ul>
<li><code>$invalid</code>, AngularJS sets this state when any of the validations (required, ng-minlength, and others) mark any of
the fields within the form as invalid.</li>
<li><code>$valid</code>, The inverse of the previous state, which states that all the validations in the form are currently evaluating to
correct.</li>
<li><code>$pristine</code>,All forms in AngularJS start with this state. This allows you to figure out if a user has started typing in and
modifying any of the form elements. Possible usage: disabling the reset button if a form is pristine.</li>
<li><code>$dirty</code>, The inverse of $pristine, which states that the user made some changes (he can revert it, but the $dirty
bit is set).</li>
<li><code>$error</code>, This field on the form houses all the individual fields and the errors on each form element. </li>
</ul>
<p>Built-in AngularJS validators</p>
<ul>
<li><code>required</code>,</li>
<li><code>ng-required</code>, Unlike required, which marks a field as always required, the ng-required directive allows us to
conditionally mark an input field as required based on a Boolean condition in the controller.</li>
<li><code>ng-minlength</code>and <code>ng-maxlength</code></li>
<li><code>ng-pattern</code></li>
<li><code>type=&quot;email&quot;</code></li>
<li><code>type=&quot;number&quot;</code>,Can also have additional attributes for min and max values of the
number itself.</li>
<li><code>type=&quot;date&quot;</code>, This expects the date to be in yyyy-mm-dd format</li>
<li><code>type=&quot;url&quot;</code></li>
</ul>
<h2 id="displaying-error-messages">Displaying Error Messages</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">form</span> <span class="attribute">ng-submit</span>=<span class="value">"ctrl.submit()"</span> <span class="attribute">name</span>=<span class="value">"myForm"</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span>
       <span class="attribute">name</span>=<span class="value">"uname"</span>
       <span class="attribute">ng-model</span>=<span class="value">"ctrl.user.username"</span>
       <span class="attribute">required</span>
       <span class="attribute">ng-minlength</span>=<span class="value">"4"</span>&gt;</span>
       
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"myForm.uname.$error.required"</span>&gt;</span>
  This is a required field
<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"myForm.uname.$error.minlength"</span>&gt;</span>
      Minimum length required is 4
<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
      
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"myForm.uname.$invalid"</span>&gt;</span>
  This field is invalid
<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span>
       <span class="attribute">name</span>=<span class="value">"pwd"</span>
       <span class="attribute">ng-model</span>=<span class="value">"ctrl.user.password"</span>
       <span class="attribute">required</span>&gt;</span>
       
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-show</span>=<span class="value">"myForm.pwd.$error.required"</span>&gt;</span>
  This is a required field
<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span>
       <span class="attribute">value</span>=<span class="value">"Submit"</span>
       <span class="attribute">ng-disabled</span>=<span class="value">"myForm.$invalid"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="styling-forms-and-states">Styling Forms and States</h2>
<p>AngularJS adds and removes the CSS
classes to and from the forms and input elements.</p>
<ul>
<li><code>$invalid</code>, ng-invalid</li>
<li><code>$valid</code>, ng-valid</li>
<li><code>$pristine</code>, ng-pristine</li>
<li><code>$dirty</code>, ng-dirty</li>
<li><code>required</code>, ng-valid-required or ng-invalid-required</li>
<li><code>min</code>, ng-valid-min or ng-invalid-min</li>
<li><code>max</code>, ng-valid-max or ng-invalid-max</li>
<li><code>minlength</code>, ng-valid-minlength or ng-invalid-minlength</li>
<li><code>maxlength</code>, ng-valid-maxlength or ng-invalid-maxlength</li>
<li><code>pattern</code>, ng-valid-pattern or ng-invalid-pattern</li>
<li><code>url</code>, ng-valid-url or ng-invalid-url</li>
<li><code>email</code>, ng-valid-email or ng-invalid-email</li>
<li><code>date</code>, ng-valid-date or ng-invalid-date</li>
<li><code>number</code>, ng-valid-number or ng-invalid-number</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="class">.username</span><span class="class">.ng-valid</span> <span class="rules">{
  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> green</span></span>;
<span class="rule">}</span></span>
<span class="class">.username</span><span class="class">.ng-dirty</span><span class="class">.ng-invalid-required</span> <span class="rules">{
  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;
<span class="rule">}</span></span>
<span class="class">.username</span><span class="class">.ng-dirty</span><span class="class">.ng-invalid-minlength</span> <span class="rules">{
  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> lightpink</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h2 id="nested-forms-with-ng-form">Nested Forms with ng-form</h2>
<p>We sometimes run into cases where we need
subsections of our form to be valid as a group,
and to check and ascertain its validity.</p>
<p>AngularJS provides an ng-form directive, which acts similar to form but allows nesting,
so that we can accomplish the requirement of grouping related form fields</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="subst">&lt;</span>form novalidate name<span class="subst">=</span><span class="string">"myForm"</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"text"</span>
         class<span class="subst">=</span><span class="string">"username"</span>
         name<span class="subst">=</span><span class="string">"uname"</span>
         ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.username"</span>
         required<span class="subst">=</span><span class="string">""</span>
         placeholder<span class="subst">=</span><span class="string">"Username"</span>
         ng<span class="attribute">-minlength</span><span class="subst">=</span><span class="string">"4"</span> <span class="subst">/</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"password"</span>
         class<span class="subst">=</span><span class="string">"password"</span>
         name<span class="subst">=</span><span class="string">"pwd"</span>
         ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.password"</span>
         placeholder<span class="subst">=</span><span class="string">"Password"</span>
         required<span class="subst">=</span><span class="string">""</span> <span class="subst">/</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>ng<span class="attribute">-form</span> name<span class="subst">=</span><span class="string">"profile"</span><span class="subst">&gt;</span>
      <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"text"</span>
             name<span class="subst">=</span><span class="string">"firstName"</span>
             ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.profile.firstName"</span>
             placeholder<span class="subst">=</span><span class="string">"First Name"</span>
             required<span class="subst">&gt;</span>
      <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"text"</span>
             name<span class="subst">=</span><span class="string">"middleName"</span>
             placeholder<span class="subst">=</span><span class="string">"Middle Name"</span>
             ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.profile.middleName"</span><span class="subst">&gt;</span>
      <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"text"</span>
             name<span class="subst">=</span><span class="string">"lastName"</span>
             placeholder<span class="subst">=</span><span class="string">"Last Name"</span>
             ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.profile.lastName"</span>
             required<span class="subst">&gt;</span>
      <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"date"</span>
             name<span class="subst">=</span><span class="string">"dob"</span>
             placeholder<span class="subst">=</span><span class="string">"Date Of Birth"</span>
             ng<span class="attribute">-model</span><span class="subst">=</span><span class="string">"ctrl.user.profile.dob"</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>/ng<span class="attribute">-form</span><span class="subst">&gt;</span>
  <span class="subst">&lt;</span>span ng<span class="attribute">-show</span><span class="subst">=</span><span class="string">"myForm.profile.$invalid"</span><span class="subst">&gt;</span>
    Please fill out the profile information
  <span class="subst">&lt;</span>/span<span class="subst">&gt;</span>
  <span class="subst">&lt;</span>input <span class="keyword">type</span><span class="subst">=</span><span class="string">"submit"</span>
         value<span class="subst">=</span><span class="string">"Submit"</span>
         ng<span class="attribute">-disabled</span><span class="subst">=</span><span class="string">"myForm.$invalid"</span><span class="subst">/</span><span class="subst">&gt;</span>
<span class="subst">&lt;</span>/form<span class="subst">&gt;</span>
</pre></td></tr></table></figure>

<h2 id="other-form-controls">Other Form Controls</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">&lt;!-- textarea --&gt;</span>
<span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">ng-model</span>=<span class="value">"ctrl.user.address"</span> <span class="attribute">required</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>

<span class="comment">&lt;!-- checkbox --&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">ng-model</span>=<span class="value">"ctrl.user.agree"</span>&gt;</span>

<span class="comment">&lt;!-- What if we wanted to assign the string
     YES or NO to our model --&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>
       <span class="attribute">ng-model</span>=<span class="value">"ctrl.user.agree"</span>
       <span class="attribute">ng-true-value</span>=<span class="value">"YES"</span>
       <span class="attribute">ng-false-value</span>=<span class="value">"NO"</span>&gt;</span>
<span class="comment">&lt;!--  oneway binding --&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>
       <span class="attribute">ng-checked</span>=<span class="value">"sport.selected === 'YES'"</span>&gt;</span><span class="tag">&lt;/<span class="title">input</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="radio-buttons">Radio Buttons</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>&lt;div ng-init=<span class="string">"otherGender = 'other'"</span>&gt;
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"radio"</span>
         name=<span class="string">"gender"</span>
         ng-model=<span class="string">"user.gender"</span>
         <span class="keyword">value</span>=<span class="string">"male"</span>&gt;Male
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"radio"</span>
         name=<span class="string">"gender"</span>
         ng-model=<span class="string">"user.gender"</span>
         <span class="keyword">value</span>=<span class="string">"female"</span>&gt;Female
  &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"radio"</span>
         name=<span class="string">"gender"</span>
         ng-model=<span class="string">"user.gender"</span>
         ng-<span class="keyword">value</span>=<span class="string">"otherGender"</span>&gt;
&lt;/div&gt;
</pre></td></tr></table></figure>

<p>We assign it as part of the initialization block (<code>ng-init</code>).</p>
<h2 id="combo-boxex-drop-downs">Combo Boxex/Drop-Downs</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-init</span>=<span class="value">"location = 'India'"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">select</span> <span class="attribute">ng-model</span>=<span class="value">"location"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"USA"</span>&gt;</span>USA<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"India"</span>&gt;</span>India<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"Other"</span>&gt;</span>None of the above<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">ng-model</span>=<span class="value">"ctrl.selectedCountryId"</span>
        <span class="attribute">ng-options</span>=<span class="value">"c.id as c.label for c in ctrl.countries"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>
<span class="tag">&lt;<span class="title">select</span> <span class="attribute">ng-model</span>=<span class="value">"ctrl.selectedCountry"</span>
        <span class="attribute">ng-options</span>=<span class="value">"c.label for c in ctrl.countries"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span>

<span class="comment">&lt;!-- this.selectedCountryId = 2; --&gt;</span>
<span class="comment">&lt;!-- this.selectedCountry = this.countries[1]; --&gt;</span>
</pre></td></tr></table></figure>

<h1 id="angularjs-services">AngularJS Services</h1>
<p>AngularJS services are functions or objects that can hold behavior or state across our
application. Each AngularJS service is instantiated only once, so each part of our
application gets access to the same instance of the AngularJS service.</p>
<p>Controllers are stateful, but ephemeral. That is, they can be destroyed and re-created
multiple times throughout the course of navigating across a Single Page Application.</p>
<p>When we say “services” in AngularJS, we include factories, services, and providers.</p>
<p>Any service known to AngularJS (internal or our own) can be
simply injected into any other service, directive, or controller
by stating it as a dependency.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>myModule.controller(<span class="string">"MainCtrl"</span>, [<span class="string">"$log"</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$log</span>)</span> {</span>}]);
myModule.controller(<span class="string">"MainCtrl"</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$log</span>)</span> {</span>});
</pre></td></tr></table></figure>

<ul>
<li><code>$window</code>, the <code>$window</code> service in AngularJS is nothing but a wrapper
around the global window object.</li>
<li><code>$location</code>, the <code>$location</code> service in AngularJS allows us to
interact with the URL in the browser bar, and get
and manipulate its value. <ul>
<li><code>absUrl</code>, <code>$location.absUrl())</code></li>
<li><code>url</code>, A getter and setter that gets or sets the URL.</li>
<li><code>path</code>,<code>$location.path()</code>, <code>$location.path(&#39;/new&#39;)</code></li>
<li><code>search</code><ul>
<li><code>$location.search()</code>, returns the search parameter as an object</li>
<li><code>$location.search(&#39;test&#39;)</code>, removes the search parameter from Url</li>
<li><code>$location.search(&#39;test&#39;, &#39;abc&#39;)</code></li>
</ul>
</li>
<li><code>$http</code>,  it is the core AngularJS service used to make XHR requests to the server from the application.</li>
</ul>
</li>
</ul>
<h2 id="creating-a-simple-angularjs-service">Creating a Simple AngularJS Service</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.tab = <span class="string">'first'</span>;
  <span class="keyword">self</span>.open = <span class="function"><span class="keyword">function</span><span class="params">(tab)</span> {</span>
    <span class="keyword">self</span>.tab = tab;
  };
}])

.controller(<span class="string">'SubCtrl'</span>, [<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span><span class="params">(ItemService)</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.<span class="keyword">list</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> ItemService.<span class="keyword">list</span>();
  };
  <span class="keyword">self</span>.add = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    ItemService.add({
      id: <span class="keyword">self</span>.<span class="keyword">list</span>().length + <span class="number">1</span>,
      label: <span class="string">'Item '</span> + <span class="keyword">self</span>.<span class="keyword">list</span>().length
    });
  };
}])
  
.factory(<span class="string">'ItemService'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> items = [
    {id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>},
    {id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>}
  ];
  <span class="keyword">return</span> {
    <span class="keyword">list</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">return</span> items;
    },
    add: <span class="function"><span class="keyword">function</span><span class="params">(item)</span> {</span>
      items.push(item);
    }
  };
}]);
</pre></td></tr></table></figure>

<ul>
<li>The service will be lazily instantiated. The very first time a controller, service, or
directive asks for the service, it will be created.</li>
<li>The service definition function will be called once, and the instance stored. Every
caller of this service will get this same, singleton instance handed to them.</li>
</ul>
<h2 id="the-defference-between-factory-service-and-provider">The defference between Factory, Service, and Provider</h2>
<p>You should use <code>module.factory()</code> to define your services if:</p>
<ul>
<li>You follow a functional style of programming</li>
<li>You prefer to return functions and objects</li>
</ul>
<p>When we use a <code>service</code>, AngularJS assumes that the function
definition passed in as part of the array of
dependencies is actually a JavaScript type/class.
So instead of just invoking the function
and storing its return value, AngularJS will call new on the function to create an instance
of the type/class.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="regexp">//</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span></span>
angular.<span class="built_in">module</span>(<span class="string">'notesApp'</span>, []) .service(<span class="string">'ItemService'</span>, [ItemService])
</pre></td></tr></table></figure>

<p>When we need to set up some configuration for our service
before our application loads, you can use <code>provider</code> function.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.provider(<span class="string">'ItemService'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> haveDefaultItems = <span class="literal">true</span>;
  <span class="keyword">this</span>.disableDefaultItems = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    haveDefaultItems = <span class="literal">false</span>;
  };
  <span class="comment">// This function gets our dependencies, not the</span>
  <span class="comment">// provider above</span>
  <span class="keyword">this</span>.$<span class="keyword">get</span> = [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> optItems = [];
    <span class="keyword">if</span> (haveDefaultItems) {
      optItems = [
        {id: <span class="number">1</span>, label: <span class="string">'Item 0'</span>},
        {id: <span class="number">2</span>, label: <span class="string">'Item 1'</span>}
      ];
    }
    <span class="keyword">return</span> <span class="keyword">new</span> ItemService(optItems);
  }];
})

.config([<span class="string">'ItemServiceProvider'</span>,
  <span class="function"><span class="keyword">function</span><span class="params">(ItemServiceProvider)</span> {</span>
  <span class="comment">// To see how the provider can change</span>
  <span class="comment">// configuration, change the value of</span>
  <span class="comment">// shouldHaveDefaults to true and try</span>
  <span class="comment">// running the example</span>
  <span class="keyword">var</span> shouldHaveDefaults = <span class="literal">false</span>;
  <span class="comment">// Get configuration from server</span>
  <span class="comment">// Set shouldHaveDefaults somehow</span>
  <span class="comment">//Assume it magically changes for now</span>
  <span class="keyword">if</span> (!shouldHaveDefaults) {
    ItemServiceProvider.disableDefaultItems();
  }
}])
</pre></td></tr></table></figure>

<p>Note that the provider does not use the same notation as
factory and service. It doesn’t take an array as the
second argument because providers cannot have dependencies
on other services.</p>
<p>The <code>config</code> function executes before the AngularJS app executes. So we can be
assured that this executes before our controllers, services, and other functions.</p>
<h1 id="server-communication-using-http">Server Communication Using $http</h1>
<p>The AngularJS XHR API follows what is commonly known as the Promise
interface.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.controller(<span class="string">'MainCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$http</span>)</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.items = [];
  <span class="variable">$http</span>.get(<span class="string">'/api/note'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
    <span class="keyword">self</span>.items = response.data;
  }, <span class="function"><span class="keyword">function</span><span class="params">(errResponse)</span> {</span>
    console.error(<span class="string">'Error while fetching notes'</span>);
  });
}]);
</pre></td></tr></table></figure>

<p>Both these handlers get passed in a response object, which has the
following keys:</p>
<ul>
<li><code>headers</code> The headers for the call</li>
<li><code>status</code> The status code for the response</li>
<li><code>config</code> The configuration with which the call was made</li>
<li><code>data</code> The body of the response from the server</li>
</ul>
<h2 id="-http-api">$http API</h2>
<p><code>$http</code> provides the following convenience methods to
make certain types of requests: <code>GET</code> <code>HEAD</code> <code>POST</code> <code>DELETE</code> <code>PUT</code> <code>JSONP</code></p>
<ul>
<li>For requests without any post data (think GET), the function takes two arguments:
the URL as the first argument, and a configuration object as the second. </li>
<li>For requests with post data (POST, PUT), the function takes three arguments: the
URL as the first argument, the post data as the second, and a configuration object
as the third and final argument.</li>
</ul>
<p><code>$http.get(url, config)</code> can be replaced with:
<code>$http(config)</code> where the url and the method (GET, in this case)
become part of the configuration object itself.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>{
  <span class="keyword">method</span>: <span class="built_in">string</span>,
  url: <span class="built_in">string</span>,
  params: <span class="keyword">object</span>,
  data: <span class="built_in">string</span> <span class="keyword">or</span> <span class="keyword">object</span>,
  headers: <span class="keyword">object</span>,
  xsrfHeaderName: <span class="built_in">string</span>,
  xsrfCookieName: <span class="built_in">string</span>,
  transformRequest: <span class="keyword">function</span> transform(data, headersGetter) <span class="keyword">or</span> an <span class="built_in">array</span> <span class="keyword">of</span> functions,
  transformResponse: <span class="keyword">function</span> transform(data, headersGetter) <span class="keyword">or</span> an <span class="built_in">array</span> <span class="keyword">of</span> functions,
  cache: boolean <span class="keyword">or</span> Cache <span class="keyword">object</span>,
  timeout: number,
  withCredentials: boolean
}
</pre></td></tr></table></figure>

<ul>
<li>params: <code>[{key1: &#39;value1&#39;, key2: &#39;value2&#39;}]</code> would be converted to:
<code>?key1=value1&amp;key2=value2</code>. If we use an object instead of a string or a
number for the value, the object will be converted to a JSON string.</li>
<li>data: A string or an object that will be sent as the request message data. This basically
becomes the POST data for the server.</li>
<li>headers:  Like passing <code>{&#39;Content-Type&#39;: &#39;text/csv&#39;}</code> would set the Content-Type header to be <code>text/csv</code>.</li>
<li>xsrHeaderName: We can set the XSRF header that the server will be setting to prevent XSRF attacks
on our website. TODO</li>
<li><p>xsrfCookieName: The name of the cookie that has the xsrf token to be used for the XSRF handshake.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// A simple transformRequest that takes the JSON</span>
<span class="comment">// post data and converts it into jQuery like a post data</span>
<span class="comment">// string is as follows:</span>

transformRequest: <span class="function"><span class="keyword">function</span><span class="params">(data, headers)</span> {</span>
  <span class="keyword">var</span> requestStr;
  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) {
    <span class="keyword">if</span> (requestStr) {
      requestStr += <span class="string">'&'</span> + key + <span class="string">'='</span> + data[key];
    } <span class="keyword">else</span> {
      requestStr = key + <span class="string">'='</span> + data[key];
    }
  }
  <span class="keyword">return</span> requestStr;
}
</pre></td></tr></table></figure>
</li>
<li><p>cache: A Boolean or a cache object to use for an application-level caching mechanism.
This would be over and above the browser-level caching. If set to true, AngularJS
will automatically cache server responses and return them for subsequent requests
to the same URL.</p>
</li>
</ul>
<h2 id="-httpprovider">$httpProvider</h2>
<p>We can use the config section of our module, and use the
<code>$httpProvider</code> to configure these defaults.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.controller(<span class="string">'LoginCtrl'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$http</span>)</span> {</span>
  <span class="keyword">var</span> <span class="keyword">self</span> = this;
  <span class="keyword">self</span>.user = {};
  <span class="keyword">self</span>.message = <span class="string">'Please login'</span>;
  <span class="keyword">self</span>.login = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="variable">$http</span>.post(<span class="string">'/api/login'</span>, <span class="keyword">self</span>.user).then(
      <span class="function"><span class="keyword">function</span><span class="params">(resp)</span> {</span>
        <span class="keyword">self</span>.message = resp.data.msg;
      });
  };
}])
.config([<span class="string">'$httpProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$httpProvider</span>)</span> {</span>
  <span class="comment">// Every POST data becomes jQuery style</span>
  <span class="variable">$httpProvider</span>.defaults.transformRequest.push(
    <span class="function"><span class="keyword">function</span><span class="params">(data)</span> {</span>
      <span class="keyword">var</span> requestStr;
      <span class="keyword">if</span> (data) {
        data = JSON.parse(data);
        <span class="keyword">for</span> (<span class="keyword">var</span> key in data) {
          <span class="keyword">if</span> (requestStr) {
            requestStr += <span class="string">'&'</span> + key + <span class="string">'='</span> + data[key];
          } <span class="keyword">else</span> {
            requestStr = key + <span class="string">'='</span> + data[key];
          }
        }
      }
      <span class="keyword">return</span> requestStr;
  });
  <span class="comment">// Set the content type to be FORM type for all post requests</span>
  <span class="comment">// This does not add it for GET requests.</span>
  <span class="variable">$httpProvider</span>.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;
}]);
</pre></td></tr></table></figure>

<p>The <code>$httpProvider.defaults.headers</code> object allows us
to set default headers for common, get, post, and put requests.
Each one (<code>$httpProvider.defaults.headers.post</code>, for example) is an
object, where the key is the header name and the
value is the value of the header. </p>
<p>The following is the list of keys and values that can have defaults set using $httpPro
vider (using $httpProvider.defaults):</p>
<ul>
<li><code>headers.common</code></li>
<li><code>headers.get</code></li>
<li><code>headers.put</code></li>
<li><code>headers.post</code></li>
<li><code>transformRequest</code></li>
<li><code>transformResponse</code></li>
<li><code>xsrfHeaderName</code></li>
<li><code>xsrfCookieName</code></li>
</ul>
<h3 id="interceptors">Interceptors</h3>
<p>It usually required planning to create a layer through which all requests
would be channeled so that we could add global hooks.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.factory(<span class="string">'MyLoggingInterceptor'</span>, [<span class="string">'$q'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$q</span>)</span> {</span>
  <span class="keyword">return</span> {
    request: <span class="function"><span class="keyword">function</span><span class="params">(config)</span> {</span>
    console.log(<span class="string">'Request made with '</span>, config);
    <span class="keyword">return</span> config;
    <span class="comment">// If an error, not allowed, or my custom condition,</span>
    <span class="comment">// return $q.reject('Not allowed');</span>
    },
    requestError: <span class="function"><span class="keyword">function</span><span class="params">(rejection)</span> {</span>
      console.log(<span class="string">'Request error due to '</span>, rejection);
      <span class="comment">// Continue to ensure that the next promise chain</span>
      <span class="comment">// sees an error</span>
      <span class="keyword">return</span> <span class="variable">$q</span>.reject(rejection);
      <span class="comment">// Or handled successfully?</span>
      <span class="comment">// return someValue</span>
    },
    response: <span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
      console.log(<span class="string">'Response from server'</span>, response);
      <span class="comment">// Return a promise</span>
      <span class="keyword">return</span> response || <span class="variable">$q</span>.when(response);
    },
    responseError: <span class="function"><span class="keyword">function</span><span class="params">(rejection)</span> {</span>
      console.log(<span class="string">'Error in response '</span>, rejection);
      <span class="comment">// Continue to ensure that the next promise chain</span>
      <span class="comment">// sees an error</span>
      <span class="comment">// Can check auth status code here if need to</span>
      <span class="comment">// if (rejection.status === 403) {</span>
      <span class="comment">// Show a login dialog</span>
      <span class="comment">// return a value to tell controllers it has</span>
      <span class="comment">// been handled</span>
      <span class="comment">// }</span>
      <span class="comment">// Or return a rejection to continue the</span>
      <span class="comment">// promise failure chain</span>
      <span class="keyword">return</span> <span class="variable">$q</span>.reject(rejection);
    }
  };
}])
.config([<span class="string">'$httpProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$httpProvider</span>)</span> {</span>
  <span class="variable">$httpProvider</span>.interceptors.push(<span class="string">'MyLoggingInterceptor'</span>);
}]);
</pre></td></tr></table></figure>

<p>The interceptors will be called in the order we add them to the provider,
so we can also control the order in which they are called.</p>
<h2 id="promise">Promise</h2>
<p>The Promise API was designed to solve this nesting problem and the problem of error
handling.</p>
<ul>
<li>Each asynchronous task will return a promise object.</li>
<li>Each promise object will have a then function that can take two arguments, a success
handler and an error handler.</li>
<li>The success or the error handler in the then function will be called only once, after
the asynchronous task finishes.</li>
<li>The then function will also return a promise, to allow chaining multiple calls.</li>
<li>Each handler (success or error) can return a value, which will be passed to the next
function in the chain of promises.</li>
<li>If a handler returns a promise (makes another asynchronous request), then the next
handler (success or error) will be called only after that request is finished.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="variable">$http</span>.get(<span class="string">'/api/server-config'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(configResponse)</span> {</span>
  <span class="keyword">return</span> <span class="variable">$http</span>.get(<span class="string">'/api/'</span> + configResponse.data.USER_END_POINT);
}).then(<span class="function"><span class="keyword">function</span><span class="params">(userResponse)</span> {</span>
  <span class="keyword">return</span> <span class="variable">$http</span>.get(<span class="string">'/api/'</span> + userResponse.data.id + <span class="string">'/items'</span>);
}).then(<span class="function"><span class="keyword">function</span><span class="params">(itemResponse)</span> {</span>
  <span class="comment">// Display items here</span>
}, <span class="function"><span class="keyword">function</span><span class="params">(error)</span> {</span>
  <span class="comment">// Common error handling</span>
});
</pre></td></tr></table></figure>

<p>If any error happens in any of the
functions in the promise chain, AngularJS will find the
next closest error handler and trigger it.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">var</span> <span class="keyword">self</span> = this;
<span class="keyword">self</span>.items = [];
<span class="keyword">self</span>.newTodo = {};
<span class="keyword">var</span> fetchTodos = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">return</span> <span class="variable">$http</span>.get(<span class="string">'/api/note'</span>).then(
    <span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
      <span class="keyword">self</span>.items = response.data;
    }, <span class="function"><span class="keyword">function</span><span class="params">(errResponse)</span> {</span>
      console.error(<span class="string">'Error while fetching notes'</span>);
    });
};
fetchTodos();
<span class="keyword">self</span>.add = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="variable">$http</span>.post(<span class="string">'/api/note'</span>, <span class="keyword">self</span>.newTodo)
    .then(fetchTodos)
    .then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> {</span>
      <span class="keyword">self</span>.newTodo = {};
    });
};
</pre></td></tr></table></figure>

<h3 id="-q-service">$q Service</h3>
<p>If we want to trigger the success handler for the next promise in the chain, we can just
return a value from the success or the error handler.</p>
<p>If, on the other hand, we want to trigger the error handler for the next promise in the
chain, we can leverage the $q service in AngularJS.
Just ask for $q as a dependency in our controller and service,
and return <code>$q.reject(data)</code> from the handler.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>xhrCall()
  .<span class="keyword">then</span>(S1, E1) <span class="comment">//P1</span>
  .<span class="keyword">then</span>(S2, E2) <span class="comment">//P2</span>
  .<span class="keyword">then</span>(S3, E3) <span class="comment">//P3</span>
</pre></td></tr></table></figure>

<ul>
<li><code>$q.defer()</code> Creates a deferred object when we need to create a promise for our own asynchro‐
nous task. Use <code>deferredObject.resolve</code> and <code>deferredObject.reject</code> to
trigger the Promise</li>
<li><code>$q.reject()</code> The return value of this should be returned to ensure that the
promise continues to the next error handler instead of the success handler in the
promise chain.</li>
</ul>
<h2 id="ngresource">ngResource</h2>
<p>AngularJS’s optional module, <code>ngResource. ngResource</code> allows
us to take an API endpoint and create an
AngularJS service around it.</p>
<ul>
<li>GET request to <code>/api/project/</code> returned an array of projects</li>
<li>GET request to <code>/api/project/17</code> returned the project with ID 17</li>
<li>POST request to <code>/api/project/</code> with a project object as JSON created a new project</li>
<li>POST request to <code>/api/project/19</code> with a project object as JSON updated the project
with ID 19</li>
<li>DELETE request to <code>/api/project/</code> deleted all the projects</li>
<li>DELETE request to <code>/api/project/23</code> deleted the project with ID 23</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>angular.module(<span class="string">'resourceApp'</span>, [<span class="string">'ngResource'</span>])
.factory(<span class="string">'ProjectService'</span>, [<span class="string">'$resource'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$resource</span>)</span> {</span>
  <span class="keyword">return</span> <span class="variable">$resource</span>(<span class="string">'/api/project/:id'</span>);
}]);
</pre></td></tr></table></figure>

<ul>
<li><code>ProjectService.query()</code> to get a list of projects</li>
<li><code>ProjectService.save({id: 15}, projectObj)</code> to update a project with ID 15</li>
<li><code>ProjectService.get({id: 19})</code> to get an individual project with ID 19</li>
</ul>
<h2 id="best-practices">Best Practices</h2>
<p>Wrap <code>$http</code> in services</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.factory(<span class="string">'NoteService'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$http</span>)</span> {</span>
  <span class="keyword">return</span> {
    query: <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">return</span> <span class="variable">$http</span>.get(<span class="string">'/api/notes'</span>);
    }
  };
}]);
</pre></td></tr></table></figure>

<p>Use interceptors</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
.factory(<span class="string">'AuthInterceptor'</span>, [<span class="string">'AuthInfoService'</span>, <span class="string">'$q'</span>, <span class="function"><span class="keyword">function</span><span class="params">(AuthInfoService, <span class="variable">$q</span>)</span> {</span>
  <span class="keyword">return</span> {
    request: <span class="function"><span class="keyword">function</span><span class="params">(config)</span> {</span>
      <span class="keyword">if</span> (AuthInfoService.hasAuthHeader()) {
        config.headers[<span class="string">'Authorization'</span>] =
        AuthInfoService.getAuthHeader();
      }
      <span class="keyword">return</span> config;
    },
    responseError: <span class="function"><span class="keyword">function</span><span class="params">(responseRejection)</span> {</span>
      <span class="keyword">if</span> (responseError.status === <span class="number">403</span>) {
        <span class="comment">// Authorization issue, access forbidden</span>
        AuthInfoService.redirectToLogin();
      }
      <span class="keyword">return</span> <span class="variable">$q</span>.reject(responseRejection);
    }
  };
}])
.config([<span class="string">'$httpProvider'</span>, <span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$httpProvider</span>)</span> {</span>
  <span class="variable">$httpProvider</span>.interceptors.push(<span class="string">'AuthInterceptor'</span>);
}]);
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[angularjs-入门]]></title>
    <link href="http://zhpooer.github.io/2014/12/18/angularjs-1/"/>
    <id>http://zhpooer.github.io/2014/12/18/angularjs-1/</id>
    <published>2014-12-18T02:37:53.000Z</published>
    <updated>2014-12-27T08:23:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hello-world">Hello World</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span>
           <span class="attribute">ng-model</span>=<span class="value">"name"</span>
           <span class="attribute">placeholder</span>=<span class="value">"Enter your name"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello <span class="tag">&lt;<span class="title">span</span> <span class="attribute">ng-bind</span>=<span class="value">"name"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.19/angular.js"</span>&gt;</span><span class="javascript">
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="angularjs-convenience-function">AngularJS Convenience Function</h1>
<ul>
<li><code>angular.forEach</code> Iterator over objects and arrays, to help you write code in a functional manner.</li>
<li><code>angular.fromJson</code> and <code>angular.toJson</code> Convenience methods to convert from a string to a JSON object and back from a
JSON object to a string.</li>
<li><code>angular.copy</code> Performs a deep copy of a given object and returns the newly created copy.</li>
<li><code>angular.equals</code> Determines if two objects, regular expressions, arrays, or values are equal. Does
deep comparison in the case of objects or arrays.</li>
<li><code>angular.isObject</code>, <code>angular.isArray</code>, and <code>angular.isFunction</code>
Convenience methods to quickly check if a given variable is an object, array, or
function.</li>
<li><code>angular.isString</code>, <code>angular.isNumber</code>, and <code>angular.isDate</code>
Convenience methods to check if a given variable is a string, number, or date object.</li>
</ul>
<h1 id="angularjs-modules">AngularJS Modules</h1>
<p>Modules are AngularJS’s way of packaging relevant code under
a single name.</p>
<p>The module can also depend on other modules as dependencies, which are defined
when the module is instantiated.</p>
<p>Module to load as the main entry point for the application by passing the module name
to the <code>ng-app</code> directive.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>// define a <span class="built_in">module</span>
angular.<span class="built_in">module</span>(<span class="string">'notesApp'</span>, [<span class="string">'notesApp.ui'</span>, <span class="string">'thirdCompany.fusioncharts'</span>]);

// get a <span class="built_in">module</span>
angular.<span class="built_in">module</span>(<span class="string">'notesApp'</span>, []);
</pre></td></tr></table></figure>

<p>This example defines a module (note the empty array as the second argument), and then
lets AngularJS bootstrap the module through the <code>ng-app</code> directive.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">&lt;!-- File: chapter2/module-example.html --&gt;</span>
<span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"notesApp"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello AngularJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    Hello 2nd time AngularJS
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
      angular.module(<span class="string">'notesApp'</span>, []);
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="controller">Controller</h1>
<p>An AngularJS controller is almost always directly linked to a view or HTML.
It acts as the gateway between our model, which is the data that drives our
application, and the view, which is what the user sees and interacts with.</p>
<ul>
<li>Fetching the right data from the server for the current UI</li>
<li>Deciding which parts of that data to show to the user</li>
<li>Presentation logic, such as how to display elements, which parts of the UI to show,
how to style them, etc.</li>
<li>User interactions, such as what happens when a user clicks something or how a text
input should be validated</li>
</ul>
<p>The array holds all the dependencies for the controller as
string variables, and the last argument in the array is the actual controller function. In
this case, because we have no dependencies, the function is the only argument in the
array. </p>
<p>We also introduce a new directive, <code>ng-controller</code>. This is used to tell AngularJS to go
instantiate an instance of the controller with the given name, and attach it to the DOM
element. </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as ctrl"</span>&gt;</span>
   AngularJS.
  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.changeMessage()"</span>&gt;</span>
    Change Message
  <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"status"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.done"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    angular.module(<span class="string">'notesApp'</span>, [])
    .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">var</span> self = <span class="keyword">this</span>;
      self.message= <span class="string">'Hello '</span>;
      self.changeMessage = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        self.message = <span class="string">'Goodbye'</span>;
      };
      self.notes = [
        {id: <span class="number">1</span>, label: <span class="string">'First Note'</span>, done: <span class="literal">false</span>},
        {id: <span class="number">2</span>, label: <span class="string">'Second Note'</span>, done: <span class="literal">false</span>},
        {id: <span class="number">3</span>, label: <span class="string">'Done Note'</span>, done: <span class="literal">true</span>},
        {id: <span class="number">4</span>, label: <span class="string">'Last Note'</span>, done: <span class="literal">false</span>}
      ];

  }]);
  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
</pre></td></tr></table></figure>

<p>Use <code>class=&quot;ng-cloak&quot;</code> to hide <code>\{\{\}\}</code> in angularjs when bootstrap.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="attr_selector">[ng\:cloak]</span>, <span class="attr_selector">[ng-cloak]</span>, <span class="attr_selector">[data-ng-cloak]</span>, <span class="attr_selector">[x-ng-cloak]</span>,<span class="class">.ng-cloak</span>, <span class="class">.x-ng-cloak</span> <span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value"> none <span class="important">!important</span></span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>Each time it hits an <code>ng-controller</code> or an <code>ng-repeat</code> directive, it creates what we
call a scope in AngularJS. A scope is the context for that element. The scope dictates
what each DOM element has access to in terms of functions, variables, and the like.</p>
<p>Also note that while the <code>ng-repeat</code> instances each get their own scope, they still have
access to the parent scope.</p>
<h2 id="more-directives">More Directives</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css">
<span class="class">.done</span> <span class="rules">{ <span class="rule"><span class="attribute">background-color</span>:<span class="value"> green</span></span>;<span class="rule">}</span></span>
<span class="class">.pending</span> <span class="rules">{<span class="rule"><span class="attribute">background-color</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>

<span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-controller</span>=<span class="value">"MainCtrl as ctrl"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span>
       <span class="attribute">ng-class</span>=<span class="value">"ctrl.getNoteClass(note.done)"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"assignee"</span>
          <span class="attribute">ng-show</span>=<span class="value">"note.assignee"</span>
          <span class="attribute">ng-bind</span>=<span class="value">"note.assignee"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
angular.module(<span class="string">'notesApp'</span>, []).controller(<span class="string">'MainCtrl'</span>, [
  <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> self = <span class="keyword">this</span>;
    self.notes = [
      {label: <span class="string">'First Note'</span>, done: <span class="literal">false</span>, assignee: <span class="string">'Shyam'</span>},
      {label: <span class="string">'Second Note'</span>, done: <span class="literal">false</span>},
      {label: <span class="string">'Done Note'</span>, done: <span class="literal">true</span>},
      {label: <span class="string">'Last Note'</span>, done: <span class="literal">false</span>, assignee: <span class="string">'Brad'</span>}
    ];
    self.getNoteClass = <span class="function"><span class="keyword">function</span><span class="params">(status)</span> {</span>
      <span class="keyword">return</span> {
        done: status,
        pending: !status
      };
  };
}]);

</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>AngularJS treats true, nonempty strings, nonzero numbers,
and nonnull JS objects as truthy. </p>
<p>The <code>ng-class</code> directive can take
strings or objects as values. If it is a string,
it simply applies the CSS classes directly.
If it is an object, AngularJS takes a look at each key of the object,
and depending on whether the value for that key is true or false,
applies or removes the CSS class.</p>
<h2 id="ng-repeat">ng-repeat</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"(author, note) in ctrl.notes"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">ng-bind</span>=<span class="value">"author"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
  angular.module(<span class="string">'notesApp'</span>, [])
    .controller(<span class="string">'MainCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
      <span class="keyword">var</span> self = <span class="keyword">this</span>;
      self.notes = {
      shyam: {
        id: <span class="number">1</span>,
        label: <span class="string">'First Note'</span>,
        done: <span class="literal">false</span>
      },
      Misko: {
        id: <span class="number">3</span>,
        label: <span class="string">'Finished Third Note'</span>,
        done: <span class="literal">true</span>
      },
      brad: {
        id: <span class="number">2</span>,
        label: <span class="string">'Second Note'</span>,
        done: <span class="literal">false</span>
      }
    };
  }]);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>Helper variables in <code>ng-repeat</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>First Element: {\{$first}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>Middle Element: {\{$middle}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>Last Element: {\{$last}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>Index of Element: {\{$index}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>At Even Position: {\{$even}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span>&gt;</span>At Odd Position: {\{$odd}}<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> {\{note.label}}<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"status"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.done"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
<span class="keyword">var</span> self = <span class="keyword">this</span>;
self.notes = [
  {id: <span class="number">1</span>, label: <span class="string">'First Note'</span>, done: <span class="literal">false</span>},
  {id: <span class="number">2</span>, label: <span class="string">'Second Note'</span>, done: <span class="literal">false</span>},
  {id: <span class="number">3</span>, label: <span class="string">'Done Note'</span>, done: <span class="literal">true</span>},
  {id: <span class="number">4</span>, label: <span class="string">'Last Note'</span>, done: <span class="literal">false</span>}
];
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p>To optimize performance, <code>ng-repeat</code> caches or reuses DOM elements if
the objects are exactly the same, according to the hash of the object</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">&lt;!-- DOM Elements are reused every time someone clicks --&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">ng-click</span>=<span class="value">"ctrl.changeNotes()"</span>&gt;</span>Change Notes<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"note in ctrl.notes2 track by note.id"</span>&gt;</span>
  \{\{note.$$hashKey}}
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"label"</span>&gt;</span> <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">ng-bind</span>=<span class="value">"note.done"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

<span class="comment">&lt;!-- ng-repeat Across Multiple HTML Elements  --&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
  <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">ng-repeat-start</span>=<span class="value">"note in ctrl.notes"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">ng-repeat-end</span>&gt;</span>
    <span class="tag">&lt;<span class="title">td</span>&gt;</span>Done: <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="karma">Karma</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>sudo npm install karma<span class="attribute">-cli</span> <span class="attribute">-g</span>
npm install karma
npm install karma<span class="attribute">-jasmine</span> karma<span class="attribute">-chrome</span><span class="attribute">-launcher</span>

karma init
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="comment">// File: chapter3/karma.conf.js</span>
<span class="comment">// Karma configuration</span>
module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> {</span>
  config.<span class="keyword">set</span>({
    <span class="comment">// base path that will be used to resolve files and exclude</span>
    basePath: <span class="string">''</span>,
    <span class="comment">// testing framework to use (jasmine/mocha/qunit/...)</span>
    frameworks: [<span class="string">'jasmine'</span>],
    
    <span class="comment">// list of files / patterns to load in the browser</span>
    files: [
      <span class="string">'angular.min.js'</span>,
      <span class="string">'angular-mocks.js'</span>,
      <span class="string">'controller.js'</span>,
      <span class="string">'simpleSpec.js'</span>,
      <span class="string">'controllerSpec.js'</span>
    ],
      
    <span class="comment">// list of files / patterns to exclude</span>
    exclude: [],
    <span class="comment">// web server port</span>
    port: <span class="number">8080</span>,
    
    <span class="comment">// level of logging</span>
    <span class="comment">// possible values: LOG_DISABLE || LOG_ERROR ||</span>
    <span class="comment">// LOG_WARN || LOG_INFO || LOG_DEBUG</span>
    logLevel: config.LOG_INFO,
    
    <span class="comment">// enable / disable watching file and executing tests</span>
    <span class="comment">// whenever any file changes</span>
    autoWatch: <span class="literal">true</span>,
    <span class="comment">// Start these browsers, currently available:</span>
    <span class="comment">// - Chrome</span>
    <span class="comment">// - ChromeCanary</span>
    <span class="comment">// - Firefox</span>
    <span class="comment">// - Opera</span>
    <span class="comment">// - Safari (only Mac)</span>
    <span class="comment">// - PhantomJS</span>
    <span class="comment">// - IE (only Windows)</span>
    browsers: [<span class="string">'Chrome'</span>],
    <span class="comment">// Continuous Integration mode</span>
    <span class="comment">// if true, it captures browsers, runs tests, and exits</span>
    singleRun: <span class="literal">false</span>
  });
};
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>describe(<span class="string">'My Function'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> t;
  <span class="comment">// Similar to setup</span>
  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    t = <span class="literal">true</span>;
  });
  afterEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    t = <span class="literal">null</span>;
  });
  it(<span class="string">'should perform action 1'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(t).toBeTruthy();
  });
  it(<span class="string">'should perform action 2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> expectedValue = <span class="literal">true</span>;
    expect(t).toEqual(expectedValue);
  });
});
</pre></td></tr></table></figure>

<ul>
<li><code>toEqual</code>, does a deep equality check between the two objects,
like array.</li>
<li><code>toBe</code>, expects both items passed to the expect
and the matcher to be the exact same object reference.</li>
<li><code>toBeTruthy</code> and <code>toBeFalsy</code></li>
<li><code>toBeDefined</code>, <code>toBeUndefined</code> and <code>toBeNull</code></li>
<li><code>toContain</code>, array passed to the expect contains the element passed to the matcher</li>
<li><code>toMatch</code>, Used for regular expression checks when the first argument to the expect is a string
that needs to match a specific regular expression pattern.</li>
</ul>
<h2 id="unit-test-for-controller">Unit Test for Controller</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>angular.module(<span class="string">'notesApp'</span>, [])
  .controller(<span class="string">'ListCtrl'</span>, [<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> <span class="keyword">self</span> = this;
    <span class="keyword">self</span>.items = [
      {id: <span class="number">1</span>, label: <span class="string">'First'</span>, done: <span class="keyword">true</span>},
      {id: <span class="number">2</span>, label: <span class="string">'Second'</span>, done: <span class="keyword">false</span>}
    ];
    <span class="keyword">self</span>.getDoneClass = <span class="function"><span class="keyword">function</span><span class="params">(item)</span> {</span>
    <span class="keyword">return</span> {
      finished: item.done,
      unfinished: !item.done
    };
  };
}]);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="comment">// File: chapter3/controllerSpec.js</span>
describe(<span class="string">'Controller: ListCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Instantiate a new version of my module before each test</span>
  beforeEach(module(<span class="string">'notesApp'</span>));
  <span class="keyword">var</span> ctrl;
  
  <span class="comment">// Before each unit test, instantiate a new instance</span>
  <span class="comment">// of the controller</span>
  beforeEach(inject(<span class="function"><span class="keyword">function</span><span class="params">(<span class="variable">$controller</span>)</span> {</span>
    ctrl = <span class="variable">$controller</span>(<span class="string">'ListCtrl'</span>);
  }));
    
  it(<span class="string">'should have items available on load'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    expect(ctrl.items).toEqual([
      {id: <span class="number">1</span>, label: <span class="string">'First'</span>, done: <span class="keyword">true</span>},
      {id: <span class="number">2</span>, label: <span class="string">'Second'</span>, done: <span class="keyword">false</span>}
    ]);
  });
  it(<span class="string">'should have highlight items based on state'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> item = {id: <span class="number">1</span>, label: <span class="string">'First'</span>, done: <span class="keyword">true</span>};
    <span class="keyword">var</span> actualClass = ctrl.getDoneClass(item);
    expect(actualClass.finished).toBeTruthy();
    expect(actualClass.unfinished).toBeFalsy();
    item.done = <span class="keyword">false</span>;
    actualClass = ctrl.getDoneClass(item);
    expect(actualClass.finished).toBeFalsy();
    expect(actualClass.unfinished).toBeTruthy();
  });
});
  
<span class="comment">// karma start my.conf.js</span>
<span class="comment">// The examples and tests in this book were run using version 0.12.16</span>
<span class="comment">// of Karma, and version 1.2.19 of AngularJS (both the angular.js and</span>
<span class="comment">// angular-mocks.js files)</span>
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Jquery]]></title>
    <link href="http://zhpooer.github.io/2014/12/12/jquery-1/"/>
    <id>http://zhpooer.github.io/2014/12/12/jquery-1/</id>
    <published>2014-12-12T02:32:33.000Z</published>
    <updated>2014-12-23T09:16:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="jquery">JQuery</h1>
<p>Css 操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">// 单属性修改</span>
$(<span class="string">'div:eq(0)'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>);
<span class="comment">// 获取</span>
$(<span class="string">'div'</span>).css(<span class="string">'background'</span>);
<span class="comment">// 多属性修改</span>
$(<span class="string">'div'</span>).css({<span class="string">'background'</span>:<span class="string">'red'</span>, <span class="string">'width'</span>:<span class="string">'100px'</span>});
</pre></td></tr></table></figure>

<p>选择器</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">// 子代选择器</span>
$(<span class="string">'div&gt;p'</span>);
<span class="comment">// 后继选择器</span>
$(<span class="string">'div+p'</span>);
<span class="comment">// 兄弟选择器</span>
$(<span class="string">'div~p'</span>);

<span class="comment">// 过滤选择器</span>
$(<span class="string">'ul:eq(3) li:not(:first)'</span>)

$(<span class="string">'ul li:lt(12):gt(3)'</span>); <span class="comment">// 这样不行</span>

<span class="comment">// 筛选选择器</span>
$().parent()
$().children(<span class="string">'p'</span>)
$().siblings()

<span class="comment">// 滑动切换动画</span>
$().slideDown(<span class="number">1000</span>);
<span class="comment">// 向下滑动切换</span>
$().slideUp(<span class="number">500</span>);
$().slideToggle(<span class="number">600</span>);
<span class="comment">// 先清空排队动画 , 再执行动画 !!!!!!!!!!!</span>
$().stop().slideUp(<span class="number">500</span>);

<span class="comment">// 排他</span>
$(<span class="keyword">this</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>).siblings().css(<span class="string">'background'</span>, <span class="string">'blue'</span>)
</pre></td></tr></table></figure>

<p>jq动画机制, 里面的所有动画都遵循排队机制, 所有没有执行完的动画都会
排队等待执行. </p>
<p><em>Jquery中的选择器是层层过滤的</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">// 获得索引</span>
$(<span class="keyword">this</span>).index();
$(<span class="string">'li'</span>).eq(index);

<span class="comment">// 修改标签属性</span>
$(<span class="keyword">this</span>).attr(<span class="string">'key'</span>,<span class="string">'value'</span>);

<span class="comment">// 类属性操作</span>
$(<span class="keyword">this</span>).toggleClass(<span class="string">"current"</span>);
$(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>);
$(<span class="keyword">this</span>).removeClass(<span class="string">"current"</span>);

<span class="comment">// 透明度动画</span>
$(<span class="keyword">this</span>).fadeOut(); <span class="comment">// 淡出</span>
$(<span class="keyword">this</span>).fadeIn(); <span class="comment">// 淡入</span>
$(<span class="keyword">this</span>).fadeTo(动画时间, <span class="number">0.5</span>); <span class="comment">// 透明到</span>
</pre></td></tr></table></figure>

<h1 id="-">节点控制</h1>
<p>节点控制就是对文档当中的标签控制</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="keyword">var</span> tag = $(<span class="string">'&lt;li&gt;ok&lt;/li&gt;'</span>);
$(<span class="keyword">this</span>).append(tag);
<span class="comment">// 从内部, 前面插入</span>
$(<span class="keyword">this</span>).prepend(tag);
<span class="comment">// 同级之后</span>
$(<span class="keyword">this</span>).after(tag);
$(<span class="keyword">this</span>).before(tag);

<span class="comment">// 直接删除</span>
$(<span class="keyword">this</span>).remove();
<span class="comment">// 清空内部节点</span>
$(<span class="keyword">this</span>).empty();

<span class="comment">//获取 or 修改参数</span>
$(<span class="keyword">this</span>).val();

<span class="comment">// 替换指定的节点</span>
$(<span class="keyword">this</span>).replaceWith(<span class="string">'&lt;h3&gt;&lt;/h3&gt;'</span>);

<span class="comment">// 对现有节点的修改, 都是选择器的形式</span>
$(<span class="keyword">this</span>).insertAfter(); <span class="comment">// 把*插入*之后</span>
$(<span class="keyword">this</span>).insertBefore(); <span class="comment">// 把*插入*之前</span>

<span class="comment">// 链式动画</span>
$(<span class="keyword">this</span>).animate({left: <span class="number">300</span>, top: <span class="number">300</span>}, <span class="number">500</span>).animate({top: <span class="number">200</span>}, <span class="number">300</span>);

<span class="comment">// 加工函数</span>
$(<span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span><span class="params">(index, element)</span>{</span>
   $(element).css(<span class="string">'background-position'</span>,<span class="string">'0 '</span> + num + <span class="string">'px'</span>);
});

<span class="comment">// 浏览器的宽度 高度</span>
$(window).width();

$(window).scrollTop();
$(<span class="keyword">this</span>).scrollLeft();

$(<span class="keyword">this</span>).animate({scrollTop:<span class="number">2000</span> }, <span class="number">500</span>);
$(<span class="string">'html, body'</span>).stop().animate({scrollTop: <span class="number">2000</span>}, <span class="number">500</span>)
</pre></td></tr></table></figure>

<p>网页上所有弹窗效果都可以用创建节点实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>$(window).mousemove(<span class="function"><span class="keyword">function</span><span class="params">(e)</span>{</span>
  event.pageX; evnet.pageY;
})
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript-基础]]></title>
    <link href="http://zhpooer.github.io/2014/12/07/js-%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhpooer.github.io/2014/12/07/js-基础/</id>
    <published>2014-12-07T11:13:56.000Z</published>
    <updated>2014-12-27T11:29:14.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">基础</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre>var <span class="keyword">div</span> = document.getElementById();
<span class="keyword">div</span>.style.display = <span class="string">"block"</span>;
<span class="keyword">div</span>.className = <span class="string">"box"</span>;

<span class="comment">// 基于换肤</span>
link.href = <span class="string">"css2.css"</span>;

<span class="keyword">div</span>.onmouseover = function(){
   <span class="keyword">this</span>.style.display = <span class="string">"block"</span>;
}

<span class="keyword">div</span>.innerHTML = <span class="string">"&lt;font&gt;&lt;/font&gt;"</span>; 

var inputArr = document.getElementByTagName(<span class="string">"input"</span>);
inputArr[<span class="number">0</span>].checked = <span class="keyword">true</span>;

<span class="comment">// update 会在一秒后执行</span>
setInterval(update, <span class="number">1000</span>);
update();

<span class="comment">// 让div移动起来</span>
<span class="keyword">div</span>.style.left = oDiv.offsetLeft + <span class="number">5</span> + <span class="string">'px'</span>;
<span class="comment">// 不包括外边距的实际高度</span>
odiv.offsetWidth;

<span class="comment">// ui 所有的li的长度</span>
vaqr uiLength = li.offsetWidth*aLi.length;
<span class="comment">// 复制一份</span>
ui.innerHTML += ui.innerHTML;

<span class="comment">// 获取计算后的样式</span>
<span class="comment">// IE</span>
<span class="keyword">div</span>.currentStyle.width;
<span class="comment">// Firefox</span>
getComputedStyle(<span class="keyword">div</span>, flase).width;
</pre></td></tr></table></figure>

<p>JS类型</p>
<ul>
<li>nubmer</li>
<li>string</li>
<li>object</li>
<li>undefined</li>
<li>function</li>
<li>boolean</li>
</ul>
<p>字符串转换</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// 从字符串中提取数字</span>
<span class="built_in">parseInt</span>(<span class="string">"12px34"</span>); <span class="comment">// 12</span>
<span class="built_in">parseInt</span>(<span class="string">"xxx"</span>);    <span class="comment">// NaN</span>

<span class="built_in">parseFloat</span>(<span class="string">"12.1"</span>);
<span class="number">33</span> + <span class="literal">NaN</span>;    <span class="comment">// NaN</span>
<span class="built_in">isNaN</span>(<span class="literal">NaN</span>);
 <span class="literal">NaN</span> == <span class="literal">NaN</span>;  <span class="comment">// false</span>

<span class="string">"12"</span> - <span class="string">"5"</span>;  <span class="comment">// 7</span>

<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
  <span class="built_in">arguments</span>.length();
  <span class="built_in">arguments</span>.callee.caller;
}
</pre></td></tr></table></figure>

<p>数组</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre>var arr = [<span class="number">1</span>, <span class="number">2</span>];
arr.<span class="keyword">length</span> = <span class="number">0</span>; <span class="regexp">//</span> 清空数组

// 尾部操作
arr.<span class="keyword">push</span>(<span class="number">3</span>);
arr.<span class="keyword">pop</span>();
<span class="regexp">//</span> 头部
arr.<span class="keyword">shift</span>();
arr.<span class="keyword">unshift</span>(<span class="number">3</span>);

arr.concat(arr2);
var str = arr.<span class="keyword">join</span>(<span class="string">'_'</span>);
str.<span class="keyword">split</span>(<span class="string">'_'</span>);

arr.<span class="keyword">splice</span>(起始, <span class="keyword">length</span>); <span class="regexp">//</span> 从中间删除

arr.<span class="keyword">splice</span>(起始, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'b'</span>);<span class="regexp">//</span> 从中间插入
arr.<span class="keyword">splice</span>(起始, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>); <span class="regexp">//</span> 替换
</pre></td></tr></table></figure>

<h1 id="dom">DOM</h1>
<p>文档碎片, 只渲染一次, 提高速度(插入), 理论上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>var oFrag = document<span class="preprocessor">.createDocumentFragment</span>()<span class="comment">;</span>
oFrag<span class="preprocessor">.appendChild</span>(li)<span class="comment">;</span>
ul<span class="preprocessor">.appendChild</span>(oFrag)<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre>// 火狐 下空行当做一个子节点
var nodes = div<span class="preprocessor">.childNodes</span><span class="comment">;</span>

// <span class="number">3</span> 文本节点
// <span class="number">1</span> 元素节点
div<span class="preprocessor">.nodeType</span><span class="comment">;</span>
if(childNodes[i]<span class="preprocessor">.nodeType</span> == <span class="number">1</span>) {}

// childNodes 的兼容版, 但是包括空字符文本节点
div<span class="preprocessor">.children</span><span class="comment">;</span>
div<span class="preprocessor">.parrentNode</span><span class="comment">;</span>

// 用来定位的父元素
div<span class="preprocessor">.offsetParent</span><span class="comment">;</span>

// 获取第一个子节点
oFirst = oUl<span class="preprocessor">.firstElementChild</span>  || oUl<span class="preprocessor">.firstCihld</span>
oList = oUl<span class="preprocessor">.lastElementChild</span>  || oUl<span class="preprocessor">.lastChild</span><span class="comment">;</span>

oNext = oUl<span class="preprocessor">.nextSibling</span>  || oUl<span class="preprocessor">.nextElementSibling</span><span class="comment">;</span>
oPrevious = oUl<span class="preprocessor">.previousSibling</span>  || oUl<span class="preprocessor">.previousElementSibling</span><span class="comment">;</span>

// 获取文本属性
oTxt<span class="preprocessor">.value</span> = <span class="string">"123"</span><span class="comment">;</span>
oTxt<span class="preprocessor">.setAttribute</span>(<span class="string">"value"</span>, <span class="string">"123"</span>)<span class="comment">;</span>

var id = oTxt<span class="preprocessor">.getAttribute</span>(<span class="string">"value"</span>)<span class="comment">;</span>

// 通过 class 来选择元素
var aEle = div<span class="preprocessor">.getElementsByTagName</span>(<span class="string">'*'</span>)<span class="comment">;</span>
ale[<span class="number">0</span>]<span class="preprocessor">.className</span><span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
</pre></td><td class="code"><pre>var returnedNode = someNode<span class="preprocessor">.appendChild</span>(newNode)<span class="comment">;</span>
log(returnedNode == newNode)<span class="comment">; // true</span>

returnedNode = someNode<span class="preprocessor">.insertBefore</span>(newNode, null)<span class="comment">;</span>
log(returnedNode == someNode<span class="preprocessor">.lastChild</span>)<span class="comment">; // true</span>

returnedNode = someNode<span class="preprocessor">.insertBefore</span>(newNode, someNode<span class="preprocessor">.firstChild</span>)<span class="comment">;</span>
log(returnedNode == someNode<span class="preprocessor">.firstChild</span>)<span class="comment">; // true</span>

returnedNode = someNode<span class="preprocessor">.insertBefore</span>(newNode, someNode<span class="preprocessor">.lastChild</span>)<span class="comment">;</span>
log(newNode == someNode<span class="preprocessor">.childNodes</span>[someNode<span class="preprocessor">.childNodes</span><span class="preprocessor">.length</span> - <span class="number">2</span>])<span class="comment">;</span>

// 替换
var returnedNode = someNode<span class="preprocessor">.replaceChild</span>(newNode, someNode<span class="preprocessor">.firstchild</span>)<span class="comment">;</span>

var formerFirstChild = someNode<span class="preprocessor">.removeChild</span>(someNode<span class="preprocessor">.firstChild</span>)<span class="comment">;</span>

var html = document<span class="preprocessor">.documentElement</span><span class="comment">;</span>
html == docuemnt<span class="preprocessor">.childNodes</span>[<span class="number">0</span>]<span class="comment">;</span>
html == docuemnt<span class="preprocessor">.firstChild</span><span class="comment">;</span>

var body = document<span class="preprocessor">.body</span><span class="comment">;</span>
var doctype = document<span class="preprocessor">.doctype</span><span class="comment">;</span>

// 取得完整的URL
var url = document<span class="preprocessor">.URL</span><span class="comment">;</span>

// 取得域名
var domain = document<span class="preprocessor">.domain</span><span class="comment">;</span>
// 获得来源域名的URL
var referer = document<span class="preprocessor">.referer</span><span class="comment">;</span>

// 当前页面是 p2p<span class="preprocessor">.wrox</span><span class="preprocessor">.com</span>
document<span class="preprocessor">.domain</span> = <span class="string">"wrox.com"</span><span class="comment">;  // ok</span>
document<span class="preprocessor">.domain</span> = <span class="string">"nczonline.net"</span><span class="comment">; // failed</span>
// 查找元素

document<span class="preprocessor">.getElementById</span>(<span class="string">"myDiv"</span>)<span class="comment">;</span>
// 返回 HTMLCollection
var imgs = document<span class="preprocessor">.getElementByTagName</span>(<span class="string">"img"</span>)<span class="comment">;</span>
imgs<span class="preprocessor">.length</span><span class="comment">;</span>
imgs[<span class="number">0</span>]<span class="preprocessor">.src</span><span class="comment">;</span>
imgs<span class="preprocessor">.item</span>(<span class="number">0</span>)<span class="preprocessor">.src</span><span class="comment">;</span>
imgs<span class="preprocessor">.namedItem</span>(<span class="string">"myImage"</span>)<span class="comment">;</span>

// 获取文档中的所有元素
var allElements = document<span class="preprocessor">.getElementByTagName</span>(<span class="string">"*"</span>)

document<span class="preprocessor">.anchors</span><span class="comment">;</span>
document<span class="preprocessor">.forms</span><span class="comment">;</span>
document<span class="preprocessor">.images</span><span class="comment">;</span>
document<span class="preprocessor">.links</span><span class="comment">;</span>

// 文档写入
document<span class="preprocessor">.write</span>(<span class="string">"&lt;strong&gt;"</span> + (new Date())<span class="preprocessor">.toString</span>() + <span class="string">"&lt;/strong&gt;"</span>)<span class="comment">;</span>

element<span class="preprocessor">.tagName</span><span class="preprocessor">.toLowerCase</span>() == <span class="string">"div"</span><span class="comment">; // 判断是不是div</span>

var div = document<span class="preprocessor">.getElementBy</span>(<span class="string">"myDiv"</span>)<span class="comment">;</span>
div<span class="preprocessor">.tagName</span> == div<span class="preprocessor">.nodeName</span><span class="comment">; // true</span>
div<span class="preprocessor">.id</span><span class="comment">;</span>
div<span class="preprocessor">.className</span><span class="comment">;</span>
div<span class="preprocessor">.title</span><span class="comment">;</span>
div<span class="preprocessor">.lang</span><span class="comment">;</span>
div<span class="preprocessor">.dir</span><span class="comment">;</span>
div<span class="preprocessor">.getAttribute</span>(<span class="string">"title"</span>)<span class="comment">;</span>
div<span class="preprocessor">.removeAttribute</span>(<span class="string">"title"</span>)<span class="comment">;</span>
div<span class="preprocessor">.setAttribute</span>(<span class="string">"title"</span>, <span class="string">"xx"</span>)<span class="comment">;</span>

element<span class="preprocessor">.attributes</span><span class="preprocessor">.getNameItem</span>(<span class="string">"id"</span>)<span class="preprocessor">.nodeValue</span><span class="comment">;</span>
element<span class="preprocessor">.attributes</span><span class="preprocessor">.removeNameItem</span>(<span class="string">"id"</span>)<span class="comment">;</span>

var div = document<span class="preprocessor">.createElement</span>(<span class="string">"div"</span>)<span class="comment">;</span>
div<span class="preprocessor">.di</span> = <span class="string">""</span><span class="comment">;</span>
div<span class="preprocessor">.className</span> = <span class="string">"box"</span><span class="comment">;</span>

document<span class="preprocessor">.body</span><span class="preprocessor">.appendChild</span>(div)<span class="comment">;</span>

document<span class="preprocessor">.createTextNode</span>(<span class="string">"Hello world."</span>)<span class="comment">;</span>
//  合并多个文本节点
element<span class="preprocessor">.normalize</span>()<span class="comment">;</span>

val attr = document<span class="preprocessor">.createAttribute</span>(<span class="string">"align"</span>)<span class="comment">;</span>
attr<span class="preprocessor">.value</span> = <span class="string">"left"</span><span class="comment">;</span>
element<span class="preprocessor">.setAttributeNode</span>(attr)<span class="comment">;</span>

ul<span class="preprocessor">.removeChild</span>(btn<span class="preprocessor">.parentNode</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>根据html5属性, 自定义特性应该加上 <code>data-</code>前缀</p>
<h1 id="-">事件</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre>document.onclick = <span class="function"><span class="keyword">function</span><span class="params">(ev)</span>{</span>
  <span class="comment">// 可视区距离</span>
  <span class="keyword">if</span>(ev) {
    <span class="comment">// firefox </span>
    ev.clientX; ev.clientY;
  } <span class="keyword">else</span> {
    <span class="comment">// IE</span>
    event.clientX; event.clientY;
  }
  <span class="comment">// or  </span>
  <span class="keyword">var</span> oEent = ev || event;
  <span class="comment">// 阻止冒泡</span>
  oEvent.cancelBubble = <span class="literal">true</span>;
}

<span class="comment">// 滚动条距离 // firefox </span>
document.documentElement.scrollTop;
<span class="comment">// chrome</span>
document.body.scrollTop;

<span class="comment">// onpress = onkeydown + onkeyup;</span>
document.onkeydown = <span class="function"><span class="keyword">function</span><span class="params">(ev)</span>{</span>
  <span class="comment">// shiftKey altKey</span>
  <span class="keyword">if</span>(en.ctrlKey){}
}

<span class="comment">// 右键菜单</span>
document.oncontextmenu = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
  <span class="keyword">if</span>(ev.preventDeault){
   <span class="comment">// 火狐</span>
    ev.preventDefault();
  }
  <span class="comment">// 阻止默认行为</span>
  <span class="keyword">return</span> <span class="literal">false</span>;
}
<span class="comment">// 阻止提交  </span>
form.onsubmit = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span><span class="keyword">return</span> <span class="literal">false</span>;}
<span class="comment">// 阻止填入</span>
txt.onkeydown = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span><span class="keyword">return</span> <span class="literal">false</span>;}
</pre></td></tr></table></figure>

<h1 id="cookie">cookie</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>document.cookie = <span class="string">"user=blue;expires="</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>());
<span class="comment">// 不会覆盖</span>
document.cookie = <span class="string">"pass=123"</span>;

<span class="comment">// 获得</span>
document.cookie.split(<span class="string">"; "</span>);

<span class="comment">// 删除cookie</span>
<span class="keyword">var</span> expires = <span class="string">"前一天"</span>;
document.cookie = <span class="string">"user=blue;expires="</span> + expires;
</pre></td></tr></table></figure>

<h1 id="-">运动</h1>
<ol>
<li>在开始运动时, 关闭已有定时器</li>
<li>运动开始和停止隔开</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>
<span class="comment">// target must be a integer</span>
<span class="function"><span class="keyword">function</span> <span class="title">startMove</span><span class="params">(target)</span>{</span>
  clearInterval(obj.timer);
  <span class="comment">// 缓存运动</span>
  <span class="keyword">var</span> speed = (targetOffset - div.offsetLeft)/<span class="number">8</span>;
  speed = speed&lt;<span class="number">0</span>?<span class="built_in">Math</span>.floor(speed):<span class="built_in">Math</span>.ceil(speed);
  obj.timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>}
    <span class="comment">// 匀速运动 // 缓存运动直接等于</span>
    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(oDiv.offsetLeft-target)&lt;speed) {
      clearInterval(timer);
      oDiv.style.left = iTarget + <span class="string">"px"</span>;
    } <span class="keyword">else</span> {
       move();
    }
  , <span class="number">30</span>);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span><span class="params">(obj, attr)</span>{</span>
  <span class="keyword">if</span>(obj.currentStyle){ <span class="keyword">return</span> obj.currentStyle[attr];}
  <span class="keyword">else</span> { <span class="keyword">return</span> getComputedStyle(obj, flase);}
}

<span class="function"><span class="keyword">function</span> <span class="title">startMov</span><span class="params">(obj, attr, iTarget)</span>{</span>
  clearInterval(obj.timer);
  obj.timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="keyword">var</span> iCur;
    <span class="keyword">if</span>(attr == <span class="string">'opacity'</span>){
      iCur = <span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>)
    } <span class="keyword">else</span> {
      iCur = <span class="built_in">parseInt</span>(getStyle(obj, attr));
    }
    <span class="keyword">var</span> iSpeed = (iTarget - iCur)/<span class="number">8</span>;
    iSpeed = iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>,ceil(iSpeed): <span class="built_in">Math</span>.floor(iSpeed);
    <span class="keyword">if</span>(iCur == iTarget){ clearInterval(obj.timer);}
    <span class="keyword">else</span> {
      <span class="keyword">if</span>(attr == <span class="string">'opacity'</span>){
        obj.style.filter = <span class="string">'alpha(opacity:'</span> + (iCur + iSpeed)+ <span class="string">')'</span>
        obj.style.filter.opacity = ( iCur + iSpeed)/<span class="number">100</span>;
      } <span class="keyword">else</span> {
        obj.style[attr] = iCur + iSpeed + <span class="string">"px"</span>;
      }
    }
  }, <span class="number">30</span>);
}
</pre></td></tr></table></figure>

<h2 id="-">完美运动</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">startMove</span><span class="params">(obj, json, fn)</span>
{</span>
    clearInterval(obj.timer);
    obj.timer=setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
        <span class="keyword">var</span> bStop=<span class="literal">true</span>;		<span class="comment">//这一次运动就结束了——所有的值都到达了</span>
        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)
        {
            <span class="comment">//1.取当前的值</span>
            <span class="keyword">var</span> iCur=<span class="number">0</span>;

            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)
            {
                iCur=<span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>);
            }
            <span class="keyword">else</span>
            {
                iCur=<span class="built_in">parseInt</span>(getStyle(obj, attr));
            }

            <span class="comment">//2.算速度</span>
            <span class="keyword">var</span> iSpeed=(json[attr]-iCur)/<span class="number">8</span>;
            iSpeed=iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);

            <span class="comment">//3.检测停止</span>
            <span class="keyword">if</span>(iCur!=json[attr])
            {
                bStop=<span class="literal">false</span>;
            }

            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)
            {
                obj.style.filter=<span class="string">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class="string">')'</span>;
                obj.style.opacity=(iCur+iSpeed)/<span class="number">100</span>;
            }
            <span class="keyword">else</span>
            {
                obj.style[attr]=iCur+iSpeed+<span class="string">'px'</span>;
            }
        }

        <span class="keyword">if</span>(bStop)
        {
            clearInterval(obj.timer);

            <span class="keyword">if</span>(fn)
            {
                fn();
            }
        }
    }, <span class="number">30</span>)
}
</pre></td></tr></table></figure>

<h2 id="-">弹性运动</h2>
<ul>
<li>加速运动, 每次循环 <code>speed++</code></li>
<li>减速运动, 每次循环 <code>speed--</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">startMove</span><span class="params">()</span>{</span>
  <span class="transposed_variable">obj.</span>timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    iSpeed += (iTarget-height)/<span class="number">5</span>;
    iSpeed *= <span class="number">0.7</span>;
    <span class="keyword">if</span>(<span class="transposed_variable">Math.</span><span class="built_in">abs</span>(speed)&lt;<span class="number">1</span> && <span class="transposed_variable">Math.</span><span class="built_in">abs</span>(iTarget-height)&lt;<span class="number">1</span>)<span class="cell">{
      clearInterval(obj.timer);
      obj.style.height = iTarget + <span class="string">'px'</span>;
    }</span> <span class="keyword">else</span> <span class="cell">{
      height += iSpeed;
      obj.style.height = height + <span class="string">'px'</span>;
    }</span> 
  }, <span class="number">30</span>);
}
</pre></td></tr></table></figure>

<h2 id="-">碰撞运动</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre><span class="reserved">var</span> timer=<span class="literal">null</span>;

<span class="reserved">var</span> iSpeedX=<span class="number">0</span>;
<span class="reserved">var</span> iSpeedY=<span class="number">0</span>;

<span class="reserved">function</span> startMove()
{
    clearInterval(timer);

    timer=setInterval(<span class="reserved">function</span> (){
        <span class="reserved">var</span> oDiv=<span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);

        iSpeedY+=<span class="number">3</span>;

        <span class="reserved">var</span> l=oDiv.offsetLeft+iSpeedX;
        <span class="reserved">var</span> t=oDiv.offsetTop+iSpeedY;

        <span class="keyword">if</span>(t&gt;=<span class="built_in">document</span>.documentElement.clientHeight-oDiv.offsetHeight)
        {
            iSpeedY*=-<span class="number">0.8</span>;
            iSpeedX*=<span class="number">0.8</span>;
            t=<span class="built_in">document</span>.documentElement.clientHeight-oDiv.offsetHeight;
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(t&lt;=<span class="number">0</span>)
        {
            iSpeedY*=-<span class="number">1</span>;
            iSpeedX*=<span class="number">0.8</span>;
            t=<span class="number">0</span>;
        }

        <span class="keyword">if</span>(l&gt;=<span class="built_in">document</span>.documentElement.clientWidth-oDiv.offsetWidth)
        {
            iSpeedX*=-<span class="number">0.8</span>;
            l=<span class="built_in">document</span>.documentElement.clientWidth-oDiv.offsetWidth;
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=<span class="number">0</span>)
        {
            iSpeedX*=-<span class="number">0.8</span>;
            l=<span class="number">0</span>;
        }

        <span class="keyword">if</span>(Math.abs(iSpeedX)&lt;<span class="number">1</span>)
        {
            iSpeedX=<span class="number">0</span>;
        }

        <span class="keyword">if</span>(Math.abs(iSpeedY)&lt;<span class="number">1</span>)
        {
            iSpeedY=<span class="number">0</span>;
        }

        <span class="keyword">if</span>(iSpeedX==<span class="number">0</span> && iSpeedY==<span class="number">0</span> && t==<span class="built_in">document</span>.documentElement.clientHeight-oDiv.offsetHeight)
        {
            clearInterval(timer);
            alert(<span class="string">'停止'</span>);
        }
        <span class="keyword">else</span>
        {
            oDiv.style.left=l+<span class="string">'px'</span>;
            oDiv.style.top=t+<span class="string">'px'</span>;
        }

        <span class="built_in">document</span>.title=iSpeedX;
    }, <span class="number">30</span>);
}
</pre></td></tr></table></figure>

<h1 id="-">高级事件</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">// IE</span>
<span class="keyword">if</span>(obj.attachEvent){
  obj.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    <span class="keyword">this</span>;  <span class="comment">// this is window</span>
  }); 
} <span class="keyword">else</span> {
  <span class="comment">// FF</span>
  oBtn.addEventListener(<span class="string">'click'</span>, func, <span class="literal">false</span>); <span class="comment">// this is oBtn</span>
}

obj.detachEvent(<span class="string">'onclick'</span>, fun);
obj.removeEventListener(<span class="string">'onclick'</span>, fun);

<span class="comment">// IE 捕获所有事件</span>
obj.setCapture();
<span class="comment">// IE 释放所有事件</span>
obj.releaseCapture();

<span class="comment">// ie chrome 鼠标滚轮 </span>
obj.onmousewheel = func;
<span class="comment">// FF DOM 事件</span>
obj.addEventistener(<span class="string">"DOMMouseScroll"</span>, func);
</pre></td></tr></table></figure>

<h1 id="-">字符串操作</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>str.search(<span class="string">'d'</span>);  <span class="comment">// 返回要查找的字符串 第一次出现的位置</span>
str.substring(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 不包含最后一个位子</span>

<span class="keyword">var</span> re = <span class="regexp">/\d+/g</span>; <span class="comment">// m multiline</span>
str.match(re);
re.text(str);

<span class="comment">// 去首尾空格</span>
<span class="keyword">var</span> str = <span class="regexp">/^\s*|\s*$/</span>;
<span class="comment">// 匹配中文</span>
<span class="keyword">var</span> str = <span class="regexp">/\u4e00-\u9fa5/</span>;
<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span> + className + <span class="string">'\\b'</span>, <span class="string">'i'</span>);
</pre></td></tr></table></figure>

<h1 id="-">图片预加载</h1>
<p>预判加载, 自动加载下一张图片</p>
<p>延迟加载, 先加载html框架, 在加载图片</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> img = <span class="keyword">new</span> Imgage();
img.src = <span class="string">"http://..."</span>;
</pre></td></tr></table></figure>

<h1 id="-">解决跨域</h1>
<ol>
<li><code>document.domain = &#39;a.com&#39;</code></li>
<li>服务器代理</li>
<li>jsonp, json + padding</li>
<li>使用 iframe</li>
<li>html5, postMessage</li>
</ol>
<h1 id="tips">Tips</h1>
<p>mouseover, mouseout 连续触发问题, 可以用 mouseenter, mouseleave 替换</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap]]></title>
    <link href="http://zhpooer.github.io/2014/12/06/bootstrap-1/"/>
    <id>http://zhpooer.github.io/2014/12/06/bootstrap-1/</id>
    <published>2014-12-06T08:08:18.000Z</published>
    <updated>2014-12-07T02:32:53.000Z</updated>
    <content type="html"><![CDATA[<p>There are many websites that offer Bootstrap themes. </p>
<ul>
<li><a href="http://bootswatch.com" target="_blank">http://bootswatch.com</a> (free)</li>
<li><a href="http://startbootstrap.com" target="_blank">http://startbootstrap.com</a> (free)</li>
<li><a href="http://jobpixels.com" target="_blank">http://jobpixels.com</a> (free)</li>
<li><a href="http://bootstrappage.com" target="_blank">http://bootstrappage.com</a> (free and paid)</li>
<li><a href="http://wrapbootstrap.com" target="_blank">http://wrapbootstrap.com</a> (paid)</li>
<li><a href="http://themes.walkingpixels.com" target="_blank">http://themes.walkingpixels.com</a> (paid)</li>
<li><a href="http://themeforest.net" target="_blank">http://themeforest.net</a> (paid)</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="code"><pre><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>A simple blog <span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-
                                   scale=1.0"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/custom.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">class</span>=<span class="value">"navbar navbar-default"</span> <span class="attribute">role</span>=<span class="value">"navigation"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"navbar-header"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>
                  <span class="attribute">class</span>=<span class="value">"navbar-toggle"</span>
                  <span class="attribute">data-toggle</span>=<span class="value">"collapse"</span>
                  <span class="attribute">data-target</span>=<span class="value">"#bs-example-navbar-collapse-1"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">button</span>&gt;</span>
          <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"navbar-brand"</span>
             <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"collapse navbar-collapse"</span>
             <span class="attribute">id</span>=<span class="value">"bs-example-navbar-collapse-1"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"nav navbar-nav"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"active"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Archive<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">nav</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"jumbotron"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">h1</span>&gt;</span>A simple blog<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">article</span>&gt;</span>
          <span class="tag">&lt;<span class="title">header</span>&gt;</span>
            <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Extending Bootstrap<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
            <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">time</span> <span class="attribute">pubdate</span>=<span class="value">"pubdate"</span>&gt;</span>1/12/2012 3:36 PM<span class="tag">&lt;/<span class="title">time</span>&gt;</span>
            &middot; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Blogger<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">header</span>&gt;</span>
          <span class="tag">&lt;<span class="title">p</span>&gt;</span>Recently I stumbled on a book on extending Twitter
          Bootstrap and it really...<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
          <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"read-more"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Read more &raquo;<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
          <span class="tag">&lt;<span class="title">footer</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list-inline"</span>&gt;</span>
              <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-primary"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
              <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-primary"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
              <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-primary"</span>&gt;</span>LESS<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
              <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-primary"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
              <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-primary"</span>&gt;</span>Grunt<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
          <span class="tag">&lt;/<span class="title">footer</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">article</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://code.jquery.com/jquery.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- `@import "bootstrap/bootstrap";` --&gt;</span>
<span class="comment">&lt;!-- recess less/main.less --compile &gt; css/main.css --&gt;</span>
<span class="comment">&lt;!-- Remove it --&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/bootstrap.min.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/custom.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
<span class="comment">&lt;!-- Add it --&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"main.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>/&gt;</span>
</pre></td></tr></table></figure>

<h1 id="customizing-variables">customizing variables</h1>
<p><code>custom-variables.less</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>@brand<span class="attribute">-color</span>: <span class="variable">#bada55</span>;
@navbar<span class="attribute">-default</span><span class="attribute">-bg</span>: darken(@brand<span class="attribute">-primary</span>, <span class="number">10</span><span class="subst">%</span>);
@navbar<span class="attribute">-default</span><span class="attribute">-brand</span><span class="attribute">-hover</span><span class="attribute">-color</span>: <span class="variable">#fff</span>;
@navbar<span class="attribute">-default</span><span class="attribute">-link</span><span class="attribute">-color</span>: <span class="variable">#fff</span>;
@navbar<span class="attribute">-default</span><span class="attribute">-link</span><span class="attribute">-active</span><span class="attribute">-color</span>: lighten(@brand<span class="attribute">-primary</span>, <span class="number">25</span><span class="subst">%</span>);
@navbar<span class="attribute">-default</span><span class="attribute">-link</span><span class="attribute">-active</span><span class="attribute">-bg</span>: darken(@brand<span class="attribute">-primary</span>, <span class="number">20</span><span class="subst">%</span>);
@jumbotron<span class="attribute">-bg</span>: lighten(@brand<span class="attribute">-primary</span>, <span class="number">30</span><span class="subst">%</span>);
</pre></td></tr></table></figure>

<p><code>main.less</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> <span class="string">"custom-theme"</span></span>;
<span class="at_rule">@<span class="keyword">import</span> <span class="string">"custom-variables"</span></span>;
</pre></td></tr></table></figure>

<p><code>custom-theme.less</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="class">.content</span> {<span class="class">.make-md-column</span>(9);}
<span class="tag">article</span> {<span class="attribute">margin-bottom</span><span class="value">: <span class="number">40</span>px;</span>}
<span class="class">.sidebar</span> {<span class="class">.make-md-column</span>(3);}
<span class="class">.sidebar-avatar</span> {
  <span class="attribute">display</span><span class="value">: block;</span>
  <span class="attribute">margin-bottom</span><span class="value">: <span class="number">20</span>px;</span>
  <span class="attribute">max-width</span><span class="value">: <span class="number">100</span>%;</span>
}
<span class="class">.sidebar-bio</span> {<span class="attribute">color</span><span class="value">: @gray;</span>}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"jumbotron"</span>&gt;</span>
      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">h1</span>&gt;</span>A simple blog<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">article</span>&gt;</span>
      <span class="tag">&lt;<span class="title">header</span>&gt;</span>
        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Extending Bootstrap<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">time</span> <span class="attribute">pubdate</span>=<span class="value">"pubdate"</span>&gt;</span>1/12/2012 3:36 PM<span class="tag">&lt;/<span class="title">time</span>&gt;</span>
        &middot; <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Blogger<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">header</span>&gt;</span>
      <span class="tag">&lt;<span class="title">p</span>&gt;</span>Recently I stumbled on a book on extending Twitter
      Bootstrap and it really ...<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
      <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"read-more"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Read more
      &raquo;<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
      <span class="tag">&lt;<span class="title">footer</span>&gt;</span>
        <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list-inline"</span>&gt;</span>
          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-
                                 primary"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-
                                 primary"</span>&gt;</span>CSS<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-
                                 primary"</span>&gt;</span>LESS<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-
                                 primary"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
          <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"label label-
                                 primary"</span>&gt;</span>Grunt<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">footer</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">article</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">aside</span> <span class="attribute">class</span>=<span class="value">"sidebar"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"sidebar-avatar"</span> <span class="attribute">src</span>=<span class="value">"http://
                                     lorempixel.com/400/400/cats"</span> <span class="attribute">alt</span>=<span class="value">"Avatar"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"sidebar-bio"</span>&gt;</span>Christoffer is a web developer
    that Lorem ipsum dolor sit amet, consectetur
    adipisicing elit. Asperiores, maxime, neque?
    Assumenda at commodi et eum illum, incidunt ipsa
    laborum molestias, necessitatibus numquam quod
    ratione sint vero. Amet, facilis iusto. <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">aside</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="grunt">Grunt</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>sudo npm <span class="keyword">install</span> –g grunt-cli

npm init
npm <span class="keyword">install</span> grunt
npm <span class="keyword">install</span> grunt-contrib-<span class="operator">less</span>
npm <span class="keyword">install</span> grunt-contrib-watch
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span> <span class="params">(grunt)</span> {</span>
  <span class="comment">// Grunt configuration</span>
  grunt.initConfig({
    less: {
      app: {
        files: {<span class="string">"less/main.less"</span>: <span class="string">"css/main.css"</span>}
      }
    },
    watch: {
      styles: {
        files: [<span class="string">"less/**/*.less"</span>],
        tasks: [<span class="string">"less:app"</span>],
        options: {spawn: <span class="literal">false</span>}
      }
    }
  });
  <span class="comment">// Load plugins</span>
  grunt.loadNpmTasks(<span class="string">"grunt-contrib-less"</span>);
  grunt.loadNpmTasks(<span class="string">"grunt-contrib-watch"</span>);

};
</pre></td></tr></table></figure>

<p><code>grunt less:app</code> <code>grunt watch:styles</code></p>
<p><code>livereload: true</code>, 浏览器自动加载更改</p>
<h1 id="cusomizing-the-grid">Cusomizing the grid</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>@grid<span class="attribute">-columns</span>: <span class="number">24</span>;

<span class="built_in">.</span>sidebar {
  <span class="built_in">.</span>make<span class="attribute">-md</span><span class="attribute">-column</span>(<span class="number">6</span>);
}
<span class="built_in">.</span>content {
  <span class="built_in">.</span>make<span class="attribute">-md</span><span class="attribute">-column</span>(<span class="number">18</span>);
}

@grid<span class="attribute">-gutter</span><span class="attribute">-width</span>: <span class="number">50</span>px;

@screen<span class="attribute">-xs</span><span class="attribute">-min</span>: <span class="number">500</span>px;
@screen<span class="attribute">-sm</span><span class="attribute">-min</span>: <span class="number">790</span>px;
@screen<span class="attribute">-md</span><span class="attribute">-min</span>: <span class="number">1020</span>px;
@screen<span class="attribute">-lg</span><span class="attribute">-min</span>: <span class="number">1240</span>px;
</pre></td></tr></table></figure>

<h1 id="-">设置</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>@grid<span class="attribute">-columns</span>:              <span class="number">12</span>;
@grid<span class="attribute">-gutter</span><span class="attribute">-width</span>:         <span class="number">30</span>px;
@grid<span class="attribute">-float</span><span class="attribute">-breakpoint</span>:     <span class="number">768</span>px;

<span class="built_in">.</span>wrapper {
  <span class="built_in">.</span>make<span class="attribute">-row</span>();
}
<span class="built_in">.</span>content<span class="attribute">-main</span> {
  <span class="built_in">.</span>make<span class="attribute">-lg</span><span class="attribute">-column</span>(<span class="number">8</span>);
}
<span class="built_in">.</span>content<span class="attribute">-secondary</span> {
  <span class="built_in">.</span>make<span class="attribute">-lg</span><span class="attribute">-column</span>(<span class="number">3</span>);
  <span class="built_in">.</span>make<span class="attribute">-lg</span><span class="attribute">-column</span><span class="attribute">-offset</span>(<span class="number">1</span>);
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">h1</span>&gt;</span>h1. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">h2</span>&gt;</span>h2. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
<span class="tag">&lt;<span class="title">h3</span>&gt;</span>h3. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
<span class="tag">&lt;<span class="title">h4</span>&gt;</span>h4. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
<span class="tag">&lt;<span class="title">h5</span>&gt;</span>h5. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h5</span>&gt;</span>
<span class="tag">&lt;<span class="title">h6</span>&gt;</span>h6. Bootstrap heading <span class="tag">&lt;<span class="title">small</span>&gt;</span>Secondary text<span class="tag">&lt;/<span class="title">small</span>&gt;</span><span class="tag">&lt;/<span class="title">h6</span>&gt;</span>
</pre></td></tr></table></figure>

<p>通过添加 <code>.lead</code> 类可以让段落突出显示。</p>
<p><code>@font-size-base</code> 和 <code>@line-height-base</code> 决定排版尺寸</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-left"</span>&gt;</span>Left aligned text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-center"</span>&gt;</span>Center aligned text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-right"</span>&gt;</span>Right aligned text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-justify"</span>&gt;</span>Justified text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-nowrap"</span>&gt;</span>No wrap text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-lowercase"</span>&gt;</span>Lowercased text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-uppercase"</span>&gt;</span>Uppercased text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"text-capitalize"</span>&gt;</span>Capitalized text.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="comment">&lt;!-- 略缩语句 --&gt;</span>
<span class="tag">&lt;<span class="title">abbr</span> <span class="attribute">title</span>=<span class="value">"attribute"</span>&gt;</span>attr<span class="tag">&lt;/<span class="title">abbr</span>&gt;</span>

<span class="comment">&lt;!-- 无样式列表 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list-unstyled"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span>...<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="comment">&lt;!-- 内联样式 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list-inline"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">li</span>&gt;</span>...<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="comment">&lt;!-- 横排排列 --&gt;</span>
<span class="tag">&lt;<span class="title">dl</span> <span class="attribute">class</span>=<span class="value">"dl-horizontal"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">dt</span>&gt;</span>...<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>...<span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dl</span>&gt;</span>
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Compass 基础语法]]></title>
    <link href="http://zhpooer.github.io/2014/12/04/compass-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/12/04/compass-基础语法/</id>
    <published>2014-12-04T01:18:21.000Z</published>
    <updated>2014-12-29T02:24:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="compass-base">Compass Base</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre>@<span class="keyword">import</span> <span class="string">"reset/utilities"</span>;
@include <span class="built_in">global</span><span class="attribute">-reset</span>;

<span class="comment">/* a :hover :active :visited :focus */</span>
a { @include <span class="keyword">link</span><span class="attribute">-colors</span>(<span class="variable">#333</span>, <span class="variable">#00</span>f, <span class="variable">#f00</span>, <span class="variable">#555</span>, <span class="variable">#f00</span>); }

a { @include <span class="keyword">link</span><span class="attribute">-colors</span>(
  <span class="variable">#333</span>,
  <span class="variable">$hover</span>: <span class="variable">#00</span>f,
  <span class="variable">$active</span>: <span class="variable">#f00</span>,
  <span class="variable">$visited</span>: <span class="variable">#555</span>,
  <span class="variable">$focus</span>: <span class="variable">#f00</span>);
}

<span class="comment">// a {text-decoration: none;} a:hover{underline}</span>
a {@include hover<span class="attribute">-link</span>}

<span class="comment">// 隐藏超链接</span>
p<span class="built_in">.</span>secret a,
p<span class="built_in">.</span>secret a:hover,
p<span class="built_in">.</span>secret a:focus {
color: inherit;
cursor: inherit;
text<span class="attribute">-decoration</span>: inherit
}

p<span class="built_in">.</span>secret a { @include unstyled<span class="attribute">-link</span> }

<span class="comment">// 列表标签</span>
ul<span class="built_in">.</span>features {
  @include pretty<span class="attribute">-bullets</span>(<span class="string">'pretty-bullet.png'</span>,
    <span class="variable">$padding</span>: <span class="number">10</span>px,
    <span class="variable">$line</span><span class="attribute">-height</span>: <span class="number">22</span>px)
}

ul<span class="built_in">.</span>no<span class="attribute">-bullet</span> { @include no<span class="attribute">-bullets</span>}
li<span class="built_in">.</span>no<span class="attribute">-bullet</span> { @include no<span class="attribute">-bullet</span> }

<span class="comment">// 标题: default $padding is 4px. </span>
ul<span class="built_in">.</span>nav { @include horizontal<span class="attribute">-list</span> }
<span class="comment">// For browsers that support :first-child and :last-child, we can omit the padding</span>
<span class="comment">// on the outside-facing edge of those elements.</span>

<span class="comment">// 列表一行展示, 用 ! 分割</span>
ul<span class="built_in">.</span>words { @include delimited<span class="attribute">-list</span>(<span class="string">"! "</span>) }


<span class="comment">// 超出自动省略</span>
td<span class="built_in">.</span>dot<span class="attribute">-dot</span><span class="attribute">-dot</span> {
  @include ellipsis;
  }

td { @include nowrap }

<span class="comment">// 图片替换文本</span>
h1<span class="built_in">.</span>coffee { @include replace<span class="attribute">-text</span>(<span class="string">"coffee-header.png"</span>) }
</pre></td></tr></table></figure>

<h1 id="layout-helpers">Layout helpers</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> <span class="string">"compass/layout"</span>;</span> .

<span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> sticky-footer</span>(<span class="number">40</span>px, <span class="string">"#content"</span>, <span class="string">"#footer"</span>, <span class="string">"#sticky-footer"</span>);</span>

<span class="comment">// 弹出窗口 绝对定位</span>
<span class="tag">a</span><span class="class">.login</span> { <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> stretch</span>(<span class="number">5</span>px,<span class="preprocessor"> 5px</span>,<span class="preprocessor"> 5px</span>,<span class="preprocessor"> 5px</span>) }</span>
</pre></td></tr></table></figure>

<h1 id="css3">CSS3</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> <span class="string">"compass/css3"</span>;</span>
$experimental-support-for-opera<span class="value">: false;</span>
$experimental-support-for-microsoft<span class="value">: false;</span>
$experimental-support-for-khtml<span class="value">: false;</span>
<span class="class">.notice</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> border-radius</span>(<span class="number">5</span>px);</span>
}

<span class="class">.h2</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> box-shadow</span>(<span class="hexcolor">#ccc</span><span class="preprocessor"> 5px</span><span class="preprocessor"> 5px</span><span class="preprocessor"> 2px</span>);</span>
  <span class="attribute">text-shadow</span><span class="value">: <span class="hexcolor">#ddd</span> -<span class="number">1</span>px <span class="number">1</span>px <span class="number">0</span>;</span>
  <span class="attribute">background</span><span class="value">: <span class="hexcolor">#999</span>;</span>
  <span class="attribute">padding</span><span class="value">: <span class="number">1</span>em;</span>
}


<span class="class">.motion</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> text-shadow</span>(
  <span class="preprocessor"> rgba</span>(<span class="hexcolor">#000</span>,.<span class="number">5</span>)<span class="preprocessor"> -200px</span><span class="preprocessor"> 0</span><span class="preprocessor"> 0</span>,
  <span class="preprocessor"> rgba</span>(<span class="hexcolor">#000</span>,.<span class="number">4</span>)<span class="preprocessor"> -400px</span><span class="preprocessor"> 0</span><span class="preprocessor"> 0</span>,
  <span class="preprocessor"> rgba</span>(<span class="hexcolor">#000</span>,.<span class="number">3</span>)<span class="preprocessor"> -600px</span><span class="preprocessor"> 0</span><span class="preprocessor"> 0</span>,
  <span class="preprocessor"> rgba</span>(<span class="hexcolor">#000</span>,.<span class="number">2</span>)<span class="preprocessor"> -800px</span><span class="preprocessor"> 0</span><span class="preprocessor"> 0</span>
  );</span>
  <span class="attribute">font-size</span><span class="value">: <span class="number">2</span>em;</span>
  <span class="attribute">font-style</span><span class="value">: italic;</span>
  <span class="attribute">text-align</span><span class="value">: right;</span>
}
  
<span class="at_rule">@<span class="keyword">import</span> <span class="string">"compass"</span>;</span>
<span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> font-face</span>(<span class="string">"ChunkFiveRegular"</span>,<span class="preprocessor">
font-files</span>( <span class="string">"Chunkfive-webfont.woff"</span>,<span class="preprocessor"> woff</span>,
  <span class="string">"Chunkfive-webfont.ttf"</span>,<span class="preprocessor"> ttf</span>,
  <span class="string">"Chunkfive-webfont.svg"</span>,<span class="preprocessor"> svg</span>),
  <span class="string">"Chunkfive-webfont.eot"</span>,<span class="preprocessor"> normal</span>,<span class="preprocessor"> normal</span>);</span>
</pre></td></tr></table></figure>

<h1 id="support-for-internet-explorer-with-css-pie">Support for Internet Explorer with CSS PIE</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">//compass install compass/pie</span>
<span class="at_rule">@<span class="keyword">import</span> <span class="string">"compass/css3/pie"</span>;</span>
<span class="class">.pie-element</span> {
  <span class="comment">// relative is the default, so passing relative</span>
  <span class="comment">// is redundant, but we do it here for clarity.</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> pie-element</span>(relative);</span>
}

<span class="class">.rounded</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> pie</span>;</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> border-radius</span>(<span class="number">20</span>px);</span>
}

<span class="class">.gradient</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> pie</span>;</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> background</span>(<span class="function">linear-gradient(#aaa, #<span class="number">333</span>)</span>);</span>
}
</pre></td></tr></table></figure>

<h1 id="sprite">Sprite</h1>
<p><a href="https://github.com/Keyamoon/IcoMoon-limited" target="_blank">https://github.com/Keyamoon/IcoMoon-limited</a></p>
<p><code>&lt;map&gt;</code> part is a placeholder and should be replaced with
the name of the folder containing your sprite images.</p>
<p>The all-sprites mixin will write all the necessary CSS
for the entire sprite map, whereas the second mixin will
output CSS for a single named sprite.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">include</span> all-&lt;map&gt;-sprites</span>;
<span class="at_rule">@<span class="keyword">include</span> &lt;map&gt;<span class="function">-sprite($name)</span></span>;
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre>@<span class="keyword">import</span> <span class="string">"compass/utilities/sprites"</span>;
<span class="comment">// generate sprite from images/icons/</span>
@<span class="keyword">import</span> <span class="string">"icons/*.png"</span>;

@include <span class="literal">all</span><span class="attribute">-icons</span><span class="attribute">-sprites</span>;
<span class="built_in">.</span>add<span class="attribute">-button</span> { @extend <span class="built_in">.</span>icons<span class="attribute">-box</span><span class="attribute">-add</span>; }

<span class="comment">// 导入单个sprite, 不使用 @include all-icons-sprites</span>
<span class="built_in">.</span>add<span class="attribute">-button</span> {
  @include icons<span class="attribute">-sprite</span>(box<span class="attribute">-add</span>);
}

$<span class="subst">&lt;</span><span class="built_in">map</span><span class="subst">&gt;-&lt;</span>property<span class="subst">&gt;</span>: setting;
$<span class="subst">&lt;</span><span class="built_in">map</span><span class="subst">&gt;-&lt;</span>sprite<span class="subst">&gt;-&lt;</span>property<span class="subst">&gt;</span>: setting;

<span class="comment">// sprite map 中的间隔</span>
<span class="variable">$icons</span><span class="attribute">-spacing</span>: <span class="number">4</span>px;
<span class="variable">$icons</span><span class="attribute">-arrow</span><span class="attribute">-spacing</span>:<span class="number">12</span>px;

<span class="comment">// 会在map中重复</span>
<span class="variable">$icons</span><span class="attribute">-arrow</span><span class="attribute">-repeat</span>: repeat<span class="attribute">-x</span>;

<span class="comment">// 左边距  4px, arrow浮动到最右边</span>
<span class="variable">$icons</span><span class="attribute">-position</span>: <span class="number">4</span>px;
<span class="variable">$icons</span><span class="attribute">-arrow</span><span class="attribute">-position</span>: <span class="number">100</span><span class="subst">%</span>;
<span class="comment">// 布局方式, 默认是 vertical</span>
$<span class="subst">&lt;</span><span class="built_in">map</span><span class="subst">&gt;-</span>layout: vertical/horizontal/diagonal/smart;

<span class="comment">// configuring-automatic-sprites/layout.</span>
<span class="variable">$icons</span><span class="attribute">-layout</span>: smart;
<span class="comment">// 清理</span>
$<span class="subst">&lt;</span><span class="built_in">map</span><span class="subst">&gt;-</span>clean<span class="attribute">-up</span>: <span class="literal">true</span>/<span class="literal">false</span>;
</pre></td></tr></table></figure>

<h2 id="customizing-the-sprite-css">Customizing the sprite CSS</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>@<span class="keyword">import</span> <span class="string">"icons/*.png"</span>;
<span class="built_in">.</span>next {
  @include icons<span class="attribute">-sprite</span>(arrow);
  width: icons<span class="attribute">-sprite</span><span class="attribute">-width</span>(arrow);
  height: icons<span class="attribute">-sprite</span><span class="attribute">-height</span>(arrow);
}

<span class="built_in">.</span>add<span class="attribute">-button</span> {
  @include icons<span class="attribute">-sprite</span>(box<span class="attribute">-add</span>);
}

<span class="comment">// 是否自动度量元素的高度和宽度, 会给容器自动添加 width, height</span>
$<span class="subst">&lt;</span><span class="built_in">map</span><span class="subst">&gt;-</span>sprite<span class="attribute">-dimensions</span>: <span class="literal">true</span>/<span class="literal">false</span>;

<span class="variable">$disable</span><span class="attribute">-magic</span><span class="attribute">-sprite</span><span class="attribute">-selectors</span>: <span class="literal">true</span>/<span class="literal">false</span>;
</pre></td></tr></table></figure>

<p>Magic sprite selectors are enabled by default, meaning Compass will automatically
output CSS <code>:hover</code> , <code>:active</code>, and <code>:target</code> pseudo selectors for sprites
with names ending in <code>_hover</code>, <code>_active</code>, or <code>_target</code>.</p>
<p>You add <code>arrow.png</code> and <code>arrow_hover.png</code> to your sprite folder.</p>
<p>帮助函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="variable">$icons</span>: sprite-<span class="keyword">map</span>(<span class="string">"icons/<span class="variable">*.</span>png"</span>, <span class="variable">$arrow</span>-spacing: <span class="number">5</span>px);
<span class="variable">$icons</span>: sprite-<span class="keyword">map</span>(<span class="string">"icons/<span class="variable">*.</span>png"</span>, <span class="variable">$arrow</span>-spacing: <span class="number">5</span>px);
sprite(<span class="variable">$map</span>, <span class="variable">$sprite</span>, [<span class="variable">$offset</span>-<span class="keyword">x</span>], [<span class="variable">$offset</span>-<span class="keyword">y</span>])

<span class="variable">$icons</span>: sprite-<span class="keyword">map</span>(<span class="string">"icons/<span class="variable">*.</span>png"</span>);
.<span class="keyword">next</span> {
  background: sprite(<span class="variable">$icons</span>, arrow) <span class="keyword">no</span>-repeat;
}
.add-button {
  background: sprite(<span class="variable">$icons</span>, box-add) <span class="keyword">no</span>-repeat;
}

<span class="variable">$icons</span>: sprite-<span class="keyword">map</span>(<span class="string">"icons/<span class="variable">*.</span>png"</span>);
.sprite-base { background: <span class="variable">$icons</span> <span class="keyword">no</span>-repeat; }
.<span class="keyword">next</span> {
  <span class="variable">@extend</span> .sprite-base;
  background-position: sprite-position(<span class="variable">$icons</span>, arrow);
}
.add-button {
  <span class="variable">@extend</span> .sprite-base;
  <span class="variable">@include</span> sprite-background-position(<span class="variable">$icons</span>, box-add);
}
  
// 自动添加 width height
<span class="variable">$icons</span>: sprite-<span class="keyword">map</span>(<span class="string">"icons/<span class="variable">*.</span>png"</span>);
.sprite-base { background: <span class="variable">$icons</span> <span class="keyword">no</span>-repeat; }
.<span class="keyword">next</span> {
  <span class="variable">@extend</span> .sprite-base;
  <span class="variable">@include</span> sprite-background-position(<span class="variable">$icons</span>, arrow);
  <span class="variable">@include</span> sprite-dimensions(<span class="variable">$icons</span>, arrow);
}
</pre></td></tr></table></figure>

<h1 id="production">production</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="preprocessor"># 配置文件中</span>

<span class="preprocessor"># Increment the deploy_version before every</span>
<span class="preprocessor"># release to force cache busting.</span>
asset_cache_buster <span class="keyword">do</span> |http_path, real_path|
<span class="string">"v=1"</span>
end

asset_cache_buster :none

<span class="comment">// 设置相对路径</span>
relative_assets = <span class="literal">true</span>
</pre></td></tr></table></figure>

<p>We encourage you to investigate using a rapid
prototyping framework like Serve (<a href="http://get-serve.com/" target="_blank">http://get-serve.com/</a>)
or Middleman (<a href="http://middlemanapp.com/" target="_blank">http://middlemanapp.com/</a>), which include
support for Sass and Compass out of the box.</p>
<h2 id="deploy">deploy</h2>
<p><code>compass compile --force -e production</code> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">if</span> environment == :production
  output_style = :compact
  <span class="function"><span class="keyword">end</span></span>
<span class="comment">
// 部署时, 改变路径</span>

http_path = <span class="string">'/my-app'</span>
relative_assets = <span class="constant">false</span>
images_dir = <span class="string">'images'</span> <span class="comment">#locally it's the images folder</span>
http_images_dir = <span class="string">'imgs'</span> <span class="comment">#on the webserver it's different</span>
</pre></td></tr></table></figure>

<p>添加版权信息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="variable">$copyright</span><span class="attribute">-year</span>: unquote(<span class="string">"2012"</span>);
<span class="variable">$company</span><span class="attribute">-name</span>: unquote(<span class="string">"Example, Inc."</span>);
<span class="comment">/*!
Copyright © #{$copyright-year}, #{$company-name}
All Rights Reserved.
*/</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>compass compile my_sass_dir/application<span class="preprocessor">.scss</span>
sass --compass my_sass_dir/application<span class="preprocessor">.scss</span> my_css_dir/application<span class="preprocessor">.css</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="comment"># STAGING=true compass compile --force -e production</span>
<span class="keyword">if</span> <span class="constant">ENV</span>[<span class="string">'STAGING'</span>]
  relative_urls = <span class="keyword">true</span>
  output_style = <span class="symbol">:compact</span>
<span class="keyword">elsif</span> environment == <span class="symbol">:production</span>
  relative_urls = <span class="keyword">false</span>
  output_style = <span class="symbol">:compact</span>
<span class="keyword">else</span> <span class="comment">#development</span>
  relative_urls = <span class="keyword">true</span>
  output_style = <span class="symbol">:expanded</span>
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>// compass compile <span class="comment">--force -c staging_config.rb -e production</span>
eval(File.<span class="built_in">read</span>(<span class="string">"#{File.dirname(__FILE__)}/config.rb"</span>))
relative_urls = <span class="constant">true</span>
output_style = :compact

on_stylesheet_save <span class="built_in">do</span> |filename|
  <span class="comment"># run the gzip tool on the file</span>
  <span class="comment"># generates a file of the same name</span>
  <span class="comment"># plus a .gz at the end.</span>
  `gzip -f <span class="comment">#{file}`</span>
<span class="function"><span class="keyword">end</span></span>
</pre></td></tr></table></figure>

<h1 id="-">网络优化</h1>
<p>PNG is a complex format that can handle a range of image types. Be sure to remove
the alpha layer unless you need transparency. We highly recommend that you install
the free tool Pngcrush and run it on all your PNG images.
<a href="http://pmt.sourceforge.net/pngcrush/" target="_blank">http://pmt.sourceforge.net/pngcrush/</a></p>
<p>Beyond the benefits of parallelization, it’s also important to set up your assets hosts
to use a cookieless domain—a domain that doesn’t share cookies with your site. This will
result in fewer bytes being sent to your web server with each image request.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>asset_host <span class="keyword">do</span> |asset|
  host_number = (asset.hash % <span class="number">4</span>) + <span class="number">1</span>
  <span class="string">"http://img-<span class="subst">#{host_number}</span>.example.com"</span>
<span class="keyword">end</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>background<span class="attribute">-image</span>: <span class="keyword">inline</span><span class="attribute">-url</span>(<span class="string">"logo.gif"</span>);
<span class="subst">*</span>background<span class="attribute">-image</span>: image<span class="attribute">-url</span>(<span class="string">"logo.gif"</span>);
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>gem <span class="keyword">install</span> css_parser
compass stats
</pre></td></tr></table></figure>

<h1 id="scripting">Scripting</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="code"><pre>
<span class="variable">$grid</span>-cells: <span class="number">20</span>;
<span class="variable">$cell</span>-width: <span class="number">25</span>px;
#main {
  <span class="variable">$main</span>-width: <span class="variable">$grid</span>-cells * <span class="variable">$cell</span>-width;
  <span class="variable">$main</span>-padding: <span class="number">10</span>px;
  width: <span class="variable">$main</span>-width;
  padding: <span class="variable">$main</span>-padding;
  .siderbar {width: (<span class="variable">$main</span>-width - <span class="variable">$main</span>-padding<span class="variable">*2</span>)/<span class="number">4</span>}
}

<span class="variable">$pixels</span>-per-em: <span class="number">16</span>px/<span class="number">1</span>em;
<span class="number">5</span>em * <span class="variable">$pixels</span>-per-em <span class="comment">// 80px</span>

<span class="number">1</span>px/<span class="number">2</span>px =&gt; <span class="number">1</span>px/<span class="number">2</span>px; <span class="comment">// dont work</span>

<span class="comment">// that's work</span>
<span class="variable">$var</span>: <span class="number">1</span>px; <span class="variable">$var</span>/<span class="number">2</span>px =&gt; <span class="number">0.5</span>px
(<span class="number">1</span>px/<span class="number">2</span>px) =&gt; <span class="number">0.5</span>px
<span class="number">1</span> + (<span class="number">1</span>px/<span class="number">2</span>px) =&gt; <span class="number">1.5</span>px


<span class="keyword">abs</span>(<span class="variable">$number</span>);
<span class="keyword">ceil</span>(<span class="variable">$number</span>);
comparable(<span class="number">13</span><span class="keyword">in</span>, <span class="number">4</span>cm);
<span class="keyword">floor</span>(<span class="variable">$number</span>);
percentage(<span class="number">0.4</span>); <span class="comment">// 40%;</span>
round(<span class="variable">$number</span>); 
<span class="keyword">unit</span>(<span class="variable">$number</span>);
unitless(<span class="variable">$number</span>);

<span class="comment">// 颜色函数</span>

alpha(<span class="variable">$color</span>);
opacity(<span class="variable">$color</span>);
lightness(<span class="variable">$color</span>);
red(<span class="variable">$color</span>);
greyscale(<span class="variable">$color</span>);
invert(<span class="variable">$color</span>);
miix(<span class="variable">$color</span>-<span class="number">1</span>, <span class="variable">$color</span>-<span class="number">2</span>, [<span class="variable">$weight</span>]);
<span class="keyword">scale</span>(<span class="variable">$color</span>, <span class="variable">$lightness</span>: <span class="number">30</span><span class="variable">%)</span>;

<span class="comment">// List Funciton</span>
nth(foo bar baz, <span class="number">2</span>); <span class="comment">// bar</span>
join(<span class="variable">$list1</span>, <span class="variable">$list2</span>, [<span class="variable">$separator</span>]);
length(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>);


type-of(<span class="variable">$value</span>);  <span class="comment">// number string color bool list </span>

<span class="keyword">if</span>(<span class="variable">$condition</span>, <span class="variable">$if</span>-true, <span class="variable">$if</span>-false)

<span class="variable">@function</span> <span class="keyword">grid</span>-width(<span class="variable">$cells</span>) {
  <span class="variable">@return</span> (<span class="variable">$cell</span>-width + <span class="variable">$cell</span>-padding) * <span class="variable">$cells</span>;
}

<span class="variable">@mixin</span> thing(<span class="variable">$class</span>, <span class="variable">$prop</span>) {
  .thing.#{<span class="variable">$class</span>} {
  prop-{<span class="variable">$prop</span>}: val;
  }
}

<span class="variable">@mixin</span> bang-hack(<span class="variable">$property</span>, <span class="variable">$value</span>, <span class="variable">$ie6</span>-value) {
  #{<span class="variable">$property</span>}: <span class="variable">$value</span> !important;
  #{<span class="variable">$property</span>}: <span class="variable">$ie6</span>-value;
}
content: <span class="string">"This element is #{$color}"</span>;
width: calc(<span class="number">10</span>% + #{<span class="variable">$padding</span>});
<span class="keyword">filter</span>: progid:DXImageTransform.Microsoft.Alpha(
  Opacity=#{<span class="variable">$opacity</span> * <span class="number">100</span>}
);
</pre></td></tr></table></figure>

<h1 id="-">控制指令</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="variable">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">5</span> {
  .rating-#{<span class="variable">$i</span>} {
    background-<span class="keyword">image</span>; url(/images/rating-#{<span class="variable">$i</span>}.png);
  }
}

<span class="comment">// count backwards from 10 to 0</span>
<span class="variable">@for</span> <span class="variable">$i</span> from <span class="number">0</span> through <span class="number">10</span> {
  <span class="variable">$i</span>: <span class="number">10</span> - <span class="variable">$i</span>;
}
<span class="comment">// count to 20 by twos</span>
<span class="variable">@for</span> <span class="variable">$i</span> from <span class="number">0</span> through <span class="number">10</span> {
  <span class="variable">$i</span>: <span class="variable">$i</span> * <span class="number">2</span>;
}

<span class="variable">@each</span> <span class="variable">$section</span> <span class="keyword">in</span> home, <span class="keyword">about</span>, archive, project {
  nav .#{section} {
    background-<span class="keyword">image</span>: url(/images/nav/#{<span class="variable">$section</span>}.png);
  }
}


<span class="variable">@if</span> <span class="variable">$alpha</span> &lt; <span class="number">0.2</span> {
  background-<span class="keyword">color</span>: black;
} <span class="variable">@else</span> <span class="keyword">if</span> <span class="variable">$alpha</span> &lt; <span class="number">0.5</span> {
  background-<span class="keyword">color</span>: gray;
} <span class="variable">@else</span> {
  background-<span class="keyword">color</span>: white;
}
</pre></td></tr></table></figure>

<h1 id="css3">CSS3</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> <span class="string">"compass/css3"</span>;</span>
<span class="class">.rounded</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> border-radius</span>(<span class="number">5</span>px);</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> box-shadow</span>(<span class="hexcolor">#ccc</span><span class="preprocessor"> 5px</span><span class="preprocessor"> 5px</span><span class="preprocessor"> 2px</span>);</span>
}
<span class="class">.rounded-one</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> border-corner-radius</span>(top,<span class="preprocessor"> left</span>,<span class="preprocessor"> 5px</span>);</span>
}

<span class="class">.pattern</span> {
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> background</span>(
 <span class="preprocessor"> linear-gradient</span>(
   <span class="preprocessor"> 360deg</span>,
    <span class="hexcolor">#bfbfbf</span><span class="preprocessor"> 0</span>%,
    <span class="hexcolor">#bfbfbf</span><span class="preprocessor"> 12.5</span>%,
    <span class="hexcolor">#bfbf00</span><span class="preprocessor"> 12.5</span>%,
    <span class="hexcolor">#bfbf00</span><span class="preprocessor"> 25</span>%,
    <span class="hexcolor">#00bfbf</span><span class="preprocessor"> 25</span>%,
    <span class="hexcolor">#00bfbf</span><span class="preprocessor"> 37.5</span>%,
    <span class="hexcolor">#bfbf00</span><span class="preprocessor"> 37.5</span>%,
    <span class="hexcolor">#00bf00</span><span class="preprocessor"> 37.5</span>%,
    <span class="hexcolor">#00bf00</span><span class="preprocessor"> 50</span>%,
    <span class="hexcolor">#bf00bf</span><span class="preprocessor"> 50</span>%,
    <span class="hexcolor">#bf00bf</span><span class="preprocessor"> 62.5</span>%,
    <span class="hexcolor">#bf0000</span><span class="preprocessor"> 62.5</span>%,
    <span class="hexcolor">#bf0000</span><span class="preprocessor"> 75</span>%,
    <span class="hexcolor">#0000bf</span><span class="preprocessor"> 75</span>%,
    <span class="hexcolor">#0000bf</span><span class="preprocessor"> 87.5</span>%,
    <span class="hexcolor">#000</span><span class="preprocessor"> 87.5</span>%,
    <span class="hexcolor">#000</span><span class="preprocessor"> 100</span>%));</span>
  <span class="attribute">height</span><span class="value">: <span class="number">300</span>px;</span>
  <span class="attribute">margin</span><span class="value">: <span class="number">100</span>px auto;</span>
  <span class="attribute">width</span><span class="value">: <span class="number">400</span>px;</span>
}

<span class="at_rule">@<span class="keyword">mixin</span><span class="preprocessor"> nb-gradient</span>($bg) {</span>
  <span class="comment">// scale main color to pick</span>
  $<span class="attribute">top</span><span class="value">:scale-color($bg, $lightness: <span class="number">40</span>%);</span>
  $<span class="value">middle</span>-1<span class="value">: scale-color($bg, $lightness: <span class="number">10</span>%);</span>
  $<span class="value">middle</span>-2<span class="value">: scale-color($bg, $lightness: -<span class="number">5</span>%);</span>
  $<span class="attribute">bottom</span><span class="value">: scale-color($bg, $lightness: -<span class="number">20</span>%);</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> background-image</span>(<span class="function">linear-gradient(
                              $top, $middle-<span class="number">1</span> <span class="number">50</span>%, $middle-<span class="number">2</span> <span class="number">50</span>%, $bottom)</span>);</span>
}
                              
<span class="tag">div</span><span class="pseudo">:nth-child</span>(2) {
  <span class="attribute">background</span><span class="value">: green;</span>
  <span class="comment">/* @include border-radius(10px); */</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> rotateX</span>(<span class="number">45</span>deg);</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> translate</span>(<span class="number">0</span>,<span class="preprocessor"> 30px</span>);</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> transform-origin</span>(left,<span class="preprocessor"> right</span>);</span>
  
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> box-sizing</span>(border-box);</span>
  <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> transition</span>(all<span class="preprocessor"> 1s</span>);</span>
  &<span class="pseudo">:hover</span> {
    <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> border-corner-radius</span>(top,<span class="preprocessor"> left</span>,<span class="preprocessor"> 10px</span>);</span>
    <span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> scale</span>(<span class="number">1</span>,<span class="preprocessor"> 2</span>);</span>
  }
}

<span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> animation</span>(sport<span class="preprocessor"> 1s</span><span class="preprocessor"> ease-out</span><span class="preprocessor"> 0</span><span class="preprocessor"> infinite</span><span class="preprocessor"> alternate</span>);</span>
<span class="at_rule">@<span class="keyword">include</span><span class="preprocessor"> keyframes</span>(sport){</span>
  0% {
    <span class="attribute">opacity</span><span class="value">: <span class="number">0</span>;</span>
  }
  100% {
    <span class="attribute">opacity</span><span class="value">: <span class="number">1</span>;</span>
  }
}
</pre></td></tr></table></figure>

<h1 id="960-grid">960 grid</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>gem install compass-<span class="number">960</span>-plugin
compass <span class="built_in">create</span> -r ninesixty twelve_col <span class="comment">--using 960</span>
<span class="built_in">require</span> <span class="string">'ninesixty'</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">section</span> <span class="attribute">class</span>=<span class="value">"wrapper container_24"</span>&gt;</span>
 <span class="tag">&lt;<span class="title">header</span> <span class="attribute">class</span>=<span class="value">"main grid_24"</span>&gt;</span>
   Header
  <span class="tag">&lt;/<span class="title">header</span>&gt;</span>
  <span class="tag">&lt;<span class="title">section</span> <span class="attribute">class</span>=<span class="value">"content grid_20"</span>&gt;</span>
    Content
  <span class="tag">&lt;/<span class="title">section</span>&gt;</span>
  <span class="tag">&lt;<span class="title">aside</span> <span class="attribute">id</span>=<span class="value">"sidebar grid_4"</span>&gt;</span>
    The last column
  <span class="tag">&lt;/<span class="title">aside</span>&gt;</span>
  <span class="tag">&lt;<span class="title">footer</span> <span class="attribute">class</span>=<span class="value">"main grid_24"</span>&gt;</span>
    Footer
  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span>
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="variable">$ninesixty</span>-columns: <span class="number">24</span>;

.wrapper {
  <span class="variable">@include</span> <span class="keyword">grid</span>-<span class="keyword">container</span>;
  header.main, footer.main {
    <span class="variable">@include</span> <span class="keyword">grid</span>(<span class="number">24</span>);
  }
  #sidebar {
    <span class="variable">@include</span> <span class="keyword">grid</span>(<span class="number">4</span>);
  }
  .content {
    <span class="variable">@include</span> <span class="keyword">grid</span>(<span class="number">20</span>);
  }
}

<span class="comment">// another usage, to enable container_24 or grid_*</span>
.container_24 {
  <span class="variable">@include</span> <span class="keyword">grid</span>-<span class="keyword">system</span>(<span class="number">24</span>);
}
</pre></td></tr></table></figure>

<h2 id="vertical-rhythm">vertical rhythm</h2>
<p><code>(baseline unit/ font-size) = line height</code></p>
<p><code>(24px / 36px) = .6666667 em</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">h1</span> <span class="rules">{<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">48</span>px</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5</span>em</span></span></span>}
<span class="tag">h2</span> <span class="rules">{<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">36</span>px</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> .<span class="number">666667</span>em</span></span></span>}
<span class="tag">h3</span> <span class="rules">{<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">24</span>px</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1</span>em</span></span></span>}
<span class="tag">h4</span> <span class="rules">{<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20</span>px</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.2</span>em</span></span></span>}
<span class="tag">h5</span> <span class="rules">{<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">18</span>px</span></span>; <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.33333</span>em</span></span></span>}
<span class="tag">p</span> <span class="rules">{<span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1.5</span>em <span class="number">0</span></span></span></span>}
</pre></td></tr></table></figure>

<p>compass 实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>@<span class="keyword">import</span> <span class="string">"compass/typography"</span>;

<span class="variable">$base</span><span class="attribute">-font</span><span class="attribute">-size</span>: <span class="number">16</span>px;
<span class="variable">$base</span><span class="attribute">-line</span><span class="attribute">-height</span>: <span class="number">24</span>px;
@include establish<span class="attribute">-baseline</span>;

body {
  font<span class="attribute">-family</span>: <span class="string">'Helvetica Neue'</span>, sans<span class="attribute">-serif</span>;
  @include debug<span class="attribute">-vertical</span><span class="attribute">-alignment</span>(<span class="string">"../images/debug.png"</span>);
}

h1 {@include adjust<span class="attribute">-font</span><span class="attribute">-size</span><span class="attribute">-to</span>(<span class="number">48</span>px)}
h2 {@include adjust<span class="attribute">-font</span><span class="attribute">-size</span><span class="attribute">-to</span>(<span class="number">36</span>px)}
h3 {@include adjust<span class="attribute">-font</span><span class="attribute">-size</span><span class="attribute">-to</span>(<span class="number">24</span>px)}
h4 {@include adjust<span class="attribute">-font</span><span class="attribute">-size</span><span class="attribute">-to</span>(<span class="number">20</span>px)}
h5 {@include adjust<span class="attribute">-font</span><span class="attribute">-size</span><span class="attribute">-to</span>(<span class="number">18</span>px)}
p {margin: <span class="number">1.5</span>em <span class="number">0</span>;}
</pre></td></tr></table></figure>

<ul>
<li><code>$ninesixty-columns</code> (default: 12) controls the default number of grid columns</li>
<li><code>$ninesixty-grid-width</code> (default: 960px) controls the default overall grid width</li>
<li><code>$ninesixty-gutter-width</code> (default: 20px) controls the default gutter width</li>
<li><code>$ninesixty-class-separator</code> (default: &#39;_&#39;) sets the word separator for classnames generated by +grid-system</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>p {@<span class="preprocessor"><span class="keyword">include</span> leader;</span> @<span class="preprocessor"><span class="keyword">include</span> trailer;</span>}
h2.important {@<span class="preprocessor"><span class="keyword">include</span> leader(2);</span> @<span class="preprocessor"><span class="keyword">include</span> trailer(2)}</span>
</pre></td></tr></table></figure>

<p>The leader mixin adds one baseline unit of margin before
the element, whereas the trailer adds one baseline unit
of margin after the element.</p>
<p>Compass also provides <code>padding-leader</code> and
<code>padding-trailer</code> variants of these mixins</p>
<h1 id="tips">Tips</h1>
<p><code>compass create bootstrap -r bootstrap-sass --using bootstrap</code></p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[SASS 基础语法]]></title>
    <link href="http://zhpooer.github.io/2014/12/03/sass-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/12/03/sass-基础语法/</id>
    <published>2014-12-03T00:56:40.000Z</published>
    <updated>2014-12-04T01:18:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="base-semantic">Base semantic</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="comment">/* 下划线 和 中线可以一起用 */</span>
$link-<span class="keyword">color</span>: blue;
a { <span class="keyword">color</span>: $link_color }

<span class="comment">/* 嵌套 */</span>
<span class="preprocessor"># content {</span>
  article {
    h1 { <span class="keyword">color</span>: <span class="preprocessor">#333}</span>
    p{margin-bottom: <span class="number">1.4</span>em }
  }
  aside { background-<span class="keyword">color</span>: <span class="preprocessor">#eee }</span>
}

<span class="comment">/* 父选择器 */</span>
article a {
  <span class="keyword">color</span>: blue;
  &:hover { <span class="keyword">color</span>: red }
}

<span class="preprocessor">#content aside {</span>
  <span class="keyword">color</span>: red;
  body.ie & { <span class="keyword">color</span>: green}
}

nav, aside {
  a { <span class="keyword">color</span>: blue }
}
</pre></td></tr></table></figure>

<h1 id="combinators">combinators</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="comment">/*子选择*/</span>
<span class="tag">article</span> &gt; <span class="tag">section</span> { <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid <span class="hexcolor">#ccc</span> }

/* 后继选择, header后面跟着的p */
header + p { font-size: <span class="number">1.1</span>em }

/* 兄弟选择器 article 后面所有的 article */
article ~ article { border-top: <span class="number">1</span>px dashed <span class="hexcolor">#ccc</span> }

article {
  ~ article { border-top: <span class="number">1</span>px dashed <span class="hexcolor">#ccc</span> }
  &gt; section { background: <span class="hexcolor">#eee</span> }
  dl &gt; {
    dt { color: <span class="hexcolor">#333</span> }
    dd { color: <span class="hexcolor">#555</span> }
  }
  nav + & { margin-top: <span class="number">0</span> }
}

/* 简化 border-style border-width */
nav {
  border: {
  style: solid;</span>
  <span class="attribute">width</span><span class="value">: <span class="number">1</span>px;</span>
  <span class="attribute">color</span><span class="value">: <span class="hexcolor">#ccc</span>;</span>
  }
}

<span class="tag">nav</span> {
  <span class="attribute">border</span><span class="value">: <span class="number">1</span>px solid <span class="hexcolor">#ccc</span> {
    left: <span class="number">1</span>px;</span>
    <span class="attribute">right</span><span class="value">: <span class="number">0</span>px;</span>
  }
}
</pre></td></tr></table></figure>

<h1 id="importing-sass-files">Importing Sass files</h1>
<p>Sass has an <code>@import</code> rule as well, but Sass does its
importing when it’s compiling to CSS.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="at_rule">@<span class="keyword">import</span> <span class="string">"colors"</span></span>; <span class="comment">/* import include the colors.scss */</span>
</pre></td></tr></table></figure>

<p>The convention for Sass partials is to begin the filenames with _. This tells Sass that
it shouldn’t generate an individual CSS file for the partial, and should only use it for
imports.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>/* `themes/_night-sky.scss` */
@import <span class="string">"themes/night-sky"</span>;

/**
It means, <span class="keyword">if</span> this variable <span class="keyword">is</span> already declared,
leave <span class="keyword">it</span> alone, <span class="keyword">but</span> otherwise use this value.
**/
$fancybox-width: <span class="number">400</span>px !default;
.fancybox {
  width: $fancybox-width;
}

/* If a user sets $fancybox-width <span class="keyword">before</span> @importing your Sass partial, <span class="keyword">then</span> your declara-
tion <span class="keyword">of</span> <span class="number">400</span>px <span class="keyword">is</span> ignored because <span class="keyword">of</span> <span class="keyword">the</span> !default flag. If <span class="keyword">the</span> user hasn’t <span class="keyword">set</span> <span class="keyword">the</span> value
<span class="keyword">of</span> $fancybox-width <span class="keyword">it</span>’ll default <span class="keyword">to</span> <span class="number">400</span>px.*/
</pre></td></tr></table></figure>

<h1 id="nested-imports">Nested imports</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="comment">/* _blue-theme.scss */</span>
aside {
  background: blue;
  color: white;
}

.blue-theme {<span class="annotation">@import</span> <span class="string">"blue-theme"</span>}

<span class="javadoc">/** 翻译成
.blue-theme {
  aside {
    background: blue;
    color: #fff;
  }
}
**/</span>
</pre></td></tr></table></figure>

<p>This means you can’t directly import a plain CSS file without having Sass think you
want a plain CSS @import as well. </p>
<ul>
<li>The imported filename ends with .css.</li>
<li>The imported filename is a URL
(such as &quot;<a href="http://sass-lang.com/stylesheets/application.css" target="_blank">http://sass-lang.com/stylesheets/application.css</a>&quot;).
This allows Sass files to use services like Google’s Font API.</li>
<li>The imported filename is a CSS url() value.</li>
</ul>
<h1 id="comment">Comment</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="tag">body</span> {
<span class="attribute">color</span><span class="value">: <span class="hexcolor">#333</span>;</span> <span class="comment">// This won't appear in the CSS</span>
<span class="attribute">padding</span><span class="value">: <span class="number">0</span>;</span> <span class="comment">/* This will appear in the CSS */</span>
}

<span class="tag">body</span> {
<span class="attribute">color</span> <span class="comment">/* This won't appear in the CSS */</span><span class="value">: <span class="hexcolor">#333</span>;</span>
<span class="attribute">padding</span><span class="value">: <span class="number">1</span>em;</span> <span class="comment">/* Nor will this */</span> 0;
}
</pre></td></tr></table></figure>

<h1 id="mixins">Mixins</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre>@mixin rounded<span class="attribute">-corners</span> {
  <span class="attribute">-moz</span><span class="attribute">-border</span><span class="attribute">-radius</span>: <span class="number">5</span>px;
  <span class="attribute">-webkit</span><span class="attribute">-border</span><span class="attribute">-radius</span>: <span class="number">5</span>px;
  border<span class="attribute">-radius</span>: <span class="number">5</span>px;
}

<span class="built_in">.</span>notice {
  background<span class="attribute">-color</span>: green;
  border: <span class="number">2</span>px solid <span class="variable">#00</span>aa00;
  @include rounded<span class="attribute">-corners</span>;
}

@mixin no<span class="attribute">-bullets</span> {
  <span class="built_in">list</span><span class="attribute">-style</span>: <span class="literal">none</span>;
  li{
    <span class="built_in">list</span><span class="attribute">-style</span><span class="attribute">-image</span>: <span class="literal">none</span>;
    <span class="built_in">list</span><span class="attribute">-style</span><span class="attribute">-type</span>: <span class="literal">none</span>;
    margin<span class="attribute">-left</span>;
  }
}

ul<span class="built_in">.</span>plain {
  color: <span class="variable">#444</span>;
  @include no<span class="attribute">-bullets</span>;
}

@mixin <span class="keyword">link</span><span class="attribute">-colors</span>(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>){
  color: <span class="variable">$normal</span>;
  <span class="subst">&</span>:hover {color: <span class="variable">$hover</span>;}
<span class="subst">&</span>:visited {color: <span class="variable">$visited</span>;}
  }

a {
  @include <span class="keyword">link</span><span class="attribute">-colors</span>(blue, red, green);
}

a{
  @include <span class="keyword">link</span><span class="attribute">-colors</span>(
    <span class="variable">$normal</span>: blue,
    <span class="variable">$visited</span>: green;
    <span class="variable">$hover</span>: red
  )
  }

<span class="comment">/* have default value */</span>
@mixin <span class="keyword">link</span><span class="attribute">-colors</span> (
  <span class="variable">$normal</span>,
  <span class="variable">$hover</span>: <span class="variable">$normal</span>,
  <span class="variable">$visited</span>: <span class="variable">$normal</span>,
) {
  color: <span class="variable">$normal</span>;
  <span class="subst">&</span>:hover { color: <span class="variable">$hover</span>;}
  <span class="subst">&</span>:visited {color: <span class="variable">$visited</span>;}
}
</pre></td></tr></table></figure>

<h1 id="selector-inheritance">Selector inheritance</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="class">.error</span> {
  <span class="attribute">border</span><span class="value">: <span class="number">1</span>px red;</span>
  <span class="attribute">background-color</span><span class="value">: <span class="hexcolor">#fdd</span>;</span>
}
<span class="class">.seriousError</span> {
  <span class="at_rule">@<span class="keyword">extend</span><span class="preprocessor"> .error</span>;</span>
  <span class="attribute">border-width</span><span class="value">: <span class="number">3</span>px;</span>
}
</pre></td></tr></table></figure>

<p>So if <code>.seriousError</code> <code>@extended</code> <code>.important.error</code> ,
it would inherit styles for <code>.important.error</code> and <code>h1.important.error</code> ,
but not for <code>.important</code> or <code>.error</code> .
In this case, you’d probably want <code>.seriousError</code> to <code>@extend</code>
<code>.important</code> and <code>.error</code> separately.</p>
]]></content>
    
    
      <category term="SASS" scheme="http://zhpooer.github.io/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BOM 基本语法]]></title>
    <link href="http://zhpooer.github.io/2014/11/23/bom-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/11/23/bom-基本语法/</id>
    <published>2014-11-23T10:51:30.000Z</published>
    <updated>2014-12-08T11:50:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="bom">BOM</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="keyword">var</span> wroxWin = window.open(<span class="string">"http://www.wrox.com"</span>,
     <span class="string">"wroxWindow"</span>,
     <span class="string">"height=400, width=400, top=10, left=10, resizable=yes"</span>)
wroxWin.resizeTo(<span class="number">500</span>, <span class="number">500</span>);
wroxWin.moveTo(<span class="number">100</span>, <span class="number">100</span>);
wroxWin.close();
log(wroxWin.closed);
alert(wroxWin.opener == window);

<span class="comment">// Timeout</span>
<span class="keyword">var</span> timeoutId = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
  alert();
}, <span class="number">1000</span>);
clearTimeout(timeoutId);

<span class="comment">// interval</span>
<span class="keyword">var</span> intervalId = setInterval(doFunc, <span class="number">500</span>);
clearInterval(intervalId);

<span class="keyword">var</span> b = comfirm(<span class="string">"any"</span>);

<span class="comment">// prompt</span>
<span class="keyword">var</span> result = prompt(<span class="string">"What is your name?"</span>, <span class="string">""</span>)
<span class="keyword">if</span>(result !== <span class="literal">null</span>){}
</pre></td></tr></table></figure>

<h2 id="location-">location 对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="built_in">log</span>(window.location == document.location);<span class="comment"> // true</span>

location.hash;<span class="comment"> // #contens</span>
location.host;<span class="comment"> // www.wrox.com:80</span>
location.hostname;<span class="comment"> // www.worx.com</span>
location.href;<span class="comment"> // http://www.wrox.com/ab/</span>
location.pathname;<span class="comment"> // /WileyCDA</span>
location.port; <span class="comment"> // 80</span>
location.protocol;<span class="comment"> // http</span>
location.search;<span class="comment"> // ?q=javascript</span>
<span class="comment">
// 每次修改属性, 都会重新加载</span>
location.assign(<span class="string">"http://www.baidu.com"</span>)
window.location = <span class="string">"httt://www.baidu.com"</span>
location.href = <span class="string">"http://www.baidu.com"</span>

location.<span class="built_in">replace</span>(<span class="string">""</span>);<span class="comment"> // 浏览器不会记录历史</span>
location.reload();<span class="comment"> // 可能从缓存中加载</span>
location.reload(<span class="constant">true</span>);<span class="comment"> // 从服务器中加载</span>
</pre></td></tr></table></figure>

<h2 id="navigator">navigator</h2>
<p>检测插件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span><span class="params">(name)</span> {</span>
  name = name.toLowerCase();
  <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>, i&lt; navigator.plugin.length; i++) {
    <span class="keyword">if</span>(navigator.plugin[i].name.toLowerCase().indexOf(name) &gt; -<span class="number">1</span>) {
      <span class="keyword">return</span> <span class="literal">true</span>
    }
  }
  <span class="keyword">return</span> <span class="literal">false</span>;
}

<span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span><span class="params">(name)</span> {</span>
  <span class="keyword">try</span> {
    <span class="keyword">new</span> activeXObject(name);
    <span class="keyword">return</span> <span class="literal">true</span>;
  } <span class="keyword">catch</span> (ex) {
    <span class="keyword">return</span> <span class="literal">false</span>;
  }
}

<span class="function"><span class="keyword">function</span> <span class="title">hasFlash</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> result = hasPlugin(<span class="string">"Flash"</span>);
  <span class="keyword">if</span> (!result) {
    result = hasIEPlugin(<span class="string">"ShockwaveFlash.ShockwaveFlash"</span>);
  }
  <span class="keyword">return</span> result;
}
</pre></td></tr></table></figure>

<h2 id="screen-">Screen 对象</h2>
<p>screen 对象基本上只用来表示客户端的能力,
其中包括浏览器窗口外部的显示器的信息, 如像素宽度和高度等.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>window<span class="preprocessor">.resizeTo</span>(screen<span class="preprocessor">.availWidth</span>, screen<span class="preprocessor">.availHeight</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="history-">history 对象</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>history.<span class="keyword">go</span><span class="number">(-1</span>); <span class="comment">// 后退一页</span>
history.<span class="keyword">go</span><span class="number">(1</span>);
history.<span class="keyword">go</span><span class="number">(2</span>); <span class="comment">// 前进二页</span>

history.back();
history.forward();

<span class="keyword">if</span>(history.length ==<span class="number"> 0</span> ){} <span class="comment">// 用户打开的第一个页面</span>

history.<span class="keyword">go</span>(<span class="string">"wrox.com"</span>); <span class="comment">// 跳转到最近的 wrox.com 的页面</span>
</pre></td></tr></table></figure>

<h1 id="tips">Tips</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="reserved">var</span> win = <span class="built_in">window</span>.open(<span class="string">'about:blank'</span>);
<span class="regexp">//</span> 清空页面并写入
win.<span class="built_in">document</span>.write();
win.close(); <span class="regexp">//</span> 关闭窗口

<span class="regexp">//</span> 可视区居中, 可以用 fixed 但是 ie6 不支持
<span class="built_in">window</span>.onresize = <span class="built_in">window</span>.onload = <span class="built_in">window</span>.onscroll = <span class="reserved">function</span> (){
  <span class="reserved">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);
  <span class="reserved">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;
  <span class="reserved">var</span> t = (<span class="built_in">document</span>.documentElement.clientHeight - oDiv.offsetHeight)/<span class="number">2</span>;
  oDiv.style.top = scrollTop + t + <span class="string">'px'</span>;
  }
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>window.onload=<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="keyword">var</span> oBtn=document.getElementById(<span class="string">'btn1'</span>);
  <span class="keyword">var</span> bSys=<span class="literal">true</span>;
  <span class="keyword">var</span> timer=<span class="literal">null</span>;

  <span class="comment">//如何检测用户拖动了滚动条</span>
  window.onscroll=<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">if</span>(!bSys) {
      clearInterval(timer);
    }
    bSys=<span class="literal">false</span>;
  };

  oBtn.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    timer=setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
      <span class="keyword">var</span> scrollTop=document.documentElement.scrollTop||document.body.scrollTop;
      <span class="keyword">var</span> iSpeed=<span class="built_in">Math</span>.floor(-scrollTop/<span class="number">8</span>);

      <span class="keyword">if</span>(scrollTop==<span class="number">0</span>) {
        clearInterval(timer);
      }
      bSys=<span class="literal">true</span>;
      document.documentElement.scrollTop=document.body.scrollTop=scrollTop+iSpeed;
    }, <span class="number">30</span>);
  };
};
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Html CSS 基础语法]]></title>
    <link href="http://zhpooer.github.io/2014/11/21/html-css-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/11/21/html-css-基础语法/</id>
    <published>2014-11-21T06:12:34.000Z</published>
    <updated>2014-12-23T08:07:38.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>
<span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">""</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"shortcut icon"</span> <span class="attribute">href</span>=<span class="value">""</span>/&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
     <span class="tag">&lt;<span class="title">form</span>&gt;</span>
       <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"male"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>/&gt;</span>
       <span class="comment">&lt;!-- 控制焦点范围 --&gt;</span>
       <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        会进一步类级别,.
       <span class="comment">&lt;!-- 只在html5中有用 --&gt;</span>
       <span class="tag">&lt;<span class="title">label</span>&gt;</span>
           <span class="tag">&lt;<span class="title">input</span>/&gt;</span>
       <span class="tag">&lt;/<span class="title">label</span>&gt;</span>
     <span class="tag">&lt;/<span class="title">form</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="tag">h1</span> {
  <span class="attribute">display</span><span class="value">:block;</span>
  <span class="comment">/*
    display:none;
    display: inline-block;
    visible: false; 占位
  */</span>
  <span class="attribute">background</span><span class="value">:red<span class="important">!Important</span>;</span> <span class="comment">/*最高优先级*/</span>
  <span class="attribute">border</span><span class="value">: <span class="number">1</span>px <span class="hexcolor">#000</span> solid;</span>
  <span class="attribute">border</span><span class="value">: <span class="number">1</span>px <span class="hexcolor">#000</span> dashed;</span>
  <span class="comment">/*坐标(0,0) 对住中位线*/</span>
  <span class="attribute">background</span>; <span class="function">url()</span> <span class="value">no-repeat</span> <span class="value">center</span> <span class="attribute">top</span>;
  <span class="attribute">background</span>; <span class="function">url()</span> <span class="value">no-repeat</span> <span class="attribute">right</span> 0;
  <span class="attribute">background</span>; <span class="function">url()</span> <span class="value">no-repeat</span> 0 <span class="attribute">bottom</span>;
  &lt;!--  <span class="value">repeat</span>-x <span class="value">repeat</span>-y <span class="value">repeat</span>--&gt;

}
</pre></td></tr></table></figure>

<p>行高, 从文字中心基线出发, 向上到向下延伸一定的距离</p>
<p>测量方法, 从一行文字的最大有效像素到下一行文字的最大有效像素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="tag">p</span> {
  <span class="attribute">line-height</span><span class="value">: <span class="number">2.2</span>em;</span>
  <span class="comment">/* line-height: 盒子高度; 垂直居中 */</span>
  <span class="attribute">font-weight</span><span class="value">: bold;</span> <span class="comment">// bold is 700</span>
  <span class="attribute">font-weight</span><span class="value">: normal;</span>
  <span class="attribute">font-style</span><span class="value">: itatic;</span>
  <span class="attribute">letter-spacing</span><span class="value">: <span class="number">10</span>px;</span> <span class="comment">// 字符间距</span>
  <span class="attribute">word-spacing</span><span class="value">: <span class="number">10</span>px;</span>   <span class="comment">// 单词间距</span>
  <span class="attribute">text-indent</span><span class="value">: <span class="number">2</span>em;</span> <span class="comment">// 首行缩进</span>
  <span class="attribute">text-decoration</span><span class="value">: none;</span> <span class="comment">// 无下划线</span>
  <span class="attribute">text-decoration</span><span class="value">: underline;</span>
  <span class="attribute">text-decoration</span><span class="value">: line-through;</span>
  <span class="attribute">text-decoration</span><span class="value">: overline;</span> <span class="comment">//顶部</span>
}

<span class="tag">a</span><span class="pseudo">:link</span> {}
<span class="tag">a</span><span class="pseudo">:visited</span>{}
<span class="tag">a</span><span class="pseudo">:hover</span>{}
<span class="tag">a</span><span class="pseudo">:active</span>{}
</pre></td></tr></table></figure>

<h1 id="-">盒子模型</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="class">.box</span> <span class="rules">{
  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">30</span>px</span></span>;
  <span class="rule"><span class="attribute">marging</span>:<span class="value"> <span class="number">20</span>px</span></span>;
  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1</span>px solid white</span></span>;
  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10</span>px <span class="number">20</span>px <span class="number">40</span>px <span class="number">80</span>px</span></span>; <span class="rule">// 上右下左
  <span class="attribute">padding</span>:<span class="value"> <span class="number">10</span>px <span class="number">40</span>px <span class="number">80</span>px</span></span>; <span class="rule">// 上 左右(40) 下
  <span class="attribute">padding</span>:<span class="value"> <span class="number">10</span>px <span class="number">40</span>px</span></span>; <span class="rule">// 上下 左右
}</span></span>
</pre></td></tr></table></figure>

<h1 id="-">网页三步准备工作</h1>
<p><code>hr</code> 标签有兼容性问题, 不建议使用(圆角or直角)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="comment">/* 清空标签默认样式 */</span>
<span class="tag">body</span>, <span class="tag">h1</span>, <span class="tag">p</span>, <span class="tag">input</span>, <span class="tag">div</span>, <span class="tag">span</span>, <span class="tag">a</span>, <span class="tag">img</span>, <span class="tag">ul</span>, <span class="tag">li</span>, <span class="tag">ol</span>, <span class="tag">dl</span>, <span class="tag">dt</span>, <span class="tag">dd</span>, <span class="tag">h2</span>, <span class="tag">h3</span>, <span class="tag">h4</span>, <span class="tag">h5</span>, <span class="tag">h6</span><span class="rules">{
  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span>px</span></span>;
  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span>px</span></span>;
  <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>; <span class="comment">/** 兼容性问题 **/</span>
  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">0</span>px</span></span>;
<span class="rule">}</span></span>
<span class="comment">/** 置body的全局样式(文字三属性) **/</span>
<span class="tag">body</span> <span class="rules">{
  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#393939</span></span></span>;
  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">12</span>px</span></span>;
  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"Verdana"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"Simsun"</span></span></span>;
  <span class="rule"><span class="attribute">font-family</span>:<span class="value">  <span class="string">"Microsoft YaHei"</span>, <span class="string">"SimHei"</span></span></span>;
  <span class="comment">/* 大小 行高 字体*/</span>
  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">100</span>px/<span class="number">1.5</span> <span class="string">"宋体"</span>, <span class="string">"黑体"</span></span></span>;
<span class="rule">}</span></span>
<span class="tag">a</span> <span class="rules">{
  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#393939</span></span></span>;
  <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>;
<span class="rule">}</span></span>
<span class="tag">a</span><span class="pseudo">:hover</span> <span class="rules">{
  <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> underline</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>块级标签, 水平居中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="class">.main</span> <span class="rules">{
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">330</span></span></span>;<span class="rule">// 必须要有宽度
  <span class="attribute">margin</span>:<span class="value"> <span class="number">100</span>px, auto</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<blockquote>
<p>装饰性的图片用背景<br>可以用 line-heihgt 文本上下 margin</p>
</blockquote>
<p>嵌套排列的两个盒子也有塌陷问题, 给子盒子添加 <code>margin-top</code>,
会将父盒子一起往下挪,解决办法:</p>
<ol>
<li>给父盒子添加 <code>border</code> 属性, 能够完整的划分出盒子的边缘</li>
<li>最好的解决办法: 给父盒子添加 <code>overflow: hidden</code></li>
</ol>
<p>行内标签, 浏览器当做文字处理;
如果想要改变行内标签的垂直方向的位置, 通过<code>margin</code> <code>padding</code> 是不能生效的.
只能通过 <code>line-height</code> 改变垂直方向的位置</p>
<h1 id="-">浮动</h1>
<p>浮动是第一种脱离标准流的方式, 半脱离, 只要是浮动的的标签浏览器当做不存在
<code>float: left | right</code></p>
<p>所有浮动之后的标签显示模式变成了行内块</p>
<p><code>clear:left</code> 清除左侧浮动的影响;
<code>clear:right</code> 清除右侧浮动的影响; <code>clear:both</code></p>
<h1 id="overflow">Overflow</h1>
<p>控制父容器内容溢出, 显示问题</p>
<p><code>overflow: hidden</code>; <code>overflow:auto;</code> 自适应, 垂直滚动条</p>
<p>打断字母, 强制字母换行西阿汉按<code>word-break: break-all</code></p>
<h1 id="-">左右分行</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
<span class="class">.main</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1000</span>px</span></span>;
  <span class="rule"><span class="attribute">overflow</span>:<span class="value">hidden</span></span>; <span class="rule">// 强制检测浮动流
}</span></span>

<span class="class">.left</span> <span class="rules">{
  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300</span>px</span></span>;
<span class="rule">}</span></span>

<span class="class">.right</span><span class="rules">{
  <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">650</span>px</span></span>;
<span class="rule">}</span></span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>

<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"main"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"left"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"right"</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">定位</h1>
<p><code>position: relative;</code> 偏移原先位置, 配合 <code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code> 使用</p>
<p><code>position: absolute;</code> 完全脱离, 参照物是浏览器; 如果绝对定位的盒子有最近定位的父容器,
那么就以这个父容器为参照物.(子绝对, 父相对)</p>
<p>改变z轴堆叠顺序, <code>z-index: 998</code></p>
<h1 id="-">兼容</h1>
<p>ie6双倍边距问题 如果外边距的方向和浮动方向相同, 那么ie6浏览器肯定会出现双倍边距问题;
如果外边距方向和浮动方向不同, 可能会出现双倍边距问题. 解决办法<code>_display: inline;</code>, 加下划线, 只针对ie6启用.</p>
<p>ie浏览器, 图片链接的边框线问题. <code>img{border: 0;}</code></p>
<p>ie6, img底部留白, 显示将回车当做空格</p>
<ol>
<li><code>img{display:block;}</code></li>
<li>将父级设置溢出隐藏 <code>div{overflow:hidden;}</code> </li>
</ol>
<h1 id="-">滑动门</h1>
<p>内部所有标签都左浮动, 解决非矩形盒子背景为题</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="class">.left</span> <span class="rules">{
<span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url(img/left.jpg)</span></span></span>;
<span class="rule">}</span></span>
<span class="class">.center</span> <span class="rules">{
<span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
<span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url(img/center.jpg)</span></span></span>;
<span class="rule">}</span></span>
<span class="class">.right</span> <span class="rules">{
<span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40</span>px</span></span>;
<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url(img/right.jpg)</span></span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"left"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"center"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"right"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="css-">css 精灵</h1>
<p>图片整合技术, css sprite, css 雪碧</p>
<p>针对的图片形式是<em>背景图像</em></p>
<h1 id="-">滤镜</h1>
<p>半透明效果, 包括上面的文字也会透明, 所以要hack一下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="attribute">filter</span><span class="value">: alpha(opacity=<span class="number">60</span>);</span><span class="comment">/*只有ie内核*/</span>
<span class="attribute">opacity</span><span class="value">: <span class="number">0.6</span>;</span>
</pre></td></tr></table></figure>

<h1 id="-">建站流程</h1>
<ul>
<li>定义站点, 明确建站目的</li>
<li>激励网站结构图, 绘制流程图</li>
<li>首页的设计和制作</li>
<li>其他页面的设计和制作</li>
<li>测试</li>
<li>发布和维护</li>
</ul>
<p>网站基本页面类型</p>
<ul>
<li>首页 index.html</li>
<li>列表页 list.html 网站主导航点击进去的页面就是列表页</li>
<li>详情页(文章页), detail.html, 除了主导航以外的页面都是详情页</li>
</ul>
<h1 id="-banner">大 banner</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">banner_wrapper</span> <span class="rules">{
<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>; <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
<span class="rule">}</span></span>
<span class="tag">banner</span> <span class="rules">{
<span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">50</span>%</span></span>; <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -XXpx</span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h1 id="-">楔形</h1>
<p>制作小三角</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="class">.box</span> <span class="rules">{
<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span>px</span></span>;  <span class="rule"><span class="attribute">border-left</span>:<span class="value"> <span class="number">10</span>px solid <span class="hexcolor">#000</span></span></span>;
<span class="rule"><span class="attribute">border-right</span>:<span class="value"> <span class="number">10</span>px solid <span class="hexcolor">#fff</span></span></span>;
<span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> <span class="number">10</span>px solid <span class="hexcolor">#fff</span></span></span>;
<span class="rule"><span class="attribute">border-top</span>:<span class="value"> <span class="number">10</span>px solid <span class="hexcolor">#fff</span></span></span>;
<span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>; <span class="comment">/**hack ie6 **/</span>
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<h1 id="ie6-hack">IE6 hack</h1>
<ul>
<li>选择器 hack<ul>
<li>针对ie6 <code>*html.header{width: 100px;}</code></li>
<li>针对ie7 <code>*+html.header{width: 100px;}</code></li>
</ul>
</li>
<li>属性 hack<ul>
<li>ie6: <code>_color: red</code></li>
<li>ie7及其以下: <code>*color: red</code></li>
</ul>
</li>
<li>后缀 hack<ul>
<li>ie6-10: <code>color:red\9</code></li>
<li>ie8-10: <code>color:red\0</code></li>
<li>ie9, 10: <code>color:red\9\0</code></li>
</ul>
</li>
<li>浏览器hack<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">&lt;!--[if IE]&gt; 只能被ie识别 ;&lt;![endif]--&gt;</span>
<span class="comment">&lt;!--[if IE 6]&gt; 只能被ie6识别 ;&lt;![endif]--&gt;</span>
<span class="comment">&lt;!--[if gte IE 6]&gt; &lt;![endif]--&gt;</span>
<span class="comment">&lt;!--[if gt IE 6]&gt;  ;&lt;![endif]--&gt;</span>
<span class="comment">&lt;!-- lte lt --&gt;</span>

<span class="comment">&lt;!-- 判断不是ie --&gt;</span>
<span class="comment">&lt;!--[if ! ie]&gt;&lt;!--&gt;</span>要判断的内容<span class="comment">&lt;!--&lt;![endif]--&gt;</span>
</pre></td></tr></table></figure>


</li>
</ul>
<p>行内块间距问题</p>
<ol>
<li>去掉换行</li>
<li><p>加上注释</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="comment">&lt;!--
--&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p><code>margin-left: -8px</code></p>
</li>
<li><code>word-spacing: -8px</code></li>
<li>父盒子 <code>font-size: 0</code></li>
</ol>
<h2 id="ie6-bug">ie6 bug</h2>
<p>ie6注释引起的bug(多余字符)</p>
<ol>
<li>去掉注释</li>
<li>加上空格</li>
<li>加<code>position:relative</code></li>
</ol>
<p>ie6 li出现空白间隙, 因为li里面浮动太复杂, 导致有间隙;
解决方法 <code>vertical-lign: middle;</code></p>
<p>绝对定位, 父盒子奇数长宽, 出现间距; 解决办法, 尽量奇数</p>
<h1 id="tip">Tip</h1>
<p><code>text-indent: 9999em</code> 控制隐藏文字, 优化 logo</p>
<p>表单标签和表单标签对齐, 或表单标签和普通标签对齐,
那么用浮动 <code>float</code>, 浮动可以实现完全没有间距的左对齐和顶对齐</p>
<p>ie6 float 浮动会自动展开, 除非给他加确定的宽度</p>
<p>ie6元素高度给设置成19px以下, 设置不了, <code>overflow: hidden</code></p>
<p><code>white-space: pre</code> 不合并空格; <code>nowrap</code> 强制在同一行显示所有文本</p>
<p><code>text-overflow: ellipsis</code>, 如果文本溢出, 显示省略号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">div</span> <span class="attribute">title</span>=<span class="value">"tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<h1 id="-">圣杯布局</h1>
<p>hack 居中对齐</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>* <span class="tag">div</span><span class="rules">{ <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;<span class="rule">}</span></span>
<span class="class">.left</span>, <span class="class">.right</span> <span class="rules">{
  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300</span>px</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400</span>px</span></span>; 
<span class="rule">}</span></span>
<span class="class">.content</span><span class="rules">{
  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300</span>px</span></span>; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>;
<span class="rule">}</span></span>
<span class="class">.left</span> <span class="rules">{ <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">100</span>%</span></span>;<span class="rule">}</span></span>
<span class="class">.right</span> <span class="rules">{ <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">300</span>px</span></span>;<span class="rule">}</span></span>
<span class="class">.cont_in</span> <span class="rules">{
  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> <span class="number">300</span>px</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"content"</span>&gt;
  &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"cont_in"</span>&gt;
  &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"left"</span>&gt; &lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"right"</span>&gt; &lt;/<span class="keyword">div</span>&gt;
</pre></td></tr></table></figure>

<p>满屏显示技巧</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="tag">html</span>, <span class="tag">body</span>, <span class="tag">ul</span>, <span class="tag">li</span> <span class="rules">{<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>%</span></span></span>}
<span class="comment">/* 显示拉条 */</span>
<span class="tag">overflow-y</span>: <span class="tag">scroll</span>;
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[CoffeeScript 基础语法]]></title>
    <link href="http://zhpooer.github.io/2014/11/20/coffeescript-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://zhpooer.github.io/2014/11/20/coffeescript-基础语法/</id>
    <published>2014-11-20T06:13:25.000Z</published>
    <updated>2014-12-07T08:36:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">基础语法</h1>
<p><code>&gt; coffee –c –w status.coffee</code> Watch </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">'http://coffeescript.org/extras/coffee-script.js'</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/coffeescript'</span> <span class="attribute">src</span>=<span class="value">'status.coffee'</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<figure class="highlight coffeescript:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>houseRoast = <span class="literal">null</span>

<span class="function"><span class="title">hasMilk</span> = <span class="params">(style)</span> -&gt;</span>
  <span class="keyword">switch</span> style
    <span class="keyword">when</span> <span class="string">"latte"</span>, <span class="string">"cappuccino"</span>
      <span class="literal">yes</span>
    <span class="keyword">else</span>
      <span class="literal">no</span>

<span class="function"><span class="title">makeCoffee</span> = <span class="params">(requestedStyle)</span> -&gt;</span>
  style = requestedStyle || <span class="string">'Espresso'</span>
  <span class="keyword">if</span> houseRoast?
    <span class="string">"<span class="subst">#{houseRoast}</span> <span class="subst">#{style}</span>"</span>
  <span class="keyword">else</span>
    style

<span class="function"><span class="title">barista</span> = <span class="params">(style)</span> -&gt;</span>
  time = (<span class="keyword">new</span> Date()).getHours()
  <span class="keyword">if</span> hasMilk(style) <span class="keyword">and</span> type &gt; <span class="number">12</span> <span class="keyword">then</span> <span class="string">"NO!"</span>
  <span class="keyword">else</span>
    coffee = makeCoffee style
    <span class="string">"Enjoy your <span class="subst">#{coffee}</span>"</span>
</pre></td></tr></table></figure>

<figure class="highlight coffeescript:"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>chuckNorris = <span class="string">'Chuck Norris'</span>
<span class="keyword">weak</span> = <span class="string">'weak'</span>
chuckNorris <span class="keyword">is</span> <span class="keyword">weak</span>   # <span class="keyword">false</span>
chuckNorris isnt <span class="keyword">weak</span> # <span class="keyword">true</span>

<span class="number">5</span> isnt <span class="number">6</span> # <span class="keyword">true</span>
<span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">6</span> # <span class="keyword">false</span>

# Unlike <span class="keyword">in</span> JavaScript, the equality <span class="keyword">and</span> inequality operators <span class="keyword">in</span> CoffeeScript aren’t <span class="keyword">type</span>
# coercive. They’re equivalent <span class="keyword">to</span> === <span class="keyword">and</span> !== <span class="keyword">in</span> JavaScript:

<span class="string">''</span> == <span class="keyword">false</span> # <span class="keyword">false</span>
<span class="number">1</span> == <span class="string">'1'</span> #<span class="keyword">true</span>

<span class="number">4</span> + <span class="string">'3'</span> # <span class="string">'43'</span>
<span class="string">'apples'</span> – <span class="string">'oranges'</span> # NaN
<span class="string">'3'</span>*<span class="number">3</span> # <span class="number">9</span>

<span class="keyword">not</span> (<span class="number">3</span>%<span class="number">2</span>) # <span class="keyword">false</span>
<span class="keyword">not</span> (<span class="number">4</span>%<span class="number">2</span>) # <span class="keyword">true</span>
</pre></td></tr></table></figure>

<h2 id="property-access">PROPERTY ACCESS</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>movie = title: <span class="attribute">'Way</span> <span class="keyword">of</span> the Dragon', star: <span class="attribute">'Bruce</span> Lee'
myPropertyName = <span class="attribute">'title</span>'
movie[myPropertyName] # <span class="attribute">'Way</span> <span class="keyword">of</span> the Dragon'
</pre></td></tr></table></figure>

<h2 id="types-existential-and-combining-operators">Types, existential, and combining operators</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>reference = <span class="keyword">null</span>
reference == <span class="keyword">null</span> <span class="preprocessor"># true</span>
<span class="keyword">typeof</span> <span class="keyword">null</span>  <span class="preprocessor"># 'object'</span>

pegasus? <span class="preprocessor"># false</span>
roundSquare? <span class="preprocessor"># false</span>
pegasus = <span class="string">'Horse with wings'</span>
pegasus? <span class="preprocessor"># true</span>

<span class="keyword">typeof</span> roundSquare
<span class="preprocessor"># 'undefined'</span>
</pre></td></tr></table></figure>

<h2 id="statements-as-expressions">Statements as expressions</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre>
<span class="function"><span class="title">connectJackNumber</span> = <span class="params">(number)</span> -&gt;</span>
  <span class="string">"Connecting jack <span class="subst">#{number}</span>"</span>
  
receiver = <span class="string">'Betty'</span>

<span class="keyword">switch</span> receiver
  <span class="keyword">when</span> <span class="string">'Betty'</span>
    connectJackNumber
    <span class="number">4</span>
  <span class="keyword">when</span> <span class="string">'Sandra'</span>
    connectJackNumber
    <span class="number">22</span>
  <span class="keyword">when</span> <span class="string">'Toby'</span>
    connectJackNumber
    <span class="number">9</span>
  <span class="keyword">else</span>
    <span class="string">'I am sorry, your call cannot be connected'</span>


style = <span class="string">'latte'</span>
milk = <span class="keyword">switch</span> style
  <span class="keyword">when</span> <span class="string">"latte"</span>, <span class="string">"cappuccino"</span>
    <span class="literal">yes</span>
  <span class="keyword">else</span>
    <span class="literal">no</span>

<span class="comment">## Try Catch</span>
<span class="function"><span class="title">flyAway</span> = <span class="params">(animal)</span> -&gt;</span>
  <span class="keyword">if</span> animal <span class="keyword">is</span> <span class="string">'pig'</span>
    <span class="keyword">throw</span> <span class="string">'Pigs cannot fly'</span>
  <span class="keyword">else</span>
    <span class="string">'Fly away!'</span>
    
peter = <span class="string">'pig'</span>
<span class="keyword">try</span>
  flyAway peter
<span class="keyword">catch</span> error
  error
<span class="keyword">finally</span>
  <span class="string">'Clean up!'</span>

<span class="comment"># inline blocks</span>
year = <span class="number">1983</span>
<span class="keyword">if</span> year <span class="keyword">is</span> <span class="number">1983</span> <span class="keyword">then</span> hair = <span class="string">'perm'</span>

lastDigit = <span class="number">4</span>
daySuffix = <span class="keyword">switch</span> lastDigit
  <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">'st'</span>
  <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">'nd'</span>
  <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">'rd'</span>
  <span class="keyword">else</span> <span class="string">'th'</span>

hair = <span class="string">'permed'</span> <span class="keyword">if</span> year <span class="keyword">is</span> <span class="number">1983</span>
</pre></td></tr></table></figure>

<h2 id="method">Method</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="string">'haystack'</span>.search <span class="string">'needle'</span> <span class="array"># </span>-<span class="number">1</span>
<span class="string">'haystack'</span>.search <span class="string">'hay'</span> <span class="array"># </span><span class="number">0</span>
<span class="string">'haystack'</span>.search <span class="string">'stack'</span> <span class="array"># </span><span class="number">3</span>


milkDrinks = <span class="string">'latté,mocha,cappuccino,flat white,eiskaffee'</span>
hakMilk = (style) -&gt;
  milkDrinks.search(style) isnt -<span class="number">1</span>

hasMilk <span class="string">'mocha'</span> <span class="array"># true</span>
hasMilk <span class="string">'espresso romano'</span> <span class="array"># false</span>

<span class="string">'haystack'</span>.replace <span class="string">'hay'</span>, <span class="string">'needle'</span> <span class="array"># </span><span class="string">'needlestack'</span>
milkDrinks.replace <span class="string">'latté'</span>, <span class="string">'latte'</span>

<span class="string">'Cappuccino'</span>.toLowerCase() <span class="array"># </span><span class="string">'cappuccino'</span>
<span class="string">'I am shouting!'</span>.toUpperCase() <span class="array"># </span><span class="string">'I AM SHOUTING!'</span>


<span class="string">'Banana,Banana'</span>.split /,/ <span class="array"># </span>[ <span class="string">'Banana'</span>, <span class="string">'Banana'</span> ]
<span class="string">'latte,mocha,cappuccino,flat white,eiskaffee'</span>.split /,/ <span class="array"># </span>[ <span class="string">'latte'</span>, <span class="string">'mocha'</span>, <span class="string">'cappuccino'</span>, <span class="string">'flat white'</span>, <span class="string">'eiskaffee'</span> ]
</pre></td></tr></table></figure>

<h2 id="length-join-slice-and-concat">length, join, slice, and concat</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>fence = [<span class="string">'fence pail'</span>, <span class="string">'fence pail'</span>]
fence.length <span class="array"># </span><span class="number">2</span>

fence[<span class="number">999</span>] = <span class="string">'fence pail'</span>
fence.length <span class="array"># </span><span class="number">1000</span>

[<span class="string">'double'</span>, <span class="string">'barreled'</span>].join <span class="string">'-'</span> <span class="array"># </span><span class="string">'double-barreled'</span>
[<span class="string">'good'</span>, <span class="string">'bad'</span>, <span class="string">'ugly'</span>].slice <span class="number">0</span>, <span class="number">2</span> <span class="array"># </span>[<span class="string">'good'</span>, <span class="string">'bad'</span>]

[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].slice <span class="number">0</span>,<span class="number">1</span> <span class="array"># </span>[<span class="number">0</span>]
[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].slice <span class="number">3</span>,<span class="number">5</span> <span class="array"># </span>[<span class="number">3</span>,<span class="number">4</span>]

[<span class="string">'mythril'</span>, <span class="string">'energon'</span>].concat [<span class="string">'nitron'</span>, <span class="string">'durasteel'</span>, <span class="string">'unobtanium'</span>] <span class="array"># </span>[ <span class="string">'mythril'</span>, <span class="string">'energon'</span>, <span class="string">'nitron'</span>, <span class="string">'durasteel'</span>, <span class="string">'unobtanium'</span> ]
</pre></td></tr></table></figure>

<h2 id="in-range-comprehensions">In &amp; Range &amp; Comprehensions</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="string">'to be'</span> <span class="keyword">in</span> [<span class="string">'to be'</span>, <span class="string">'not to be'</span>] <span class="comment"># true</span>
living = <span class="string">'the present'</span>
living <span class="keyword">in</span> [<span class="string">'the past'</span>, <span class="string">'the present'</span>] <span class="comment"># true</span>

[<span class="number">1.</span><span class="number">.10</span>] <span class="comment"># [ 1,2,3,4,5,6,7,8,9,10 ]</span>
[<span class="number">5.</span><span class="number">.1</span>]  <span class="comment"># [ 5,4,3,2,1 ]</span>

number <span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>] <span class="comment"># [9,0,2,1,0]</span>
number + <span class="number">1</span> <span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>] <span class="comment"># [10,1,3,2,1]</span>
letter <span class="keyword">for</span> letter <span class="keyword">in</span> [<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>] <span class="comment"># [x,y,z]</span>

<span class="function"><span class="title">mix</span> = <span class="params">(ingredient)</span> -&gt;</span> <span class="string">"Mixing <span class="subst">#{ingredient}</span>"</span>
<span class="keyword">for</span> ingredient <span class="keyword">in</span> ingredients <span class="keyword">when</span> ingredient.search(<span class="string">'flour'</span>) &lt; <span class="number">0</span>
  mix ingredient

person <span class="keyword">for</span> person <span class="keyword">in</span> [<span class="string">'Kingpin'</span>, <span class="string">'Galactus'</span>, <span class="string">'Thanos'</span>, <span class="string">'Doomsday'</span>] <span class="keyword">by</span> <span class="number">2</span> <span class="comment"># ['Kingpin', 'Thanos']</span>
</pre></td></tr></table></figure>

<h1 id="functions">Functions</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="function"><span class="title">count</span> = <span class="params">(text, delimiter)</span> -&gt;</span>
  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">unless</span> text
  words = text.split(delimiter || <span class="regexp">/,/</span>)
  words.length


<span class="function"><span class="title">partyMessage</span> = -&gt;</span> <span class="built_in">console</span>.log <span class="string">"It's party time!"</span>
setTimeout partyMessage, <span class="number">1000</span>

interval = setInterval partyMessage, <span class="number">1000</span>
clearInterval interval

<span class="function"><span class="title">multiple</span> = <span class="params">(initial, numbers)</span> -&gt;</span>
  total = initial <span class="keyword">or</span> <span class="number">1</span>
  <span class="keyword">for</span> number <span class="keyword">in</span> numbers
    total = total * number
  total

<span class="function"><span class="title">sum</span> = <span class="params">(numbers)</span> -&gt;</span>
  total = <span class="number">0</span>
  <span class="keyword">for</span> number <span class="keyword">in</span> numbers
    total  = total + number
  total

<span class="comment">## Accumulate</span>
<span class="function"><span class="title">accumulate</span> = <span class="params">(initial, numbers, accumulator)</span> -&gt;</span>
  total = initial <span class="keyword">or</span> <span class="number">0</span>
  <span class="keyword">for</span> number <span class="keyword">in</span> numbers
    total = accumulator total, number
  total

<span class="function"><span class="title">sum</span> = <span class="params">(acc, current)</span> -&gt;</span> acc + current
accumulate(<span class="number">0</span>, [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], sum)

<span class="function"><span class="title">logArgument</span> = <span class="params">(logMe=<span class="string">'default'</span>)</span> -&gt;</span> <span class="built_in">console</span>.log logMe
</pre></td></tr></table></figure>

<h2 id="do">do</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">do</span><span class="function"> -&gt;</span>
  name = <span class="string">'Ren'</span>
</pre></td></tr></table></figure>

<h1 id="object">object</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
</pre></td><td class="code"><pre>
futurama =
  <span class="attribute">characters</span>:[
    <span class="string">'Fry'</span>
    <span class="string">'Leela'</span>
    <span class="string">'Bender'</span>
    <span class="string">'The Professor'</span>
    <span class="string">'Scruffy'</span>
  ]
<span class="attribute">quotes</span>:[
  <span class="string">'Good news everyone'</span>
  <span class="string">'Bite my shiny metal'</span>
]

phonebook =
  <span class="attribute">numbers</span>:
    <span class="attribute">hannibal</span>: <span class="string">'555-5551'</span>
    <span class="attribute">darth</span>: <span class="string">'555-5552'</span>
    <span class="attribute">hal900</span>: <span class="string">'disconnected'</span>
    <span class="attribute">freddy</span>: <span class="string">'555-5554'</span>
    <span class="string">'T-800'</span>: <span class="string">'555-5555'</span>
  <span class="attribute">list</span>:<span class="function"> -&gt;</span>
    <span class="string">"<span class="subst">#{name}</span>: <span class="subst">#{number}</span>"</span> <span class="keyword">for</span> name, number <span class="keyword">of</span> <span class="property">@numbers</span>
  <span class="attribute">add</span>: <span class="function"><span class="params">(name, number)</span> -&gt;</span>
    <span class="keyword">if</span> <span class="keyword">not</span> (name <span class="keyword">of</span> <span class="property">@numbers</span>)
      <span class="property">@numbers</span>[name] = number
  <span class="attribute">get</span>: <span class="function"><span class="params">(name)</span> -&gt;</span>
    <span class="keyword">if</span> name <span class="keyword">of</span> <span class="property">@numbers</span>
      <span class="string">"<span class="subst">#{name}</span>: <span class="subst">#{<span class="property">@numbers</span>[name]}</span>"</span>
    <span class="keyword">else</span>
      <span class="string">"<span class="subst">#{name}</span> not found"</span>

process.stdin.setEncoding <span class="string">'utf8'</span>
stdin = process.openStdin()
stdin.<span class="literal">on</span> <span class="string">'data'</span>, <span class="function"><span class="params">(chunk)</span> -&gt;</span>
  args = chunk.split(<span class="string">' '</span>)
  command = args[<span class="number">0</span>].trim()
  name = args[<span class="number">1</span>].trim() <span class="keyword">if</span> args[<span class="number">1</span>]
  number = args[<span class="number">2</span>].trim() <span class="keyword">if</span> args[<span class="number">2</span>]
  <span class="keyword">switch</span>
    <span class="keyword">when</span> <span class="string">'add'</span>
      res = phonebook.add(name, number) <span class="keyword">if</span> name <span class="keyword">and</span> number
    <span class="keyword">when</span> <span class="string">'get'</span>
      <span class="built_in">console</span>.log phonebook.get(name) <span class="keyword">if</span> name

score <span class="keyword">for</span> name, score <span class="keyword">of</span> {<span class="attribute">bob</span>: <span class="number">152</span>, <span class="attribute">john</span>: <span class="number">139</span>, <span class="attribute">tracy</span>: <span class="number">209</span>}

<span class="comment"># 不选原型中</span>
<span class="keyword">for</span> own page, count <span class="keyword">of</span> views
  sum = sum + count

views[key] ?= <span class="number">0</span>


<span class="comment"># fat arrow =&gt; bind the value of this </span>
someElement.<span class="function"><span class="title">onClick</span> = -&gt;</span>
  setTimeout<span class="function"> =&gt;</span>
    <span class="keyword">this</span>.innerHTML <span class="string">'Got clicked'</span>, <span class="number">1000</span>

cassetteCopy = {}
<span class="keyword">for</span> own property, value <span class="keyword">of</span> cassette
   cassetteCopy[property] = value
</pre></td></tr></table></figure>

<h1 id="class">class</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Views</span></span>
  <span class="attribute">constructor</span>:<span class="function"> -&gt;</span>
    <span class="property">@pages</span> = {}
  <span class="attribute">increment</span>: <span class="function"><span class="params">(key)</span> -&gt;</span>
    <span class="property">@pages</span>[key] ?= <span class="number">0</span>
    <span class="property">@pages</span>[key] = <span class="property">@pages</span>[key] + <span class="number">1</span>
  <span class="attribute">total</span>: <span class="function"><span class="params">()</span> -&gt;</span>
    sum = <span class="number">0</span>
    <span class="keyword">for</span> own url, count <span class="keyword">of</span> <span class="property">@pages</span>
      sum = sum + count
    sum

<span class="class"><span class="keyword">class</span> <span class="title">Camera</span> <span class="title">extneds</span> <span class="title">Product</span></span>
  <span class="attribute">megapixiels</span>:<span class="function"> -&gt;</span>
    <span class="property">@info</span>.megapixiels || <span class="string">'Unknow'</span>

<span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>
  instance = []  <span class="comment"># 私有变量</span>
  <span class="comment"># 静态方法</span>
  <span class="property">@find</span> = <span class="function"><span class="params">(query)</span> -&gt;</span>
    (product <span class="keyword">for</span> product <span class="keyword">in</span> instances <span class="keyword">when</span> product.name <span class="keyword">is</span> query)
  
  <span class="attribute">constructor</span>: <span class="function"><span class="params">(name)</span> -&gt;</span>
    instances = instances.concat [@]
    <span class="property">@name</span> = name

<span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">(name, cost)</span> -&gt;</span>
    <span class="property">@name</span> = name
    <span class="property">@cost</span> = cost
  <span class="attribute">price</span>:<span class="function"> -&gt;</span>
    <span class="property">@cost</span>

<span class="class"><span class="keyword">class</span> <span class="title">Camera</span> <span class="keyword">extends</span> <span class="title">Product</span></span>
  markup = <span class="number">2</span>
  <span class="attribute">price</span>:<span class="function"> -&gt;</span>
    <span class="keyword">super</span>()*markup

<span class="attribute">Example</span>::<span class="function"><span class="title">justAdded</span> = -&gt;</span> <span class="string">"just added!"</span>

<span class="comment">## is equivalent to</span>
Example.prototype.<span class="function"><span class="title">justAdded</span> = -&gt;</span> <span class="string">"just added!"</span>

<span class="attribute">Array</span>::<span class="function"><span class="title">join</span> = -&gt;</span> <span class="string">"Array::join was redefined"</span>

<span class="function"><span class="title">include</span> = <span class="params">(klass, <span class="built_in">module</span>)</span> -&gt;</span>
  <span class="keyword">for</span> key, value <span class="keyword">of</span> <span class="built_in">module</span>
    <span class="attribute">klass</span>::[key] = value
</pre></td></tr></table></figure>

<h1 id="compose">compose</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="code"><pre><span class="function"><span class="title">compose</span> = <span class="params">(f, g)</span> -&gt;</span> <span class="function"><span class="params">(x)</span> -&gt;</span> f g x
taxForProducts = compose tax, netProfit
loyaltyDiscountForUser = compose loyaltyDiscount, userSpend


<span class="comment"># before</span>
<span class="function"><span class="title">before</span> = <span class="params">(decoration)</span> -&gt;</span>
  <span class="function"><span class="params">(base)</span> -&gt;</span>
    <span class="function"><span class="params">(params)</span> -&gt;</span>
      decoration params
      base params

<span class="function"><span class="title">after</span> = <span class="params">(decoration)</span> -&gt;</span>
  <span class="function"><span class="params">(base)</span> -&gt;</span>
    <span class="function"><span class="params">(params...)</span> -&gt;</span>
      result = base params...
      decoration params...
      result

<span class="function"><span class="title">around</span> = <span class="params">(decoration)</span> -&gt;</span>
  <span class="function"><span class="params">(base)</span> -&gt;</span>
    <span class="function"><span class="params">(params...)</span> -&gt;</span>
     <span class="function"><span class="title">callback</span> = -&gt;</span> base params...
     decoration ([callback].concat params)...

<span class="function"><span class="title">beforeAsync</span> = <span class="params">(decoration)</span> -&gt;</span>
  <span class="function"><span class="params">(base)</span> -&gt;</span>
    <span class="function"><span class="params">(params..., callback)</span> -&gt;</span>
      result = <span class="literal">undefined</span>
      <span class="function"><span class="title">applyBase</span> = =&gt;</span>
        result = base.apply @, (params.concat callback)
      decoration.apply @, (params.concat applyBase)
      result

user?.contact?.phone?.home
</pre></td></tr></table></figure>

<h2 id="style">Style</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="code"><pre>
<span class="function"><span class="title">highlight</span> = <span class="params">(names...)</span> -&gt;</span>
  <span class="keyword">for</span> name <span class="keyword">in</span> names
    color find(name), <span class="string">'yellow'</span>

teams = [<span class="string">'wolverines'</span>, <span class="string">'sabertooths'</span>, <span class="string">'mongooses'</span>]
highlight teams...

[a,b] = [b,a]

competitors = [
  <span class="attribute">name</span>: <span class="string">'wildcats'</span>
  <span class="attribute">points</span>: <span class="number">5</span>
  ,
  <span class="attribute">name</span>: <span class="string">'bobcats'</span>
  <span class="attribute">points</span>: <span class="number">3</span>
]

<span class="function"><span class="title">makeCompetition</span> = <span class="params">({max, sort})</span> -&gt;</span>
  {max, sort}

[first, middle..., last] = competitors

<span class="function"><span class="title">render</span> = <span class="params">(user)</span> -&gt;</span>
  <span class="string">"""
  Home phone for <span class="subst">#{user?.name?.first}</span>: <span class="subst">#{user?.contact?.phone?.home}</span>
  """</span>

contact = user?.contact?.phone?.home || <span class="string">'Not provided'</span>

<span class="class"><span class="keyword">class</span> <span class="title">DuckRace</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">(<span class="property">@ducks</span>)</span> -&gt;</span>
  <span class="attribute">go</span>:<span class="function"> -&gt;</span>
    duck.walk() <span class="keyword">for</span> duck <span class="keyword">in</span> <span class="property">@ducks</span>

evens = numbers.filter <span class="function"><span class="params">(item)</span> -&gt;</span> item%<span class="number">2</span> == <span class="number">0</span>

taxes = paid.map <span class="function"><span class="params">(item)</span> -&gt;</span> item*<span class="number">0.1</span>

<span class="comment"># 链式调用</span>
<span class="function"><span class="title">using</span> = <span class="params">(object, fn)</span> -&gt;</span> fn.apply object
using turtle,<span class="function"> -&gt;</span>
  <span class="property">@forward</span> <span class="number">2</span>
  <span class="property">@rotate</span> <span class="number">90</span>
  <span class="property">@forward</span> <span class="number">4</span>

x y z <span class="number">4</span> <span class="comment"># x(y(z(4)))</span>
</pre></td></tr></table></figure>

<h1 id="dsl">DSL</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>
<span class="class"><span class="keyword">class</span> <span class="title">Email</span></span>
  SMTP_PORT = <span class="number">25</span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">(option)</span> -&gt;</span>
    [<span class="string">'from'</span>, <span class="string">'to'</span>, <span class="string">'subject'</span>, <span class="string">'body'</span>].forEach <span class="function"><span class="params">(key)</span> =&gt;</span>
      @[<span class="string">"_<span class="subst">#{key}</span>"</span>] = option?[key]
      @[key] = <span class="function"><span class="params">(newValue)</span> -&gt;</span>
        @[<span class="string">"_<span class="subst">#{key}</span>"</span>] = newValue
        @

scruffysEmail
  .to(<span class="string">'agtron@coffeescriptinaction.com'</span>)
  .from(<span class="string">'scruffy@coffeescriptinaction.com'</span>)
  .subject(<span class="string">'Hi Agtron!'</span>)
  .body <span class="string">'''
    This is a test email.
  '''</span>
  
scruffysEmail.send()
</pre></td></tr></table></figure>

<h2 id="html">html</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>loggedIn = -&gt; <span class="keyword">true</span>
doctype <span class="number">5</span>
html -&gt;
  body -&gt;
    ul <span class="class"><span class="keyword">class</span>: '<span class="title">info</span>', -&gt;</span>
      li -&gt; <span class="string">'Logged in'</span> <span class="keyword">if</span> loggedIn()

doctype = (variant) -&gt;
  switch variant
    <span class="keyword">when</span> <span class="number">5</span>
      <span class="string">"&lt;!DOCTYPE html&gt;"</span>

markup = (wrapper) -&gt;
  (attributes..., descendents) -&gt;
    attributesMarkup = <span class="keyword">if</span> attributes.length is <span class="number">1</span>
      <span class="string">" "</span> + (<span class="string">"<span class="subst">#{name}</span>='<span class="subst">#{value}</span>'"</span> <span class="keyword">for</span> name, value of attributes[<span class="number">0</span>]).join <span class="string">' '</span>
    <span class="keyword">else</span>
      <span class="string">''</span>
    <span class="string">"&lt;<span class="subst">#{wrapper}</span><span class="subst">#{attributesMarkup}</span>&gt;<span class="subst">#{descendents() || <span class="string">''</span>}</span>&lt;/<span class="subst">#{wrapper}</span>&gt;"</span>

html = markup <span class="string">'html'</span>
body = markup <span class="string">'body'</span>
ul = markup <span class="string">'ul'</span>
li = markup <span class="string">'li'</span>
</pre></td></tr></table></figure>

<h2 id="css">css</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="function"><span class="title">emphasis</span> = -&gt;</span>
  <span class="attribute">fontWeight</span>: <span class="string">'bold'</span>

css
  <span class="string">'ul'</span>:
    emphasis()
  <span class="string">'.x'</span>:
    <span class="attribute">fontSize</span>: <span class="string">'2em'</span>

<span class="function"><span class="title">css</span> = <span class="params">(raw)</span> -&gt;</span>
  <span class="function"><span class="title">hyphenate</span> = <span class="params">(property)</span> -&gt;</span>
    <span class="function"><span class="title">dashThenUpperAsLower</span> = <span class="params">(match, pre, upper)</span> -&gt;</span>
      <span class="string">"<span class="subst">#{pre}</span>-<span class="subst">#{upper.toLowerCase}</span>"</span>
    property.replace <span class="regexp">/([a-z])(A-Z)/g</span>, dashThenUpperAsLower

    output = (
      <span class="keyword">for</span> selector, rules <span class="keyword">of</span> raw
        rules = (<span class="keyword">for</span> ruleName, ruleValue <span class="keyword">of</span> rules
          <span class="string">"<span class="subst">#{hyphenate ruleName}</span>: <span class="subst">#{ruleValue}</span>;"</span>
        ).join <span class="string">'\n'</span>
        <span class="string">"""
        <span class="subst">#{selector}</span> {
          <span class="subst">#{rules}</span>
        }
        """</span>
    ).join <span class="string">'\n'</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>coffee = <span class="keyword">require</span> <span class="string">'coffee-script'</span>

coffee.<span class="keyword">eval</span> <span class="string">'2 + 4'</span>
</pre></td></tr></table></figure>

<h1 id="-">兼容</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="built_in">document</span>.querySelector ?= <span class="function"><span class="params">(selector)</span> -&gt;</span>
  <span class="keyword">if</span> <span class="regexp">/^#/</span>.test selector
    (<span class="built_in">document</span>.getElementById (selector.replace <span class="regexp">/^#/gi</span>, <span class="string">''</span>))
  <span class="keyword">else</span>
    <span class="keyword">throw</span> <span class="keyword">new</span> Error <span class="string">'Not supported by this implementation'</span>

Object.create ?= <span class="function"><span class="params">(prototype, extensions)</span> -&gt;</span>
  <span class="keyword">if</span> extensions
    <span class="keyword">throw</span> <span class="keyword">new</span> Error <span class="string">'Not supported by this implementation'</span>
  <span class="keyword">else</span>
    <span class="function"><span class="title">F</span> = -&gt;</span>
  F.prototype = prototype
  <span class="keyword">new</span> F()
</pre></td></tr></table></figure>

<h1 id="module">Module</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>
# -- controller.coffee –
<span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span>
exports.Controller = Controller

# -- blog.coffee –-
controller = require <span class="string">'./controller'</span>
<span class="class"><span class="keyword">class</span> <span class="title">Blog</span> <span class="keyword">extends</span> <span class="title">controller</span>.<span class="title">Controller</span></span>

exports.Post = Post
{Post} = require <span class="string">'./post'</span>
</pre></td></tr></table></figure>

<h1 id="cake">Cake</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="comment"># Cakefile</span>
{spawn} = <span class="built_in">require</span> <span class="string">'child_process'</span>

<span class="comment">## cake build</span>

compile (directory) =<span class="function"> -&gt;</span>
  coffee = spawn <span class="string">'coffee'</span>, [<span class="string">'-c'</span>, <span class="string">'-o'</span>, <span class="string">"compiled/<span class="subst">#{directory}</span>"</span>, directory]
  
coffee.<span class="literal">on</span> <span class="string">'exit'</span>, <span class="function"><span class="params">(code)</span> -&gt;</span>
  <span class="built_in">console</span>.log <span class="string">'Build complete'</span>

<span class="function"><span class="title">clean</span> = <span class="params">(path, callback)</span> -&gt;</span>
  exec <span class="string">"rm -rf <span class="subst">#{path}</span>"</span>,<span class="function"> -&gt;</span> callback?()

<span class="function"><span class="title">forAllSpecsIn</span> = <span class="params">(dir, fn)</span> -&gt;</span>
  execFile <span class="string">'find'</span>, [ dir ], <span class="function"><span class="params">(err, stdout, stderr)</span> -&gt;</span>
    fileList = stdout.split <span class="string">'\n'</span>
    <span class="keyword">for</span> file <span class="keyword">in</span> fileList
      fn file <span class="keyword">if</span> <span class="regexp">/_spec.js$/</span>.test file

<span class="function"><span class="title">runSpecs</span> = <span class="params">(folder)</span> -&gt;</span>
  forAllSpecsIn folder, <span class="function"><span class="params">(file)</span> -&gt;</span>
    <span class="built_in">require</span> <span class="string">"./<span class="subst">#{file}</span>"</span>

task <span class="string">'build'</span>, <span class="string">'Compile the application'</span>,<span class="function"> -&gt;</span>
  clean <span class="string">'compiled'</span>,<span class="function"> -&gt;</span>
    compile <span class="string">'app'</span>,<span class="function"> -&gt;</span>
      <span class="string">'Build complete'</span>

task <span class="string">'test'</span> , <span class="string">'Run the tests'</span>,<span class="function"> -&gt;</span>
  clean <span class="string">'compiled'</span>,<span class="function"> -&gt;</span>
    compile <span class="string">'app'</span>,<span class="function"> -&gt;</span>
      compile <span class="string">'spec'</span>,<span class="function"> -&gt;</span>
        runSpecs <span class="string">'compiled'</span>,<span class="function"> -&gt;</span>
          <span class="built_in">console</span>.log <span class="string">'Tests complete'</span>

<span class="comment">## task 'deploy', -&gt;</span>
<span class="comment">##   invoke 'build'</span>
<span class="comment">##   invoke 'test'</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>{describe, <span class="keyword">it</span>} = <span class="built_in">require</span> <span class="string">'chromic'</span>
{Post} = <span class="built_in">require</span> <span class="string">'../../app/models/post'</span>

describe <span class="string">'Post'</span>, -&gt;
  <span class="built_in">post</span> = <span class="built_in">new</span> Post <span class="string">'A post'</span>, <span class="string">'with contents'</span>
  another = <span class="built_in">new</span> Post <span class="string">'Another post'</span>, <span class="string">'with contents'</span>
  <span class="keyword">it</span> <span class="string">'should return all posts'</span>, -&gt;
    Post.all().<span class="built_in">length</span>.shouldBe <span class="number">2</span>
  
  <span class="keyword">it</span> <span class="string">'should return a specific post'</span>, -&gt;
    Post.<span class="built_in">get</span>(<span class="built_in">post</span>.slug).shouldBe <span class="string">'a-post'</span>
</pre></td></tr></table></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[UI实战]]></title>
    <link href="http://zhpooer.github.io/2014/11/11/ui%E5%AE%9E%E6%88%98/"/>
    <id>http://zhpooer.github.io/2014/11/11/ui实战/</id>
    <published>2014-11-11T09:45:55.000Z</published>
    <updated>2014-11-14T02:11:26.000Z</updated>
    <content type="html"><![CDATA[<p>流程:</p>
<ol>
<li>确定项目内容 (项目名称, 项目产生原因,
项目主要功能点(不要超过三种), 适用人群, 使用环境(需要网络支持, 不需要网络支持))</li>
<li>功能流程穿越图(爱丽丝,彼得潘)</li>
<li>低保真(原型图, 黑白灰), 功能模块 位置</li>
<li>设定视觉标准(设定细节表现, 加配色标准)</li>
<li>高保真(基于设定的视觉标准, 完成所有页面的最终视觉效果)</li>
<li>完成该APP瀑布流展示</li>
</ol>
<h1 id="-">功能流程穿越图</h1>
<p>App功能怎样实现? 该项目一共需要多少个界面实现.根据界面分配任务</p>
<ol>
<li>爱丽丝</li>
<li>彼得潘</li>
<li>相结合(彼得潘+爱丽丝)</li>
</ol>
<p>欢迎界面</p>
<ul>
<li>Logo(教学or引导界面(4-))</li>
<li>广告语</li>
<li>软件版本号</li>
</ul>
<p>弹出方式</p>
<ul>
<li>对话框从边上拉出, 挤掉主页面</li>
<li>对话框从边上弹出</li>
<li>弹出窗口加高斯模糊</li>
<li>弹出窗口加高斯模糊蒙黑,且弹出界面加投影</li>
</ul>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[ICON手机主题点评]]></title>
    <link href="http://zhpooer.github.io/2014/11/11/ui%E8%AE%BE%E8%AE%A1-3/"/>
    <id>http://zhpooer.github.io/2014/11/11/ui设计-3/</id>
    <published>2014-11-11T01:37:29.000Z</published>
    <updated>2014-11-11T09:46:07.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-">点评一</h1>
<p><img src="/img/dp6/1_1.png" alt=""></p>
<blockquote>
<p>标题太粗, 底纹不给力<br>icon 高光太亮, 细节不注意<br>浏览器Icon, 形态是用线, 其他的是面<br>两个收音机, 语义不明确<br>十字架凸起, 与其他icon质感不契合<br>细节整合(如投影), 整体风格(扁平, 凸起; 圆润的角, 尖锐的角)</p>
</blockquote>
<h1 id="-">点评二</h1>
<p><img src="/img/dp6/1_4.png" alt="">
<img src="/img/dp6/1_2.png" alt="">
<img src="/img/dp6/1_3.png" alt=""></p>
<blockquote>
<p>日历细节多, 与其他风格不统一<br>照相机白色太亮, 且和其他风格不一致, 不是偏简洁, 背板不统一<br>时钟打光太强<br>话筒细节多<br>联系人斜面浮雕效果太强</p>
</blockquote>
<h1 id="-">点评三</h1>
<p><img src="/img/dp6/1_5.png" alt=""></p>
<p><img src="/img/dp6/1_6.png" alt=""></p>
<blockquote>
<p>紫色: 老女人, 颜色压抑<br>线和面运用的纠结<br>icon位置的排布</p>
</blockquote>
<p><img src="/img/dp6/1_7.png" alt=""></p>
<blockquote>
<p>蓝色系到青色系</p>
</blockquote>
<h1 id="-">点评四</h1>
<p><img src="/img/dp6/1_8.png" alt=""></p>
<p><img src="/img/dp6/1_9.png" alt=""></p>
<blockquote>
<p>计算器分割一下<br>日历斜面浮雕太亮<br>邮件投影太重<br>天气太阳外发光不契合<br>照片风格不统一<br>背板投影不统一  </p>
</blockquote>
<p><img src="/img/dp6/1_10.png" alt=""></p>
<p><img src="/img/dp6/1_11.png" alt=""></p>
<blockquote>
<p>画面背板颜色偏冷, 但是主题是偏暖</p>
</blockquote>
<h1 id="-">点评五</h1>
<p><img src="/img/dp6/1_12.png" alt=""></p>
<h1 id="-">点评六</h1>
<p><img src="/img/dp6/1_13.png" alt=""></p>
<blockquote>
<p>字可以给白色</p>
</blockquote>
<p><img src="/img/dp6/1_14.png" alt=""></p>
<blockquote>
<p>颜色风格和整体不统一<br>质感厚度太大 </p>
</blockquote>
<p><img src="/img/dp6/1_15.png" alt=""></p>
<h1 id="-">点评七</h1>
<p><img src="/img/dp6/1_16.png" alt=""></p>
<blockquote>
<p>投影 光源不一样</p>
</blockquote>
<h1 id="-">点评八</h1>
<p><img src="/img/dp6/1_17.png" alt=""></p>
<blockquote>
<p>文案有点多</p>
</blockquote>
<p><img src="/img/dp6/1_18.png" alt=""></p>
<blockquote>
<p>线和面, 如视频和云朵; 尖角和圆角</p>
</blockquote>
<h1 id="-">点评九</h1>
<p><img src="/img/dp6/1_19.png" alt="">
<img src="/img/dp6/1_20.png" alt="">
<img src="/img/dp6/1_21.png" alt=""></p>
<blockquote>
<p>风格不统一(点 面)</p>
</blockquote>
<h1 id="tip">Tip</h1>
<p>比较暗的背景要可以用白色字体</p>
<!-- APP 项目相关准备:
流程:
1. 确定项目内容 (项目名称, 项目产生原因,
项目主要功能点(不要超过三种), 适用人群, 使用环境(需要网络支持, 不需要网络支持))
* 时间点: 13号早晨
2. 功能流程穿越图
  * 爱丽丝
  * 彼得潘
3. 低保真(原型图), 功能模块 位置
4. 设定视觉标准(设定细节表现, 加配色标准)
5. 高保真(基于设定的视觉标准, 完成所有页面的最终视觉效果)
6. 完成该APP瀑布流展示



-->
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[UI设计 快速icon生成]]></title>
    <link href="http://zhpooer.github.io/2014/11/04/ui%E8%AE%BE%E8%AE%A1-2/"/>
    <id>http://zhpooer.github.io/2014/11/04/ui设计-2/</id>
    <published>2014-11-04T01:22:42.000Z</published>
    <updated>2014-11-10T09:16:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>当存在两个面转折的效果时, 在转折边添加一像素的亮色调,
明确两个面的转折关系</p>
</blockquote>
<p>PS动画表现形式</p>
<ul>
<li>逐帧动画, 24帧每秒</li>
<li>时间轴动画</li>
</ul>
<!-- 假期作业：
屏幕尺寸： 1136 * 640
状态栏：   40

至少完成4行主题ICON，每行4只。
ICON规范：114 * 114  圆角18（or 20）

要求：
1 微原创

2 美观，风格统一，质感等表现形式必须统一

3 注重光源角度统一

4 主色调及少量配色点缀
-->

<h1 id="-icon">如何快速生成一套主题ICON</h1>
<p>锁屏界面</p>
<ol>
<li>解锁方式</li>
<li>锁屏壁纸</li>
</ol>
<blockquote>
<p>状态栏 40px<br>英文和数字字体选择, Arial<br>除了提示性文字之外, 文字最小给到24点, 提示性文字可以给到18点; ios双数, 安卓给3的倍数</p>
</blockquote>
<p><img src="/img/ui/1_3.png" alt=""></p>
<p>ICON展示界面</p>
<ol>
<li>常规系统ICON</li>
<li>通用ICON(文件夹+第三方ICON美化)</li>
<li>壁纸</li>
</ol>
<p><img src="/img/ui/1_7.png" alt=""></p>
<p>Icon设计过程(语意明确(1, 2), 表现形式明确(3,4))</p>
<ul>
<li>设定风格(简洁 + 微质感)<ol>
<li>关键词提取(温暖: 阳光 麦子 枫叶)</li>
<li>基于关键词给出相关元素, 以及确定配色(金黄色,蓝色,无色系)</li>
</ol>
</li>
<li>设定造型, 细节必须要同一, 表现手法一致(和颜色无关), 如下图描边和填充两种风格
<img src="/img/ui/1_1.png" alt="">
<img src="/img/ui/1_8.png" alt="">
<img src="/img/ui/1_9.png" alt=""></li>
<li>颜色定位, 环境色, 微质感(描边, 叠加渐变, 长投影), <ul>
<li>先确定背板底色, 为了保证统一性, 可以改变色相, 但是饱和度和明度不能变化太大(视觉突兀, 颜色, 造型形态, 微质感(总体上统一))
<img src="/img/ui/1_10.png" alt=""></li>
<li>基础造型的统一: 指针背板的距离(投影), 基础造型效果的统一(透明渐变, 投影)(考虑到环境色, 如邮件)
<img src="/img/ui/1_11.png" alt="">
<img src="/img/ui/1_2.png" alt=""><blockquote>
<p>打光: 白色圆, 高斯模糊, 透明度</p>
</blockquote>
</li>
</ul>
</li>
<li>细节整合: 各个地方投影的统一, 背板透明图层的大小, 一像素白色描边(面的转折关系)
<img src="/img/ui/1_12.png" alt=""></li>
</ul>
<p>常规ICON背板样式(2D, 2.5D): 圆形, 正方形, 圆角矩形, 鱼眼型</p>
<p><img src="/img/ui/1_4.png" alt=""></p>
<blockquote>
<p>使用分层云彩, 抠出云彩</p>
</blockquote>
<p><img src="/img/ui/1_5.png" alt=""></p>
<blockquote>
<p>加高斯模糊, 动感模糊</p>
</blockquote>
<p><img src="/img/ui/1_6.png" alt=""></p>
<blockquote>
<p>雾状化, 可以用无敌高斯模糊出来</p>
</blockquote>
<p>根据关键词搜索icon形态, iconpng.com</p>
<!-- 天气图标一套:
基础造型: 云 雨 雪 闪电 月亮 风 + N/A
-->

<h1 id="tips">Tips</h1>
<p>针对智能层复制</p>
<ol>
<li>利用常规方式复制(位移复制or原位复制), 改一个, 其他同时变化</li>
<li>在智能层后方, 右键, 通过拷贝新建智能层, 可以单独针对某一个进行更改</li>
</ol>
<h1 id="-">瀑布流初稿</h1>
<ol>
<li>主题锁屏状态 + 解锁方式</li>
<li>头部(一套ICON命名, 走氛围)</li>
<li>ICON展示</li>
<li>ICON细节拆分展示</li>
<li>第三方ICON美化细节拆分</li>
<li>手机界面展示</li>
<li>天气图标展示</li>
<li>天气ICON基础造型展示</li>
<li>尾巴(首尾呼应)</li>
</ol>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[UI设计 基础]]></title>
    <link href="http://zhpooer.github.io/2014/11/03/ui%E8%AE%BE%E8%AE%A1-1/"/>
    <id>http://zhpooer.github.io/2014/11/03/ui设计-1/</id>
    <published>2014-11-03T01:27:54.000Z</published>
    <updated>2014-11-06T01:19:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ui">UI</h1>
<p>UI: User Interface(用户界面设计)</p>
<p>用户界面: 联系数据和用户的桥梁(GUI=HUI+WUI)</p>
<ul>
<li>HUI, 手持设备用户界面设计</li>
<li>WUI, WEB UI (实现功能, 注册\登陆框, 可点击按钮, 搜索框, 导航)</li>
<li>其他, 车载导航, 电视操作页面</li>
</ul>
<p>UI的基础是图标(ICON)</p>
<ul>
<li>基础造型视觉形态</li>
<li>表现形式(质感, 风格)
五大调子: 高光(最亮) 亮调 明暗交界线 暗调 反光</li>
</ul>
<h1 id="-">透视</h1>
<p>两点透视(两个视觉灭点)</p>
<p><img src="/img/1103/1_1.png" alt=""></p>
<p>形态</p>
<ul>
<li>具象形态</li>
<li>抽象形态</li>
<li>自然形态</li>
<li>设计形态<ul>
<li>具象形态抽象化</li>
<li>赋予理念</li>
</ul>
</li>
</ul>
<p>ICON 制作</p>
<ul>
<li>统一形态</li>
<li>统一造型(透视关系)</li>
<li>颜色运用,多走无色系, 用统一的颜色做点缀; 在明度和饱和度上寻求变化(建议)</li>
</ul>
<p>2D 平面, 细节造型风格的统一, 构成造型的细节的统一(线的统一)</p>
<p>2.5D 浮雕, 凸起厚度保持统一, 配色, 质感表现方式</p>
<p>3D 立体, 透视角度, 光源角度, 质感表现方式</p>
<p>流程</p>
<ul>
<li>风格定位(可爱 炫酷 ;扁平化 拟物化)</li>
<li>初稿绘制</li>
<li>完成手稿, 线条更加精简, 到位, 形态更加准确</li>
<li>扫描</li>
<li>选择自认为比较容易实现(表现), 一个图标开始制作; 确定颜色搭配(主色调, 辅色调)(色值)</li>
<li>完成其余图标, 保存为透明背景格式(首选PNG)</li>
</ul>
<p><img src="/img/1103/1_2.png" alt=""></p>
<p><img src="/img/1103/1_3.png" alt=""></p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[web设计-电商&企业主页点评]]></title>
    <link href="http://zhpooer.github.io/2014/10/31/web%E8%AE%BE%E8%AE%A1-7/"/>
    <id>http://zhpooer.github.io/2014/10/31/web设计-7/</id>
    <published>2014-10-31T01:32:02.000Z</published>
    <updated>2014-11-02T08:13:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>快速查找书法字体: ziti.cndesign.com
选区转路径, 加 Alt 可以调细节</p>
</blockquote>
<h1 id="-">电商点评</h1>
<p><img src="/img/dp5/1_1.png" alt=""></p>
<p><img src="/img/dp5/1_2.png" alt=""></p>
<blockquote>
<p>形式服务于内容, 服务于功能</p>
</blockquote>
<p><img src="/img/dp5/1_3.png" alt=""></p>
<blockquote>
<p>橙色Logo栏, 突出, 郑家购买欲<br>使用图标, 快速定位<br>虚线分割线, 功能性的, 需要时可以找到<br>文案排版 需要修改</p>
</blockquote>
<h1 id="-">主页点评</h1>
<p><img src="/img/dp5/1_4.png" alt=""></p>
<blockquote>
<p>导航栏, 稍显呆板</p>
</blockquote>
<p><img src="/img/dp5/1_5.png" alt=""></p>
<blockquote>
<p>banner 景别太多, 远近景, 中景不明显; 没有文字跳跃率</p>
</blockquote>
<p><img src="/img/dp5/1_6.png" alt=""></p>
<blockquote>
<p>简介, 但是没有文字跳跃率, 可以稍微加一点变化</p>
</blockquote>
<p><img src="/img/dp5/1_7.png" alt=""></p>
<blockquote>
<p>banner 颜色需要调明暗对比度</p>
</blockquote>
<p><img src="/img/dp5/1_8.png" alt=""></p>
<blockquote>
<p>使模块清晰, 标题清晰</p>
</blockquote>
<p><img src="/img/dp5/1_9.png" alt=""></p>
<blockquote>
<p>书法家字体和常规字体配合</p>
</blockquote>
<p><img src="/img/dp5/1_10.png" alt=""></p>
<p><img src="/img/dp5/1_11.png" alt=""></p>
<blockquote>
<p>标题颜色可以添加黄色</p>
</blockquote>
<h1 id="tips">Tips</h1>
<p>配色: Logo 上所采用的颜色, 要在设计中体现出来(页面配色上, 要温和LOGO配色)</p>
<p>LOGO无色系: 设计过程中, 可以添加辅助配色</p>
<blockquote>
<p>如果正文:14, 那么标题: 16; 直通车最小 16</p>
</blockquote>
]]></content>
    
    
  </entry>
  
</feed>
